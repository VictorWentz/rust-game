{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.0","compilation":{"directory":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13","program":"C:\\Users\\victo\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\bin\\rls.exe","arguments":["--crate-name","image","--edition=2018","C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src/lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","debuginfo=2","--cfg","feature=\"jpeg\"","--cfg","feature=\"png\"","-C","metadata=3f07f8f4842b5a70","-C","extra-filename=-3f07f8f4842b5a70","--out-dir","d:\\Pasta_de_arquivos_de_trabalho\\Rust Projects\\rust-game\\dungeoncrawl\\target\\rls\\debug\\deps","-L","dependency=d:\\Pasta_de_arquivos_de_trabalho\\Rust Projects\\rust-game\\dungeoncrawl\\target\\rls\\debug\\deps","--extern","bytemuck=d:\\Pasta_de_arquivos_de_trabalho\\Rust Projects\\rust-game\\dungeoncrawl\\target\\rls\\debug\\deps\\libbytemuck-5ccb6bca01452e02.rmeta","--extern","byteorder=d:\\Pasta_de_arquivos_de_trabalho\\Rust Projects\\rust-game\\dungeoncrawl\\target\\rls\\debug\\deps\\libbyteorder-fdbbb64da3b67360.rmeta","--extern","color_quant=d:\\Pasta_de_arquivos_de_trabalho\\Rust Projects\\rust-game\\dungeoncrawl\\target\\rls\\debug\\deps\\libcolor_quant-3ad5beb2b5606236.rmeta","--extern","jpeg=d:\\Pasta_de_arquivos_de_trabalho\\Rust Projects\\rust-game\\dungeoncrawl\\target\\rls\\debug\\deps\\libjpeg_decoder-96a5ec089e2062fa.rmeta","--extern","num_iter=d:\\Pasta_de_arquivos_de_trabalho\\Rust Projects\\rust-game\\dungeoncrawl\\target\\rls\\debug\\deps\\libnum_iter-e055fe9fc94579a4.rmeta","--extern","num_rational=d:\\Pasta_de_arquivos_de_trabalho\\Rust Projects\\rust-game\\dungeoncrawl\\target\\rls\\debug\\deps\\libnum_rational-0aa17b0f0382f287.rmeta","--extern","num_traits=d:\\Pasta_de_arquivos_de_trabalho\\Rust Projects\\rust-game\\dungeoncrawl\\target\\rls\\debug\\deps\\libnum_traits-809df5da3bb7d5c1.rmeta","--extern","png=d:\\Pasta_de_arquivos_de_trabalho\\Rust Projects\\rust-game\\dungeoncrawl\\target\\rls\\debug\\deps\\libpng-79c83bc48cdc6f45.rmeta","--cap-lints","allow","--error-format=json","--sysroot","C:\\Users\\victo\\.rustup/toolchains/stable-x86_64-pc-windows-msvc"],"output":"d:\\Pasta_de_arquivos_de_trabalho\\Rust Projects\\rust-game\\dungeoncrawl\\target\\rls\\debug\\deps\\libimage-3f07f8f4842b5a70.rmeta"},"prelude":{"crate_id":{"name":"image","disambiguator":[16053022883709820581,6186307726319608557]},"crate_root":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src","external_crates":[{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src/lib.rs","num":1,"id":{"name":"std","disambiguator":[2134305066550747688,1377703208702874155]}},{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src/lib.rs","num":2,"id":{"name":"core","disambiguator":[1322159461575500717,8297198428669169011]}},{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[2376346800744392852,12342541482992122530]}},{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src/lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[14946502858004023242,6637215598610016319]}},{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src/lib.rs","num":5,"id":{"name":"alloc","disambiguator":[5305136910335682758,6890491777619641650]}},{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[8079093424489733033,9678018066858265018]}},{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[8191054904896780843,65190916132359678]}},{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src/lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[17454577518104061478,8473922882117178851]}},{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src/lib.rs","num":9,"id":{"name":"hashbrown","disambiguator":[14702801963282246562,3385633331338644346]}},{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src/lib.rs","num":10,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[4483555191844012602,617965746000623535]}},{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src/lib.rs","num":11,"id":{"name":"rustc_demangle","disambiguator":[6496369475756502088,8603909216288097824]}},{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src/lib.rs","num":12,"id":{"name":"panic_unwind","disambiguator":[8790568169648576788,8899032378407077408]}},{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\imageops\\mod.rs","num":13,"id":{"name":"num_traits","disambiguator":[9091900297329623376,15503582217541273973]}},{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\codecs\\jpeg\\decoder.rs","num":14,"id":{"name":"jpeg_decoder","disambiguator":[833204063339822527,11560894948955307558]}},{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\codecs\\jpeg\\encoder.rs","num":15,"id":{"name":"num_iter","disambiguator":[9292327585076703189,2637645596313737498]}},{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\codecs\\jpeg\\encoder.rs","num":16,"id":{"name":"num_integer","disambiguator":[17525374555192888459,8216972377990694907]}},{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\codecs\\png.rs","num":17,"id":{"name":"num_rational","disambiguator":[17422301252047100832,2370077633027702190]}},{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\codecs\\png.rs","num":18,"id":{"name":"png","disambiguator":[15645841551493548065,12911397313540139542]}},{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\codecs\\png.rs","num":19,"id":{"name":"bitflags","disambiguator":[3061788739106617431,7195889896823621023]}},{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\codecs\\png.rs","num":20,"id":{"name":"deflate","disambiguator":[4923999348129385242,6294969588135328055]}},{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\codecs\\png.rs","num":21,"id":{"name":"adler32","disambiguator":[16945789833151972653,6749170825551649618]}},{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\codecs\\png.rs","num":22,"id":{"name":"byteorder","disambiguator":[17846375290341452477,13224367376335600430]}},{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\codecs\\png.rs","num":23,"id":{"name":"crc32fast","disambiguator":[11549732565396183001,15708549044543995691]}},{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\codecs\\png.rs","num":24,"id":{"name":"cfg_if","disambiguator":[12397753863589609571,14658349722023367951]}},{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\codecs\\png.rs","num":25,"id":{"name":"miniz_oxide","disambiguator":[8047876116680679060,5179466540489531239]}},{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\dynimage.rs","num":26,"id":{"name":"bytemuck","disambiguator":[8478502438656522490,9386160555657624940]}},{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\math\\nq.rs","num":27,"id":{"name":"color_quant","disambiguator":[17743570596609032761,4287289371212504782]}}],"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src/lib.rs","byte_start":0,"byte_end":12782,"line_start":1,"line_end":393,"column_start":1,"column_end":2}},"imports":[{"kind":"Use","ref_id":{"krate":0,"index":2659},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src/lib.rs","byte_start":3843,"byte_end":3852,"line_start":104,"line_end":104,"column_start":24,"column_end":33},"alias_span":null,"name":"ColorType","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2698},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src/lib.rs","byte_start":3854,"byte_end":3871,"line_start":104,"line_end":104,"column_start":35,"column_end":52},"alias_span":null,"name":"ExtendedColorType","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3122},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src/lib.rs","byte_start":3898,"byte_end":3902,"line_start":106,"line_end":106,"column_start":24,"column_end":28},"alias_span":null,"name":"Luma","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3123},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src/lib.rs","byte_start":3898,"byte_end":3902,"line_start":106,"line_end":106,"column_start":24,"column_end":28},"alias_span":null,"name":"Luma","value":"","parent":{"krate":0,"index":8}},{"kind":"Use","ref_id":{"krate":0,"index":3209},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src/lib.rs","byte_start":3904,"byte_end":3909,"line_start":106,"line_end":106,"column_start":30,"column_end":35},"alias_span":null,"name":"LumaA","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3210},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src/lib.rs","byte_start":3904,"byte_end":3909,"line_start":106,"line_end":106,"column_start":30,"column_end":35},"alias_span":null,"name":"LumaA","value":"","parent":{"krate":0,"index":9}},{"kind":"Use","ref_id":{"krate":0,"index":3064},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src/lib.rs","byte_start":3911,"byte_end":3914,"line_start":106,"line_end":106,"column_start":37,"column_end":40},"alias_span":null,"name":"Rgb","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3065},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src/lib.rs","byte_start":3911,"byte_end":3914,"line_start":106,"line_end":106,"column_start":37,"column_end":40},"alias_span":null,"name":"Rgb","value":"","parent":{"krate":0,"index":10}},{"kind":"Use","ref_id":{"krate":0,"index":3151},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src/lib.rs","byte_start":3916,"byte_end":3920,"line_start":106,"line_end":106,"column_start":42,"column_end":46},"alias_span":null,"name":"Rgba","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3152},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src/lib.rs","byte_start":3916,"byte_end":3920,"line_start":106,"line_end":106,"column_start":42,"column_end":46},"alias_span":null,"name":"Rgba","value":"","parent":{"krate":0,"index":11}},{"kind":"Use","ref_id":{"krate":0,"index":3093},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src/lib.rs","byte_start":3922,"byte_end":3925,"line_start":106,"line_end":106,"column_start":48,"column_end":51},"alias_span":null,"name":"Bgr","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3094},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src/lib.rs","byte_start":3922,"byte_end":3925,"line_start":106,"line_end":106,"column_start":48,"column_end":51},"alias_span":null,"name":"Bgr","value":"","parent":{"krate":0,"index":12}},{"kind":"Use","ref_id":{"krate":0,"index":3180},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src/lib.rs","byte_start":3927,"byte_end":3931,"line_start":106,"line_end":106,"column_start":53,"column_end":57},"alias_span":null,"name":"Bgra","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3181},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src/lib.rs","byte_start":3927,"byte_end":3931,"line_start":106,"line_end":106,"column_start":53,"column_end":57},"alias_span":null,"name":"Bgra","value":"","parent":{"krate":0,"index":13}},{"kind":"Use","ref_id":{"krate":0,"index":2173},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src/lib.rs","byte_start":3958,"byte_end":3968,"line_start":108,"line_end":108,"column_start":24,"column_end":34},"alias_span":null,"name":"ImageError","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":91},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src/lib.rs","byte_start":3970,"byte_end":3981,"line_start":108,"line_end":108,"column_start":36,"column_end":47},"alias_span":null,"name":"ImageResult","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1987},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src/lib.rs","byte_start":4008,"byte_end":4024,"line_start":110,"line_end":110,"column_start":24,"column_end":40},"alias_span":null,"name":"AnimationDecoder","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2013},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src/lib.rs","byte_start":4042,"byte_end":4054,"line_start":111,"line_end":111,"column_start":17,"column_end":29},"alias_span":null,"name":"GenericImage","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2000},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src/lib.rs","byte_start":4072,"byte_end":4088,"line_start":112,"line_end":112,"column_start":17,"column_end":33},"alias_span":null,"name":"GenericImageView","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1968},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src/lib.rs","byte_start":4106,"byte_end":4118,"line_start":113,"line_end":113,"column_start":17,"column_end":29},"alias_span":null,"name":"ImageDecoder","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1981},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src/lib.rs","byte_start":4136,"byte_end":4151,"line_start":114,"line_end":114,"column_start":17,"column_end":32},"alias_span":null,"name":"ImageDecoderExt","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1990},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src/lib.rs","byte_start":4169,"byte_end":4181,"line_start":115,"line_end":115,"column_start":17,"column_end":29},"alias_span":null,"name":"ImageEncoder","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3334},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src/lib.rs","byte_start":4199,"byte_end":4210,"line_start":116,"line_end":116,"column_start":17,"column_end":28},"alias_span":null,"name":"ImageFormat","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3379},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src/lib.rs","byte_start":4228,"byte_end":4245,"line_start":117,"line_end":117,"column_start":17,"column_end":34},"alias_span":null,"name":"ImageOutputFormat","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3402},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src/lib.rs","byte_start":4263,"byte_end":4271,"line_start":118,"line_end":118,"column_start":17,"column_end":25},"alias_span":null,"name":"Progress","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3417},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src/lib.rs","byte_start":4318,"byte_end":4324,"line_start":120,"line_end":120,"column_start":17,"column_end":23},"alias_span":null,"name":"Pixels","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2025},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src/lib.rs","byte_start":4342,"byte_end":4350,"line_start":121,"line_end":121,"column_start":17,"column_end":25},"alias_span":null,"name":"SubImage","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1483},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src/lib.rs","byte_start":4397,"byte_end":4411,"line_start":124,"line_end":124,"column_start":18,"column_end":32},"alias_span":null,"name":"GrayAlphaImage","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1482},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src/lib.rs","byte_start":4430,"byte_end":4439,"line_start":125,"line_end":125,"column_start":18,"column_end":27},"alias_span":null,"name":"GrayImage","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2628},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src/lib.rs","byte_start":4490,"byte_end":4501,"line_start":127,"line_end":127,"column_start":18,"column_end":29},"alias_span":null,"name":"ImageBuffer","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1480},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src/lib.rs","byte_start":4520,"byte_end":4528,"line_start":128,"line_end":128,"column_start":18,"column_end":26},"alias_span":null,"name":"RgbImage","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1481},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src/lib.rs","byte_start":4547,"byte_end":4556,"line_start":129,"line_end":129,"column_start":18,"column_end":27},"alias_span":null,"name":"RgbaImage","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2358},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src/lib.rs","byte_start":4581,"byte_end":4592,"line_start":131,"line_end":131,"column_start":22,"column_end":33},"alias_span":null,"name":"FlatSamples","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2073},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src/lib.rs","byte_start":4629,"byte_end":4644,"line_start":134,"line_end":134,"column_start":25,"column_end":40},"alias_span":null,"name":"EncodableLayout","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2079},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src/lib.rs","byte_start":4646,"byte_end":4655,"line_start":134,"line_end":134,"column_start":42,"column_end":51},"alias_span":null,"name":"Primitive","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2110},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src/lib.rs","byte_start":4657,"byte_end":4662,"line_start":134,"line_end":134,"column_start":53,"column_end":58},"alias_span":null,"name":"Pixel","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":525},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src/lib.rs","byte_start":4732,"byte_end":4744,"line_start":137,"line_end":137,"column_start":37,"column_end":49},"alias_span":null,"name":"guess_format","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":516},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src/lib.rs","byte_start":4746,"byte_end":4750,"line_start":137,"line_end":137,"column_start":51,"column_end":55},"alias_span":null,"name":"load","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1901},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src/lib.rs","byte_start":4779,"byte_end":4795,"line_start":138,"line_end":138,"column_start":27,"column_end":43},"alias_span":null,"name":"load_from_memory","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1902},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src/lib.rs","byte_start":4797,"byte_end":4825,"line_start":138,"line_end":138,"column_start":45,"column_end":73},"alias_span":null,"name":"load_from_memory_with_format","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1893},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src/lib.rs","byte_start":4827,"byte_end":4831,"line_start":138,"line_end":138,"column_start":75,"column_end":79},"alias_span":null,"name":"open","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1897},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src/lib.rs","byte_start":4852,"byte_end":4863,"line_start":139,"line_end":139,"column_start":20,"column_end":31},"alias_span":null,"name":"save_buffer","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1899},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src/lib.rs","byte_start":4865,"byte_end":4888,"line_start":139,"line_end":139,"column_start":33,"column_end":56},"alias_span":null,"name":"save_buffer_with_format","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1895},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src/lib.rs","byte_start":4890,"byte_end":4906,"line_start":139,"line_end":139,"column_start":58,"column_end":74},"alias_span":null,"name":"image_dimensions","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3289},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src/lib.rs","byte_start":4935,"byte_end":4947,"line_start":141,"line_end":141,"column_start":26,"column_end":38},"alias_span":null,"name":"DynamicImage","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2608},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src/lib.rs","byte_start":4977,"byte_end":4982,"line_start":143,"line_end":143,"column_start":28,"column_end":33},"alias_span":null,"name":"Delay","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2601},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src/lib.rs","byte_start":4984,"byte_end":4989,"line_start":143,"line_end":143,"column_start":35,"column_end":40},"alias_span":null,"name":"Frame","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1110},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src/lib.rs","byte_start":4991,"byte_end":4997,"line_start":143,"line_end":143,"column_start":42,"column_end":48},"alias_span":null,"name":"Frames","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1467},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src/lib.rs","byte_start":5220,"byte_end":5233,"line_start":152,"line_end":152,"column_start":9,"column_end":22},"alias_span":null,"name":"ConvertBuffer","value":"","parent":{"krate":0,"index":117}},{"kind":"Use","ref_id":{"krate":0,"index":1281},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src/lib.rs","byte_start":5243,"byte_end":5258,"line_start":153,"line_end":153,"column_start":9,"column_end":24},"alias_span":null,"name":"EnumeratePixels","value":"","parent":{"krate":0,"index":117}},{"kind":"Use","ref_id":{"krate":0,"index":1326},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src/lib.rs","byte_start":5268,"byte_end":5286,"line_start":154,"line_end":154,"column_start":9,"column_end":27},"alias_span":null,"name":"EnumeratePixelsMut","value":"","parent":{"krate":0,"index":117}},{"kind":"Use","ref_id":{"krate":0,"index":1304},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src/lib.rs","byte_start":5296,"byte_end":5309,"line_start":155,"line_end":155,"column_start":9,"column_end":22},"alias_span":null,"name":"EnumerateRows","value":"","parent":{"krate":0,"index":117}},{"kind":"Use","ref_id":{"krate":0,"index":1346},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src/lib.rs","byte_start":5319,"byte_end":5335,"line_start":156,"line_end":156,"column_start":9,"column_end":25},"alias_span":null,"name":"EnumerateRowsMut","value":"","parent":{"krate":0,"index":117}},{"kind":"Use","ref_id":{"krate":0,"index":1183},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src/lib.rs","byte_start":5345,"byte_end":5351,"line_start":157,"line_end":157,"column_start":9,"column_end":15},"alias_span":null,"name":"Pixels","value":"","parent":{"krate":0,"index":117}},{"kind":"Use","ref_id":{"krate":0,"index":1208},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src/lib.rs","byte_start":5361,"byte_end":5370,"line_start":158,"line_end":158,"column_start":9,"column_end":18},"alias_span":null,"name":"PixelsMut","value":"","parent":{"krate":0,"index":117}},{"kind":"Use","ref_id":{"krate":0,"index":1230},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src/lib.rs","byte_start":5380,"byte_end":5384,"line_start":159,"line_end":159,"column_start":9,"column_end":13},"alias_span":null,"name":"Rows","value":"","parent":{"krate":0,"index":117}},{"kind":"Use","ref_id":{"krate":0,"index":1257},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src/lib.rs","byte_start":5394,"byte_end":5401,"line_start":160,"line_end":160,"column_start":9,"column_end":16},"alias_span":null,"name":"RowsMut","value":"","parent":{"krate":0,"index":117}},{"kind":"Use","ref_id":{"krate":0,"index":2314},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\math\\mod.rs","byte_start":30572,"byte_end":30576,"line_start":6,"line_end":6,"column_start":21,"column_end":25},"alias_span":null,"name":"Rect","value":"","parent":{"krate":0,"index":128}},{"kind":"Use","ref_id":{"krate":0,"index":2339},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\imageops\\mod.rs","byte_start":39493,"byte_end":39503,"line_start":9,"line_end":9,"column_start":23,"column_end":33},"alias_span":null,"name":"FilterType","value":"","parent":{"krate":0,"index":150}},{"kind":"Use","ref_id":{"krate":0,"index":2344},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\imageops\\mod.rs","byte_start":39541,"byte_end":39551,"line_start":11,"line_end":11,"column_start":36,"column_end":46},"alias_span":null,"name":"CatmullRom","value":"","parent":{"krate":0,"index":150}},{"kind":"Use","ref_id":{"krate":0,"index":2345},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\imageops\\mod.rs","byte_start":39541,"byte_end":39551,"line_start":11,"line_end":11,"column_start":36,"column_end":46},"alias_span":null,"name":"CatmullRom","value":"","parent":{"krate":0,"index":164}},{"kind":"Use","ref_id":{"krate":0,"index":2346},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\imageops\\mod.rs","byte_start":39553,"byte_end":39561,"line_start":11,"line_end":11,"column_start":48,"column_end":56},"alias_span":null,"name":"Gaussian","value":"","parent":{"krate":0,"index":150}},{"kind":"Use","ref_id":{"krate":0,"index":2347},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\imageops\\mod.rs","byte_start":39553,"byte_end":39561,"line_start":11,"line_end":11,"column_start":48,"column_end":56},"alias_span":null,"name":"Gaussian","value":"","parent":{"krate":0,"index":165}},{"kind":"Use","ref_id":{"krate":0,"index":2348},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\imageops\\mod.rs","byte_start":39563,"byte_end":39571,"line_start":11,"line_end":11,"column_start":58,"column_end":66},"alias_span":null,"name":"Lanczos3","value":"","parent":{"krate":0,"index":150}},{"kind":"Use","ref_id":{"krate":0,"index":2349},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\imageops\\mod.rs","byte_start":39563,"byte_end":39571,"line_start":11,"line_end":11,"column_start":58,"column_end":66},"alias_span":null,"name":"Lanczos3","value":"","parent":{"krate":0,"index":166}},{"kind":"Use","ref_id":{"krate":0,"index":2340},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\imageops\\mod.rs","byte_start":39573,"byte_end":39580,"line_start":11,"line_end":11,"column_start":68,"column_end":75},"alias_span":null,"name":"Nearest","value":"","parent":{"krate":0,"index":150}},{"kind":"Use","ref_id":{"krate":0,"index":2341},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\imageops\\mod.rs","byte_start":39573,"byte_end":39580,"line_start":11,"line_end":11,"column_start":68,"column_end":75},"alias_span":null,"name":"Nearest","value":"","parent":{"krate":0,"index":167}},{"kind":"Use","ref_id":{"krate":0,"index":2342},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\imageops\\mod.rs","byte_start":39582,"byte_end":39590,"line_start":11,"line_end":11,"column_start":77,"column_end":85},"alias_span":null,"name":"Triangle","value":"","parent":{"krate":0,"index":150}},{"kind":"Use","ref_id":{"krate":0,"index":2343},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\imageops\\mod.rs","byte_start":39582,"byte_end":39590,"line_start":11,"line_end":11,"column_start":77,"column_end":85},"alias_span":null,"name":"Triangle","value":"","parent":{"krate":0,"index":168}},{"kind":"Use","ref_id":{"krate":0,"index":224},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\imageops\\mod.rs","byte_start":39649,"byte_end":39664,"line_start":15,"line_end":15,"column_start":5,"column_end":20},"alias_span":null,"name":"flip_horizontal","value":"","parent":{"krate":0,"index":150}},{"kind":"Use","ref_id":{"krate":0,"index":236},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\imageops\\mod.rs","byte_start":39666,"byte_end":39690,"line_start":15,"line_end":15,"column_start":22,"column_end":46},"alias_span":null,"name":"flip_horizontal_in_place","value":"","parent":{"krate":0,"index":150}},{"kind":"Use","ref_id":{"krate":0,"index":226},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\imageops\\mod.rs","byte_start":39692,"byte_end":39705,"line_start":15,"line_end":15,"column_start":48,"column_end":61},"alias_span":null,"name":"flip_vertical","value":"","parent":{"krate":0,"index":150}},{"kind":"Use","ref_id":{"krate":0,"index":238},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\imageops\\mod.rs","byte_start":39707,"byte_end":39729,"line_start":15,"line_end":15,"column_start":63,"column_end":85},"alias_span":null,"name":"flip_vertical_in_place","value":"","parent":{"krate":0,"index":150}},{"kind":"Use","ref_id":{"krate":0,"index":211},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\imageops\\mod.rs","byte_start":39731,"byte_end":39740,"line_start":15,"line_end":15,"column_start":87,"column_end":96},"alias_span":null,"name":"rotate180","value":"","parent":{"krate":0,"index":150}},{"kind":"Use","ref_id":{"krate":0,"index":234},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\imageops\\mod.rs","byte_start":39746,"byte_end":39764,"line_start":16,"line_end":16,"column_start":5,"column_end":23},"alias_span":null,"name":"rotate180_in_place","value":"","parent":{"krate":0,"index":150}},{"kind":"Use","ref_id":{"krate":0,"index":213},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\imageops\\mod.rs","byte_start":39766,"byte_end":39775,"line_start":16,"line_end":16,"column_start":25,"column_end":34},"alias_span":null,"name":"rotate270","value":"","parent":{"krate":0,"index":150}},{"kind":"Use","ref_id":{"krate":0,"index":209},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\imageops\\mod.rs","byte_start":39777,"byte_end":39785,"line_start":16,"line_end":16,"column_start":36,"column_end":44},"alias_span":null,"name":"rotate90","value":"","parent":{"krate":0,"index":150}},{"kind":"Use","ref_id":{"krate":0,"index":218},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\imageops\\mod.rs","byte_start":39787,"byte_end":39799,"line_start":16,"line_end":16,"column_start":46,"column_end":58},"alias_span":null,"name":"rotate180_in","value":"","parent":{"krate":0,"index":150}},{"kind":"Use","ref_id":{"krate":0,"index":215},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\imageops\\mod.rs","byte_start":39801,"byte_end":39812,"line_start":16,"line_end":16,"column_start":60,"column_end":71},"alias_span":null,"name":"rotate90_in","value":"","parent":{"krate":0,"index":150}},{"kind":"Use","ref_id":{"krate":0,"index":221},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\imageops\\mod.rs","byte_start":39814,"byte_end":39826,"line_start":16,"line_end":16,"column_start":73,"column_end":85},"alias_span":null,"name":"rotate270_in","value":"","parent":{"krate":0,"index":150}},{"kind":"Use","ref_id":{"krate":0,"index":228},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\imageops\\mod.rs","byte_start":39828,"byte_end":39846,"line_start":16,"line_end":16,"column_start":87,"column_end":105},"alias_span":null,"name":"flip_horizontal_in","value":"","parent":{"krate":0,"index":150}},{"kind":"Use","ref_id":{"krate":0,"index":231},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\imageops\\mod.rs","byte_start":39848,"byte_end":39864,"line_start":16,"line_end":16,"column_start":107,"column_end":123},"alias_span":null,"name":"flip_vertical_in","value":"","parent":{"krate":0,"index":150}},{"kind":"Use","ref_id":{"krate":0,"index":412},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\imageops\\mod.rs","byte_start":39911,"byte_end":39915,"line_start":20,"line_end":20,"column_start":24,"column_end":28},"alias_span":null,"name":"blur","value":"","parent":{"krate":0,"index":150}},{"kind":"Use","ref_id":{"krate":0,"index":405},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\imageops\\mod.rs","byte_start":39917,"byte_end":39926,"line_start":20,"line_end":20,"column_start":30,"column_end":39},"alias_span":null,"name":"filter3x3","value":"","parent":{"krate":0,"index":150}},{"kind":"Use","ref_id":{"krate":0,"index":410},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\imageops\\mod.rs","byte_start":39928,"byte_end":39934,"line_start":20,"line_end":20,"column_start":41,"column_end":47},"alias_span":null,"name":"resize","value":"","parent":{"krate":0,"index":150}},{"kind":"Use","ref_id":{"krate":0,"index":382},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\imageops\\mod.rs","byte_start":39936,"byte_end":39945,"line_start":20,"line_end":20,"column_start":49,"column_end":58},"alias_span":null,"name":"thumbnail","value":"","parent":{"krate":0,"index":150}},{"kind":"Use","ref_id":{"krate":0,"index":415},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\imageops\\mod.rs","byte_start":39947,"byte_end":39956,"line_start":20,"line_end":20,"column_start":60,"column_end":69},"alias_span":null,"name":"unsharpen","value":"","parent":{"krate":0,"index":150}},{"kind":"Use","ref_id":{"krate":0,"index":272},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\imageops\\mod.rs","byte_start":40006,"byte_end":40014,"line_start":23,"line_end":23,"column_start":26,"column_end":34},"alias_span":null,"name":"brighten","value":"","parent":{"krate":0,"index":150}},{"kind":"Use","ref_id":{"krate":0,"index":264},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\imageops\\mod.rs","byte_start":40016,"byte_end":40024,"line_start":23,"line_end":23,"column_start":36,"column_end":44},"alias_span":null,"name":"contrast","value":"","parent":{"krate":0,"index":150}},{"kind":"Use","ref_id":{"krate":0,"index":320},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\imageops\\mod.rs","byte_start":40026,"byte_end":40032,"line_start":23,"line_end":23,"column_start":46,"column_end":52},"alias_span":null,"name":"dither","value":"","parent":{"krate":0,"index":150}},{"kind":"Use","ref_id":{"krate":0,"index":260},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\imageops\\mod.rs","byte_start":40034,"byte_end":40043,"line_start":23,"line_end":23,"column_start":54,"column_end":63},"alias_span":null,"name":"grayscale","value":"","parent":{"krate":0,"index":150}},{"kind":"Use","ref_id":{"krate":0,"index":282},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\imageops\\mod.rs","byte_start":40045,"byte_end":40054,"line_start":23,"line_end":23,"column_start":65,"column_end":74},"alias_span":null,"name":"huerotate","value":"","parent":{"krate":0,"index":150}},{"kind":"Use","ref_id":{"krate":0,"index":325},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\imageops\\mod.rs","byte_start":40056,"byte_end":40068,"line_start":23,"line_end":23,"column_start":76,"column_end":88},"alias_span":null,"name":"index_colors","value":"","parent":{"krate":0,"index":150}},{"kind":"Use","ref_id":{"krate":0,"index":262},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\imageops\\mod.rs","byte_start":40070,"byte_end":40076,"line_start":23,"line_end":23,"column_start":90,"column_end":96},"alias_span":null,"name":"invert","value":"","parent":{"krate":0,"index":150}},{"kind":"Use","ref_id":{"krate":0,"index":2334},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\imageops\\mod.rs","byte_start":40103,"byte_end":40110,"line_start":24,"line_end":24,"column_start":26,"column_end":33},"alias_span":null,"name":"BiLevel","value":"","parent":{"krate":0,"index":150}},{"kind":"Use","ref_id":{"krate":0,"index":2335},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\imageops\\mod.rs","byte_start":40103,"byte_end":40110,"line_start":24,"line_end":24,"column_start":26,"column_end":33},"alias_span":null,"name":"BiLevel","value":"","parent":{"krate":0,"index":197}},{"kind":"Use","ref_id":{"krate":0,"index":290},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\imageops\\mod.rs","byte_start":40112,"byte_end":40120,"line_start":24,"line_end":24,"column_start":35,"column_end":43},"alias_span":null,"name":"ColorMap","value":"","parent":{"krate":0,"index":150}},{"kind":"Use","ref_id":{"krate":0,"index":468},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\io\\mod.rs","byte_start":109883,"byte_end":109889,"line_start":5,"line_end":5,"column_start":23,"column_end":29},"alias_span":null,"name":"Reader","value":"","parent":{"krate":0,"index":446}},{"kind":"Use","ref_id":{"krate":0,"index":733},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\codecs\\jpeg\\mod.rs","byte_start":191206,"byte_end":191217,"line_start":10,"line_end":10,"column_start":24,"column_end":35},"alias_span":null,"name":"JpegDecoder","value":"","parent":{"krate":0,"index":708}},{"kind":"Use","ref_id":{"krate":0,"index":850},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\codecs\\jpeg\\mod.rs","byte_start":191320,"byte_end":191331,"line_start":12,"line_end":12,"column_start":25,"column_end":36},"alias_span":null,"name":"JpegEncoder","value":"","parent":{"krate":0,"index":708}},{"kind":"Use","ref_id":{"krate":0,"index":2534},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\codecs\\jpeg\\mod.rs","byte_start":191333,"byte_end":191345,"line_start":12,"line_end":12,"column_start":38,"column_end":50},"alias_span":null,"name":"PixelDensity","value":"","parent":{"krate":0,"index":708}},{"kind":"Use","ref_id":{"krate":0,"index":2516},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\codecs\\jpeg\\mod.rs","byte_start":191347,"byte_end":191363,"line_start":12,"line_end":12,"column_start":52,"column_end":68},"alias_span":null,"name":"PixelDensityUnit","value":"","parent":{"krate":0,"index":708}},{"kind":"Use","ref_id":{"krate":0,"index":866},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\codecs\\jpeg\\mod.rs","byte_start":191365,"byte_end":191376,"line_start":12,"line_end":12,"column_start":70,"column_end":81},"alias_span":null,"name":"JPEGEncoder","value":"","parent":{"krate":0,"index":708}},{"kind":"Use","ref_id":{"krate":0,"index":866},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src/lib.rs","byte_start":10462,"byte_end":10473,"line_start":312,"line_end":312,"column_start":9,"column_end":20},"alias_span":null,"name":"JPEGEncoder","value":"","parent":{"krate":0,"index":1087}},{"kind":"Use","ref_id":{"krate":0,"index":733},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src/lib.rs","byte_start":10475,"byte_end":10486,"line_start":312,"line_end":312,"column_start":22,"column_end":33},"alias_span":null,"name":"JpegDecoder","value":"","parent":{"krate":0,"index":1087}},{"kind":"Use","ref_id":{"krate":0,"index":850},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src/lib.rs","byte_start":10488,"byte_end":10499,"line_start":312,"line_end":312,"column_start":35,"column_end":46},"alias_span":null,"name":"JpegEncoder","value":"","parent":{"krate":0,"index":1087}},{"kind":"Use","ref_id":{"krate":0,"index":2534},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src/lib.rs","byte_start":10501,"byte_end":10513,"line_start":312,"line_end":312,"column_start":48,"column_end":60},"alias_span":null,"name":"PixelDensity","value":"","parent":{"krate":0,"index":1087}},{"kind":"Use","ref_id":{"krate":0,"index":2516},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src/lib.rs","byte_start":10515,"byte_end":10531,"line_start":312,"line_end":312,"column_start":62,"column_end":78},"alias_span":null,"name":"PixelDensityUnit","value":"","parent":{"krate":0,"index":1087}},{"kind":"Use","ref_id":{"krate":0,"index":1032},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src/lib.rs","byte_start":10733,"byte_end":10744,"line_start":321,"line_end":321,"column_start":9,"column_end":20},"alias_span":null,"name":"ApngDecoder","value":"","parent":{"krate":0,"index":1094}},{"kind":"Use","ref_id":{"krate":0,"index":2549},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src/lib.rs","byte_start":10746,"byte_end":10761,"line_start":321,"line_end":321,"column_start":22,"column_end":37},"alias_span":null,"name":"CompressionType","value":"","parent":{"krate":0,"index":1094}},{"kind":"Use","ref_id":{"krate":0,"index":2575},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src/lib.rs","byte_start":10763,"byte_end":10773,"line_start":321,"line_end":321,"column_start":39,"column_end":49},"alias_span":null,"name":"FilterType","value":"","parent":{"krate":0,"index":1094}},{"kind":"Use","ref_id":{"krate":0,"index":1063},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src/lib.rs","byte_start":10775,"byte_end":10785,"line_start":321,"line_end":321,"column_start":51,"column_end":61},"alias_span":null,"name":"PNGEncoder","value":"","parent":{"krate":0,"index":1094}},{"kind":"Use","ref_id":{"krate":0,"index":999},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src/lib.rs","byte_start":10787,"byte_end":10796,"line_start":321,"line_end":321,"column_start":63,"column_end":72},"alias_span":null,"name":"PNGReader","value":"","parent":{"krate":0,"index":1094}},{"kind":"Use","ref_id":{"krate":0,"index":1008},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src/lib.rs","byte_start":10798,"byte_end":10808,"line_start":321,"line_end":321,"column_start":74,"column_end":84},"alias_span":null,"name":"PngDecoder","value":"","parent":{"krate":0,"index":1094}},{"kind":"Use","ref_id":{"krate":0,"index":1058},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src/lib.rs","byte_start":10810,"byte_end":10820,"line_start":321,"line_end":321,"column_start":86,"column_end":96},"alias_span":null,"name":"PngEncoder","value":"","parent":{"krate":0,"index":1094}},{"kind":"Use","ref_id":{"krate":0,"index":994},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src/lib.rs","byte_start":10830,"byte_end":10839,"line_start":322,"line_end":322,"column_start":9,"column_end":18},"alias_span":null,"name":"PngReader","value":"","parent":{"krate":0,"index":1094}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src/lib.rs","byte_start":0,"byte_end":12782,"line_start":1,"line_end":393,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":5},{"krate":0,"index":6},{"krate":0,"index":7},{"krate":0,"index":8},{"krate":0,"index":3480},{"krate":0,"index":9},{"krate":0,"index":3482},{"krate":0,"index":10},{"krate":0,"index":3484},{"krate":0,"index":11},{"krate":0,"index":3486},{"krate":0,"index":12},{"krate":0,"index":3488},{"krate":0,"index":13},{"krate":0,"index":3490},{"krate":0,"index":14},{"krate":0,"index":15},{"krate":0,"index":16},{"krate":0,"index":17},{"krate":0,"index":18},{"krate":0,"index":19},{"krate":0,"index":20},{"krate":0,"index":21},{"krate":0,"index":22},{"krate":0,"index":23},{"krate":0,"index":24},{"krate":0,"index":25},{"krate":0,"index":26},{"krate":0,"index":27},{"krate":0,"index":28},{"krate":0,"index":29},{"krate":0,"index":30},{"krate":0,"index":31},{"krate":0,"index":32},{"krate":0,"index":33},{"krate":0,"index":34},{"krate":0,"index":35},{"krate":0,"index":36},{"krate":0,"index":37},{"krate":0,"index":38},{"krate":0,"index":39},{"krate":0,"index":40},{"krate":0,"index":41},{"krate":0,"index":42},{"krate":0,"index":43},{"krate":0,"index":44},{"krate":0,"index":45},{"krate":0,"index":46},{"krate":0,"index":47},{"krate":0,"index":48},{"krate":0,"index":49},{"krate":0,"index":50},{"krate":0,"index":51},{"krate":0,"index":52},{"krate":0,"index":53},{"krate":0,"index":54},{"krate":0,"index":55},{"krate":0,"index":117},{"krate":0,"index":128},{"krate":0,"index":150},{"krate":0,"index":446},{"krate":0,"index":528},{"krate":0,"index":707},{"krate":0,"index":1087},{"krate":0,"index":1094},{"krate":0,"index":1104},{"krate":0,"index":1145},{"krate":0,"index":1490},{"krate":0,"index":1728},{"krate":0,"index":1903},{"krate":0,"index":2058},{"krate":0,"index":2156},{"krate":0,"index":3473},{"krate":0,"index":2172}],"decl_id":null,"docs":" # Overview","sig":null,"attributes":[{"value":"/ # Overview","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src/lib.rs","byte_start":0,"byte_end":14,"line_start":1,"line_end":1,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src/lib.rs","byte_start":15,"byte_end":18,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ This crate provides native rust implementations of image encoding and decoding as well as some","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src/lib.rs","byte_start":19,"byte_end":117,"line_start":3,"line_end":3,"column_start":1,"column_end":99}},{"value":"/ basic image manipulation functions. Additional documentation can currently also be found in the","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src/lib.rs","byte_start":118,"byte_end":217,"line_start":4,"line_end":4,"column_start":1,"column_end":100}},{"value":"/ [README.md file which is most easily viewed on","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src/lib.rs","byte_start":218,"byte_end":268,"line_start":5,"line_end":5,"column_start":1,"column_end":51}},{"value":"/ github](https://github.com/image-rs/image/blob/master/README.md).","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src/lib.rs","byte_start":269,"byte_end":338,"line_start":6,"line_end":6,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src/lib.rs","byte_start":339,"byte_end":342,"line_start":7,"line_end":7,"column_start":1,"column_end":4}},{"value":"/ There are two core problems for which this library provides solutions: a unified interface for image","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src/lib.rs","byte_start":343,"byte_end":447,"line_start":8,"line_end":8,"column_start":1,"column_end":105}},{"value":"/ encodings and simple generic buffers for their content. It's possible to use either feature","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src/lib.rs","byte_start":448,"byte_end":543,"line_start":9,"line_end":9,"column_start":1,"column_end":96}},{"value":"/ without the other. The focus is on a small and stable set of common operations that can be","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src/lib.rs","byte_start":544,"byte_end":638,"line_start":10,"line_end":10,"column_start":1,"column_end":95}},{"value":"/ supplemented by other specialized crates. The library also prefers safe solutions with few","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src/lib.rs","byte_start":639,"byte_end":733,"line_start":11,"line_end":11,"column_start":1,"column_end":95}},{"value":"/ dependencies.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src/lib.rs","byte_start":734,"byte_end":751,"line_start":12,"line_end":12,"column_start":1,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src/lib.rs","byte_start":752,"byte_end":755,"line_start":13,"line_end":13,"column_start":1,"column_end":4}},{"value":"/ # High level API","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src/lib.rs","byte_start":756,"byte_end":776,"line_start":14,"line_end":14,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src/lib.rs","byte_start":777,"byte_end":780,"line_start":15,"line_end":15,"column_start":1,"column_end":4}},{"value":"/ Load images using [`io::Reader`]:","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src/lib.rs","byte_start":781,"byte_end":818,"line_start":16,"line_end":16,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src/lib.rs","byte_start":819,"byte_end":822,"line_start":17,"line_end":17,"column_start":1,"column_end":4}},{"value":"/ ```rust,no_run","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src/lib.rs","byte_start":823,"byte_end":841,"line_start":18,"line_end":18,"column_start":1,"column_end":19}},{"value":"/ # use std::io::Cursor;","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src/lib.rs","byte_start":842,"byte_end":868,"line_start":19,"line_end":19,"column_start":1,"column_end":27}},{"value":"/ use image::io::Reader as ImageReader;","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src/lib.rs","byte_start":869,"byte_end":910,"line_start":20,"line_end":20,"column_start":1,"column_end":42}},{"value":"/ # fn main() -> Result<(), image::ImageError> {","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src/lib.rs","byte_start":911,"byte_end":961,"line_start":21,"line_end":21,"column_start":1,"column_end":51}},{"value":"/ # let bytes = vec![0u8];","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src/lib.rs","byte_start":962,"byte_end":990,"line_start":22,"line_end":22,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src/lib.rs","byte_start":991,"byte_end":994,"line_start":23,"line_end":23,"column_start":1,"column_end":4}},{"value":"/ let img = ImageReader::open(\"myimage.png\")?.decode()?;","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src/lib.rs","byte_start":995,"byte_end":1053,"line_start":24,"line_end":24,"column_start":1,"column_end":59}},{"value":"/ let img2 = ImageReader::new(Cursor::new(bytes)).decode()?;","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src/lib.rs","byte_start":1054,"byte_end":1116,"line_start":25,"line_end":25,"column_start":1,"column_end":63}},{"value":"/ # Ok(())","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src/lib.rs","byte_start":1117,"byte_end":1129,"line_start":26,"line_end":26,"column_start":1,"column_end":13}},{"value":"/ # }","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src/lib.rs","byte_start":1130,"byte_end":1137,"line_start":27,"line_end":27,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src/lib.rs","byte_start":1138,"byte_end":1145,"line_start":28,"line_end":28,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src/lib.rs","byte_start":1146,"byte_end":1149,"line_start":29,"line_end":29,"column_start":1,"column_end":4}},{"value":"/ And save them using [`save`] or [`write_to`] methods:","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src/lib.rs","byte_start":1150,"byte_end":1207,"line_start":30,"line_end":30,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src/lib.rs","byte_start":1208,"byte_end":1211,"line_start":31,"line_end":31,"column_start":1,"column_end":4}},{"value":"/ ```rust,no_run","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src/lib.rs","byte_start":1212,"byte_end":1230,"line_start":32,"line_end":32,"column_start":1,"column_end":19}},{"value":"/ # use std::io::Write;","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src/lib.rs","byte_start":1231,"byte_end":1256,"line_start":33,"line_end":33,"column_start":1,"column_end":26}},{"value":"/ # use image::ImageOutputFormat;","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src/lib.rs","byte_start":1257,"byte_end":1292,"line_start":34,"line_end":34,"column_start":1,"column_end":36}},{"value":"/ # use image::DynamicImage;","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src/lib.rs","byte_start":1293,"byte_end":1323,"line_start":35,"line_end":35,"column_start":1,"column_end":31}},{"value":"/ # #[cfg(feature = \"png\")]","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src/lib.rs","byte_start":1324,"byte_end":1353,"line_start":36,"line_end":36,"column_start":1,"column_end":30}},{"value":"/ # fn main() -> Result<(), image::ImageError> {","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src/lib.rs","byte_start":1354,"byte_end":1404,"line_start":37,"line_end":37,"column_start":1,"column_end":51}},{"value":"/ # let img: DynamicImage = unimplemented!();","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src/lib.rs","byte_start":1405,"byte_end":1452,"line_start":38,"line_end":38,"column_start":1,"column_end":48}},{"value":"/ # let img2: DynamicImage = unimplemented!();","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src/lib.rs","byte_start":1453,"byte_end":1501,"line_start":39,"line_end":39,"column_start":1,"column_end":49}},{"value":"/ img.save(\"empty.jpg\")?;","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src/lib.rs","byte_start":1502,"byte_end":1529,"line_start":40,"line_end":40,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src/lib.rs","byte_start":1530,"byte_end":1533,"line_start":41,"line_end":41,"column_start":1,"column_end":4}},{"value":"/ let mut bytes: Vec<u8> = Vec::new();","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src/lib.rs","byte_start":1534,"byte_end":1574,"line_start":42,"line_end":42,"column_start":1,"column_end":41}},{"value":"/ img2.write_to(&mut bytes, image::ImageOutputFormat::Png)?;","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src/lib.rs","byte_start":1575,"byte_end":1637,"line_start":43,"line_end":43,"column_start":1,"column_end":63}},{"value":"/ # Ok(())","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src/lib.rs","byte_start":1638,"byte_end":1650,"line_start":44,"line_end":44,"column_start":1,"column_end":13}},{"value":"/ # }","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src/lib.rs","byte_start":1651,"byte_end":1658,"line_start":45,"line_end":45,"column_start":1,"column_end":8}},{"value":"/ # #[cfg(not(feature = \"png\"))] fn main() {}","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src/lib.rs","byte_start":1659,"byte_end":1706,"line_start":46,"line_end":46,"column_start":1,"column_end":48}},{"value":"/ ```","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src/lib.rs","byte_start":1707,"byte_end":1714,"line_start":47,"line_end":47,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src/lib.rs","byte_start":1715,"byte_end":1718,"line_start":48,"line_end":48,"column_start":1,"column_end":4}},{"value":"/ With default features, the crate includes support for [many common image formats](codecs/index.html#supported-formats).","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src/lib.rs","byte_start":1719,"byte_end":1842,"line_start":49,"line_end":49,"column_start":1,"column_end":124}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src/lib.rs","byte_start":1843,"byte_end":1846,"line_start":50,"line_end":50,"column_start":1,"column_end":4}},{"value":"/ [`save`]: enum.DynamicImage.html#method.save","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src/lib.rs","byte_start":1847,"byte_end":1895,"line_start":51,"line_end":51,"column_start":1,"column_end":49}},{"value":"/ [`write_to`]: enum.DynamicImage.html#method.write_to","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src/lib.rs","byte_start":1896,"byte_end":1952,"line_start":52,"line_end":52,"column_start":1,"column_end":57}},{"value":"/ [`io::Reader`]: io/struct.Reader.html","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src/lib.rs","byte_start":1953,"byte_end":1994,"line_start":53,"line_end":53,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src/lib.rs","byte_start":1995,"byte_end":1998,"line_start":54,"line_end":54,"column_start":1,"column_end":4}},{"value":"/ # Image buffers","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src/lib.rs","byte_start":1999,"byte_end":2018,"line_start":55,"line_end":55,"column_start":1,"column_end":20}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src/lib.rs","byte_start":2019,"byte_end":2022,"line_start":56,"line_end":56,"column_start":1,"column_end":4}},{"value":"/ The two main types for storing images:","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src/lib.rs","byte_start":2023,"byte_end":2065,"line_start":57,"line_end":57,"column_start":1,"column_end":43}},{"value":"/ * [`ImageBuffer`] which holds statically typed image contents.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src/lib.rs","byte_start":2066,"byte_end":2132,"line_start":58,"line_end":58,"column_start":1,"column_end":67}},{"value":"/ * [`DynamicImage`] which is an enum over the supported ImageBuffer formats","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src/lib.rs","byte_start":2133,"byte_end":2211,"line_start":59,"line_end":59,"column_start":1,"column_end":79}},{"value":"/     and supports conversions between them.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src/lib.rs","byte_start":2212,"byte_end":2258,"line_start":60,"line_end":60,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src/lib.rs","byte_start":2259,"byte_end":2262,"line_start":61,"line_end":61,"column_start":1,"column_end":4}},{"value":"/ As well as a few more specialized options:","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src/lib.rs","byte_start":2263,"byte_end":2309,"line_start":62,"line_end":62,"column_start":1,"column_end":47}},{"value":"/ * [`GenericImage`] trait for a mutable image buffer.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src/lib.rs","byte_start":2310,"byte_end":2366,"line_start":63,"line_end":63,"column_start":1,"column_end":57}},{"value":"/ * [`GenericImageView`] trait for read only references to a GenericImage.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src/lib.rs","byte_start":2367,"byte_end":2443,"line_start":64,"line_end":64,"column_start":1,"column_end":77}},{"value":"/ * [`flat`] module containing types for interoperability with generic channel","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src/lib.rs","byte_start":2444,"byte_end":2524,"line_start":65,"line_end":65,"column_start":1,"column_end":81}},{"value":"/     matrices and foreign interfaces.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src/lib.rs","byte_start":2525,"byte_end":2565,"line_start":66,"line_end":66,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src/lib.rs","byte_start":2566,"byte_end":2569,"line_start":67,"line_end":67,"column_start":1,"column_end":4}},{"value":"/ [`GenericImageView`]: trait.GenericImageView.html","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src/lib.rs","byte_start":2570,"byte_end":2623,"line_start":68,"line_end":68,"column_start":1,"column_end":54}},{"value":"/ [`GenericImage`]: trait.GenericImage.html","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src/lib.rs","byte_start":2624,"byte_end":2669,"line_start":69,"line_end":69,"column_start":1,"column_end":46}},{"value":"/ [`ImageBuffer`]: struct.ImageBuffer.html","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src/lib.rs","byte_start":2670,"byte_end":2714,"line_start":70,"line_end":70,"column_start":1,"column_end":45}},{"value":"/ [`DynamicImage`]: enum.DynamicImage.html","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src/lib.rs","byte_start":2715,"byte_end":2759,"line_start":71,"line_end":71,"column_start":1,"column_end":45}},{"value":"/ [`flat`]: flat/index.html","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src/lib.rs","byte_start":2760,"byte_end":2789,"line_start":72,"line_end":72,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src/lib.rs","byte_start":2790,"byte_end":2793,"line_start":73,"line_end":73,"column_start":1,"column_end":4}},{"value":"/ # Low level encoding/decoding API","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src/lib.rs","byte_start":2794,"byte_end":2831,"line_start":74,"line_end":74,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src/lib.rs","byte_start":2832,"byte_end":2835,"line_start":75,"line_end":75,"column_start":1,"column_end":4}},{"value":"/ The [`ImageDecoder`] and [`ImageDecoderExt`] traits are implemented for many image file","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src/lib.rs","byte_start":2836,"byte_end":2927,"line_start":76,"line_end":76,"column_start":1,"column_end":92}},{"value":"/ formats. They decode image data by directly on raw byte slices. Given an ImageDecoder, you can","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src/lib.rs","byte_start":2928,"byte_end":3026,"line_start":77,"line_end":77,"column_start":1,"column_end":99}},{"value":"/ produce a DynamicImage via [`DynamicImage::from_decoder`].","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src/lib.rs","byte_start":3027,"byte_end":3089,"line_start":78,"line_end":78,"column_start":1,"column_end":63}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src/lib.rs","byte_start":3090,"byte_end":3093,"line_start":79,"line_end":79,"column_start":1,"column_end":4}},{"value":"/ [`ImageEncoder`] provides the analogous functionality for encoding image data.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src/lib.rs","byte_start":3094,"byte_end":3176,"line_start":80,"line_end":80,"column_start":1,"column_end":83}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src/lib.rs","byte_start":3177,"byte_end":3180,"line_start":81,"line_end":81,"column_start":1,"column_end":4}},{"value":"/ [`DynamicImage::from_decoder`]: enum.DynamicImage.html#method.from_decoder","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src/lib.rs","byte_start":3181,"byte_end":3259,"line_start":82,"line_end":82,"column_start":1,"column_end":79}},{"value":"/ [`ImageDecoderExt`]: trait.ImageDecoderExt.html","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src/lib.rs","byte_start":3260,"byte_end":3311,"line_start":83,"line_end":83,"column_start":1,"column_end":52}},{"value":"/ [`ImageDecoder`]: trait.ImageDecoder.html","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src/lib.rs","byte_start":3312,"byte_end":3357,"line_start":84,"line_end":84,"column_start":1,"column_end":46}},{"value":"/ [`ImageEncoder`]: trait.ImageEncoder.html","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src/lib.rs","byte_start":3358,"byte_end":3403,"line_start":85,"line_end":85,"column_start":1,"column_end":46}},{"value":"warn(missing_docs)","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src/lib.rs","byte_start":3404,"byte_end":3426,"line_start":86,"line_end":86,"column_start":1,"column_end":23}},{"value":"warn(unused_qualifications)","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src/lib.rs","byte_start":3427,"byte_end":3458,"line_start":87,"line_end":87,"column_start":1,"column_end":32}},{"value":"deny(unreachable_pub)","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src/lib.rs","byte_start":3459,"byte_end":3484,"line_start":88,"line_end":88,"column_start":1,"column_end":26}},{"value":"deny(deprecated)","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src/lib.rs","byte_start":3485,"byte_end":3505,"line_start":89,"line_end":89,"column_start":1,"column_end":21}},{"value":"deny(missing_copy_implementations)","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src/lib.rs","byte_start":3506,"byte_end":3544,"line_start":90,"line_end":90,"column_start":1,"column_end":39}},{"value":"allow(clippy :: many_single_char_names)","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src/lib.rs","byte_start":3642,"byte_end":3683,"line_start":93,"line_end":93,"column_start":1,"column_end":42}}]},{"kind":"Mod","id":{"krate":0,"index":55},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\error.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"error","qualname":"::error","value":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\error.rs","parent":null,"children":[{"krate":0,"index":56},{"krate":0,"index":57},{"krate":0,"index":58},{"krate":0,"index":59},{"krate":0,"index":60},{"krate":0,"index":61},{"krate":0,"index":62},{"krate":0,"index":2173},{"krate":0,"index":2192},{"krate":0,"index":2194},{"krate":0,"index":2197},{"krate":0,"index":2199},{"krate":0,"index":2221},{"krate":0,"index":2219},{"krate":0,"index":2216},{"krate":0,"index":2212},{"krate":0,"index":2213},{"krate":0,"index":2223},{"krate":0,"index":2226},{"krate":0,"index":2228},{"krate":0,"index":2231},{"krate":0,"index":2233},{"krate":0,"index":2255},{"krate":0,"index":2253},{"krate":0,"index":2250},{"krate":0,"index":2246},{"krate":0,"index":2247},{"krate":0,"index":2257},{"krate":0,"index":2260},{"krate":0,"index":2262},{"krate":0,"index":2264},{"krate":0,"index":2266},{"krate":0,"index":2286},{"krate":0,"index":2284},{"krate":0,"index":2281},{"krate":0,"index":2277},{"krate":0,"index":2278},{"krate":0,"index":2274},{"krate":0,"index":2275},{"krate":0,"index":2288},{"krate":0,"index":2312},{"krate":0,"index":2310},{"krate":0,"index":2307},{"krate":0,"index":2303},{"krate":0,"index":2304},{"krate":0,"index":63},{"krate":0,"index":67},{"krate":0,"index":72},{"krate":0,"index":77},{"krate":0,"index":80},{"krate":0,"index":83},{"krate":0,"index":85},{"krate":0,"index":87},{"krate":0,"index":89},{"krate":0,"index":91},{"krate":0,"index":93},{"krate":0,"index":95},{"krate":0,"index":97},{"krate":0,"index":99},{"krate":0,"index":100},{"krate":0,"index":102},{"krate":0,"index":104},{"krate":0,"index":106},{"krate":0,"index":108},{"krate":0,"index":110},{"krate":0,"index":112},{"krate":0,"index":114},{"krate":0,"index":115}],"decl_id":null,"docs":" Contains detailed error representation.","sig":null,"attributes":[{"value":"/ Contains detailed error representation.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\error.rs","byte_start":12784,"byte_end":12827,"line_start":1,"line_end":1,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\error.rs","byte_start":12828,"byte_end":12831,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ See the main [`ImageError`] which contains a variant for each specialized error type. The","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\error.rs","byte_start":12832,"byte_end":12925,"line_start":3,"line_end":3,"column_start":1,"column_end":94}},{"value":"/ subtypes used in each variant are opaque by design. They can be roughly inspected through their","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\error.rs","byte_start":12926,"byte_end":13025,"line_start":4,"line_end":4,"column_start":1,"column_end":100}},{"value":"/ respective `kind` methods which work similar to `std::io::Error::kind`.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\error.rs","byte_start":13026,"byte_end":13101,"line_start":5,"line_end":5,"column_start":1,"column_end":76}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\error.rs","byte_start":13102,"byte_end":13105,"line_start":6,"line_end":6,"column_start":1,"column_end":4}},{"value":"/ The error interface makes it possible to inspect the error of an underlying decoder or encoder,","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\error.rs","byte_start":13106,"byte_end":13205,"line_start":7,"line_end":7,"column_start":1,"column_end":100}},{"value":"/ through the `Error::source` method. Note that this is not part of the stable interface and you","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\error.rs","byte_start":13206,"byte_end":13304,"line_start":8,"line_end":8,"column_start":1,"column_end":99}},{"value":"/ may not rely on a particular error value for a particular operation. This means mainly that","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\error.rs","byte_start":13305,"byte_end":13400,"line_start":9,"line_end":9,"column_start":1,"column_end":96}},{"value":"/ `image` does not promise to remain on a particular version of its underlying decoders but if","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\error.rs","byte_start":13401,"byte_end":13497,"line_start":10,"line_end":10,"column_start":1,"column_end":97}},{"value":"/ you ensure to use the same version of the dependency (or at least of the error type) through","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\error.rs","byte_start":13498,"byte_end":13594,"line_start":11,"line_end":11,"column_start":1,"column_end":97}},{"value":"/ external means then you could inspect the error type in slightly more detail.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\error.rs","byte_start":13595,"byte_end":13676,"line_start":12,"line_end":12,"column_start":1,"column_end":82}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\error.rs","byte_start":13677,"byte_end":13680,"line_start":13,"line_end":13,"column_start":1,"column_end":4}},{"value":"/ [`ImageError`]: enum.ImageError.html","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\error.rs","byte_start":13681,"byte_end":13721,"line_start":14,"line_end":14,"column_start":1,"column_end":41}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2174},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\error.rs","byte_start":14433,"byte_end":14441,"line_start":34,"line_end":34,"column_start":5,"column_end":13},"name":"Decoding","qualname":"::error::ImageError::Decoding","value":"ImageError::Decoding(DecodingError)","parent":{"krate":0,"index":2173},"children":[],"decl_id":null,"docs":" An error was encountered while decoding.","sig":null,"attributes":[{"value":"/ An error was encountered while decoding.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\error.rs","byte_start":14150,"byte_end":14194,"line_start":29,"line_end":29,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\error.rs","byte_start":14199,"byte_end":14202,"line_start":30,"line_end":30,"column_start":5,"column_end":8}},{"value":"/ This means that the input data did not conform to the specification of some image format,","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\error.rs","byte_start":14207,"byte_end":14300,"line_start":31,"line_end":31,"column_start":5,"column_end":98}},{"value":"/ or that no format could be determined, or that it did not match format specific","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\error.rs","byte_start":14305,"byte_end":14388,"line_start":32,"line_end":32,"column_start":5,"column_end":88}},{"value":"/ requirements set by the caller.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\error.rs","byte_start":14393,"byte_end":14428,"line_start":33,"line_end":33,"column_start":5,"column_end":40}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2177},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\error.rs","byte_start":14827,"byte_end":14835,"line_start":42,"line_end":42,"column_start":5,"column_end":13},"name":"Encoding","qualname":"::error::ImageError::Encoding","value":"ImageError::Encoding(EncodingError)","parent":{"krate":0,"index":2173},"children":[],"decl_id":null,"docs":" An error was encountered while encoding.","sig":null,"attributes":[{"value":"/ An error was encountered while encoding.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\error.rs","byte_start":14463,"byte_end":14507,"line_start":36,"line_end":36,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\error.rs","byte_start":14512,"byte_end":14515,"line_start":37,"line_end":37,"column_start":5,"column_end":8}},{"value":"/ The input image can not be encoded with the chosen format, for example because the","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\error.rs","byte_start":14520,"byte_end":14606,"line_start":38,"line_end":38,"column_start":5,"column_end":91}},{"value":"/ specification has no representation for its color space or because a necessary conversion","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\error.rs","byte_start":14611,"byte_end":14704,"line_start":39,"line_end":39,"column_start":5,"column_end":98}},{"value":"/ is ambiguous. In some cases it might also happen that the dimensions can not be used with","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\error.rs","byte_start":14709,"byte_end":14802,"line_start":40,"line_end":40,"column_start":5,"column_end":98}},{"value":"/ the format.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\error.rs","byte_start":14807,"byte_end":14822,"line_start":41,"line_end":41,"column_start":5,"column_end":20}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2180},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\error.rs","byte_start":15075,"byte_end":15084,"line_start":48,"line_end":48,"column_start":5,"column_end":14},"name":"Parameter","qualname":"::error::ImageError::Parameter","value":"ImageError::Parameter(ParameterError)","parent":{"krate":0,"index":2173},"children":[],"decl_id":null,"docs":" An error was encountered in input arguments.","sig":null,"attributes":[{"value":"/ An error was encountered in input arguments.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\error.rs","byte_start":14857,"byte_end":14905,"line_start":44,"line_end":44,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\error.rs","byte_start":14910,"byte_end":14913,"line_start":45,"line_end":45,"column_start":5,"column_end":8}},{"value":"/ This is a catch-all case for strictly internal operations such as scaling, conversions,","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\error.rs","byte_start":14918,"byte_end":15009,"line_start":46,"line_end":46,"column_start":5,"column_end":96}},{"value":"/ etc. that involve no external format specifications.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\error.rs","byte_start":15014,"byte_end":15070,"line_start":47,"line_end":47,"column_start":5,"column_end":61}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2183},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\error.rs","byte_start":15344,"byte_end":15350,"line_start":54,"line_end":54,"column_start":5,"column_end":11},"name":"Limits","qualname":"::error::ImageError::Limits","value":"ImageError::Limits(LimitError)","parent":{"krate":0,"index":2173},"children":[],"decl_id":null,"docs":" Completing the operation would have required more resources than allowed.","sig":null,"attributes":[{"value":"/ Completing the operation would have required more resources than allowed.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\error.rs","byte_start":15107,"byte_end":15184,"line_start":50,"line_end":50,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\error.rs","byte_start":15189,"byte_end":15192,"line_start":51,"line_end":51,"column_start":5,"column_end":8}},{"value":"/ Errors of this type are limits set by the user or environment, *not* inherent in a specific","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\error.rs","byte_start":15197,"byte_end":15292,"line_start":52,"line_end":52,"column_start":5,"column_end":100}},{"value":"/ format or operation that was executed.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\error.rs","byte_start":15297,"byte_end":15339,"line_start":53,"line_end":53,"column_start":5,"column_end":47}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2186},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\error.rs","byte_start":15688,"byte_end":15699,"line_start":62,"line_end":62,"column_start":5,"column_end":16},"name":"Unsupported","qualname":"::error::ImageError::Unsupported","value":"ImageError::Unsupported(UnsupportedError)","parent":{"krate":0,"index":2173},"children":[],"decl_id":null,"docs":" An operation can not be completed by the chosen abstraction.","sig":null,"attributes":[{"value":"/ An operation can not be completed by the chosen abstraction.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\error.rs","byte_start":15369,"byte_end":15433,"line_start":56,"line_end":56,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\error.rs","byte_start":15438,"byte_end":15441,"line_start":57,"line_end":57,"column_start":5,"column_end":8}},{"value":"/ This means that it might be possible for the operation to succeed in general but","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\error.rs","byte_start":15446,"byte_end":15530,"line_start":58,"line_end":58,"column_start":5,"column_end":89}},{"value":"/ * it requires a disabled feature,","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\error.rs","byte_start":15535,"byte_end":15572,"line_start":59,"line_end":59,"column_start":5,"column_end":42}},{"value":"/ * the implementation does not yet exist, or","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\error.rs","byte_start":15577,"byte_end":15624,"line_start":60,"line_end":60,"column_start":5,"column_end":52}},{"value":"/ * no abstraction for a lower level could be found.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\error.rs","byte_start":15629,"byte_end":15683,"line_start":61,"line_end":61,"column_start":5,"column_end":59}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2189},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\error.rs","byte_start":15790,"byte_end":15797,"line_start":65,"line_end":65,"column_start":5,"column_end":12},"name":"IoError","qualname":"::error::ImageError::IoError","value":"ImageError::IoError(io::Error)","parent":{"krate":0,"index":2173},"children":[],"decl_id":null,"docs":" An error occurred while interacting with the environment.\n","sig":null,"attributes":[{"value":"/ An error occurred while interacting with the environment.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\error.rs","byte_start":15724,"byte_end":15785,"line_start":64,"line_end":64,"column_start":5,"column_end":66}}]},{"kind":"Enum","id":{"krate":0,"index":2173},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\error.rs","byte_start":14133,"byte_end":14143,"line_start":28,"line_end":28,"column_start":10,"column_end":20},"name":"ImageError","qualname":"::error::ImageError","value":"pub enum ImageError {\n\n    /// An error was encountered while decoding.\n    ///\n    /// This means that the input data did not conform to the specification of some image format,\n    /// or that no format could be determined, or that it did not match format specific\n    /// requirements set by the caller.\n    Decoding(DecodingError),\n\n    /// An error was encountered while encoding.\n    ///\n    /// The input image can not be encoded with the chosen format, for example because the\n    /// specification has no representation for its color space or because a necessary conversion\n    /// is ambiguous. In some cases it might also happen that the dimensions can not be used with\n    /// the format.\n    Encoding(EncodingError),\n\n    /// An error was encountered in input arguments.\n    ///\n    /// This is a catch-all case for strictly internal operations such as scaling, conversions,\n    /// etc. that involve no external format specifications.\n    Parameter(ParameterError),\n\n    /// Completing the operation would have required more resources than allowed.\n    ///\n    /// Errors of this type are limits set by the user or environment, *not* inherent in a specific\n    /// format or operation that was executed.\n    Limits(LimitError),\n\n    /// An operation can not be completed by the chosen abstraction.\n    ///\n    /// This means that it might be possible for the operation to succeed in general but\n    /// * it requires a disabled feature,\n    /// * the implementation does not yet exist, or\n    /// * no abstraction for a lower level could be found.\n    Unsupported(UnsupportedError),\n\n    /// An error occurred while interacting with the environment.\n    IoError(io::Error),\n}","parent":null,"children":[{"krate":0,"index":2174},{"krate":0,"index":2177},{"krate":0,"index":2180},{"krate":0,"index":2183},{"krate":0,"index":2186},{"krate":0,"index":2189}],"decl_id":null,"docs":" The generic error type for image operations.","sig":null,"attributes":[{"value":"/ The generic error type for image operations.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\error.rs","byte_start":13875,"byte_end":13923,"line_start":23,"line_end":23,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\error.rs","byte_start":13924,"byte_end":13927,"line_start":24,"line_end":24,"column_start":1,"column_end":4}},{"value":"/ This high level enum allows, by variant matching, a rough separation of concerns between","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\error.rs","byte_start":13928,"byte_end":14020,"line_start":25,"line_end":25,"column_start":1,"column_end":93}},{"value":"/ underlying IO, the caller, format specifications, and the `image` implementation.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\error.rs","byte_start":14021,"byte_end":14106,"line_start":26,"line_end":26,"column_start":1,"column_end":86}}]},{"kind":"Struct","id":{"krate":0,"index":2194},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\error.rs","byte_start":16029,"byte_end":16045,"line_start":74,"line_end":74,"column_start":12,"column_end":28},"name":"UnsupportedError","qualname":"::error::UnsupportedError","value":"UnsupportedError {  }","parent":null,"children":[{"krate":0,"index":2195},{"krate":0,"index":2196}],"decl_id":null,"docs":" The implementation for an operation was not provided.","sig":null,"attributes":[{"value":"/ The implementation for an operation was not provided.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\error.rs","byte_start":15813,"byte_end":15870,"line_start":68,"line_end":68,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\error.rs","byte_start":15871,"byte_end":15874,"line_start":69,"line_end":69,"column_start":1,"column_end":4}},{"value":"/ See the variant [`Unsupported`] for more documentation.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\error.rs","byte_start":15875,"byte_end":15934,"line_start":70,"line_end":70,"column_start":1,"column_end":60}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\error.rs","byte_start":15935,"byte_end":15938,"line_start":71,"line_end":71,"column_start":1,"column_end":4}},{"value":"/ [`Unsupported`]: enum.ImageError.html#variant.Unsupported","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\error.rs","byte_start":15939,"byte_end":16000,"line_start":72,"line_end":72,"column_start":1,"column_end":62}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2200},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\error.rs","byte_start":16284,"byte_end":16289,"line_start":83,"line_end":83,"column_start":5,"column_end":10},"name":"Color","qualname":"::error::UnsupportedErrorKind::Color","value":"UnsupportedErrorKind::Color(ExtendedColorType)","parent":{"krate":0,"index":2199},"children":[],"decl_id":null,"docs":" The required color type can not be handled.\n","sig":null,"attributes":[{"value":"/ The required color type can not be handled.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\error.rs","byte_start":16232,"byte_end":16279,"line_start":82,"line_end":82,"column_start":5,"column_end":52}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2203},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\error.rs","byte_start":16356,"byte_end":16362,"line_start":85,"line_end":85,"column_start":5,"column_end":11},"name":"Format","qualname":"::error::UnsupportedErrorKind::Format","value":"UnsupportedErrorKind::Format(ImageFormatHint)","parent":{"krate":0,"index":2199},"children":[],"decl_id":null,"docs":" An image format is not supported.\n","sig":null,"attributes":[{"value":"/ An image format is not supported.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\error.rs","byte_start":16314,"byte_end":16351,"line_start":84,"line_end":84,"column_start":5,"column_end":42}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2206},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\error.rs","byte_start":16506,"byte_end":16520,"line_start":88,"line_end":88,"column_start":5,"column_end":19},"name":"GenericFeature","qualname":"::error::UnsupportedErrorKind::GenericFeature","value":"UnsupportedErrorKind::GenericFeature(String)","parent":{"krate":0,"index":2199},"children":[],"decl_id":null,"docs":" Some feature specified by string.\n This is discouraged and is likely to get deprecated (but not removed).\n","sig":null,"attributes":[{"value":"/ Some feature specified by string.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\error.rs","byte_start":16385,"byte_end":16422,"line_start":86,"line_end":86,"column_start":5,"column_end":42}},{"value":"/ This is discouraged and is likely to get deprecated (but not removed).","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\error.rs","byte_start":16427,"byte_end":16501,"line_start":87,"line_end":87,"column_start":5,"column_end":79}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2209},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\error.rs","byte_start":16553,"byte_end":16568,"line_start":90,"line_end":90,"column_start":5,"column_end":20},"name":"__NonExhaustive","qualname":"::error::UnsupportedErrorKind::__NonExhaustive","value":"UnsupportedErrorKind::__NonExhaustive(NonExhaustiveMarker)","parent":{"krate":0,"index":2199},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":2199},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\error.rs","byte_start":16205,"byte_end":16225,"line_start":81,"line_end":81,"column_start":10,"column_end":30},"name":"UnsupportedErrorKind","qualname":"::error::UnsupportedErrorKind","value":"pub enum UnsupportedErrorKind {\n\n    /// The required color type can not be handled.\n    Color(ExtendedColorType),\n\n    /// An image format is not supported.\n    Format(ImageFormatHint),\n\n    /// Some feature specified by string.\n    /// This is discouraged and is likely to get deprecated (but not removed).\n    GenericFeature(String),\n\n    #[doc(hidden)]\n    __NonExhaustive(NonExhaustiveMarker),\n}","parent":null,"children":[{"krate":0,"index":2200},{"krate":0,"index":2203},{"krate":0,"index":2206},{"krate":0,"index":2209}],"decl_id":null,"docs":" Details what feature is not supported.\n","sig":null,"attributes":[{"value":"/ Details what feature is not supported.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\error.rs","byte_start":16112,"byte_end":16154,"line_start":79,"line_end":79,"column_start":1,"column_end":43}}]},{"kind":"Struct","id":{"krate":0,"index":2223},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\error.rs","byte_start":16887,"byte_end":16900,"line_start":100,"line_end":100,"column_start":12,"column_end":25},"name":"EncodingError","qualname":"::error::EncodingError","value":"EncodingError {  }","parent":null,"children":[{"krate":0,"index":2224},{"krate":0,"index":2225}],"decl_id":null,"docs":" An error was encountered while encoding an image.","sig":null,"attributes":[{"value":"/ An error was encountered while encoding an image.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\error.rs","byte_start":16594,"byte_end":16647,"line_start":93,"line_end":93,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\error.rs","byte_start":16648,"byte_end":16651,"line_start":94,"line_end":94,"column_start":1,"column_end":4}},{"value":"/ This is used as an opaque representation for the [`ImageError::Encoding`] variant. See its","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\error.rs","byte_start":16652,"byte_end":16746,"line_start":95,"line_end":95,"column_start":1,"column_end":95}},{"value":"/ documentation for more information.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\error.rs","byte_start":16747,"byte_end":16786,"line_start":96,"line_end":96,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\error.rs","byte_start":16787,"byte_end":16790,"line_start":97,"line_end":97,"column_start":1,"column_end":4}},{"value":"/ [`ImageError::Encoding`]: enum.ImageError.html#variant.Encoding","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\error.rs","byte_start":16791,"byte_end":16858,"line_start":98,"line_end":98,"column_start":1,"column_end":68}}]},{"kind":"Struct","id":{"krate":0,"index":2228},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\error.rs","byte_start":17282,"byte_end":17296,"line_start":113,"line_end":113,"column_start":12,"column_end":26},"name":"ParameterError","qualname":"::error::ParameterError","value":"ParameterError {  }","parent":null,"children":[{"krate":0,"index":2229},{"krate":0,"index":2230}],"decl_id":null,"docs":" An error was encountered in inputs arguments.","sig":null,"attributes":[{"value":"/ An error was encountered in inputs arguments.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\error.rs","byte_start":16990,"byte_end":17039,"line_start":106,"line_end":106,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\error.rs","byte_start":17040,"byte_end":17043,"line_start":107,"line_end":107,"column_start":1,"column_end":4}},{"value":"/ This is used as an opaque representation for the [`ImageError::Parameter`] variant. See its","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\error.rs","byte_start":17044,"byte_end":17139,"line_start":108,"line_end":108,"column_start":1,"column_end":96}},{"value":"/ documentation for more information.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\error.rs","byte_start":17140,"byte_end":17179,"line_start":109,"line_end":109,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\error.rs","byte_start":17180,"byte_end":17183,"line_start":110,"line_end":110,"column_start":1,"column_end":4}},{"value":"/ [`ImageError::Parameter`]: enum.ImageError.html#variant.Parameter","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\error.rs","byte_start":17184,"byte_end":17253,"line_start":111,"line_end":111,"column_start":1,"column_end":70}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2234},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\error.rs","byte_start":17544,"byte_end":17561,"line_start":122,"line_end":122,"column_start":5,"column_end":22},"name":"DimensionMismatch","qualname":"::error::ParameterErrorKind::DimensionMismatch","value":"ParameterErrorKind::DimensionMismatch","parent":{"krate":0,"index":2233},"children":[],"decl_id":null,"docs":" The dimensions passed are wrong.\n","sig":null,"attributes":[{"value":"/ The dimensions passed are wrong.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\error.rs","byte_start":17503,"byte_end":17539,"line_start":121,"line_end":121,"column_start":5,"column_end":41}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2236},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\error.rs","byte_start":17659,"byte_end":17672,"line_start":124,"line_end":124,"column_start":5,"column_end":18},"name":"FailedAlready","qualname":"::error::ParameterErrorKind::FailedAlready","value":"ParameterErrorKind::FailedAlready","parent":{"krate":0,"index":2233},"children":[],"decl_id":null,"docs":" Repeated an operation for which error that could not be cloned was emitted already.\n","sig":null,"attributes":[{"value":"/ Repeated an operation for which error that could not be cloned was emitted already.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\error.rs","byte_start":17567,"byte_end":17654,"line_start":123,"line_end":123,"column_start":5,"column_end":92}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2238},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\error.rs","byte_start":17800,"byte_end":17807,"line_start":127,"line_end":127,"column_start":5,"column_end":12},"name":"Generic","qualname":"::error::ParameterErrorKind::Generic","value":"ParameterErrorKind::Generic(String)","parent":{"krate":0,"index":2233},"children":[],"decl_id":null,"docs":" A string describing the parameter.\n This is discouraged and is likely to get deprecated (but not removed).\n","sig":null,"attributes":[{"value":"/ A string describing the parameter.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\error.rs","byte_start":17678,"byte_end":17716,"line_start":125,"line_end":125,"column_start":5,"column_end":43}},{"value":"/ This is discouraged and is likely to get deprecated (but not removed).","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\error.rs","byte_start":17721,"byte_end":17795,"line_start":126,"line_end":126,"column_start":5,"column_end":79}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2241},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\error.rs","byte_start":17868,"byte_end":17878,"line_start":129,"line_end":129,"column_start":5,"column_end":15},"name":"NoMoreData","qualname":"::error::ParameterErrorKind::NoMoreData","value":"ParameterErrorKind::NoMoreData","parent":{"krate":0,"index":2233},"children":[],"decl_id":null,"docs":" The end of the image has been reached.\n","sig":null,"attributes":[{"value":"/ The end of the image has been reached.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\error.rs","byte_start":17821,"byte_end":17863,"line_start":128,"line_end":128,"column_start":5,"column_end":47}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2243},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\error.rs","byte_start":17962,"byte_end":17977,"line_start":132,"line_end":132,"column_start":5,"column_end":20},"name":"__NonExhaustive","qualname":"::error::ParameterErrorKind::__NonExhaustive","value":"ParameterErrorKind::__NonExhaustive(NonExhaustiveMarker)","parent":{"krate":0,"index":2233},"children":[],"decl_id":null,"docs":" Do not use this, not part of stability guarantees.\n","sig":null,"attributes":[{"value":"/ Do not use this, not part of stability guarantees.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\error.rs","byte_start":17903,"byte_end":17957,"line_start":131,"line_end":131,"column_start":5,"column_end":59}}]},{"kind":"Enum","id":{"krate":0,"index":2233},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\error.rs","byte_start":17478,"byte_end":17496,"line_start":120,"line_end":120,"column_start":10,"column_end":28},"name":"ParameterErrorKind","qualname":"::error::ParameterErrorKind","value":"pub enum ParameterErrorKind {\n\n    /// The dimensions passed are wrong.\n    DimensionMismatch,\n\n    /// Repeated an operation for which error that could not be cloned was emitted already.\n    FailedAlready,\n\n    /// A string describing the parameter.\n    /// This is discouraged and is likely to get deprecated (but not removed).\n    Generic(String),\n\n    /// The end of the image has been reached.\n    NoMoreData,\n\n    #[doc(hidden)]\n    /// Do not use this, not part of stability guarantees.\n    __NonExhaustive(NonExhaustiveMarker),\n}","parent":null,"children":[{"krate":0,"index":2234},{"krate":0,"index":2236},{"krate":0,"index":2238},{"krate":0,"index":2241},{"krate":0,"index":2243}],"decl_id":null,"docs":" Details how a parameter is malformed.\n","sig":null,"attributes":[{"value":"/ Details how a parameter is malformed.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\error.rs","byte_start":17386,"byte_end":17427,"line_start":118,"line_end":118,"column_start":1,"column_end":42}}]},{"kind":"Struct","id":{"krate":0,"index":2257},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\error.rs","byte_start":18296,"byte_end":18309,"line_start":142,"line_end":142,"column_start":12,"column_end":25},"name":"DecodingError","qualname":"::error::DecodingError","value":"DecodingError {  }","parent":null,"children":[{"krate":0,"index":2258},{"krate":0,"index":2259}],"decl_id":null,"docs":" An error was encountered while decoding an image.","sig":null,"attributes":[{"value":"/ An error was encountered while decoding an image.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\error.rs","byte_start":18003,"byte_end":18056,"line_start":135,"line_end":135,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\error.rs","byte_start":18057,"byte_end":18060,"line_start":136,"line_end":136,"column_start":1,"column_end":4}},{"value":"/ This is used as an opaque representation for the [`ImageError::Decoding`] variant. See its","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\error.rs","byte_start":18061,"byte_end":18155,"line_start":137,"line_end":137,"column_start":1,"column_end":95}},{"value":"/ documentation for more information.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\error.rs","byte_start":18156,"byte_end":18195,"line_start":138,"line_end":138,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\error.rs","byte_start":18196,"byte_end":18199,"line_start":139,"line_end":139,"column_start":1,"column_end":4}},{"value":"/ [`ImageError::Decoding`]: enum.ImageError.html#variant.Decoding","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\error.rs","byte_start":18200,"byte_end":18267,"line_start":140,"line_end":140,"column_start":1,"column_end":68}}]},{"kind":"Struct","id":{"krate":0,"index":2262},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\error.rs","byte_start":18709,"byte_end":18719,"line_start":154,"line_end":154,"column_start":12,"column_end":22},"name":"LimitError","qualname":"::error::LimitError","value":"LimitError {  }","parent":null,"children":[{"krate":0,"index":2263}],"decl_id":null,"docs":" Completing the operation would have required more resources than allowed.","sig":null,"attributes":[{"value":"/ Completing the operation would have required more resources than allowed.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\error.rs","byte_start":18398,"byte_end":18475,"line_start":147,"line_end":147,"column_start":1,"column_end":78}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\error.rs","byte_start":18476,"byte_end":18479,"line_start":148,"line_end":148,"column_start":1,"column_end":4}},{"value":"/ This is used as an opaque representation for the [`ImageError::Limits`] variant. See its","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\error.rs","byte_start":18480,"byte_end":18572,"line_start":149,"line_end":149,"column_start":1,"column_end":93}},{"value":"/ documentation for more information.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\error.rs","byte_start":18573,"byte_end":18612,"line_start":150,"line_end":150,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\error.rs","byte_start":18613,"byte_end":18616,"line_start":151,"line_end":151,"column_start":1,"column_end":4}},{"value":"/ [`ImageError::Limits`]: enum.ImageError.html#variant.Limits","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\error.rs","byte_start":18617,"byte_end":18680,"line_start":152,"line_end":152,"column_start":1,"column_end":64}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2267},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\error.rs","byte_start":19251,"byte_end":19265,"line_start":167,"line_end":167,"column_start":5,"column_end":19},"name":"DimensionError","qualname":"::error::LimitErrorKind::DimensionError","value":"LimitErrorKind::DimensionError","parent":{"krate":0,"index":2266},"children":[],"decl_id":null,"docs":" The resulting image exceed dimension limits in either direction.\n","sig":null,"attributes":[{"value":"/ The resulting image exceed dimension limits in either direction.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\error.rs","byte_start":19178,"byte_end":19246,"line_start":166,"line_end":166,"column_start":5,"column_end":73}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2269},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\error.rs","byte_start":19349,"byte_end":19367,"line_start":169,"line_end":169,"column_start":5,"column_end":23},"name":"InsufficientMemory","qualname":"::error::LimitErrorKind::InsufficientMemory","value":"LimitErrorKind::InsufficientMemory","parent":{"krate":0,"index":2266},"children":[],"decl_id":null,"docs":" The operation would have performed an allocation larger than allowed.\n","sig":null,"attributes":[{"value":"/ The operation would have performed an allocation larger than allowed.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\error.rs","byte_start":19271,"byte_end":19344,"line_start":168,"line_end":168,"column_start":5,"column_end":78}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2271},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\error.rs","byte_start":19451,"byte_end":19466,"line_start":172,"line_end":172,"column_start":5,"column_end":20},"name":"__NonExhaustive","qualname":"::error::LimitErrorKind::__NonExhaustive","value":"LimitErrorKind::__NonExhaustive(NonExhaustiveMarker)","parent":{"krate":0,"index":2266},"children":[],"decl_id":null,"docs":" Do not use this, not part of stability guarantees.\n","sig":null,"attributes":[{"value":"/ Do not use this, not part of stability guarantees.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\error.rs","byte_start":19392,"byte_end":19446,"line_start":171,"line_end":171,"column_start":5,"column_end":59}}]},{"kind":"Enum","id":{"krate":0,"index":2266},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\error.rs","byte_start":19157,"byte_end":19171,"line_start":165,"line_end":165,"column_start":10,"column_end":24},"name":"LimitErrorKind","qualname":"::error::LimitErrorKind","value":"pub enum LimitErrorKind {\n\n    /// The resulting image exceed dimension limits in either direction.\n    DimensionError,\n\n    /// The operation would have performed an allocation larger than allowed.\n    InsufficientMemory,\n\n    #[doc(hidden)]\n    /// Do not use this, not part of stability guarantees.\n    __NonExhaustive(NonExhaustiveMarker),\n}","parent":null,"children":[{"krate":0,"index":2267},{"krate":0,"index":2269},{"krate":0,"index":2271}],"decl_id":null,"docs":" Indicates the limit that prevented an operation from completing.","sig":null,"attributes":[{"value":"/ Indicates the limit that prevented an operation from completing.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\error.rs","byte_start":18790,"byte_end":18858,"line_start":159,"line_end":159,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\error.rs","byte_start":18859,"byte_end":18862,"line_start":160,"line_end":160,"column_start":1,"column_end":4}},{"value":"/ Note that this enumeration is not exhaustive and may in the future be extended to provide more","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\error.rs","byte_start":18863,"byte_end":18961,"line_start":161,"line_end":161,"column_start":1,"column_end":99}},{"value":"/ detailed information or to incorporate other resources types.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\error.rs","byte_start":18962,"byte_end":19027,"line_start":162,"line_end":162,"column_start":1,"column_end":66}},{"value":"allow(missing_copy_implementations)","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\error.rs","byte_start":19073,"byte_end":19111,"line_start":164,"line_end":164,"column_start":1,"column_end":39}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2289},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\error.rs","byte_start":19653,"byte_end":19658,"line_start":179,"line_end":179,"column_start":5,"column_end":10},"name":"Exact","qualname":"::error::ImageFormatHint::Exact","value":"ImageFormatHint::Exact(ImageFormat)","parent":{"krate":0,"index":2288},"children":[],"decl_id":null,"docs":" The format is known exactly.\n","sig":null,"attributes":[{"value":"/ The format is known exactly.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\error.rs","byte_start":19616,"byte_end":19648,"line_start":178,"line_end":178,"column_start":5,"column_end":37}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2292},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\error.rs","byte_start":19726,"byte_end":19730,"line_start":182,"line_end":182,"column_start":5,"column_end":9},"name":"Name","qualname":"::error::ImageFormatHint::Name","value":"ImageFormatHint::Name(String)","parent":{"krate":0,"index":2288},"children":[],"decl_id":null,"docs":" The format can be identified by a name.\n","sig":null,"attributes":[{"value":"/ The format can be identified by a name.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\error.rs","byte_start":19678,"byte_end":19721,"line_start":181,"line_end":181,"column_start":5,"column_end":48}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2295},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\error.rs","byte_start":19802,"byte_end":19815,"line_start":185,"line_end":185,"column_start":5,"column_end":18},"name":"PathExtension","qualname":"::error::ImageFormatHint::PathExtension","value":"ImageFormatHint::PathExtension(std::path::PathBuf)","parent":{"krate":0,"index":2288},"children":[],"decl_id":null,"docs":" A common path extension for the format is known.\n","sig":null,"attributes":[{"value":"/ A common path extension for the format is known.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\error.rs","byte_start":19745,"byte_end":19797,"line_start":184,"line_end":184,"column_start":5,"column_end":57}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2298},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\error.rs","byte_start":19902,"byte_end":19909,"line_start":188,"line_end":188,"column_start":5,"column_end":12},"name":"Unknown","qualname":"::error::ImageFormatHint::Unknown","value":"ImageFormatHint::Unknown","parent":{"krate":0,"index":2288},"children":[],"decl_id":null,"docs":" The format is not known or could not be determined.\n","sig":null,"attributes":[{"value":"/ The format is not known or could not be determined.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\error.rs","byte_start":19842,"byte_end":19897,"line_start":187,"line_end":187,"column_start":5,"column_end":60}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2300},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\error.rs","byte_start":19935,"byte_end":19950,"line_start":191,"line_end":191,"column_start":5,"column_end":20},"name":"__NonExhaustive","qualname":"::error::ImageFormatHint::__NonExhaustive","value":"ImageFormatHint::__NonExhaustive(NonExhaustiveMarker)","parent":{"krate":0,"index":2288},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":2288},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\error.rs","byte_start":19594,"byte_end":19609,"line_start":177,"line_end":177,"column_start":10,"column_end":25},"name":"ImageFormatHint","qualname":"::error::ImageFormatHint","value":"pub enum ImageFormatHint {\n\n    /// The format is known exactly.\n    Exact(ImageFormat),\n\n    /// The format can be identified by a name.\n    Name(String),\n\n    /// A common path extension for the format is known.\n    PathExtension(std::path::PathBuf),\n\n    /// The format is not known or could not be determined.\n    Unknown,\n\n    #[doc(hidden)]\n    __NonExhaustive(NonExhaustiveMarker),\n}","parent":null,"children":[{"krate":0,"index":2289},{"krate":0,"index":2292},{"krate":0,"index":2295},{"krate":0,"index":2298},{"krate":0,"index":2300}],"decl_id":null,"docs":" A best effort representation for image formats.\n","sig":null,"attributes":[{"value":"/ A best effort representation for image formats.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\error.rs","byte_start":19492,"byte_end":19543,"line_start":175,"line_end":175,"column_start":1,"column_end":52}}]},{"kind":"Method","id":{"krate":0,"index":64},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\error.rs","byte_start":20222,"byte_end":20242,"line_start":199,"line_end":199,"column_start":12,"column_end":32},"name":"from_format_and_kind","qualname":"<UnsupportedError>::from_format_and_kind","value":"pub fn from_format_and_kind(ImageFormatHint, UnsupportedErrorKind) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create an `UnsupportedError` for an image with details on the unsupported feature.","sig":null,"attributes":[{"value":"/ Create an `UnsupportedError` for an image with details on the unsupported feature.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\error.rs","byte_start":20004,"byte_end":20090,"line_start":195,"line_end":195,"column_start":5,"column_end":91}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\error.rs","byte_start":20095,"byte_end":20098,"line_start":196,"line_end":196,"column_start":5,"column_end":8}},{"value":"/ If the operation was not connected to a particular image format then the hint may be","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\error.rs","byte_start":20103,"byte_end":20191,"line_start":197,"line_end":197,"column_start":5,"column_end":93}},{"value":"/ `Unknown`.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\error.rs","byte_start":20196,"byte_end":20210,"line_start":198,"line_end":198,"column_start":5,"column_end":19}}]},{"kind":"Method","id":{"krate":0,"index":65},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\error.rs","byte_start":20470,"byte_end":20474,"line_start":207,"line_end":207,"column_start":12,"column_end":16},"name":"kind","qualname":"<UnsupportedError>::kind","value":"pub fn kind(&Self) -> UnsupportedErrorKind","parent":null,"children":[],"decl_id":null,"docs":" Returns the corresponding `UnsupportedErrorKind` of the error.\n","sig":null,"attributes":[{"value":"/ Returns the corresponding `UnsupportedErrorKind` of the error.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\error.rs","byte_start":20392,"byte_end":20458,"line_start":206,"line_end":206,"column_start":5,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":66},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\error.rs","byte_start":20613,"byte_end":20624,"line_start":212,"line_end":212,"column_start":12,"column_end":23},"name":"format_hint","qualname":"<UnsupportedError>::format_hint","value":"pub fn format_hint(&Self) -> ImageFormatHint","parent":null,"children":[],"decl_id":null,"docs":" Returns the image format associated with this error.\n","sig":null,"attributes":[{"value":"/ Returns the image format associated with this error.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\error.rs","byte_start":20545,"byte_end":20601,"line_start":211,"line_end":211,"column_start":5,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":68},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\error.rs","byte_start":20816,"byte_end":20819,"line_start":219,"line_end":219,"column_start":12,"column_end":15},"name":"new","qualname":"<DecodingError>::new","value":"pub fn new<impl Into<Box<dyn Error + Send + Sync>>: Into<Box<Error + Send +\n                                                             Sync>>>(ImageFormatHint,\n                                                                     impl Into<Box<dyn Error + Send + Sync>>)\n-> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a `DecodingError` that stems from an arbitrary error of an underlying decoder.\n","sig":null,"attributes":[{"value":"/ Create a `DecodingError` that stems from an arbitrary error of an underlying decoder.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\error.rs","byte_start":20715,"byte_end":20804,"line_start":218,"line_end":218,"column_start":5,"column_end":94}}]},{"kind":"Method","id":{"krate":0,"index":70},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\error.rs","byte_start":21187,"byte_end":21203,"line_start":232,"line_end":232,"column_start":12,"column_end":28},"name":"from_format_hint","qualname":"<DecodingError>::from_format_hint","value":"pub fn from_format_hint(ImageFormatHint) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a `DecodingError` for an image format.","sig":null,"attributes":[{"value":"/ Create a `DecodingError` for an image format.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\error.rs","byte_start":21031,"byte_end":21080,"line_start":229,"line_end":229,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\error.rs","byte_start":21085,"byte_end":21088,"line_start":230,"line_end":230,"column_start":5,"column_end":8}},{"value":"/ The error will not contain any further information but is very easy to create.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\error.rs","byte_start":21093,"byte_end":21175,"line_start":231,"line_end":231,"column_start":5,"column_end":87}}]},{"kind":"Method","id":{"krate":0,"index":71},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\error.rs","byte_start":21402,"byte_end":21413,"line_start":240,"line_end":240,"column_start":12,"column_end":23},"name":"format_hint","qualname":"<DecodingError>::format_hint","value":"pub fn format_hint(&Self) -> ImageFormatHint","parent":null,"children":[],"decl_id":null,"docs":" Returns the image format associated with this error.\n","sig":null,"attributes":[{"value":"/ Returns the image format associated with this error.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\error.rs","byte_start":21334,"byte_end":21390,"line_start":239,"line_end":239,"column_start":5,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":73},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\error.rs","byte_start":21606,"byte_end":21609,"line_start":247,"line_end":247,"column_start":12,"column_end":15},"name":"new","qualname":"<EncodingError>::new","value":"pub fn new<impl Into<Box<dyn Error + Send + Sync>>: Into<Box<Error + Send +\n                                                             Sync>>>(ImageFormatHint,\n                                                                     impl Into<Box<dyn Error + Send + Sync>>)\n-> Self","parent":null,"children":[],"decl_id":null,"docs":" Create an `EncodingError` that stems from an arbitrary error of an underlying encoder.\n","sig":null,"attributes":[{"value":"/ Create an `EncodingError` that stems from an arbitrary error of an underlying encoder.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\error.rs","byte_start":21504,"byte_end":21594,"line_start":246,"line_end":246,"column_start":5,"column_end":95}}]},{"kind":"Method","id":{"krate":0,"index":75},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\error.rs","byte_start":21978,"byte_end":21994,"line_start":260,"line_end":260,"column_start":12,"column_end":28},"name":"from_format_hint","qualname":"<EncodingError>::from_format_hint","value":"pub fn from_format_hint(ImageFormatHint) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create an `EncodingError` for an image format.","sig":null,"attributes":[{"value":"/ Create an `EncodingError` for an image format.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\error.rs","byte_start":21821,"byte_end":21871,"line_start":257,"line_end":257,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\error.rs","byte_start":21876,"byte_end":21879,"line_start":258,"line_end":258,"column_start":5,"column_end":8}},{"value":"/ The error will not contain any further information but is very easy to create.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\error.rs","byte_start":21884,"byte_end":21966,"line_start":259,"line_end":259,"column_start":5,"column_end":87}}]},{"kind":"Method","id":{"krate":0,"index":76},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\error.rs","byte_start":22192,"byte_end":22203,"line_start":268,"line_end":268,"column_start":12,"column_end":23},"name":"format_hint","qualname":"<EncodingError>::format_hint","value":"pub fn format_hint(&Self) -> ImageFormatHint","parent":null,"children":[],"decl_id":null,"docs":" Return the image format associated with this error.\n","sig":null,"attributes":[{"value":"/ Return the image format associated with this error.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\error.rs","byte_start":22125,"byte_end":22180,"line_start":267,"line_end":267,"column_start":5,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":78},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\error.rs","byte_start":22375,"byte_end":22384,"line_start":275,"line_end":275,"column_start":12,"column_end":21},"name":"from_kind","qualname":"<ParameterError>::from_kind","value":"pub fn from_kind(ParameterErrorKind) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Construct a `ParameterError` directly from a corresponding kind.\n","sig":null,"attributes":[{"value":"/ Construct a `ParameterError` directly from a corresponding kind.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\error.rs","byte_start":22295,"byte_end":22363,"line_start":274,"line_end":274,"column_start":5,"column_end":73}}]},{"kind":"Method","id":{"krate":0,"index":79},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\error.rs","byte_start":22591,"byte_end":22595,"line_start":283,"line_end":283,"column_start":12,"column_end":16},"name":"kind","qualname":"<ParameterError>::kind","value":"pub fn kind(&Self) -> ParameterErrorKind","parent":null,"children":[],"decl_id":null,"docs":" Returns the corresponding `ParameterErrorKind` of the error.\n","sig":null,"attributes":[{"value":"/ Returns the corresponding `ParameterErrorKind` of the error.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\error.rs","byte_start":22515,"byte_end":22579,"line_start":282,"line_end":282,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":81},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\error.rs","byte_start":22768,"byte_end":22777,"line_start":290,"line_end":290,"column_start":12,"column_end":21},"name":"from_kind","qualname":"<LimitError>::from_kind","value":"pub fn from_kind(LimitErrorKind) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Construct a generic `LimitError` directly from a corresponding kind.\n","sig":null,"attributes":[{"value":"/ Construct a generic `LimitError` directly from a corresponding kind.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\error.rs","byte_start":22684,"byte_end":22756,"line_start":289,"line_end":289,"column_start":5,"column_end":77}}]},{"kind":"Method","id":{"krate":0,"index":82},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\error.rs","byte_start":22942,"byte_end":22946,"line_start":297,"line_end":297,"column_start":12,"column_end":16},"name":"kind","qualname":"<LimitError>::kind","value":"pub fn kind(&Self) -> LimitErrorKind","parent":null,"children":[],"decl_id":null,"docs":" Returns the corresponding `LimitErrorKind` of the error.\n","sig":null,"attributes":[{"value":"/ Returns the corresponding `LimitErrorKind` of the error.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\error.rs","byte_start":22870,"byte_end":22930,"line_start":296,"line_end":296,"column_start":5,"column_end":65}}]},{"kind":"Type","id":{"krate":0,"index":91},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\error.rs","byte_start":23825,"byte_end":23836,"line_start":333,"line_end":333,"column_start":10,"column_end":21},"name":"ImageResult","qualname":"::error::ImageResult","value":"Result<T, ImageError>","parent":null,"children":[],"decl_id":null,"docs":" Result of an image decoding/encoding process\n","sig":null,"attributes":[{"value":"/ Result of an image decoding/encoding process","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\error.rs","byte_start":23767,"byte_end":23815,"line_start":332,"line_end":332,"column_start":1,"column_end":49}}]},{"kind":"Mod","id":{"krate":0,"index":117},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src/lib.rs","byte_start":5125,"byte_end":5131,"line_start":149,"line_end":149,"column_start":9,"column_end":15},"name":"buffer","qualname":"::buffer","value":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src/lib.rs","parent":null,"children":[{"krate":0,"index":118},{"krate":0,"index":119},{"krate":0,"index":120},{"krate":0,"index":121},{"krate":0,"index":122},{"krate":0,"index":123},{"krate":0,"index":124},{"krate":0,"index":125},{"krate":0,"index":126},{"krate":0,"index":127}],"decl_id":null,"docs":" Iterators and other auxiliary structure for the `ImageBuffer` type.\n","sig":null,"attributes":[{"value":"/ Iterators and other auxiliary structure for the `ImageBuffer` type.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src/lib.rs","byte_start":5045,"byte_end":5116,"line_start":148,"line_end":148,"column_start":1,"column_end":72}}]},{"kind":"Mod","id":{"krate":0,"index":128},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\math\\mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"math","qualname":"::math","value":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\math\\mod.rs","parent":null,"children":[{"krate":0,"index":129},{"krate":0,"index":143},{"krate":0,"index":147},{"krate":0,"index":148},{"krate":0,"index":149}],"decl_id":null,"docs":" Mathematical helper functions and types.\n","sig":null,"attributes":[{"value":"/ Mathematical helper functions and types.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\math\\mod.rs","byte_start":30469,"byte_end":30513,"line_start":1,"line_end":1,"column_start":1,"column_end":45}}]},{"kind":"Mod","id":{"krate":0,"index":129},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\math\\nq.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"nq","qualname":"::math::nq","value":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\math\\nq.rs","parent":null,"children":[{"krate":0,"index":130},{"krate":0,"index":132},{"krate":0,"index":139},{"krate":0,"index":141}],"decl_id":null,"docs":" NEUQUANT Neural-Net quantization algorithm by Anthony Dekker, 1994.\n See \"Kohonen neural networks for optimal colour quantization\"\n in \"Network: Computation in Neural Systems\" Vol. 5 (1994) pp 351-367.\n for a discussion of the algorithm.\n See also <https://scientificgems.wordpress.com/stuff/neuquant-fast-high-quality-image-quantization/>\n","sig":null,"attributes":[{"value":"/ NEUQUANT Neural-Net quantization algorithm by Anthony Dekker, 1994.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\math\\nq.rs","byte_start":30626,"byte_end":30697,"line_start":1,"line_end":1,"column_start":1,"column_end":72}},{"value":"/ See \"Kohonen neural networks for optimal colour quantization\"","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\math\\nq.rs","byte_start":30698,"byte_end":30763,"line_start":2,"line_end":2,"column_start":1,"column_end":66}},{"value":"/ in \"Network: Computation in Neural Systems\" Vol. 5 (1994) pp 351-367.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\math\\nq.rs","byte_start":30764,"byte_end":30837,"line_start":3,"line_end":3,"column_start":1,"column_end":74}},{"value":"/ for a discussion of the algorithm.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\math\\nq.rs","byte_start":30838,"byte_end":30876,"line_start":4,"line_end":4,"column_start":1,"column_end":39}},{"value":"/ See also <https://scientificgems.wordpress.com/stuff/neuquant-fast-high-quality-image-quantization/>","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\math\\nq.rs","byte_start":30877,"byte_end":30981,"line_start":5,"line_end":5,"column_start":1,"column_end":105}}]},{"kind":"Struct","id":{"krate":0,"index":130},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\math\\nq.rs","byte_start":33924,"byte_end":33932,"line_start":73,"line_end":73,"column_start":12,"column_end":20},"name":"NeuQuant","qualname":"::math::nq::NeuQuant","value":"NeuQuant {  }","parent":null,"children":[{"krate":0,"index":131}],"decl_id":null,"docs":" Neural network color quantizer","sig":null,"attributes":[{"value":"/ Neural network color quantizer","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\math\\nq.rs","byte_start":32167,"byte_end":32201,"line_start":33,"line_end":33,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\math\\nq.rs","byte_start":32202,"byte_end":32205,"line_start":34,"line_end":34,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\math\\nq.rs","byte_start":32206,"byte_end":32220,"line_start":35,"line_end":35,"column_start":1,"column_end":15}},{"value":"/ ```","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\math\\nq.rs","byte_start":32221,"byte_end":32228,"line_start":36,"line_end":36,"column_start":1,"column_end":8}},{"value":"/ use image::imageops::colorops::{index_colors, ColorMap};","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\math\\nq.rs","byte_start":32229,"byte_end":32289,"line_start":37,"line_end":37,"column_start":1,"column_end":61}},{"value":"/ use image::math::nq::NeuQuant;","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\math\\nq.rs","byte_start":32290,"byte_end":32324,"line_start":38,"line_end":38,"column_start":1,"column_end":35}},{"value":"/ use image::{ImageBuffer, Rgba, RgbaImage};","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\math\\nq.rs","byte_start":32325,"byte_end":32371,"line_start":39,"line_end":39,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\math\\nq.rs","byte_start":32372,"byte_end":32375,"line_start":40,"line_end":40,"column_start":1,"column_end":4}},{"value":"/ // Create simple color image with RGBA pixels.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\math\\nq.rs","byte_start":32376,"byte_end":32426,"line_start":41,"line_end":41,"column_start":1,"column_end":51}},{"value":"/ let (w, h) = (2, 2);","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\math\\nq.rs","byte_start":32427,"byte_end":32451,"line_start":42,"line_end":42,"column_start":1,"column_end":25}},{"value":"/ let red: Rgba<u8> = [255, 0, 0, 255].into();","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\math\\nq.rs","byte_start":32452,"byte_end":32500,"line_start":43,"line_end":43,"column_start":1,"column_end":49}},{"value":"/ let green: Rgba<u8> = [0, 255, 0, 255].into();","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\math\\nq.rs","byte_start":32501,"byte_end":32551,"line_start":44,"line_end":44,"column_start":1,"column_end":51}},{"value":"/ let blue: Rgba<u8> = [0, 0, 255, 255].into();","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\math\\nq.rs","byte_start":32552,"byte_end":32601,"line_start":45,"line_end":45,"column_start":1,"column_end":50}},{"value":"/ let white: Rgba<u8> = [255, 255, 255, 255].into();","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\math\\nq.rs","byte_start":32602,"byte_end":32656,"line_start":46,"line_end":46,"column_start":1,"column_end":55}},{"value":"/ let mut color_image = RgbaImage::new(w, h);","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\math\\nq.rs","byte_start":32657,"byte_end":32704,"line_start":47,"line_end":47,"column_start":1,"column_end":48}},{"value":"/ color_image.put_pixel(0, 0, red);","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\math\\nq.rs","byte_start":32705,"byte_end":32742,"line_start":48,"line_end":48,"column_start":1,"column_end":38}},{"value":"/ color_image.put_pixel(1, 0, green);","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\math\\nq.rs","byte_start":32743,"byte_end":32782,"line_start":49,"line_end":49,"column_start":1,"column_end":40}},{"value":"/ color_image.put_pixel(0, 1, blue);","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\math\\nq.rs","byte_start":32783,"byte_end":32821,"line_start":50,"line_end":50,"column_start":1,"column_end":39}},{"value":"/ color_image.put_pixel(1, 1, white);","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\math\\nq.rs","byte_start":32822,"byte_end":32861,"line_start":51,"line_end":51,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\math\\nq.rs","byte_start":32862,"byte_end":32865,"line_start":52,"line_end":52,"column_start":1,"column_end":4}},{"value":"/ // Create a `NeuQuant` colormap that will build an approximate color palette that best matches","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\math\\nq.rs","byte_start":32866,"byte_end":32964,"line_start":53,"line_end":53,"column_start":1,"column_end":99}},{"value":"/ // the original image.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\math\\nq.rs","byte_start":32965,"byte_end":32991,"line_start":54,"line_end":54,"column_start":1,"column_end":27}},{"value":"/ // Note, the NeuQuant algorithm is only designed to work with 6-8 bit output, so `colors`","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\math\\nq.rs","byte_start":32992,"byte_end":33085,"line_start":55,"line_end":55,"column_start":1,"column_end":94}},{"value":"/ // should be a power of 2 in the range [64, 256].","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\math\\nq.rs","byte_start":33086,"byte_end":33139,"line_start":56,"line_end":56,"column_start":1,"column_end":54}},{"value":"/ let pixels = color_image.clone().into_raw();","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\math\\nq.rs","byte_start":33140,"byte_end":33188,"line_start":57,"line_end":57,"column_start":1,"column_end":49}},{"value":"/ let cmap = NeuQuant::new(1, 256, &pixels);","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\math\\nq.rs","byte_start":33189,"byte_end":33235,"line_start":58,"line_end":58,"column_start":1,"column_end":47}},{"value":"/ // Map the original image through the color map to create an indexed image stored in a","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\math\\nq.rs","byte_start":33236,"byte_end":33326,"line_start":59,"line_end":59,"column_start":1,"column_end":91}},{"value":"/ // `GrayImage`.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\math\\nq.rs","byte_start":33327,"byte_end":33346,"line_start":60,"line_end":60,"column_start":1,"column_end":20}},{"value":"/ let palletized = index_colors(&color_image, &cmap);","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\math\\nq.rs","byte_start":33347,"byte_end":33402,"line_start":61,"line_end":61,"column_start":1,"column_end":56}},{"value":"/ // Map indexed image back `RgbaImage`.  Note the NeuQuant algorithm creates an approximation of","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\math\\nq.rs","byte_start":33403,"byte_end":33502,"line_start":62,"line_end":62,"column_start":1,"column_end":100}},{"value":"/ // the original colors, so even in this simple example the output is not pixel equivalent to","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\math\\nq.rs","byte_start":33503,"byte_end":33599,"line_start":63,"line_end":63,"column_start":1,"column_end":97}},{"value":"/ // the original.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\math\\nq.rs","byte_start":33600,"byte_end":33620,"line_start":64,"line_end":64,"column_start":1,"column_end":21}},{"value":"/ let mapped = ImageBuffer::from_fn(w, h, |x, y| -> Rgba<u8> {","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\math\\nq.rs","byte_start":33621,"byte_end":33685,"line_start":65,"line_end":65,"column_start":1,"column_end":65}},{"value":"/     let p = palletized.get_pixel(x, y);","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\math\\nq.rs","byte_start":33686,"byte_end":33729,"line_start":66,"line_end":66,"column_start":1,"column_end":44}},{"value":"/     cmap.lookup(p.0[0] as usize)","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\math\\nq.rs","byte_start":33730,"byte_end":33766,"line_start":67,"line_end":67,"column_start":1,"column_end":37}},{"value":"/         .expect(\"indexed color out-of-range\")","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\math\\nq.rs","byte_start":33767,"byte_end":33816,"line_start":68,"line_end":68,"column_start":1,"column_end":50}},{"value":"/         .into()","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\math\\nq.rs","byte_start":33817,"byte_end":33836,"line_start":69,"line_end":69,"column_start":1,"column_end":20}},{"value":"/ });","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\math\\nq.rs","byte_start":33837,"byte_end":33844,"line_start":70,"line_end":70,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\math\\nq.rs","byte_start":33845,"byte_end":33852,"line_start":71,"line_end":71,"column_start":1,"column_end":8}},{"value":"deprecated(note = \"Use the `color_quant` crate instead\")","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\math\\nq.rs","byte_start":33853,"byte_end":33912,"line_start":72,"line_end":72,"column_start":1,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":133},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\math\\nq.rs","byte_start":34451,"byte_end":34454,"line_start":87,"line_end":87,"column_start":12,"column_end":15},"name":"new","qualname":"<NeuQuant>::new","value":"pub fn new(i32, usize, &[u8]) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":134},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\math\\nq.rs","byte_start":34597,"byte_end":34601,"line_start":90,"line_end":90,"column_start":12,"column_end":16},"name":"init","qualname":"<NeuQuant>::init","value":"pub fn init(&mut Self, &[u8])","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":135},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\math\\nq.rs","byte_start":34679,"byte_end":34688,"line_start":93,"line_end":93,"column_start":12,"column_end":21},"name":"map_pixel","qualname":"<NeuQuant>::map_pixel","value":"pub fn map_pixel(&Self, &mut [u8])","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":136},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\math\\nq.rs","byte_start":34769,"byte_end":34777,"line_start":96,"line_end":96,"column_start":12,"column_end":20},"name":"index_of","qualname":"<NeuQuant>::index_of","value":"pub fn index_of(&Self, &[u8]) -> usize","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":137},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\math\\nq.rs","byte_start":34862,"byte_end":34868,"line_start":99,"line_end":99,"column_start":12,"column_end":18},"name":"lookup","qualname":"<NeuQuant>::lookup","value":"pub fn lookup(&Self, usize) -> Option<[u8; ]>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":143},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\math\\utils.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"utils","qualname":"::math::utils","value":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\math\\utils.rs","parent":null,"children":[{"krate":0,"index":144},{"krate":0,"index":146}],"decl_id":null,"docs":" Shared mathematical utility functions.\n","sig":null,"attributes":[{"value":"/ Shared mathematical utility functions.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\math\\utils.rs","byte_start":35241,"byte_end":35283,"line_start":1,"line_end":1,"column_start":1,"column_end":43}}]},{"kind":"Function","id":{"krate":0,"index":144},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\math\\utils.rs","byte_start":35542,"byte_end":35547,"line_start":14,"line_end":14,"column_start":8,"column_end":13},"name":"clamp","qualname":"::math::utils::clamp","value":"pub fn clamp<N>(N, N, N) -> N where N: PartialOrd","parent":null,"children":[],"decl_id":null,"docs":" Cut value to be inside given range","sig":null,"attributes":[{"value":"/ Cut value to be inside given range","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\math\\utils.rs","byte_start":35285,"byte_end":35323,"line_start":3,"line_end":3,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\math\\utils.rs","byte_start":35324,"byte_end":35327,"line_start":4,"line_end":4,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\math\\utils.rs","byte_start":35328,"byte_end":35335,"line_start":5,"line_end":5,"column_start":1,"column_end":8}},{"value":"/ use image::math::utils;","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\math\\utils.rs","byte_start":35336,"byte_end":35363,"line_start":6,"line_end":6,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\math\\utils.rs","byte_start":35364,"byte_end":35367,"line_start":7,"line_end":7,"column_start":1,"column_end":4}},{"value":"/ assert_eq!(utils::clamp(-5, 0, 10),  0);","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\math\\utils.rs","byte_start":35368,"byte_end":35412,"line_start":8,"line_end":8,"column_start":1,"column_end":45}},{"value":"/ assert_eq!(utils::clamp( 6, 0, 10),  6);","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\math\\utils.rs","byte_start":35413,"byte_end":35457,"line_start":9,"line_end":9,"column_start":1,"column_end":45}},{"value":"/ assert_eq!(utils::clamp(15, 0, 10), 10);","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\math\\utils.rs","byte_start":35458,"byte_end":35502,"line_start":10,"line_end":10,"column_start":1,"column_end":45}},{"value":"/ ```","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\math\\utils.rs","byte_start":35503,"byte_end":35510,"line_start":11,"line_end":11,"column_start":1,"column_end":8}},{"value":"inline","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\math\\utils.rs","byte_start":35511,"byte_end":35520,"line_start":12,"line_end":12,"column_start":1,"column_end":10}},{"value":"deprecated","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\math\\utils.rs","byte_start":35521,"byte_end":35534,"line_start":13,"line_end":13,"column_start":1,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":2314},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\math\\rect.rs","byte_start":39045,"byte_end":39049,"line_start":3,"line_end":3,"column_start":12,"column_end":16},"name":"Rect","qualname":"::math::rect::Rect","value":"Rect { x, y, width, height }","parent":null,"children":[{"krate":0,"index":2315},{"krate":0,"index":2316},{"krate":0,"index":2317},{"krate":0,"index":2318}],"decl_id":null,"docs":" A Rectangle defined by its top left corner, width and height.\n","sig":null,"attributes":[{"value":"/ A Rectangle defined by its top left corner, width and height.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\math\\rect.rs","byte_start":38917,"byte_end":38982,"line_start":1,"line_end":1,"column_start":1,"column_end":66}}]},{"kind":"Field","id":{"krate":0,"index":2315},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\math\\rect.rs","byte_start":39109,"byte_end":39110,"line_start":5,"line_end":5,"column_start":9,"column_end":10},"name":"x","qualname":"::math::rect::Rect::x","value":"u32","parent":{"krate":0,"index":2314},"children":[],"decl_id":null,"docs":" The x coordinate of the top left corner.\n","sig":null,"attributes":[{"value":"/ The x coordinate of the top left corner.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\math\\rect.rs","byte_start":39056,"byte_end":39100,"line_start":4,"line_end":4,"column_start":5,"column_end":49}}]},{"kind":"Field","id":{"krate":0,"index":2316},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\math\\rect.rs","byte_start":39174,"byte_end":39175,"line_start":7,"line_end":7,"column_start":9,"column_end":10},"name":"y","qualname":"::math::rect::Rect::y","value":"u32","parent":{"krate":0,"index":2314},"children":[],"decl_id":null,"docs":" The y coordinate of the top left corner.\n","sig":null,"attributes":[{"value":"/ The y coordinate of the top left corner.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\math\\rect.rs","byte_start":39121,"byte_end":39165,"line_start":6,"line_end":6,"column_start":5,"column_end":49}}]},{"kind":"Field","id":{"krate":0,"index":2317},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\math\\rect.rs","byte_start":39221,"byte_end":39226,"line_start":9,"line_end":9,"column_start":9,"column_end":14},"name":"width","qualname":"::math::rect::Rect::width","value":"u32","parent":{"krate":0,"index":2314},"children":[],"decl_id":null,"docs":" The rectangle's width.\n","sig":null,"attributes":[{"value":"/ The rectangle's width.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\math\\rect.rs","byte_start":39186,"byte_end":39212,"line_start":8,"line_end":8,"column_start":5,"column_end":31}}]},{"kind":"Field","id":{"krate":0,"index":2318},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\math\\rect.rs","byte_start":39273,"byte_end":39279,"line_start":11,"line_end":11,"column_start":9,"column_end":15},"name":"height","qualname":"::math::rect::Rect::height","value":"u32","parent":{"krate":0,"index":2314},"children":[],"decl_id":null,"docs":" The rectangle's height.\n","sig":null,"attributes":[{"value":"/ The rectangle's height.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\math\\rect.rs","byte_start":39237,"byte_end":39264,"line_start":10,"line_end":10,"column_start":5,"column_end":32}}]},{"kind":"Mod","id":{"krate":0,"index":150},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\imageops\\mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"imageops","qualname":"::imageops","value":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\imageops\\mod.rs","parent":null,"children":[{"krate":0,"index":151},{"krate":0,"index":152},{"krate":0,"index":153},{"krate":0,"index":154},{"krate":0,"index":155},{"krate":0,"index":156},{"krate":0,"index":157},{"krate":0,"index":158},{"krate":0,"index":159},{"krate":0,"index":160},{"krate":0,"index":161},{"krate":0,"index":162},{"krate":0,"index":163},{"krate":0,"index":164},{"krate":0,"index":3612},{"krate":0,"index":165},{"krate":0,"index":3614},{"krate":0,"index":166},{"krate":0,"index":3616},{"krate":0,"index":167},{"krate":0,"index":3618},{"krate":0,"index":168},{"krate":0,"index":3620},{"krate":0,"index":169},{"krate":0,"index":170},{"krate":0,"index":171},{"krate":0,"index":172},{"krate":0,"index":173},{"krate":0,"index":174},{"krate":0,"index":175},{"krate":0,"index":176},{"krate":0,"index":177},{"krate":0,"index":178},{"krate":0,"index":179},{"krate":0,"index":180},{"krate":0,"index":181},{"krate":0,"index":182},{"krate":0,"index":183},{"krate":0,"index":184},{"krate":0,"index":185},{"krate":0,"index":186},{"krate":0,"index":187},{"krate":0,"index":188},{"krate":0,"index":189},{"krate":0,"index":190},{"krate":0,"index":191},{"krate":0,"index":192},{"krate":0,"index":193},{"krate":0,"index":194},{"krate":0,"index":195},{"krate":0,"index":196},{"krate":0,"index":197},{"krate":0,"index":3672},{"krate":0,"index":198},{"krate":0,"index":199},{"krate":0,"index":240},{"krate":0,"index":328},{"krate":0,"index":420},{"krate":0,"index":422},{"krate":0,"index":424},{"krate":0,"index":426},{"krate":0,"index":427},{"krate":0,"index":430},{"krate":0,"index":433},{"krate":0,"index":438},{"krate":0,"index":443}],"decl_id":null,"docs":" Image Processing Functions\n","sig":null,"attributes":[{"value":"/ Image Processing Functions","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\imageops\\mod.rs","byte_start":39289,"byte_end":39319,"line_start":1,"line_end":1,"column_start":1,"column_end":31}}]},{"kind":"Function","id":{"krate":0,"index":209},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\imageops\\affine.rs","byte_start":51814,"byte_end":51822,"line_start":9,"line_end":9,"column_start":8,"column_end":16},"name":"rotate90","qualname":"::imageops::affine::rotate90","value":"pub fn rotate90<I: GenericImageView>(&I)\n-> ImageBuffer<I::Pixel, Vec<<I::Pixel as Pixel>::Subpixel>> where\nI::Pixel: 'static","parent":null,"children":[],"decl_id":null,"docs":" Rotate an image 90 degrees clockwise.\n","sig":null,"attributes":[{"value":"/ Rotate an image 90 degrees clockwise.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\imageops\\affine.rs","byte_start":51765,"byte_end":51806,"line_start":8,"line_end":8,"column_start":1,"column_end":42}}]},{"kind":"Function","id":{"krate":0,"index":211},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\imageops\\affine.rs","byte_start":52154,"byte_end":52163,"line_start":21,"line_end":21,"column_start":8,"column_end":17},"name":"rotate180","qualname":"::imageops::affine::rotate180","value":"pub fn rotate180<I: GenericImageView>(&I)\n-> ImageBuffer<I::Pixel, Vec<<I::Pixel as Pixel>::Subpixel>> where\nI::Pixel: 'static","parent":null,"children":[],"decl_id":null,"docs":" Rotate an image 180 degrees clockwise.\n","sig":null,"attributes":[{"value":"/ Rotate an image 180 degrees clockwise.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\imageops\\affine.rs","byte_start":52104,"byte_end":52146,"line_start":20,"line_end":20,"column_start":1,"column_end":43}}]},{"kind":"Function","id":{"krate":0,"index":213},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\imageops\\affine.rs","byte_start":52496,"byte_end":52505,"line_start":33,"line_end":33,"column_start":8,"column_end":17},"name":"rotate270","qualname":"::imageops::affine::rotate270","value":"pub fn rotate270<I: GenericImageView>(&I)\n-> ImageBuffer<I::Pixel, Vec<<I::Pixel as Pixel>::Subpixel>> where\nI::Pixel: 'static","parent":null,"children":[],"decl_id":null,"docs":" Rotate an image 270 degrees clockwise.\n","sig":null,"attributes":[{"value":"/ Rotate an image 270 degrees clockwise.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\imageops\\affine.rs","byte_start":52446,"byte_end":52488,"line_start":32,"line_end":32,"column_start":1,"column_end":43}}]},{"kind":"Function","id":{"krate":0,"index":215},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\imageops\\affine.rs","byte_start":52893,"byte_end":52904,"line_start":45,"line_end":45,"column_start":8,"column_end":19},"name":"rotate90_in","qualname":"::imageops::affine::rotate90_in","value":"pub fn rotate90_in<I, Container>(&I, &mut ImageBuffer<I::Pixel, Container>)\n-> crate::ImageResult<()> where I: GenericImageView, I::Pixel: 'static,\nContainer: std::ops::DerefMut<Target = [<I::Pixel as Pixel>::Subpixel]>","parent":null,"children":[],"decl_id":null,"docs":" Rotate an image 90 degrees clockwise and put the result into the destination [`ImageBuffer`].\n","sig":null,"attributes":[{"value":"/ Rotate an image 90 degrees clockwise and put the result into the destination [`ImageBuffer`].","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\imageops\\affine.rs","byte_start":52788,"byte_end":52885,"line_start":44,"line_end":44,"column_start":1,"column_end":98}}]},{"kind":"Function","id":{"krate":0,"index":218},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\imageops\\affine.rs","byte_start":53678,"byte_end":53690,"line_start":70,"line_end":70,"column_start":8,"column_end":20},"name":"rotate180_in","qualname":"::imageops::affine::rotate180_in","value":"pub fn rotate180_in<I, Container>(&I, &mut ImageBuffer<I::Pixel, Container>)\n-> crate::ImageResult<()> where I: GenericImageView, I::Pixel: 'static,\nContainer: std::ops::DerefMut<Target = [<I::Pixel as Pixel>::Subpixel]>","parent":null,"children":[],"decl_id":null,"docs":" Rotate an image 180 degrees clockwise and put the result into the destination [`ImageBuffer`].\n","sig":null,"attributes":[{"value":"/ Rotate an image 180 degrees clockwise and put the result into the destination [`ImageBuffer`].","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\imageops\\affine.rs","byte_start":53572,"byte_end":53670,"line_start":69,"line_end":69,"column_start":1,"column_end":99}}]},{"kind":"Function","id":{"krate":0,"index":221},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\imageops\\affine.rs","byte_start":54473,"byte_end":54485,"line_start":95,"line_end":95,"column_start":8,"column_end":20},"name":"rotate270_in","qualname":"::imageops::affine::rotate270_in","value":"pub fn rotate270_in<I, Container>(&I, &mut ImageBuffer<I::Pixel, Container>)\n-> crate::ImageResult<()> where I: GenericImageView, I::Pixel: 'static,\nContainer: std::ops::DerefMut<Target = [<I::Pixel as Pixel>::Subpixel]>","parent":null,"children":[],"decl_id":null,"docs":" Rotate an image 270 degrees clockwise and put the result into the destination [`ImageBuffer`].\n","sig":null,"attributes":[{"value":"/ Rotate an image 270 degrees clockwise and put the result into the destination [`ImageBuffer`].","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\imageops\\affine.rs","byte_start":54367,"byte_end":54465,"line_start":94,"line_end":94,"column_start":1,"column_end":99}}]},{"kind":"Function","id":{"krate":0,"index":224},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\imageops\\affine.rs","byte_start":55191,"byte_end":55206,"line_start":120,"line_end":120,"column_start":8,"column_end":23},"name":"flip_horizontal","qualname":"::imageops::affine::flip_horizontal","value":"pub fn flip_horizontal<I: GenericImageView>(&I)\n-> ImageBuffer<I::Pixel, Vec<<I::Pixel as Pixel>::Subpixel>> where\nI::Pixel: 'static","parent":null,"children":[],"decl_id":null,"docs":" Flip an image horizontally\n","sig":null,"attributes":[{"value":"/ Flip an image horizontally","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\imageops\\affine.rs","byte_start":55153,"byte_end":55183,"line_start":119,"line_end":119,"column_start":1,"column_end":31}}]},{"kind":"Function","id":{"krate":0,"index":226},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\imageops\\affine.rs","byte_start":55531,"byte_end":55544,"line_start":132,"line_end":132,"column_start":8,"column_end":21},"name":"flip_vertical","qualname":"::imageops::affine::flip_vertical","value":"pub fn flip_vertical<I: GenericImageView>(&I)\n-> ImageBuffer<I::Pixel, Vec<<I::Pixel as Pixel>::Subpixel>> where\nI::Pixel: 'static","parent":null,"children":[],"decl_id":null,"docs":" Flip an image vertically\n","sig":null,"attributes":[{"value":"/ Flip an image vertically","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\imageops\\affine.rs","byte_start":55495,"byte_end":55523,"line_start":131,"line_end":131,"column_start":1,"column_end":29}}]},{"kind":"Function","id":{"krate":0,"index":228},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\imageops\\affine.rs","byte_start":55926,"byte_end":55944,"line_start":144,"line_end":144,"column_start":8,"column_end":26},"name":"flip_horizontal_in","qualname":"::imageops::affine::flip_horizontal_in","value":"pub fn flip_horizontal_in<I,\n                          Container>(&I,\n                                     &mut ImageBuffer<I::Pixel, Container>)\n-> crate::ImageResult<()> where I: GenericImageView, I::Pixel: 'static,\nContainer: std::ops::DerefMut<Target = [<I::Pixel as Pixel>::Subpixel]>","parent":null,"children":[],"decl_id":null,"docs":" Flip an image horizontally and put the result into the destination [`ImageBuffer`].\n","sig":null,"attributes":[{"value":"/ Flip an image horizontally and put the result into the destination [`ImageBuffer`].","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\imageops\\affine.rs","byte_start":55831,"byte_end":55918,"line_start":143,"line_end":143,"column_start":1,"column_end":88}}]},{"kind":"Function","id":{"krate":0,"index":231},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\imageops\\affine.rs","byte_start":56705,"byte_end":56721,"line_start":169,"line_end":169,"column_start":8,"column_end":24},"name":"flip_vertical_in","qualname":"::imageops::affine::flip_vertical_in","value":"pub fn flip_vertical_in<I,\n                        Container>(&I, &mut ImageBuffer<I::Pixel, Container>)\n-> crate::ImageResult<()> where I: GenericImageView, I::Pixel: 'static,\nContainer: std::ops::DerefMut<Target = [<I::Pixel as Pixel>::Subpixel]>","parent":null,"children":[],"decl_id":null,"docs":" Flip an image vertically and put the result into the destination [`ImageBuffer`].\n","sig":null,"attributes":[{"value":"/ Flip an image vertically and put the result into the destination [`ImageBuffer`].","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\imageops\\affine.rs","byte_start":56612,"byte_end":56697,"line_start":168,"line_end":168,"column_start":1,"column_end":86}}]},{"kind":"Function","id":{"krate":0,"index":234},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\imageops\\affine.rs","byte_start":57448,"byte_end":57466,"line_start":194,"line_end":194,"column_start":8,"column_end":26},"name":"rotate180_in_place","qualname":"::imageops::affine::rotate180_in_place","value":"pub fn rotate180_in_place<I: GenericImage>(&mut I)","parent":null,"children":[],"decl_id":null,"docs":" Rotate an image 180 degrees clockwise in place.\n","sig":null,"attributes":[{"value":"/ Rotate an image 180 degrees clockwise in place.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\imageops\\affine.rs","byte_start":57389,"byte_end":57440,"line_start":193,"line_end":193,"column_start":1,"column_end":52}}]},{"kind":"Function","id":{"krate":0,"index":236},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\imageops\\affine.rs","byte_start":58246,"byte_end":58270,"line_start":225,"line_end":225,"column_start":8,"column_end":32},"name":"flip_horizontal_in_place","qualname":"::imageops::affine::flip_horizontal_in_place","value":"pub fn flip_horizontal_in_place<I: GenericImage>(&mut I)","parent":null,"children":[],"decl_id":null,"docs":" Flip an image horizontally in place.\n","sig":null,"attributes":[{"value":"/ Flip an image horizontally in place.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\imageops\\affine.rs","byte_start":58198,"byte_end":58238,"line_start":224,"line_end":224,"column_start":1,"column_end":41}}]},{"kind":"Function","id":{"krate":0,"index":238},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\imageops\\affine.rs","byte_start":58676,"byte_end":58698,"line_start":240,"line_end":240,"column_start":8,"column_end":30},"name":"flip_vertical_in_place","qualname":"::imageops::affine::flip_vertical_in_place","value":"pub fn flip_vertical_in_place<I: GenericImage>(&mut I)","parent":null,"children":[],"decl_id":null,"docs":" Flip an image vertically in place.\n","sig":null,"attributes":[{"value":"/ Flip an image vertically in place.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\imageops\\affine.rs","byte_start":58630,"byte_end":58668,"line_start":239,"line_end":239,"column_start":1,"column_end":39}}]},{"kind":"Mod","id":{"krate":0,"index":240},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\imageops\\colorops.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"colorops","qualname":"::imageops::colorops","value":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\imageops\\colorops.rs","parent":null,"children":[{"krate":0,"index":241},{"krate":0,"index":242},{"krate":0,"index":243},{"krate":0,"index":244},{"krate":0,"index":245},{"krate":0,"index":246},{"krate":0,"index":247},{"krate":0,"index":3698},{"krate":0,"index":248},{"krate":0,"index":3700},{"krate":0,"index":249},{"krate":0,"index":250},{"krate":0,"index":251},{"krate":0,"index":252},{"krate":0,"index":253},{"krate":0,"index":254},{"krate":0,"index":255},{"krate":0,"index":256},{"krate":0,"index":257},{"krate":0,"index":258},{"krate":0,"index":260},{"krate":0,"index":262},{"krate":0,"index":264},{"krate":0,"index":269},{"krate":0,"index":272},{"krate":0,"index":278},{"krate":0,"index":282},{"krate":0,"index":287},{"krate":0,"index":290},{"krate":0,"index":2334},{"krate":0,"index":2337},{"krate":0,"index":2336},{"krate":0,"index":296},{"krate":0,"index":302},{"krate":0,"index":309},{"krate":0,"index":316},{"krate":0,"index":320},{"krate":0,"index":325}],"decl_id":null,"docs":" Functions for altering and converting the color of pixelbufs\n","sig":null,"attributes":[{"value":"/ Functions for altering and converting the color of pixelbufs","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\imageops\\colorops.rs","byte_start":63651,"byte_end":63715,"line_start":1,"line_end":1,"column_start":1,"column_end":65}}]},{"kind":"Function","id":{"krate":0,"index":260},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\imageops\\colorops.rs","byte_start":64124,"byte_end":64133,"line_start":17,"line_end":17,"column_start":8,"column_end":17},"name":"grayscale","qualname":"::imageops::colorops::grayscale","value":"pub fn grayscale<I: GenericImageView>(&I)\n-> ImageBuffer<Luma<Subpixel<I>>, Vec<Subpixel<I>>> where\nSubpixel<I>: 'static, <Subpixel<I> as Num>::FromStrRadixErr: 'static","parent":null,"children":[],"decl_id":null,"docs":" Convert the supplied image to grayscale\n","sig":null,"attributes":[{"value":"/ Convert the supplied image to grayscale","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\imageops\\colorops.rs","byte_start":64073,"byte_end":64116,"line_start":16,"line_end":16,"column_start":1,"column_end":44}}]},{"kind":"Function","id":{"krate":0,"index":262},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\imageops\\colorops.rs","byte_start":64665,"byte_end":64671,"line_start":37,"line_end":37,"column_start":8,"column_end":14},"name":"invert","qualname":"::imageops::colorops::invert","value":"pub fn invert<I: GenericImage>(&mut I)","parent":null,"children":[],"decl_id":null,"docs":" Invert each pixel within the supplied image.\n This function operates in place.\n","sig":null,"attributes":[{"value":"/ Invert each pixel within the supplied image.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\imageops\\colorops.rs","byte_start":64572,"byte_end":64620,"line_start":35,"line_end":35,"column_start":1,"column_end":49}},{"value":"/ This function operates in place.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\imageops\\colorops.rs","byte_start":64621,"byte_end":64657,"line_start":36,"line_end":36,"column_start":1,"column_end":37}}]},{"kind":"Function","id":{"krate":0,"index":264},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\imageops\\colorops.rs","byte_start":65195,"byte_end":65203,"line_start":55,"line_end":55,"column_start":8,"column_end":16},"name":"contrast","qualname":"::imageops::colorops::contrast","value":"pub fn contrast<I, P, S>(&I, f32) -> ImageBuffer<P, Vec<S>> where\nI: GenericImageView<Pixel = P>, P: Pixel<Subpixel = S> + 'static,\nS: Primitive + 'static","parent":null,"children":[],"decl_id":null,"docs":" Adjust the contrast of the supplied image.\n ```contrast``` is the amount to adjust the contrast by.\n Negative values decrease the contrast and positive values increase the contrast.","sig":null,"attributes":[{"value":"/ Adjust the contrast of the supplied image.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\imageops\\colorops.rs","byte_start":64935,"byte_end":64981,"line_start":50,"line_end":50,"column_start":1,"column_end":47}},{"value":"/ ```contrast``` is the amount to adjust the contrast by.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\imageops\\colorops.rs","byte_start":64982,"byte_end":65041,"line_start":51,"line_end":51,"column_start":1,"column_end":60}},{"value":"/ Negative values decrease the contrast and positive values increase the contrast.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\imageops\\colorops.rs","byte_start":65042,"byte_end":65126,"line_start":52,"line_end":52,"column_start":1,"column_end":85}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\imageops\\colorops.rs","byte_start":65127,"byte_end":65130,"line_start":53,"line_end":53,"column_start":1,"column_end":4}},{"value":"/ *[See also `contrast_in_place`.][contrast_in_place]*","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\imageops\\colorops.rs","byte_start":65131,"byte_end":65187,"line_start":54,"line_end":54,"column_start":1,"column_end":57}}]},{"kind":"Function","id":{"krate":0,"index":269},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\imageops\\colorops.rs","byte_start":66255,"byte_end":66272,"line_start":92,"line_end":92,"column_start":8,"column_end":25},"name":"contrast_in_place","qualname":"::imageops::colorops::contrast_in_place","value":"pub fn contrast_in_place<I>(&mut I, f32) where I: GenericImage","parent":null,"children":[],"decl_id":null,"docs":" Adjust the contrast of the supplied image in place.\n ```contrast``` is the amount to adjust the contrast by.\n Negative values decrease the contrast and positive values increase the contrast.","sig":null,"attributes":[{"value":"/ Adjust the contrast of the supplied image in place.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\imageops\\colorops.rs","byte_start":66004,"byte_end":66059,"line_start":87,"line_end":87,"column_start":1,"column_end":56}},{"value":"/ ```contrast``` is the amount to adjust the contrast by.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\imageops\\colorops.rs","byte_start":66060,"byte_end":66119,"line_start":88,"line_end":88,"column_start":1,"column_end":60}},{"value":"/ Negative values decrease the contrast and positive values increase the contrast.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\imageops\\colorops.rs","byte_start":66120,"byte_end":66204,"line_start":89,"line_end":89,"column_start":1,"column_end":85}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\imageops\\colorops.rs","byte_start":66205,"byte_end":66208,"line_start":90,"line_end":90,"column_start":1,"column_end":4}},{"value":"/ *[See also `contrast`.][contrast]*","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\imageops\\colorops.rs","byte_start":66209,"byte_end":66247,"line_start":91,"line_end":91,"column_start":1,"column_end":39}}]},{"kind":"Function","id":{"krate":0,"index":272},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\imageops\\colorops.rs","byte_start":67182,"byte_end":67190,"line_start":124,"line_end":124,"column_start":8,"column_end":16},"name":"brighten","qualname":"::imageops::colorops::brighten","value":"pub fn brighten<I, P, S>(&I, i32) -> ImageBuffer<P, Vec<S>> where\nI: GenericImageView<Pixel = P>, P: Pixel<Subpixel = S> + 'static,\nS: Primitive + 'static","parent":null,"children":[],"decl_id":null,"docs":" Brighten the supplied image.\n ```value``` is the amount to brighten each pixel by.\n Negative values decrease the brightness and positive values increase it.","sig":null,"attributes":[{"value":"/ Brighten the supplied image.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\imageops\\colorops.rs","byte_start":66947,"byte_end":66979,"line_start":119,"line_end":119,"column_start":1,"column_end":33}},{"value":"/ ```value``` is the amount to brighten each pixel by.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\imageops\\colorops.rs","byte_start":66980,"byte_end":67036,"line_start":120,"line_end":120,"column_start":1,"column_end":57}},{"value":"/ Negative values decrease the brightness and positive values increase it.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\imageops\\colorops.rs","byte_start":67037,"byte_end":67113,"line_start":121,"line_end":121,"column_start":1,"column_end":77}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\imageops\\colorops.rs","byte_start":67114,"byte_end":67117,"line_start":122,"line_end":122,"column_start":1,"column_end":4}},{"value":"/ *[See also `brighten_in_place`.][brighten_in_place]*","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\imageops\\colorops.rs","byte_start":67118,"byte_end":67174,"line_start":123,"line_end":123,"column_start":1,"column_end":57}}]},{"kind":"Function","id":{"krate":0,"index":278},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\imageops\\colorops.rs","byte_start":68186,"byte_end":68203,"line_start":160,"line_end":160,"column_start":8,"column_end":25},"name":"brighten_in_place","qualname":"::imageops::colorops::brighten_in_place","value":"pub fn brighten_in_place<I>(&mut I, i32) where I: GenericImage","parent":null,"children":[],"decl_id":null,"docs":" Brighten the supplied image in place.\n ```value``` is the amount to brighten each pixel by.\n Negative values decrease the brightness and positive values increase it.","sig":null,"attributes":[{"value":"/ Brighten the supplied image in place.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\imageops\\colorops.rs","byte_start":67960,"byte_end":68001,"line_start":155,"line_end":155,"column_start":1,"column_end":42}},{"value":"/ ```value``` is the amount to brighten each pixel by.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\imageops\\colorops.rs","byte_start":68002,"byte_end":68058,"line_start":156,"line_end":156,"column_start":1,"column_end":57}},{"value":"/ Negative values decrease the brightness and positive values increase it.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\imageops\\colorops.rs","byte_start":68059,"byte_end":68135,"line_start":157,"line_end":157,"column_start":1,"column_end":77}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\imageops\\colorops.rs","byte_start":68136,"byte_end":68139,"line_start":158,"line_end":158,"column_start":1,"column_end":4}},{"value":"/ *[See also `brighten`.][brighten]*","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\imageops\\colorops.rs","byte_start":68140,"byte_end":68178,"line_start":159,"line_end":159,"column_start":1,"column_end":39}}]},{"kind":"Function","id":{"krate":0,"index":282},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\imageops\\colorops.rs","byte_start":69126,"byte_end":69135,"line_start":192,"line_end":192,"column_start":8,"column_end":17},"name":"huerotate","qualname":"::imageops::colorops::huerotate","value":"pub fn huerotate<I, P, S>(&I, i32) -> ImageBuffer<P, Vec<S>> where\nI: GenericImageView<Pixel = P>, P: Pixel<Subpixel = S> + 'static,\nS: Primitive + 'static","parent":null,"children":[],"decl_id":null,"docs":" Hue rotate the supplied image.\n `value` is the degrees to rotate each pixel by.\n 0 and 360 do nothing, the rest rotates by the given degree value.\n just like the css webkit filter hue-rotate(180)","sig":null,"attributes":[{"value":"/ Hue rotate the supplied image.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\imageops\\colorops.rs","byte_start":68847,"byte_end":68881,"line_start":186,"line_end":186,"column_start":1,"column_end":35}},{"value":"/ `value` is the degrees to rotate each pixel by.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\imageops\\colorops.rs","byte_start":68882,"byte_end":68933,"line_start":187,"line_end":187,"column_start":1,"column_end":52}},{"value":"/ 0 and 360 do nothing, the rest rotates by the given degree value.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\imageops\\colorops.rs","byte_start":68934,"byte_end":69003,"line_start":188,"line_end":188,"column_start":1,"column_end":70}},{"value":"/ just like the css webkit filter hue-rotate(180)","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\imageops\\colorops.rs","byte_start":69004,"byte_end":69055,"line_start":189,"line_end":189,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\imageops\\colorops.rs","byte_start":69056,"byte_end":69059,"line_start":190,"line_end":190,"column_start":1,"column_end":4}},{"value":"/ *[See also `huerotate_in_place`.][huerotate_in_place]*","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\imageops\\colorops.rs","byte_start":69060,"byte_end":69118,"line_start":191,"line_end":191,"column_start":1,"column_end":59}}]},{"kind":"Function","id":{"krate":0,"index":287},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\imageops\\colorops.rs","byte_start":71293,"byte_end":71311,"line_start":254,"line_end":254,"column_start":8,"column_end":26},"name":"huerotate_in_place","qualname":"::imageops::colorops::huerotate_in_place","value":"pub fn huerotate_in_place<I>(&mut I, i32) where I: GenericImage","parent":null,"children":[],"decl_id":null,"docs":" Hue rotate the supplied image in place.\n `value` is the degrees to rotate each pixel by.\n 0 and 360 do nothing, the rest rotates by the given degree value.\n just like the css webkit filter hue-rotate(180)","sig":null,"attributes":[{"value":"/ Hue rotate the supplied image in place.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\imageops\\colorops.rs","byte_start":71023,"byte_end":71066,"line_start":248,"line_end":248,"column_start":1,"column_end":44}},{"value":"/ `value` is the degrees to rotate each pixel by.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\imageops\\colorops.rs","byte_start":71067,"byte_end":71118,"line_start":249,"line_end":249,"column_start":1,"column_end":52}},{"value":"/ 0 and 360 do nothing, the rest rotates by the given degree value.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\imageops\\colorops.rs","byte_start":71119,"byte_end":71188,"line_start":250,"line_end":250,"column_start":1,"column_end":70}},{"value":"/ just like the css webkit filter hue-rotate(180)","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\imageops\\colorops.rs","byte_start":71189,"byte_end":71240,"line_start":251,"line_end":251,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\imageops\\colorops.rs","byte_start":71241,"byte_end":71244,"line_start":252,"line_end":252,"column_start":1,"column_end":4}},{"value":"/ *[See also `huerotate`.][huerotate]*","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\imageops\\colorops.rs","byte_start":71245,"byte_end":71285,"line_start":253,"line_end":253,"column_start":1,"column_end":41}}]},{"kind":"Trait","id":{"krate":0,"index":290},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\imageops\\colorops.rs","byte_start":73177,"byte_end":73185,"line_start":310,"line_end":310,"column_start":11,"column_end":19},"name":"ColorMap","qualname":"::imageops::colorops::ColorMap","value":"ColorMap","parent":null,"children":[{"krate":0,"index":291},{"krate":0,"index":292},{"krate":0,"index":293},{"krate":0,"index":294},{"krate":0,"index":295}],"decl_id":null,"docs":" A color map\n","sig":null,"attributes":[{"value":"/ A color map","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\imageops\\colorops.rs","byte_start":73151,"byte_end":73166,"line_start":309,"line_end":309,"column_start":1,"column_end":16}}]},{"kind":"Type","id":{"krate":0,"index":291},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\imageops\\colorops.rs","byte_start":73249,"byte_end":73254,"line_start":312,"line_end":312,"column_start":10,"column_end":15},"name":"Color","qualname":"::imageops::colorops::ColorMap::Color","value":"type Color;","parent":{"krate":0,"index":290},"children":[],"decl_id":null,"docs":" The color type on which the map operates on\n","sig":null,"attributes":[{"value":"/ The color type on which the map operates on","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\imageops\\colorops.rs","byte_start":73192,"byte_end":73239,"line_start":311,"line_end":311,"column_start":5,"column_end":52}}]},{"kind":"Method","id":{"krate":0,"index":292},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\imageops\\colorops.rs","byte_start":73347,"byte_end":73355,"line_start":315,"line_end":315,"column_start":8,"column_end":16},"name":"index_of","qualname":"::imageops::colorops::ColorMap::index_of","value":"pub fn index_of(&Self, &Self::Color) -> usize","parent":{"krate":0,"index":290},"children":[],"decl_id":null,"docs":" Returns the index of the closest match of `color`\n in the color map.\n","sig":null,"attributes":[{"value":"/ Returns the index of the closest match of `color`","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\imageops\\colorops.rs","byte_start":73260,"byte_end":73313,"line_start":313,"line_end":313,"column_start":5,"column_end":58}},{"value":"/ in the color map.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\imageops\\colorops.rs","byte_start":73318,"byte_end":73339,"line_start":314,"line_end":314,"column_start":5,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":293},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\imageops\\colorops.rs","byte_start":73563,"byte_end":73569,"line_start":318,"line_end":318,"column_start":8,"column_end":14},"name":"lookup","qualname":"::imageops::colorops::ColorMap::lookup","value":"pub fn lookup(&Self, usize) -> Option<Self::Color>","parent":{"krate":0,"index":290},"children":[],"decl_id":null,"docs":" Looks up color by index in the color map.  If `idx` is out of range for the color map, or\n ColorMap doesn't implement `lookup` `None` is returned.\n","sig":null,"attributes":[{"value":"/ Looks up color by index in the color map.  If `idx` is out of range for the color map, or","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\imageops\\colorops.rs","byte_start":73398,"byte_end":73491,"line_start":316,"line_end":316,"column_start":5,"column_end":98}},{"value":"/ ColorMap doesn't implement `lookup` `None` is returned.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\imageops\\colorops.rs","byte_start":73496,"byte_end":73555,"line_start":317,"line_end":317,"column_start":5,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":294},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\imageops\\colorops.rs","byte_start":73750,"byte_end":73760,"line_start":323,"line_end":323,"column_start":8,"column_end":18},"name":"has_lookup","qualname":"::imageops::colorops::ColorMap::has_lookup","value":"pub fn has_lookup(&Self) -> bool","parent":{"krate":0,"index":290},"children":[],"decl_id":null,"docs":" Determine if this implementation of ColorMap overrides the default `lookup`.\n","sig":null,"attributes":[{"value":"/ Determine if this implementation of ColorMap overrides the default `lookup`.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\imageops\\colorops.rs","byte_start":73662,"byte_end":73742,"line_start":322,"line_end":322,"column_start":5,"column_end":85}}]},{"kind":"Method","id":{"krate":0,"index":295},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\imageops\\colorops.rs","byte_start":73865,"byte_end":73874,"line_start":327,"line_end":327,"column_start":8,"column_end":17},"name":"map_color","qualname":"::imageops::colorops::ColorMap::map_color","value":"pub fn map_color(&Self, &mut Self::Color)","parent":{"krate":0,"index":290},"children":[],"decl_id":null,"docs":" Maps `color` to the closest color in the color map.\n","sig":null,"attributes":[{"value":"/ Maps `color` to the closest color in the color map.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\imageops\\colorops.rs","byte_start":73802,"byte_end":73857,"line_start":326,"line_end":326,"column_start":5,"column_end":60}}]},{"kind":"Struct","id":{"krate":0,"index":2334},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\imageops\\colorops.rs","byte_start":75019,"byte_end":75026,"line_start":360,"line_end":360,"column_start":12,"column_end":19},"name":"BiLevel","qualname":"::imageops::colorops::BiLevel","value":"","parent":null,"children":[],"decl_id":null,"docs":" A bi-level color map","sig":null,"attributes":[{"value":"/ A bi-level color map","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\imageops\\colorops.rs","byte_start":73911,"byte_end":73935,"line_start":330,"line_end":330,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\imageops\\colorops.rs","byte_start":73936,"byte_end":73939,"line_start":331,"line_end":331,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\imageops\\colorops.rs","byte_start":73940,"byte_end":73954,"line_start":332,"line_end":332,"column_start":1,"column_end":15}},{"value":"/ ```","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\imageops\\colorops.rs","byte_start":73955,"byte_end":73962,"line_start":333,"line_end":333,"column_start":1,"column_end":8}},{"value":"/ use image::imageops::colorops::{index_colors, BiLevel, ColorMap};","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\imageops\\colorops.rs","byte_start":73963,"byte_end":74032,"line_start":334,"line_end":334,"column_start":1,"column_end":70}},{"value":"/ use image::{ImageBuffer, Luma};","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\imageops\\colorops.rs","byte_start":74033,"byte_end":74068,"line_start":335,"line_end":335,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\imageops\\colorops.rs","byte_start":74069,"byte_end":74072,"line_start":336,"line_end":336,"column_start":1,"column_end":4}},{"value":"/ let (w, h) = (16, 16);","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\imageops\\colorops.rs","byte_start":74073,"byte_end":74099,"line_start":337,"line_end":337,"column_start":1,"column_end":27}},{"value":"/ // Create an image with a smooth horizontal gradient from black (0) to white (255).","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\imageops\\colorops.rs","byte_start":74100,"byte_end":74187,"line_start":338,"line_end":338,"column_start":1,"column_end":88}},{"value":"/ let gray = ImageBuffer::from_fn(w, h, |x, y| -> Luma<u8> { [(255 * x / w) as u8].into() });","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\imageops\\colorops.rs","byte_start":74188,"byte_end":74283,"line_start":339,"line_end":339,"column_start":1,"column_end":96}},{"value":"/ // Mapping the gray image through the `BiLevel` filter should map gray pixels less than half","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\imageops\\colorops.rs","byte_start":74284,"byte_end":74380,"line_start":340,"line_end":340,"column_start":1,"column_end":97}},{"value":"/ // intensity (127) to black (0), and anything greater to white (255).","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\imageops\\colorops.rs","byte_start":74381,"byte_end":74454,"line_start":341,"line_end":341,"column_start":1,"column_end":74}},{"value":"/ let cmap = BiLevel;","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\imageops\\colorops.rs","byte_start":74455,"byte_end":74478,"line_start":342,"line_end":342,"column_start":1,"column_end":24}},{"value":"/ let palletized = index_colors(&gray, &cmap);","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\imageops\\colorops.rs","byte_start":74479,"byte_end":74527,"line_start":343,"line_end":343,"column_start":1,"column_end":49}},{"value":"/ let mapped = ImageBuffer::from_fn(w, h, |x, y| {","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\imageops\\colorops.rs","byte_start":74528,"byte_end":74580,"line_start":344,"line_end":344,"column_start":1,"column_end":53}},{"value":"/     let p = palletized.get_pixel(x, y);","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\imageops\\colorops.rs","byte_start":74581,"byte_end":74624,"line_start":345,"line_end":345,"column_start":1,"column_end":44}},{"value":"/     cmap.lookup(p.0[0] as usize)","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\imageops\\colorops.rs","byte_start":74625,"byte_end":74661,"line_start":346,"line_end":346,"column_start":1,"column_end":37}},{"value":"/         .expect(\"indexed color out-of-range\")","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\imageops\\colorops.rs","byte_start":74662,"byte_end":74711,"line_start":347,"line_end":347,"column_start":1,"column_end":50}},{"value":"/ });","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\imageops\\colorops.rs","byte_start":74712,"byte_end":74719,"line_start":348,"line_end":348,"column_start":1,"column_end":8}},{"value":"/ // Create an black and white image of expected output.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\imageops\\colorops.rs","byte_start":74720,"byte_end":74778,"line_start":349,"line_end":349,"column_start":1,"column_end":59}},{"value":"/ let bw = ImageBuffer::from_fn(w, h, |x, y| -> Luma<u8> {","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\imageops\\colorops.rs","byte_start":74779,"byte_end":74839,"line_start":350,"line_end":350,"column_start":1,"column_end":61}},{"value":"/     if x <= (w / 2) {","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\imageops\\colorops.rs","byte_start":74840,"byte_end":74865,"line_start":351,"line_end":351,"column_start":1,"column_end":26}},{"value":"/         [0].into()","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\imageops\\colorops.rs","byte_start":74866,"byte_end":74888,"line_start":352,"line_end":352,"column_start":1,"column_end":23}},{"value":"/     } else {","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\imageops\\colorops.rs","byte_start":74889,"byte_end":74905,"line_start":353,"line_end":353,"column_start":1,"column_end":17}},{"value":"/         [255].into()","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\imageops\\colorops.rs","byte_start":74906,"byte_end":74930,"line_start":354,"line_end":354,"column_start":1,"column_end":25}},{"value":"/     }","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\imageops\\colorops.rs","byte_start":74931,"byte_end":74940,"line_start":355,"line_end":355,"column_start":1,"column_end":10}},{"value":"/ });","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\imageops\\colorops.rs","byte_start":74941,"byte_end":74948,"line_start":356,"line_end":356,"column_start":1,"column_end":8}},{"value":"/ assert_eq!(mapped, bw);","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\imageops\\colorops.rs","byte_start":74949,"byte_end":74976,"line_start":357,"line_end":357,"column_start":1,"column_end":28}},{"value":"/ ```","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\imageops\\colorops.rs","byte_start":74977,"byte_end":74984,"line_start":358,"line_end":358,"column_start":1,"column_end":8}}]},{"kind":"Function","id":{"krate":0,"index":320},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\imageops\\colorops.rs","byte_start":77999,"byte_end":78005,"line_start":475,"line_end":475,"column_start":8,"column_end":14},"name":"dither","qualname":"::imageops::colorops::dither","value":"pub fn dither<Pix, Map: ?Sized>(&mut ImageBuffer<Pix, Vec<u8>>, &Map) where\nMap: ColorMap<Color = Pix>, Pix: Pixel<Subpixel = u8> + 'static","parent":null,"children":[],"decl_id":null,"docs":" Reduces the colors of the image using the supplied `color_map` while applying\n Floyd-Steinberg dithering to improve the visual conception\n","sig":null,"attributes":[{"value":"/ Reduces the colors of the image using the supplied `color_map` while applying","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\imageops\\colorops.rs","byte_start":77847,"byte_end":77928,"line_start":473,"line_end":473,"column_start":1,"column_end":82}},{"value":"/ Floyd-Steinberg dithering to improve the visual conception","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\imageops\\colorops.rs","byte_start":77929,"byte_end":77991,"line_start":474,"line_end":474,"column_start":1,"column_end":63}}]},{"kind":"Function","id":{"krate":0,"index":325},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\imageops\\colorops.rs","byte_start":79559,"byte_end":79571,"line_start":513,"line_end":513,"column_start":8,"column_end":20},"name":"index_colors","qualname":"::imageops::colorops::index_colors","value":"pub fn index_colors<Pix, Map: ?Sized>(&ImageBuffer<Pix, Vec<u8>>, &Map)\n-> ImageBuffer<Luma<u8>, Vec<u8>> where Map: ColorMap<Color = Pix>,\nPix: Pixel<Subpixel = u8> + 'static","parent":null,"children":[],"decl_id":null,"docs":" Reduces the colors using the supplied `color_map` and returns an image of the indices\n","sig":null,"attributes":[{"value":"/ Reduces the colors using the supplied `color_map` and returns an image of the indices","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\imageops\\colorops.rs","byte_start":79462,"byte_end":79551,"line_start":512,"line_end":512,"column_start":1,"column_end":90}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2340},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\imageops\\sample.rs","byte_start":83257,"byte_end":83264,"line_start":84,"line_end":84,"column_start":5,"column_end":12},"name":"Nearest","qualname":"::imageops::sample::FilterType::Nearest","value":"FilterType::Nearest","parent":{"krate":0,"index":2339},"children":[],"decl_id":null,"docs":" Nearest Neighbor\n","sig":null,"attributes":[{"value":"/ Nearest Neighbor","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\imageops\\sample.rs","byte_start":83232,"byte_end":83252,"line_start":83,"line_end":83,"column_start":5,"column_end":25}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2342},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\imageops\\sample.rs","byte_start":83293,"byte_end":83301,"line_start":87,"line_end":87,"column_start":5,"column_end":13},"name":"Triangle","qualname":"::imageops::sample::FilterType::Triangle","value":"FilterType::Triangle","parent":{"krate":0,"index":2339},"children":[],"decl_id":null,"docs":" Linear Filter\n","sig":null,"attributes":[{"value":"/ Linear Filter","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\imageops\\sample.rs","byte_start":83271,"byte_end":83288,"line_start":86,"line_end":86,"column_start":5,"column_end":22}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2344},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\imageops\\sample.rs","byte_start":83329,"byte_end":83339,"line_start":90,"line_end":90,"column_start":5,"column_end":15},"name":"CatmullRom","qualname":"::imageops::sample::FilterType::CatmullRom","value":"FilterType::CatmullRom","parent":{"krate":0,"index":2339},"children":[],"decl_id":null,"docs":" Cubic Filter\n","sig":null,"attributes":[{"value":"/ Cubic Filter","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\imageops\\sample.rs","byte_start":83308,"byte_end":83324,"line_start":89,"line_end":89,"column_start":5,"column_end":21}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2346},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\imageops\\sample.rs","byte_start":83370,"byte_end":83378,"line_start":93,"line_end":93,"column_start":5,"column_end":13},"name":"Gaussian","qualname":"::imageops::sample::FilterType::Gaussian","value":"FilterType::Gaussian","parent":{"krate":0,"index":2339},"children":[],"decl_id":null,"docs":" Gaussian Filter\n","sig":null,"attributes":[{"value":"/ Gaussian Filter","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\imageops\\sample.rs","byte_start":83346,"byte_end":83365,"line_start":92,"line_end":92,"column_start":5,"column_end":24}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2348},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\imageops\\sample.rs","byte_start":83415,"byte_end":83423,"line_start":96,"line_end":96,"column_start":5,"column_end":13},"name":"Lanczos3","qualname":"::imageops::sample::FilterType::Lanczos3","value":"FilterType::Lanczos3","parent":{"krate":0,"index":2339},"children":[],"decl_id":null,"docs":" Lanczos with window 3\n","sig":null,"attributes":[{"value":"/ Lanczos with window 3","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\imageops\\sample.rs","byte_start":83385,"byte_end":83410,"line_start":95,"line_end":95,"column_start":5,"column_end":30}}]},{"kind":"Enum","id":{"krate":0,"index":2339},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\imageops\\sample.rs","byte_start":83215,"byte_end":83225,"line_start":82,"line_end":82,"column_start":10,"column_end":20},"name":"FilterType","qualname":"::imageops::sample::FilterType","value":"pub enum FilterType {\n\n    /// Nearest Neighbor\n    Nearest,\n\n    /// Linear Filter\n    Triangle,\n\n    /// Cubic Filter\n    CatmullRom,\n\n    /// Gaussian Filter\n    Gaussian,\n\n    /// Lanczos with window 3\n    Lanczos3,\n}","parent":null,"children":[{"krate":0,"index":2340},{"krate":0,"index":2342},{"krate":0,"index":2344},{"krate":0,"index":2346},{"krate":0,"index":2348}],"decl_id":null,"docs":" Available Sampling Filters.","sig":null,"attributes":[{"value":"/ Available Sampling Filters.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\imageops\\sample.rs","byte_start":80773,"byte_end":80804,"line_start":15,"line_end":15,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\imageops\\sample.rs","byte_start":80805,"byte_end":80808,"line_start":16,"line_end":16,"column_start":1,"column_end":4}},{"value":"/ ## Examples","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\imageops\\sample.rs","byte_start":80809,"byte_end":80824,"line_start":17,"line_end":17,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\imageops\\sample.rs","byte_start":80825,"byte_end":80828,"line_start":18,"line_end":18,"column_start":1,"column_end":4}},{"value":"/ To test the different sampling filters on a real example, you can find two","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\imageops\\sample.rs","byte_start":80829,"byte_end":80907,"line_start":19,"line_end":19,"column_start":1,"column_end":79}},{"value":"/ examples called","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\imageops\\sample.rs","byte_start":80908,"byte_end":80927,"line_start":20,"line_end":20,"column_start":1,"column_end":20}},{"value":"/ [`scaledown`](https://github.com/image-rs/image/tree/master/examples/scaledown)","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\imageops\\sample.rs","byte_start":80928,"byte_end":81011,"line_start":21,"line_end":21,"column_start":1,"column_end":84}},{"value":"/ and","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\imageops\\sample.rs","byte_start":81012,"byte_end":81019,"line_start":22,"line_end":22,"column_start":1,"column_end":8}},{"value":"/ [`scaleup`](https://github.com/image-rs/image/tree/master/examples/scaleup)","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\imageops\\sample.rs","byte_start":81020,"byte_end":81099,"line_start":23,"line_end":23,"column_start":1,"column_end":80}},{"value":"/ in the `examples` directory of the crate source code.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\imageops\\sample.rs","byte_start":81100,"byte_end":81157,"line_start":24,"line_end":24,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\imageops\\sample.rs","byte_start":81158,"byte_end":81161,"line_start":25,"line_end":25,"column_start":1,"column_end":4}},{"value":"/ Here is a 3.58 MiB","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\imageops\\sample.rs","byte_start":81162,"byte_end":81184,"line_start":26,"line_end":26,"column_start":1,"column_end":23}},{"value":"/ [test image](https://github.com/image-rs/image/blob/master/examples/scaledown/test.jpg)","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\imageops\\sample.rs","byte_start":81185,"byte_end":81276,"line_start":27,"line_end":27,"column_start":1,"column_end":92}},{"value":"/ that has been scaled down to 300x225 px:","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\imageops\\sample.rs","byte_start":81277,"byte_end":81321,"line_start":28,"line_end":28,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\imageops\\sample.rs","byte_start":81322,"byte_end":81325,"line_start":29,"line_end":29,"column_start":1,"column_end":4}},{"value":"/ <!-- NOTE: To test new test images locally, replace the GitHub path with `../../../docs/` -->","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\imageops\\sample.rs","byte_start":81326,"byte_end":81423,"line_start":30,"line_end":30,"column_start":1,"column_end":98}},{"value":"/ <div style=\"display: flex; flex-wrap: wrap; align-items: flex-start;\">","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\imageops\\sample.rs","byte_start":81424,"byte_end":81498,"line_start":31,"line_end":31,"column_start":1,"column_end":75}},{"value":"/   <div style=\"margin: 0 8px 8px 0;\">","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\imageops\\sample.rs","byte_start":81499,"byte_end":81539,"line_start":32,"line_end":32,"column_start":1,"column_end":41}},{"value":"/     <img src=\"https://raw.githubusercontent.com/image-rs/image/master/examples/scaledown/scaledown-test-near.png\" title=\"Nearest\"><br>","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\imageops\\sample.rs","byte_start":81540,"byte_end":81678,"line_start":33,"line_end":33,"column_start":1,"column_end":139}},{"value":"/     Nearest Neighbor","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\imageops\\sample.rs","byte_start":81679,"byte_end":81703,"line_start":34,"line_end":34,"column_start":1,"column_end":25}},{"value":"/   </div>","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\imageops\\sample.rs","byte_start":81704,"byte_end":81716,"line_start":35,"line_end":35,"column_start":1,"column_end":13}},{"value":"/   <div style=\"margin: 0 8px 8px 0;\">","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\imageops\\sample.rs","byte_start":81717,"byte_end":81757,"line_start":36,"line_end":36,"column_start":1,"column_end":41}},{"value":"/     <img src=\"https://raw.githubusercontent.com/image-rs/image/master/examples/scaledown/scaledown-test-tri.png\" title=\"Triangle\"><br>","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\imageops\\sample.rs","byte_start":81758,"byte_end":81896,"line_start":37,"line_end":37,"column_start":1,"column_end":139}},{"value":"/     Linear: Triangle","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\imageops\\sample.rs","byte_start":81897,"byte_end":81921,"line_start":38,"line_end":38,"column_start":1,"column_end":25}},{"value":"/   </div>","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\imageops\\sample.rs","byte_start":81922,"byte_end":81934,"line_start":39,"line_end":39,"column_start":1,"column_end":13}},{"value":"/   <div style=\"margin: 0 8px 8px 0;\">","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\imageops\\sample.rs","byte_start":81935,"byte_end":81975,"line_start":40,"line_end":40,"column_start":1,"column_end":41}},{"value":"/     <img src=\"https://raw.githubusercontent.com/image-rs/image/master/examples/scaledown/scaledown-test-cmr.png\" title=\"CatmullRom\"><br>","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\imageops\\sample.rs","byte_start":81976,"byte_end":82116,"line_start":41,"line_end":41,"column_start":1,"column_end":141}},{"value":"/     Cubic: Catmull-Rom","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\imageops\\sample.rs","byte_start":82117,"byte_end":82143,"line_start":42,"line_end":42,"column_start":1,"column_end":27}},{"value":"/   </div>","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\imageops\\sample.rs","byte_start":82144,"byte_end":82156,"line_start":43,"line_end":43,"column_start":1,"column_end":13}},{"value":"/   <div style=\"margin: 0 8px 8px 0;\">","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\imageops\\sample.rs","byte_start":82157,"byte_end":82197,"line_start":44,"line_end":44,"column_start":1,"column_end":41}},{"value":"/     <img src=\"https://raw.githubusercontent.com/image-rs/image/master/examples/scaledown/scaledown-test-gauss.png\" title=\"Gaussian\"><br>","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\imageops\\sample.rs","byte_start":82198,"byte_end":82338,"line_start":45,"line_end":45,"column_start":1,"column_end":141}},{"value":"/     Gaussian","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\imageops\\sample.rs","byte_start":82339,"byte_end":82355,"line_start":46,"line_end":46,"column_start":1,"column_end":17}},{"value":"/   </div>","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\imageops\\sample.rs","byte_start":82356,"byte_end":82368,"line_start":47,"line_end":47,"column_start":1,"column_end":13}},{"value":"/   <div style=\"margin: 0 8px 8px 0;\">","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\imageops\\sample.rs","byte_start":82369,"byte_end":82409,"line_start":48,"line_end":48,"column_start":1,"column_end":41}},{"value":"/     <img src=\"https://raw.githubusercontent.com/image-rs/image/master/examples/scaledown/scaledown-test-lcz2.png\" title=\"Lanczos3\"><br>","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\imageops\\sample.rs","byte_start":82410,"byte_end":82549,"line_start":49,"line_end":49,"column_start":1,"column_end":140}},{"value":"/     Lanczos with window 3","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\imageops\\sample.rs","byte_start":82550,"byte_end":82579,"line_start":50,"line_end":50,"column_start":1,"column_end":30}},{"value":"/   </div>","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\imageops\\sample.rs","byte_start":82580,"byte_end":82592,"line_start":51,"line_end":51,"column_start":1,"column_end":13}},{"value":"/ </div>","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\imageops\\sample.rs","byte_start":82593,"byte_end":82603,"line_start":52,"line_end":52,"column_start":1,"column_end":11}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\imageops\\sample.rs","byte_start":82604,"byte_end":82607,"line_start":53,"line_end":53,"column_start":1,"column_end":4}},{"value":"/ ## Speed","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\imageops\\sample.rs","byte_start":82608,"byte_end":82620,"line_start":54,"line_end":54,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\imageops\\sample.rs","byte_start":82621,"byte_end":82624,"line_start":55,"line_end":55,"column_start":1,"column_end":4}},{"value":"/ Time required to create each of the examples above, tested on an Intel","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\imageops\\sample.rs","byte_start":82625,"byte_end":82699,"line_start":56,"line_end":56,"column_start":1,"column_end":75}},{"value":"/ i7-4770 CPU with Rust 1.37 in release mode:","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\imageops\\sample.rs","byte_start":82700,"byte_end":82747,"line_start":57,"line_end":57,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\imageops\\sample.rs","byte_start":82748,"byte_end":82751,"line_start":58,"line_end":58,"column_start":1,"column_end":4}},{"value":"/ <table style=\"width: auto;\">","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\imageops\\sample.rs","byte_start":82752,"byte_end":82784,"line_start":59,"line_end":59,"column_start":1,"column_end":33}},{"value":"/   <tr>","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\imageops\\sample.rs","byte_start":82785,"byte_end":82795,"line_start":60,"line_end":60,"column_start":1,"column_end":11}},{"value":"/     <th>Nearest</th>","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\imageops\\sample.rs","byte_start":82796,"byte_end":82820,"line_start":61,"line_end":61,"column_start":1,"column_end":25}},{"value":"/     <td>31 ms</td>","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\imageops\\sample.rs","byte_start":82821,"byte_end":82843,"line_start":62,"line_end":62,"column_start":1,"column_end":23}},{"value":"/   </tr>","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\imageops\\sample.rs","byte_start":82844,"byte_end":82855,"line_start":63,"line_end":63,"column_start":1,"column_end":12}},{"value":"/   <tr>","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\imageops\\sample.rs","byte_start":82856,"byte_end":82866,"line_start":64,"line_end":64,"column_start":1,"column_end":11}},{"value":"/     <th>Triangle</th>","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\imageops\\sample.rs","byte_start":82867,"byte_end":82892,"line_start":65,"line_end":65,"column_start":1,"column_end":26}},{"value":"/     <td>414 ms</td>","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\imageops\\sample.rs","byte_start":82893,"byte_end":82916,"line_start":66,"line_end":66,"column_start":1,"column_end":24}},{"value":"/   </tr>","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\imageops\\sample.rs","byte_start":82917,"byte_end":82928,"line_start":67,"line_end":67,"column_start":1,"column_end":12}},{"value":"/   <tr>","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\imageops\\sample.rs","byte_start":82929,"byte_end":82939,"line_start":68,"line_end":68,"column_start":1,"column_end":11}},{"value":"/     <th>CatmullRom</th>","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\imageops\\sample.rs","byte_start":82940,"byte_end":82967,"line_start":69,"line_end":69,"column_start":1,"column_end":28}},{"value":"/     <td>817 ms</td>","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\imageops\\sample.rs","byte_start":82968,"byte_end":82991,"line_start":70,"line_end":70,"column_start":1,"column_end":24}},{"value":"/   </tr>","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\imageops\\sample.rs","byte_start":82992,"byte_end":83003,"line_start":71,"line_end":71,"column_start":1,"column_end":12}},{"value":"/   <tr>","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\imageops\\sample.rs","byte_start":83004,"byte_end":83014,"line_start":72,"line_end":72,"column_start":1,"column_end":11}},{"value":"/     <th>Gaussian</th>","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\imageops\\sample.rs","byte_start":83015,"byte_end":83040,"line_start":73,"line_end":73,"column_start":1,"column_end":26}},{"value":"/     <td>1180 ms</td>","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\imageops\\sample.rs","byte_start":83041,"byte_end":83065,"line_start":74,"line_end":74,"column_start":1,"column_end":25}},{"value":"/   </tr>","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\imageops\\sample.rs","byte_start":83066,"byte_end":83077,"line_start":75,"line_end":75,"column_start":1,"column_end":12}},{"value":"/   <tr>","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\imageops\\sample.rs","byte_start":83078,"byte_end":83088,"line_start":76,"line_end":76,"column_start":1,"column_end":11}},{"value":"/     <th>Lanczos3</th>","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\imageops\\sample.rs","byte_start":83089,"byte_end":83114,"line_start":77,"line_end":77,"column_start":1,"column_end":26}},{"value":"/     <td>1170 ms</td>","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\imageops\\sample.rs","byte_start":83115,"byte_end":83139,"line_start":78,"line_end":78,"column_start":1,"column_end":25}},{"value":"/   </tr>","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\imageops\\sample.rs","byte_start":83140,"byte_end":83151,"line_start":79,"line_end":79,"column_start":1,"column_end":12}},{"value":"/ </table>","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\imageops\\sample.rs","byte_start":83152,"byte_end":83164,"line_start":80,"line_end":80,"column_start":1,"column_end":13}}]},{"kind":"Function","id":{"krate":0,"index":382},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\imageops\\sample.rs","byte_start":93455,"byte_end":93464,"line_start":409,"line_end":409,"column_start":8,"column_end":17},"name":"thumbnail","qualname":"::imageops::sample::thumbnail","value":"pub fn thumbnail<I, P, S>(&I, u32, u32) -> ImageBuffer<P, Vec<S>> where\nI: GenericImageView<Pixel = P>, P: Pixel<Subpixel = S> + 'static,\nS: Primitive + Enlargeable + 'static","parent":null,"children":[],"decl_id":null,"docs":" Resize the supplied image to the specific dimensions.","sig":null,"attributes":[{"value":"/ Resize the supplied image to the specific dimensions.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\imageops\\sample.rs","byte_start":92709,"byte_end":92766,"line_start":397,"line_end":397,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\imageops\\sample.rs","byte_start":92767,"byte_end":92770,"line_start":398,"line_end":398,"column_start":1,"column_end":4}},{"value":"/ For downscaling, this method uses a fast integer algorithm where each source pixel contributes","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\imageops\\sample.rs","byte_start":92771,"byte_end":92869,"line_start":399,"line_end":399,"column_start":1,"column_end":99}},{"value":"/ to exactly one target pixel.  May give aliasing artifacts if new size is close to old size.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\imageops\\sample.rs","byte_start":92870,"byte_end":92965,"line_start":400,"line_end":400,"column_start":1,"column_end":96}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\imageops\\sample.rs","byte_start":92966,"byte_end":92969,"line_start":401,"line_end":401,"column_start":1,"column_end":4}},{"value":"/ In case the current width is smaller than the new width or similar for the height, another","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\imageops\\sample.rs","byte_start":92970,"byte_end":93064,"line_start":402,"line_end":402,"column_start":1,"column_end":95}},{"value":"/ strategy is used instead.  For each pixel in the output, a rectangular region of the input is","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\imageops\\sample.rs","byte_start":93065,"byte_end":93162,"line_start":403,"line_end":403,"column_start":1,"column_end":98}},{"value":"/ determined, just as previously.  But when no input pixel is part of this region, the nearest","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\imageops\\sample.rs","byte_start":93163,"byte_end":93259,"line_start":404,"line_end":404,"column_start":1,"column_end":97}},{"value":"/ pixels are interpolated instead.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\imageops\\sample.rs","byte_start":93260,"byte_end":93296,"line_start":405,"line_end":405,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\imageops\\sample.rs","byte_start":93297,"byte_end":93300,"line_start":406,"line_end":406,"column_start":1,"column_end":4}},{"value":"/ For speed reasons, all interpolation is performed linearly over the colour values.  It will not","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\imageops\\sample.rs","byte_start":93301,"byte_end":93400,"line_start":407,"line_end":407,"column_start":1,"column_end":100}},{"value":"/ take the pixel colour spaces into account.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\imageops\\sample.rs","byte_start":93401,"byte_end":93447,"line_start":408,"line_end":408,"column_start":1,"column_end":47}}]},{"kind":"Function","id":{"krate":0,"index":405},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\imageops\\sample.rs","byte_start":101323,"byte_end":101332,"line_start":648,"line_end":648,"column_start":8,"column_end":17},"name":"filter3x3","qualname":"::imageops::sample::filter3x3","value":"pub fn filter3x3<I, P, S>(&I, &[f32]) -> ImageBuffer<P, Vec<S>> where\nI: GenericImageView<Pixel = P>, P: Pixel<Subpixel = S> + 'static,\nS: Primitive + 'static","parent":null,"children":[],"decl_id":null,"docs":" Perform a 3x3 box filter on the supplied image.\n ```kernel``` is an array of the filter weights of length 9.\n","sig":null,"attributes":[{"value":"/ Perform a 3x3 box filter on the supplied image.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\imageops\\sample.rs","byte_start":101200,"byte_end":101251,"line_start":646,"line_end":646,"column_start":1,"column_end":52}},{"value":"/ ```kernel``` is an array of the filter weights of length 9.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\imageops\\sample.rs","byte_start":101252,"byte_end":101315,"line_start":647,"line_end":647,"column_start":1,"column_end":64}}]},{"kind":"Function","id":{"krate":0,"index":410},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\imageops\\sample.rs","byte_start":103759,"byte_end":103765,"line_start":728,"line_end":728,"column_start":8,"column_end":14},"name":"resize","qualname":"::imageops::sample::resize","value":"pub fn resize<I: GenericImageView>(&I, u32, u32, FilterType)\n-> ImageBuffer<I::Pixel, Vec<<I::Pixel as Pixel>::Subpixel>> where\nI::Pixel: 'static, <I::Pixel as Pixel>::Subpixel: 'static","parent":null,"children":[],"decl_id":null,"docs":" Resize the supplied image to the specified dimensions.\n ```nwidth``` and ```nheight``` are the new dimensions.\n ```filter``` is the sampling filter to use.\n","sig":null,"attributes":[{"value":"/ Resize the supplied image to the specified dimensions.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\imageops\\sample.rs","byte_start":103586,"byte_end":103644,"line_start":725,"line_end":725,"column_start":1,"column_end":59}},{"value":"/ ```nwidth``` and ```nheight``` are the new dimensions.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\imageops\\sample.rs","byte_start":103645,"byte_end":103703,"line_start":726,"line_end":726,"column_start":1,"column_end":59}},{"value":"/ ```filter``` is the sampling filter to use.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\imageops\\sample.rs","byte_start":103704,"byte_end":103751,"line_start":727,"line_end":727,"column_start":1,"column_end":48}}]},{"kind":"Function","id":{"krate":0,"index":412},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\imageops\\sample.rs","byte_start":104891,"byte_end":104895,"line_start":767,"line_end":767,"column_start":8,"column_end":12},"name":"blur","qualname":"::imageops::sample::blur","value":"pub fn blur<I: GenericImageView>(&I, f32)\n-> ImageBuffer<I::Pixel, Vec<<I::Pixel as Pixel>::Subpixel>> where\nI::Pixel: 'static","parent":null,"children":[],"decl_id":null,"docs":" Performs a Gaussian blur on the supplied image.\n ```sigma``` is a measure of how much to blur by.\n","sig":null,"attributes":[{"value":"/ Performs a Gaussian blur on the supplied image.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\imageops\\sample.rs","byte_start":104779,"byte_end":104830,"line_start":765,"line_end":765,"column_start":1,"column_end":52}},{"value":"/ ```sigma``` is a measure of how much to blur by.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\imageops\\sample.rs","byte_start":104831,"byte_end":104883,"line_start":766,"line_end":766,"column_start":1,"column_end":53}}]},{"kind":"Function","id":{"krate":0,"index":415},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\imageops\\sample.rs","byte_start":105719,"byte_end":105728,"line_start":794,"line_end":794,"column_start":8,"column_end":17},"name":"unsharpen","qualname":"::imageops::sample::unsharpen","value":"pub fn unsharpen<I, P, S>(&I, f32, i32) -> ImageBuffer<P, Vec<S>> where\nI: GenericImageView<Pixel = P>, P: Pixel<Subpixel = S> + 'static,\nS: Primitive + 'static","parent":null,"children":[],"decl_id":null,"docs":" Performs an unsharpen mask on the supplied image.\n ```sigma``` is the amount to blur the image by.\n ```threshold``` is the threshold for the difference between","sig":null,"attributes":[{"value":"/ Performs an unsharpen mask on the supplied image.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\imageops\\sample.rs","byte_start":105458,"byte_end":105511,"line_start":789,"line_end":789,"column_start":1,"column_end":54}},{"value":"/ ```sigma``` is the amount to blur the image by.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\imageops\\sample.rs","byte_start":105512,"byte_end":105563,"line_start":790,"line_end":790,"column_start":1,"column_end":52}},{"value":"/ ```threshold``` is the threshold for the difference between","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\imageops\\sample.rs","byte_start":105564,"byte_end":105627,"line_start":791,"line_end":791,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\imageops\\sample.rs","byte_start":105628,"byte_end":105631,"line_start":792,"line_end":792,"column_start":1,"column_end":4}},{"value":"/ See <https://en.wikipedia.org/wiki/Unsharp_masking#Digital_unsharp_masking>","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\imageops\\sample.rs","byte_start":105632,"byte_end":105711,"line_start":793,"line_end":793,"column_start":1,"column_end":80}}]},{"kind":"Function","id":{"krate":0,"index":420},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\imageops\\mod.rs","byte_start":40373,"byte_end":40377,"line_start":34,"line_end":34,"column_start":8,"column_end":12},"name":"crop","qualname":"::imageops::crop","value":"pub fn crop<I: GenericImageView>(&mut I, u32, u32, u32, u32)\n-> SubImage<&mut I>","parent":null,"children":[],"decl_id":null,"docs":" Return a mutable view into an image\n The coordinates set the position of the top left corner of the crop.\n","sig":null,"attributes":[{"value":"/ Return a mutable view into an image","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\imageops\\mod.rs","byte_start":40253,"byte_end":40292,"line_start":32,"line_end":32,"column_start":1,"column_end":40}},{"value":"/ The coordinates set the position of the top left corner of the crop.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\imageops\\mod.rs","byte_start":40293,"byte_end":40365,"line_start":33,"line_end":33,"column_start":1,"column_end":73}}]},{"kind":"Function","id":{"krate":0,"index":422},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\imageops\\mod.rs","byte_start":40744,"byte_end":40752,"line_start":47,"line_end":47,"column_start":8,"column_end":16},"name":"crop_imm","qualname":"::imageops::crop_imm","value":"pub fn crop_imm<I: GenericImageView>(&I, u32, u32, u32, u32) -> SubImage<&I>","parent":null,"children":[],"decl_id":null,"docs":" Return an immutable view into an image\n The coordinates set the position of the top left corner of the crop.\n","sig":null,"attributes":[{"value":"/ Return an immutable view into an image","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\imageops\\mod.rs","byte_start":40621,"byte_end":40663,"line_start":45,"line_end":45,"column_start":1,"column_end":43}},{"value":"/ The coordinates set the position of the top left corner of the crop.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\imageops\\mod.rs","byte_start":40664,"byte_end":40736,"line_start":46,"line_end":46,"column_start":1,"column_end":73}}]},{"kind":"Function","id":{"krate":0,"index":426},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\imageops\\mod.rs","byte_start":43536,"byte_end":43550,"line_start":131,"line_end":131,"column_start":8,"column_end":22},"name":"overlay_bounds","qualname":"::imageops::overlay_bounds","value":"pub fn overlay_bounds((u32, u32), (u32, u32), u32, u32) -> (u32, u32)","parent":null,"children":[],"decl_id":null,"docs":" Calculate the region that can be copied from top to bottom.","sig":null,"attributes":[{"value":"/ Calculate the region that can be copied from top to bottom.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\imageops\\mod.rs","byte_start":41364,"byte_end":41427,"line_start":76,"line_end":76,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\imageops\\mod.rs","byte_start":41428,"byte_end":41431,"line_start":77,"line_end":77,"column_start":1,"column_end":4}},{"value":"/ Given image size of bottom and top image, and a point at which we want to place the top image","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\imageops\\mod.rs","byte_start":41432,"byte_end":41529,"line_start":78,"line_end":78,"column_start":1,"column_end":98}},{"value":"/ onto the bottom image, how large can we be? Have to wary of the following issues:","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\imageops\\mod.rs","byte_start":41530,"byte_end":41615,"line_start":79,"line_end":79,"column_start":1,"column_end":86}},{"value":"/ * Top might be larger than bottom","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\imageops\\mod.rs","byte_start":41616,"byte_end":41653,"line_start":80,"line_end":80,"column_start":1,"column_end":38}},{"value":"/ * Overflows in the computation","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\imageops\\mod.rs","byte_start":41654,"byte_end":41688,"line_start":81,"line_end":81,"column_start":1,"column_end":35}},{"value":"/ * Coordinates could be completely out of bounds","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\imageops\\mod.rs","byte_start":41689,"byte_end":41740,"line_start":82,"line_end":82,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\imageops\\mod.rs","byte_start":41741,"byte_end":41744,"line_start":83,"line_end":83,"column_start":1,"column_end":4}},{"value":"/ The main idea is to make use of inequalities provided by the nature of `saturing_add` and","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\imageops\\mod.rs","byte_start":41745,"byte_end":41838,"line_start":84,"line_end":84,"column_start":1,"column_end":94}},{"value":"/ `saturating_sub`. These intrinsically validate that all resulting coordinates will be in bounds","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\imageops\\mod.rs","byte_start":41839,"byte_end":41938,"line_start":85,"line_end":85,"column_start":1,"column_end":100}},{"value":"/ for both images.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\imageops\\mod.rs","byte_start":41939,"byte_end":41959,"line_start":86,"line_end":86,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\imageops\\mod.rs","byte_start":41960,"byte_end":41963,"line_start":87,"line_end":87,"column_start":1,"column_end":4}},{"value":"/ We want that all these coordinate accesses are safe:","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\imageops\\mod.rs","byte_start":41964,"byte_end":42020,"line_start":88,"line_end":88,"column_start":1,"column_end":57}},{"value":"/ 1. `bottom.get_pixel(x + [0..x_range), y + [0..y_range))`","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\imageops\\mod.rs","byte_start":42021,"byte_end":42082,"line_start":89,"line_end":89,"column_start":1,"column_end":62}},{"value":"/ 2. `top.get_pixel([0..x_range), [0..y_range))`","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\imageops\\mod.rs","byte_start":42083,"byte_end":42133,"line_start":90,"line_end":90,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\imageops\\mod.rs","byte_start":42134,"byte_end":42137,"line_start":91,"line_end":91,"column_start":1,"column_end":4}},{"value":"/ Proof that the function provides the necessary bounds for width. Note that all unaugmented math","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\imageops\\mod.rs","byte_start":42138,"byte_end":42237,"line_start":92,"line_end":92,"column_start":1,"column_end":100}},{"value":"/ operations are to be read in standard arithmetic, not integer arithmetic. Since no direct","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\imageops\\mod.rs","byte_start":42238,"byte_end":42331,"line_start":93,"line_end":93,"column_start":1,"column_end":94}},{"value":"/ integer arithmetic occurs in the implementation, this is unambiguous.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\imageops\\mod.rs","byte_start":42332,"byte_end":42405,"line_start":94,"line_end":94,"column_start":1,"column_end":74}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\imageops\\mod.rs","byte_start":42406,"byte_end":42409,"line_start":95,"line_end":95,"column_start":1,"column_end":4}},{"value":"/ ```text","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\imageops\\mod.rs","byte_start":42410,"byte_end":42421,"line_start":96,"line_end":96,"column_start":1,"column_end":12}},{"value":"/ Three short notes/lemmata:","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\imageops\\mod.rs","byte_start":42422,"byte_end":42452,"line_start":97,"line_end":97,"column_start":1,"column_end":31}},{"value":"/ - Iff `(a - b) <= 0` then `a.saturating_sub(b) = 0`","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\imageops\\mod.rs","byte_start":42453,"byte_end":42508,"line_start":98,"line_end":98,"column_start":1,"column_end":56}},{"value":"/ - Iff `(a - b) >= 0` then `a.saturating_sub(b) = a - b`","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\imageops\\mod.rs","byte_start":42509,"byte_end":42568,"line_start":99,"line_end":99,"column_start":1,"column_end":60}},{"value":"/ - If  `a <= c` then `a.saturating_sub(b) <= c.saturating_sub(b)`","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\imageops\\mod.rs","byte_start":42569,"byte_end":42637,"line_start":100,"line_end":100,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\imageops\\mod.rs","byte_start":42638,"byte_end":42641,"line_start":101,"line_end":101,"column_start":1,"column_end":4}},{"value":"/ 1.1 We show that if `bottom_width <= x`, then `x_range = 0` therefore `x + [0..x_range)` is empty.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\imageops\\mod.rs","byte_start":42642,"byte_end":42744,"line_start":102,"line_end":102,"column_start":1,"column_end":103}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\imageops\\mod.rs","byte_start":42745,"byte_end":42748,"line_start":103,"line_end":103,"column_start":1,"column_end":4}},{"value":"/ x_range","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\imageops\\mod.rs","byte_start":42749,"byte_end":42760,"line_start":104,"line_end":104,"column_start":1,"column_end":12}},{"value":"/  = (top_width.saturating_add(x).min(bottom_width)).saturating_sub(x)","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\imageops\\mod.rs","byte_start":42761,"byte_end":42833,"line_start":105,"line_end":105,"column_start":1,"column_end":73}},{"value":"/ <= bottom_width.saturating_sub(x)","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\imageops\\mod.rs","byte_start":42834,"byte_end":42871,"line_start":106,"line_end":106,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\imageops\\mod.rs","byte_start":42872,"byte_end":42875,"line_start":107,"line_end":107,"column_start":1,"column_end":4}},{"value":"/ bottom_width <= x","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\imageops\\mod.rs","byte_start":42876,"byte_end":42897,"line_start":108,"line_end":108,"column_start":1,"column_end":22}},{"value":"/ <==> bottom_width - x <= 0","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\imageops\\mod.rs","byte_start":42898,"byte_end":42928,"line_start":109,"line_end":109,"column_start":1,"column_end":31}},{"value":"/ <==> bottom_width.saturating_sub(x) = 0","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\imageops\\mod.rs","byte_start":42929,"byte_end":42972,"line_start":110,"line_end":110,"column_start":1,"column_end":44}},{"value":"/  ==> x_range <= 0","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\imageops\\mod.rs","byte_start":42973,"byte_end":42994,"line_start":111,"line_end":111,"column_start":1,"column_end":22}},{"value":"/  ==> x_range  = 0","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\imageops\\mod.rs","byte_start":42995,"byte_end":43016,"line_start":112,"line_end":112,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\imageops\\mod.rs","byte_start":43017,"byte_end":43020,"line_start":113,"line_end":113,"column_start":1,"column_end":4}},{"value":"/ 1.2 If `x < bottom_width` then `x + x_range < bottom_width`","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\imageops\\mod.rs","byte_start":43021,"byte_end":43084,"line_start":114,"line_end":114,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\imageops\\mod.rs","byte_start":43085,"byte_end":43088,"line_start":115,"line_end":115,"column_start":1,"column_end":4}},{"value":"/ x + x_range","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\imageops\\mod.rs","byte_start":43089,"byte_end":43104,"line_start":116,"line_end":116,"column_start":1,"column_end":16}},{"value":"/ <= x + bottom_width.saturating_sub(x)","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\imageops\\mod.rs","byte_start":43105,"byte_end":43146,"line_start":117,"line_end":117,"column_start":1,"column_end":42}},{"value":"/  = x + (bottom_width - x)","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\imageops\\mod.rs","byte_start":43147,"byte_end":43176,"line_start":118,"line_end":118,"column_start":1,"column_end":30}},{"value":"/  = bottom_width","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\imageops\\mod.rs","byte_start":43177,"byte_end":43196,"line_start":119,"line_end":119,"column_start":1,"column_end":20}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\imageops\\mod.rs","byte_start":43197,"byte_end":43200,"line_start":120,"line_end":120,"column_start":1,"column_end":4}},{"value":"/ 2. We show that `x_range <= top_width`","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\imageops\\mod.rs","byte_start":43201,"byte_end":43243,"line_start":121,"line_end":121,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\imageops\\mod.rs","byte_start":43244,"byte_end":43247,"line_start":122,"line_end":122,"column_start":1,"column_end":4}},{"value":"/ x_range","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\imageops\\mod.rs","byte_start":43248,"byte_end":43259,"line_start":123,"line_end":123,"column_start":1,"column_end":12}},{"value":"/  = (top_width.saturating_add(x).min(bottom_width)).saturating_sub(x)","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\imageops\\mod.rs","byte_start":43260,"byte_end":43332,"line_start":124,"line_end":124,"column_start":1,"column_end":73}},{"value":"/ <= top_width.saturating_add(x).saturating_sub(x)","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\imageops\\mod.rs","byte_start":43333,"byte_end":43385,"line_start":125,"line_end":125,"column_start":1,"column_end":53}},{"value":"/ <= (top_wdith + x).saturating_sub(x)","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\imageops\\mod.rs","byte_start":43386,"byte_end":43426,"line_start":126,"line_end":126,"column_start":1,"column_end":41}},{"value":"/  = top_width (due to `top_width >= 0` and `x >= 0`)","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\imageops\\mod.rs","byte_start":43427,"byte_end":43482,"line_start":127,"line_end":127,"column_start":1,"column_end":56}},{"value":"/ ```","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\imageops\\mod.rs","byte_start":43483,"byte_end":43490,"line_start":128,"line_end":128,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\imageops\\mod.rs","byte_start":43491,"byte_end":43494,"line_start":129,"line_end":129,"column_start":1,"column_end":4}},{"value":"/ Proof is the same for height.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\imageops\\mod.rs","byte_start":43495,"byte_end":43528,"line_start":130,"line_end":130,"column_start":1,"column_end":34}}]},{"kind":"Function","id":{"krate":0,"index":427},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\imageops\\mod.rs","byte_start":44064,"byte_end":44071,"line_start":149,"line_end":149,"column_start":8,"column_end":15},"name":"overlay","qualname":"::imageops::overlay","value":"pub fn overlay<I, J>(&mut I, &J, u32, u32) where I: GenericImage,\nJ: GenericImageView<Pixel = I::Pixel>","parent":null,"children":[],"decl_id":null,"docs":" Overlay an image at a given coordinate (x, y)\n","sig":null,"attributes":[{"value":"/ Overlay an image at a given coordinate (x, y)","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\imageops\\mod.rs","byte_start":44007,"byte_end":44056,"line_start":148,"line_end":148,"column_start":1,"column_end":50}}]},{"kind":"Function","id":{"krate":0,"index":430},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\imageops\\mod.rs","byte_start":45090,"byte_end":45094,"line_start":185,"line_end":185,"column_start":8,"column_end":12},"name":"tile","qualname":"::imageops::tile","value":"pub fn tile<I, J>(&mut I, &J) where I: GenericImage, J: GenericImageView<Pixel\n= I::Pixel>","parent":null,"children":[],"decl_id":null,"docs":" Tile an image by repeating it multiple times","sig":null,"attributes":[{"value":"/ Tile an image by repeating it multiple times","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\imageops\\mod.rs","byte_start":44730,"byte_end":44778,"line_start":171,"line_end":171,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\imageops\\mod.rs","byte_start":44779,"byte_end":44782,"line_start":172,"line_end":172,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\imageops\\mod.rs","byte_start":44783,"byte_end":44797,"line_start":173,"line_end":173,"column_start":1,"column_end":15}},{"value":"/ ```no_run","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\imageops\\mod.rs","byte_start":44798,"byte_end":44811,"line_start":174,"line_end":174,"column_start":1,"column_end":14}},{"value":"/ use image::{RgbaImage};","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\imageops\\mod.rs","byte_start":44812,"byte_end":44839,"line_start":175,"line_end":175,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\imageops\\mod.rs","byte_start":44840,"byte_end":44843,"line_start":176,"line_end":176,"column_start":1,"column_end":4}},{"value":"/ fn main() {","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\imageops\\mod.rs","byte_start":44844,"byte_end":44859,"line_start":177,"line_end":177,"column_start":1,"column_end":16}},{"value":"/      let mut img = RgbaImage::new(1920, 1080);","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\imageops\\mod.rs","byte_start":44860,"byte_end":44910,"line_start":178,"line_end":178,"column_start":1,"column_end":51}},{"value":"/      let tile = image::open(\"tile.png\").unwrap();","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\imageops\\mod.rs","byte_start":44911,"byte_end":44964,"line_start":179,"line_end":179,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\imageops\\mod.rs","byte_start":44965,"byte_end":44968,"line_start":180,"line_end":180,"column_start":1,"column_end":4}},{"value":"/      image::imageops::tile(&mut img, &tile);","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\imageops\\mod.rs","byte_start":44969,"byte_end":45017,"line_start":181,"line_end":181,"column_start":1,"column_end":49}},{"value":"/      img.save(\"tiled_wallpaper.png\").unwrap();","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\imageops\\mod.rs","byte_start":45018,"byte_end":45068,"line_start":182,"line_end":182,"column_start":1,"column_end":51}},{"value":"/ }","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\imageops\\mod.rs","byte_start":45069,"byte_end":45074,"line_start":183,"line_end":183,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\imageops\\mod.rs","byte_start":45075,"byte_end":45082,"line_start":184,"line_end":184,"column_start":1,"column_end":8}}]},{"kind":"Function","id":{"krate":0,"index":433},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\imageops\\mod.rs","byte_start":45891,"byte_end":45908,"line_start":213,"line_end":213,"column_start":8,"column_end":25},"name":"vertical_gradient","qualname":"::imageops::vertical_gradient","value":"pub fn vertical_gradient<S, P, I>(&mut I, &P, &P) where I: GenericImage<Pixel\n= P>, P: Pixel<Subpixel = S> + 'static, S: Primitive + Lerp + 'static","parent":null,"children":[],"decl_id":null,"docs":" Fill the image with a linear vertical gradient\n \n This function assumes a linear color space.\n \n # Examples\n ```no_run\n use image::{Rgba, RgbaImage, Pixel};\n \n fn main() {\n     let mut img = RgbaImage::new(100, 100);\n     let start = Rgba::from_slice(&[0, 128, 0, 0]);\n     let end = Rgba::from_slice(&[255, 255, 255, 255]);\n \n     image::imageops::vertical_gradient(&mut img, start, end);\n     img.save(\"vertical_gradient.png\").unwrap();\n }\n","sig":null,"attributes":[{"value":"/ Fill the image with a linear vertical gradient","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\imageops\\mod.rs","byte_start":45393,"byte_end":45443,"line_start":197,"line_end":197,"column_start":1,"column_end":51}},{"value":"/ ","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\imageops\\mod.rs","byte_start":45444,"byte_end":45448,"line_start":198,"line_end":198,"column_start":1,"column_end":5}},{"value":"/ This function assumes a linear color space.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\imageops\\mod.rs","byte_start":45449,"byte_end":45496,"line_start":199,"line_end":199,"column_start":1,"column_end":48}},{"value":"/ ","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\imageops\\mod.rs","byte_start":45497,"byte_end":45501,"line_start":200,"line_end":200,"column_start":1,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\imageops\\mod.rs","byte_start":45502,"byte_end":45516,"line_start":201,"line_end":201,"column_start":1,"column_end":15}},{"value":"/ ```no_run","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\imageops\\mod.rs","byte_start":45517,"byte_end":45530,"line_start":202,"line_end":202,"column_start":1,"column_end":14}},{"value":"/ use image::{Rgba, RgbaImage, Pixel};","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\imageops\\mod.rs","byte_start":45531,"byte_end":45571,"line_start":203,"line_end":203,"column_start":1,"column_end":41}},{"value":"/ ","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\imageops\\mod.rs","byte_start":45572,"byte_end":45576,"line_start":204,"line_end":204,"column_start":1,"column_end":5}},{"value":"/ fn main() {","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\imageops\\mod.rs","byte_start":45577,"byte_end":45592,"line_start":205,"line_end":205,"column_start":1,"column_end":16}},{"value":"/     let mut img = RgbaImage::new(100, 100);","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\imageops\\mod.rs","byte_start":45593,"byte_end":45640,"line_start":206,"line_end":206,"column_start":1,"column_end":48}},{"value":"/     let start = Rgba::from_slice(&[0, 128, 0, 0]);","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\imageops\\mod.rs","byte_start":45641,"byte_end":45695,"line_start":207,"line_end":207,"column_start":1,"column_end":55}},{"value":"/     let end = Rgba::from_slice(&[255, 255, 255, 255]);","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\imageops\\mod.rs","byte_start":45696,"byte_end":45754,"line_start":208,"line_end":208,"column_start":1,"column_end":59}},{"value":"/ ","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\imageops\\mod.rs","byte_start":45755,"byte_end":45759,"line_start":209,"line_end":209,"column_start":1,"column_end":5}},{"value":"/     image::imageops::vertical_gradient(&mut img, start, end);","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\imageops\\mod.rs","byte_start":45760,"byte_end":45825,"line_start":210,"line_end":210,"column_start":1,"column_end":66}},{"value":"/     img.save(\"vertical_gradient.png\").unwrap();","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\imageops\\mod.rs","byte_start":45826,"byte_end":45877,"line_start":211,"line_end":211,"column_start":1,"column_end":52}},{"value":"/ }","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\imageops\\mod.rs","byte_start":45878,"byte_end":45883,"line_start":212,"line_end":212,"column_start":1,"column_end":6}}]},{"kind":"Function","id":{"krate":0,"index":438},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\imageops\\mod.rs","byte_start":46938,"byte_end":46957,"line_start":248,"line_end":248,"column_start":8,"column_end":27},"name":"horizontal_gradient","qualname":"::imageops::horizontal_gradient","value":"pub fn horizontal_gradient<S, P, I>(&mut I, &P, &P) where\nI: GenericImage<Pixel = P>, P: Pixel<Subpixel = S> + 'static, S: Primitive +\nLerp + 'static","parent":null,"children":[],"decl_id":null,"docs":" Fill the image with a linear horizontal gradient\n \n This function assumes a linear color space.","sig":null,"attributes":[{"value":"/ Fill the image with a linear horizontal gradient","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\imageops\\mod.rs","byte_start":46435,"byte_end":46487,"line_start":232,"line_end":232,"column_start":1,"column_end":53}},{"value":"/ ","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\imageops\\mod.rs","byte_start":46488,"byte_end":46492,"line_start":233,"line_end":233,"column_start":1,"column_end":5}},{"value":"/ This function assumes a linear color space.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\imageops\\mod.rs","byte_start":46493,"byte_end":46540,"line_start":234,"line_end":234,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\imageops\\mod.rs","byte_start":46541,"byte_end":46544,"line_start":235,"line_end":235,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\imageops\\mod.rs","byte_start":46545,"byte_end":46559,"line_start":236,"line_end":236,"column_start":1,"column_end":15}},{"value":"/ ```no_run","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\imageops\\mod.rs","byte_start":46560,"byte_end":46573,"line_start":237,"line_end":237,"column_start":1,"column_end":14}},{"value":"/ use image::{Rgba, RgbaImage, Pixel};","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\imageops\\mod.rs","byte_start":46574,"byte_end":46614,"line_start":238,"line_end":238,"column_start":1,"column_end":41}},{"value":"/ ","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\imageops\\mod.rs","byte_start":46615,"byte_end":46619,"line_start":239,"line_end":239,"column_start":1,"column_end":5}},{"value":"/ fn main() {","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\imageops\\mod.rs","byte_start":46620,"byte_end":46635,"line_start":240,"line_end":240,"column_start":1,"column_end":16}},{"value":"/     let mut img = RgbaImage::new(100, 100);","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\imageops\\mod.rs","byte_start":46636,"byte_end":46683,"line_start":241,"line_end":241,"column_start":1,"column_end":48}},{"value":"/     let start = Rgba::from_slice(&[0, 128, 0, 0]);","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\imageops\\mod.rs","byte_start":46684,"byte_end":46738,"line_start":242,"line_end":242,"column_start":1,"column_end":55}},{"value":"/     let end = Rgba::from_slice(&[255, 255, 255, 255]);","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\imageops\\mod.rs","byte_start":46739,"byte_end":46797,"line_start":243,"line_end":243,"column_start":1,"column_end":59}},{"value":"/ ","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\imageops\\mod.rs","byte_start":46798,"byte_end":46802,"line_start":244,"line_end":244,"column_start":1,"column_end":5}},{"value":"/     image::imageops::horizontal_gradient(&mut img, start, end);","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\imageops\\mod.rs","byte_start":46803,"byte_end":46870,"line_start":245,"line_end":245,"column_start":1,"column_end":68}},{"value":"/     img.save(\"horizontal_gradient.png\").unwrap();","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\imageops\\mod.rs","byte_start":46871,"byte_end":46924,"line_start":246,"line_end":246,"column_start":1,"column_end":54}},{"value":"/ }","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\imageops\\mod.rs","byte_start":46925,"byte_end":46930,"line_start":247,"line_end":247,"column_start":1,"column_end":6}}]},{"kind":"Function","id":{"krate":0,"index":443},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\imageops\\mod.rs","byte_start":47554,"byte_end":47561,"line_start":268,"line_end":268,"column_start":8,"column_end":15},"name":"replace","qualname":"::imageops::replace","value":"pub fn replace<I, J>(&mut I, &J, u32, u32) where I: GenericImage,\nJ: GenericImageView<Pixel = I::Pixel>","parent":null,"children":[],"decl_id":null,"docs":" Replace the contents of an image at a given coordinate (x, y)\n","sig":null,"attributes":[{"value":"/ Replace the contents of an image at a given coordinate (x, y)","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\imageops\\mod.rs","byte_start":47481,"byte_end":47546,"line_start":267,"line_end":267,"column_start":1,"column_end":66}}]},{"kind":"Mod","id":{"krate":0,"index":446},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\io\\mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"io","qualname":"::io","value":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\io\\mod.rs","parent":null,"children":[{"krate":0,"index":447},{"krate":0,"index":493},{"krate":0,"index":527}],"decl_id":null,"docs":" Input and output of images.\n","sig":null,"attributes":[{"value":"/ Input and output of images.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\io\\mod.rs","byte_start":109785,"byte_end":109816,"line_start":1,"line_end":1,"column_start":1,"column_end":32}}]},{"kind":"Struct","id":{"krate":0,"index":468},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\io\\reader.rs","byte_start":112013,"byte_end":112019,"line_start":61,"line_end":61,"column_start":12,"column_end":18},"name":"Reader","qualname":"::io::reader::Reader","value":"Reader {  }","parent":null,"children":[{"krate":0,"index":470},{"krate":0,"index":471}],"decl_id":null,"docs":" A multi-format image reader.","sig":null,"attributes":[{"value":"/ A multi-format image reader.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\io\\reader.rs","byte_start":110214,"byte_end":110246,"line_start":12,"line_end":12,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\io\\reader.rs","byte_start":110247,"byte_end":110250,"line_start":13,"line_end":13,"column_start":1,"column_end":4}},{"value":"/ Wraps an input reader to facilitate automatic detection of an image's format, appropriate","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\io\\reader.rs","byte_start":110251,"byte_end":110344,"line_start":14,"line_end":14,"column_start":1,"column_end":94}},{"value":"/ decoding method, and dispatches into the set of supported [`ImageDecoder`] implementations.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\io\\reader.rs","byte_start":110345,"byte_end":110440,"line_start":15,"line_end":15,"column_start":1,"column_end":96}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\io\\reader.rs","byte_start":110441,"byte_end":110444,"line_start":16,"line_end":16,"column_start":1,"column_end":4}},{"value":"/ ## Usage","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\io\\reader.rs","byte_start":110445,"byte_end":110457,"line_start":17,"line_end":17,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\io\\reader.rs","byte_start":110458,"byte_end":110461,"line_start":18,"line_end":18,"column_start":1,"column_end":4}},{"value":"/ Opening a file, deducing the format based on the file path automatically, and trying to decode","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\io\\reader.rs","byte_start":110462,"byte_end":110560,"line_start":19,"line_end":19,"column_start":1,"column_end":99}},{"value":"/ the image contained can be performed by constructing the reader and immediately consuming it.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\io\\reader.rs","byte_start":110561,"byte_end":110658,"line_start":20,"line_end":20,"column_start":1,"column_end":98}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\io\\reader.rs","byte_start":110659,"byte_end":110662,"line_start":21,"line_end":21,"column_start":1,"column_end":4}},{"value":"/ ```no_run","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\io\\reader.rs","byte_start":110663,"byte_end":110676,"line_start":22,"line_end":22,"column_start":1,"column_end":14}},{"value":"/ # use image::ImageError;","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\io\\reader.rs","byte_start":110677,"byte_end":110705,"line_start":23,"line_end":23,"column_start":1,"column_end":29}},{"value":"/ # use image::io::Reader;","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\io\\reader.rs","byte_start":110706,"byte_end":110734,"line_start":24,"line_end":24,"column_start":1,"column_end":29}},{"value":"/ # fn main() -> Result<(), ImageError> {","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\io\\reader.rs","byte_start":110735,"byte_end":110778,"line_start":25,"line_end":25,"column_start":1,"column_end":44}},{"value":"/ let image = Reader::open(\"path/to/image.png\")?","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\io\\reader.rs","byte_start":110779,"byte_end":110829,"line_start":26,"line_end":26,"column_start":1,"column_end":51}},{"value":"/     .decode()?;","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\io\\reader.rs","byte_start":110830,"byte_end":110849,"line_start":27,"line_end":27,"column_start":1,"column_end":20}},{"value":"/ # Ok(()) }","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\io\\reader.rs","byte_start":110850,"byte_end":110864,"line_start":28,"line_end":28,"column_start":1,"column_end":15}},{"value":"/ ```","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\io\\reader.rs","byte_start":110865,"byte_end":110872,"line_start":29,"line_end":29,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\io\\reader.rs","byte_start":110873,"byte_end":110876,"line_start":30,"line_end":30,"column_start":1,"column_end":4}},{"value":"/ It is also possible to make a guess based on the content. This is especially handy if the","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\io\\reader.rs","byte_start":110877,"byte_end":110970,"line_start":31,"line_end":31,"column_start":1,"column_end":94}},{"value":"/ source is some blob in memory and you have constructed the reader in another way. Here is an","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\io\\reader.rs","byte_start":110971,"byte_end":111067,"line_start":32,"line_end":32,"column_start":1,"column_end":97}},{"value":"/ example with a `pnm` black-and-white subformat that encodes its pixel matrix with ascii values.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\io\\reader.rs","byte_start":111068,"byte_end":111167,"line_start":33,"line_end":33,"column_start":1,"column_end":100}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\io\\reader.rs","byte_start":111168,"byte_end":111171,"line_start":34,"line_end":34,"column_start":1,"column_end":4}},{"value":"/ # use image::ImageError;","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\io\\reader.rs","byte_start":111267,"byte_end":111295,"line_start":37,"line_end":37,"column_start":1,"column_end":29}},{"value":"/ # use image::io::Reader;","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\io\\reader.rs","byte_start":111296,"byte_end":111324,"line_start":38,"line_end":38,"column_start":1,"column_end":29}},{"value":"/ # fn main() -> Result<(), ImageError> {","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\io\\reader.rs","byte_start":111325,"byte_end":111368,"line_start":39,"line_end":39,"column_start":1,"column_end":44}},{"value":"/ use std::io::Cursor;","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\io\\reader.rs","byte_start":111369,"byte_end":111393,"line_start":40,"line_end":40,"column_start":1,"column_end":25}},{"value":"/ use image::ImageFormat;","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\io\\reader.rs","byte_start":111394,"byte_end":111421,"line_start":41,"line_end":41,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\io\\reader.rs","byte_start":111422,"byte_end":111425,"line_start":42,"line_end":42,"column_start":1,"column_end":4}},{"value":"/ let raw_data = b\"P1 2 2\\n\\","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\io\\reader.rs","byte_start":111426,"byte_end":111456,"line_start":43,"line_end":43,"column_start":1,"column_end":31}},{"value":"/     0 1\\n\\","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\io\\reader.rs","byte_start":111457,"byte_end":111471,"line_start":44,"line_end":44,"column_start":1,"column_end":15}},{"value":"/     1 0\\n\";","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\io\\reader.rs","byte_start":111472,"byte_end":111487,"line_start":45,"line_end":45,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\io\\reader.rs","byte_start":111488,"byte_end":111491,"line_start":46,"line_end":46,"column_start":1,"column_end":4}},{"value":"/ let mut reader = Reader::new(Cursor::new(raw_data))","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\io\\reader.rs","byte_start":111492,"byte_end":111547,"line_start":47,"line_end":47,"column_start":1,"column_end":56}},{"value":"/     .with_guessed_format()","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\io\\reader.rs","byte_start":111548,"byte_end":111578,"line_start":48,"line_end":48,"column_start":1,"column_end":31}},{"value":"/     .expect(\"Cursor io never fails\");","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\io\\reader.rs","byte_start":111579,"byte_end":111620,"line_start":49,"line_end":49,"column_start":1,"column_end":42}},{"value":"/ assert_eq!(reader.format(), Some(ImageFormat::Pnm));","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\io\\reader.rs","byte_start":111621,"byte_end":111677,"line_start":50,"line_end":50,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\io\\reader.rs","byte_start":111678,"byte_end":111681,"line_start":51,"line_end":51,"column_start":1,"column_end":4}},{"value":"/ let image = reader.decode()?;","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\io\\reader.rs","byte_start":111682,"byte_end":111715,"line_start":52,"line_end":52,"column_start":1,"column_end":34}},{"value":"/ # Ok(()) }","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\io\\reader.rs","byte_start":111716,"byte_end":111730,"line_start":53,"line_end":53,"column_start":1,"column_end":15}},{"value":"/ ```","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\io\\reader.rs","byte_start":111731,"byte_end":111738,"line_start":54,"line_end":54,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\io\\reader.rs","byte_start":111739,"byte_end":111742,"line_start":55,"line_end":55,"column_start":1,"column_end":4}},{"value":"/ As a final fallback or if only a specific format must be used, the reader always allows manual","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\io\\reader.rs","byte_start":111743,"byte_end":111841,"line_start":56,"line_end":56,"column_start":1,"column_end":99}},{"value":"/ specification of the supposed image format with [`set_format`].","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\io\\reader.rs","byte_start":111842,"byte_end":111909,"line_start":57,"line_end":57,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\io\\reader.rs","byte_start":111910,"byte_end":111913,"line_start":58,"line_end":58,"column_start":1,"column_end":4}},{"value":"/ [`set_format`]: #method.set_format","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\io\\reader.rs","byte_start":111914,"byte_end":111952,"line_start":59,"line_end":59,"column_start":1,"column_end":39}},{"value":"/ [`ImageDecoder`]: ../trait.ImageDecoder.html","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\io\\reader.rs","byte_start":111953,"byte_end":112001,"line_start":60,"line_end":60,"column_start":1,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":474},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\io\\reader.rs","byte_start":112540,"byte_end":112543,"line_start":76,"line_end":76,"column_start":12,"column_end":15},"name":"new","qualname":"<Reader<R>>::new","value":"pub fn new(R) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new image reader without a preset format.","sig":null,"attributes":[{"value":"/ Create a new image reader without a preset format.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\io\\reader.rs","byte_start":112183,"byte_end":112237,"line_start":69,"line_end":69,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\io\\reader.rs","byte_start":112242,"byte_end":112245,"line_start":70,"line_end":70,"column_start":5,"column_end":8}},{"value":"/ It is possible to guess the format based on the content of the read object with","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\io\\reader.rs","byte_start":112250,"byte_end":112333,"line_start":71,"line_end":71,"column_start":5,"column_end":88}},{"value":"/ [`with_guessed_format`], or to set the format directly with [`set_format`].","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\io\\reader.rs","byte_start":112338,"byte_end":112417,"line_start":72,"line_end":72,"column_start":5,"column_end":84}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\io\\reader.rs","byte_start":112422,"byte_end":112425,"line_start":73,"line_end":73,"column_start":5,"column_end":8}},{"value":"/ [`with_guessed_format`]: #method.with_guessed_format","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\io\\reader.rs","byte_start":112430,"byte_end":112486,"line_start":74,"line_end":74,"column_start":5,"column_end":61}},{"value":"/ [`set_format`]: method.set_format","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\io\\reader.rs","byte_start":112491,"byte_end":112528,"line_start":75,"line_end":75,"column_start":5,"column_end":42}}]},{"kind":"Method","id":{"krate":0,"index":475},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\io\\reader.rs","byte_start":112713,"byte_end":112724,"line_start":84,"line_end":84,"column_start":12,"column_end":23},"name":"with_format","qualname":"<Reader<R>>::with_format","value":"pub fn with_format(R, ImageFormat) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Construct a reader with specified format.\n","sig":null,"attributes":[{"value":"/ Construct a reader with specified format.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\io\\reader.rs","byte_start":112656,"byte_end":112701,"line_start":83,"line_end":83,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":476},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\io\\reader.rs","byte_start":112918,"byte_end":112924,"line_start":92,"line_end":92,"column_start":12,"column_end":18},"name":"format","qualname":"<Reader<R>>::format","value":"pub fn format(&Self) -> Option<ImageFormat>","parent":null,"children":[],"decl_id":null,"docs":" Get the currently determined format.\n","sig":null,"attributes":[{"value":"/ Get the currently determined format.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\io\\reader.rs","byte_start":112866,"byte_end":112906,"line_start":91,"line_end":91,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":477},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\io\\reader.rs","byte_start":113059,"byte_end":113069,"line_start":97,"line_end":97,"column_start":12,"column_end":22},"name":"set_format","qualname":"<Reader<R>>::set_format","value":"pub fn set_format(&mut Self, ImageFormat)","parent":null,"children":[],"decl_id":null,"docs":" Supply the format as which to interpret the read image.\n","sig":null,"attributes":[{"value":"/ Supply the format as which to interpret the read image.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\io\\reader.rs","byte_start":112988,"byte_end":113047,"line_start":96,"line_end":96,"column_start":5,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":478},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\io\\reader.rs","byte_start":113399,"byte_end":113411,"line_start":105,"line_end":105,"column_start":12,"column_end":24},"name":"clear_format","qualname":"<Reader<R>>::clear_format","value":"pub fn clear_format(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":" Remove the current information on the image format.","sig":null,"attributes":[{"value":"/ Remove the current information on the image format.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\io\\reader.rs","byte_start":113151,"byte_end":113206,"line_start":101,"line_end":101,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\io\\reader.rs","byte_start":113211,"byte_end":113214,"line_start":102,"line_end":102,"column_start":5,"column_end":8}},{"value":"/ Note that many operations require format information to be present and will return e.g. an","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\io\\reader.rs","byte_start":113219,"byte_end":113313,"line_start":103,"line_end":103,"column_start":5,"column_end":99}},{"value":"/ `ImageError::Unsupported` when the image format has not been set.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\io\\reader.rs","byte_start":113318,"byte_end":113387,"line_start":104,"line_end":104,"column_start":5,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":479},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\io\\reader.rs","byte_start":113498,"byte_end":113508,"line_start":110,"line_end":110,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<Reader<R>>::into_inner","value":"pub fn into_inner(Self) -> R","parent":null,"children":[],"decl_id":null,"docs":" Unwrap the reader.\n","sig":null,"attributes":[{"value":"/ Unwrap the reader.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\io\\reader.rs","byte_start":113464,"byte_end":113486,"line_start":109,"line_end":109,"column_start":5,"column_end":27}}]},{"kind":"Method","id":{"krate":0,"index":481},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\io\\reader.rs","byte_start":113991,"byte_end":113995,"line_start":124,"line_end":124,"column_start":12,"column_end":16},"name":"open","qualname":"<Reader<BufReader<File>>>::open","value":"pub fn open<P>(P) -> io::Result<Self> where P: AsRef<Path>","parent":null,"children":[],"decl_id":null,"docs":" Open a file to read, format will be guessed from path.","sig":null,"attributes":[{"value":"/ Open a file to read, format will be guessed from path.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\io\\reader.rs","byte_start":113585,"byte_end":113643,"line_start":116,"line_end":116,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\io\\reader.rs","byte_start":113648,"byte_end":113651,"line_start":117,"line_end":117,"column_start":5,"column_end":8}},{"value":"/ This will not attempt any io operation on the opened file.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\io\\reader.rs","byte_start":113656,"byte_end":113718,"line_start":118,"line_end":118,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\io\\reader.rs","byte_start":113723,"byte_end":113726,"line_start":119,"line_end":119,"column_start":5,"column_end":8}},{"value":"/ If you want to inspect the content for a better guess on the format, which does not depend","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\io\\reader.rs","byte_start":113731,"byte_end":113825,"line_start":120,"line_end":120,"column_start":5,"column_end":99}},{"value":"/ on file extensions, follow this call with a call to [`with_guessed_format`].","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\io\\reader.rs","byte_start":113830,"byte_end":113910,"line_start":121,"line_end":121,"column_start":5,"column_end":85}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\io\\reader.rs","byte_start":113915,"byte_end":113918,"line_start":122,"line_end":122,"column_start":5,"column_end":8}},{"value":"/ [`with_guessed_format`]: #method.with_guessed_format","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\io\\reader.rs","byte_start":113923,"byte_end":113979,"line_start":123,"line_end":123,"column_start":5,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":486},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\io\\reader.rs","byte_start":115637,"byte_end":115656,"line_start":166,"line_end":166,"column_start":12,"column_end":31},"name":"with_guessed_format","qualname":"<Reader<R>>::with_guessed_format","value":"pub fn with_guessed_format(Self) -> io::Result<Self>","parent":null,"children":[],"decl_id":null,"docs":" Make a format guess based on the content, replacing it on success.","sig":null,"attributes":[{"value":"/ Make a format guess based on the content, replacing it on success.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\io\\reader.rs","byte_start":114363,"byte_end":114433,"line_start":138,"line_end":138,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\io\\reader.rs","byte_start":114438,"byte_end":114441,"line_start":139,"line_end":139,"column_start":5,"column_end":8}},{"value":"/ Returns `Ok` with the guess if no io error occurs. Additionally, replaces the current","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\io\\reader.rs","byte_start":114446,"byte_end":114535,"line_start":140,"line_end":140,"column_start":5,"column_end":94}},{"value":"/ format if the guess was successful. If the guess was unable to determine a format then","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\io\\reader.rs","byte_start":114540,"byte_end":114630,"line_start":141,"line_end":141,"column_start":5,"column_end":95}},{"value":"/ the current format of the reader is unchanged.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\io\\reader.rs","byte_start":114635,"byte_end":114685,"line_start":142,"line_end":142,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\io\\reader.rs","byte_start":114690,"byte_end":114693,"line_start":143,"line_end":143,"column_start":5,"column_end":8}},{"value":"/ Returns an error if the underlying reader fails. The format is unchanged. The error is a","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\io\\reader.rs","byte_start":114698,"byte_end":114790,"line_start":144,"line_end":144,"column_start":5,"column_end":97}},{"value":"/ `std::io::Error` and not `ImageError` since the only error case is an error when the","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\io\\reader.rs","byte_start":114795,"byte_end":114883,"line_start":145,"line_end":145,"column_start":5,"column_end":93}},{"value":"/ underlying reader seeks.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\io\\reader.rs","byte_start":114888,"byte_end":114916,"line_start":146,"line_end":146,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\io\\reader.rs","byte_start":114921,"byte_end":114924,"line_start":147,"line_end":147,"column_start":5,"column_end":8}},{"value":"/ When an error occurs, the reader may not have been properly reset and it is potentially","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\io\\reader.rs","byte_start":114929,"byte_end":115020,"line_start":148,"line_end":148,"column_start":5,"column_end":96}},{"value":"/ hazardous to continue with more io.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\io\\reader.rs","byte_start":115025,"byte_end":115064,"line_start":149,"line_end":149,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\io\\reader.rs","byte_start":115069,"byte_end":115072,"line_start":150,"line_end":150,"column_start":5,"column_end":8}},{"value":"/ ## Usage","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\io\\reader.rs","byte_start":115077,"byte_end":115089,"line_start":151,"line_end":151,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\io\\reader.rs","byte_start":115094,"byte_end":115097,"line_start":152,"line_end":152,"column_start":5,"column_end":8}},{"value":"/ This supplements the path based type deduction from [`open`](Reader::open) with content based deduction.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\io\\reader.rs","byte_start":115102,"byte_end":115210,"line_start":153,"line_end":153,"column_start":5,"column_end":113}},{"value":"/ This is more common in Linux and UNIX operating systems and also helpful if the path can","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\io\\reader.rs","byte_start":115215,"byte_end":115307,"line_start":154,"line_end":154,"column_start":5,"column_end":97}},{"value":"/ not be directly controlled.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\io\\reader.rs","byte_start":115312,"byte_end":115343,"line_start":155,"line_end":155,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\io\\reader.rs","byte_start":115348,"byte_end":115351,"line_start":156,"line_end":156,"column_start":5,"column_end":8}},{"value":"/ ```no_run","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\io\\reader.rs","byte_start":115356,"byte_end":115369,"line_start":157,"line_end":157,"column_start":5,"column_end":18}},{"value":"/ # use image::ImageError;","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\io\\reader.rs","byte_start":115374,"byte_end":115402,"line_start":158,"line_end":158,"column_start":5,"column_end":33}},{"value":"/ # use image::io::Reader;","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\io\\reader.rs","byte_start":115407,"byte_end":115435,"line_start":159,"line_end":159,"column_start":5,"column_end":33}},{"value":"/ # fn main() -> Result<(), ImageError> {","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\io\\reader.rs","byte_start":115440,"byte_end":115483,"line_start":160,"line_end":160,"column_start":5,"column_end":48}},{"value":"/ let image = Reader::open(\"image.unknown\")?","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\io\\reader.rs","byte_start":115488,"byte_end":115534,"line_start":161,"line_end":161,"column_start":5,"column_end":51}},{"value":"/     .with_guessed_format()?","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\io\\reader.rs","byte_start":115539,"byte_end":115570,"line_start":162,"line_end":162,"column_start":5,"column_end":36}},{"value":"/     .decode()?;","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\io\\reader.rs","byte_start":115575,"byte_end":115594,"line_start":163,"line_end":163,"column_start":5,"column_end":24}},{"value":"/ # Ok(()) }","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\io\\reader.rs","byte_start":115599,"byte_end":115613,"line_start":164,"line_end":164,"column_start":5,"column_end":19}},{"value":"/ ```","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\io\\reader.rs","byte_start":115618,"byte_end":115625,"line_start":165,"line_end":165,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":489},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\io\\reader.rs","byte_start":116614,"byte_end":116629,"line_start":192,"line_end":192,"column_start":12,"column_end":27},"name":"into_dimensions","qualname":"<Reader<R>>::into_dimensions","value":"pub fn into_dimensions(Self) -> ImageResult<(u32, u32)>","parent":null,"children":[],"decl_id":null,"docs":" Read the image dimensions.","sig":null,"attributes":[{"value":"/ Read the image dimensions.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\io\\reader.rs","byte_start":116401,"byte_end":116431,"line_start":187,"line_end":187,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\io\\reader.rs","byte_start":116436,"byte_end":116439,"line_start":188,"line_end":188,"column_start":5,"column_end":8}},{"value":"/ Uses the current format to construct the correct reader for the format.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\io\\reader.rs","byte_start":116444,"byte_end":116519,"line_start":189,"line_end":189,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\io\\reader.rs","byte_start":116524,"byte_end":116527,"line_start":190,"line_end":190,"column_start":5,"column_end":8}},{"value":"/ If no format was determined, returns an `ImageError::Unsupported`.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\io\\reader.rs","byte_start":116532,"byte_end":116602,"line_start":191,"line_end":191,"column_start":5,"column_end":75}}]},{"kind":"Method","id":{"krate":0,"index":490},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\io\\reader.rs","byte_start":117023,"byte_end":117029,"line_start":202,"line_end":202,"column_start":12,"column_end":18},"name":"decode","qualname":"<Reader<R>>::decode","value":"pub fn decode(Self) -> ImageResult<DynamicImage>","parent":null,"children":[],"decl_id":null,"docs":" Read the image (replaces `load`).","sig":null,"attributes":[{"value":"/ Read the image (replaces `load`).","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\io\\reader.rs","byte_start":116803,"byte_end":116840,"line_start":197,"line_end":197,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\io\\reader.rs","byte_start":116845,"byte_end":116848,"line_start":198,"line_end":198,"column_start":5,"column_end":8}},{"value":"/ Uses the current format to construct the correct reader for the format.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\io\\reader.rs","byte_start":116853,"byte_end":116928,"line_start":199,"line_end":199,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\io\\reader.rs","byte_start":116933,"byte_end":116936,"line_start":200,"line_end":200,"column_start":5,"column_end":8}},{"value":"/ If no format was determined, returns an `ImageError::Unsupported`.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\io\\reader.rs","byte_start":116941,"byte_end":117011,"line_start":201,"line_end":201,"column_start":5,"column_end":75}}]},{"kind":"Function","id":{"krate":0,"index":516},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\io\\free_functions.rs","byte_start":119021,"byte_end":119025,"line_start":58,"line_end":58,"column_start":8,"column_end":12},"name":"load","qualname":"::io::free_functions::load","value":"pub fn load<R: BufRead + Seek>(R, ImageFormat) -> ImageResult<DynamicImage>","parent":null,"children":[],"decl_id":null,"docs":" Create a new image from a Reader","sig":null,"attributes":[{"value":"/ Create a new image from a Reader","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\io\\free_functions.rs","byte_start":118808,"byte_end":118844,"line_start":51,"line_end":51,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\io\\free_functions.rs","byte_start":118845,"byte_end":118848,"line_start":52,"line_end":52,"column_start":1,"column_end":4}},{"value":"/ Try [`io::Reader`] for more advanced uses.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\io\\free_functions.rs","byte_start":118849,"byte_end":118895,"line_start":53,"line_end":53,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\io\\free_functions.rs","byte_start":118896,"byte_end":118899,"line_start":54,"line_end":54,"column_start":1,"column_end":4}},{"value":"/ [`io::Reader`]: io/struct.Reader.html","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\io\\free_functions.rs","byte_start":118900,"byte_end":118941,"line_start":55,"line_end":55,"column_start":1,"column_end":42}},{"value":"allow(unused_variables)","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\io\\free_functions.rs","byte_start":118942,"byte_end":118968,"line_start":56,"line_end":56,"column_start":1,"column_end":27}}]},{"kind":"Function","id":{"krate":0,"index":525},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\io\\free_functions.rs","byte_start":127495,"byte_end":127507,"line_start":239,"line_end":239,"column_start":8,"column_end":20},"name":"guess_format","qualname":"::io::free_functions::guess_format","value":"pub fn guess_format(&[u8]) -> ImageResult<ImageFormat>","parent":null,"children":[],"decl_id":null,"docs":" Guess image format from memory block","sig":null,"attributes":[{"value":"/ Guess image format from memory block","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\io\\free_functions.rs","byte_start":127234,"byte_end":127274,"line_start":234,"line_end":234,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\io\\free_functions.rs","byte_start":127275,"byte_end":127278,"line_start":235,"line_end":235,"column_start":1,"column_end":4}},{"value":"/ Makes an educated guess about the image format based on the Magic Bytes at the beginning.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\io\\free_functions.rs","byte_start":127279,"byte_end":127372,"line_start":236,"line_end":236,"column_start":1,"column_end":94}},{"value":"/ TGA is not supported by this function.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\io\\free_functions.rs","byte_start":127373,"byte_end":127415,"line_start":237,"line_end":237,"column_start":1,"column_end":43}},{"value":"/ This is not to be trusted on the validity of the whole memory block","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\io\\free_functions.rs","byte_start":127416,"byte_end":127487,"line_start":238,"line_end":238,"column_start":1,"column_end":72}}]},{"kind":"Mod","id":{"krate":0,"index":528},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"flat","qualname":"::flat","value":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","parent":null,"children":[{"krate":0,"index":529},{"krate":0,"index":530},{"krate":0,"index":531},{"krate":0,"index":532},{"krate":0,"index":533},{"krate":0,"index":534},{"krate":0,"index":535},{"krate":0,"index":536},{"krate":0,"index":537},{"krate":0,"index":3820},{"krate":0,"index":538},{"krate":0,"index":539},{"krate":0,"index":540},{"krate":0,"index":541},{"krate":0,"index":542},{"krate":0,"index":543},{"krate":0,"index":544},{"krate":0,"index":545},{"krate":0,"index":546},{"krate":0,"index":547},{"krate":0,"index":548},{"krate":0,"index":549},{"krate":0,"index":550},{"krate":0,"index":551},{"krate":0,"index":552},{"krate":0,"index":553},{"krate":0,"index":554},{"krate":0,"index":2358},{"krate":0,"index":2366},{"krate":0,"index":2363},{"krate":0,"index":2369},{"krate":0,"index":2389},{"krate":0,"index":2388},{"krate":0,"index":2386},{"krate":0,"index":2382},{"krate":0,"index":2383},{"krate":0,"index":2379},{"krate":0,"index":2380},{"krate":0,"index":2376},{"krate":0,"index":2391},{"krate":0,"index":2417},{"krate":0,"index":2416},{"krate":0,"index":2414},{"krate":0,"index":2410},{"krate":0,"index":2411},{"krate":0,"index":2407},{"krate":0,"index":2408},{"krate":0,"index":2397},{"krate":0,"index":2395},{"krate":0,"index":555},{"krate":0,"index":578},{"krate":0,"index":582},{"krate":0,"index":624},{"krate":0,"index":2419},{"krate":0,"index":2428},{"krate":0,"index":2424},{"krate":0,"index":2432},{"krate":0,"index":2441},{"krate":0,"index":2437},{"krate":0,"index":2445},{"krate":0,"index":2467},{"krate":0,"index":2466},{"krate":0,"index":2464},{"krate":0,"index":2460},{"krate":0,"index":2461},{"krate":0,"index":2457},{"krate":0,"index":2458},{"krate":0,"index":2454},{"krate":0,"index":2469},{"krate":0,"index":2492},{"krate":0,"index":2491},{"krate":0,"index":2489},{"krate":0,"index":2486},{"krate":0,"index":2487},{"krate":0,"index":2483},{"krate":0,"index":2484},{"krate":0,"index":2480},{"krate":0,"index":629},{"krate":0,"index":642},{"krate":0,"index":654},{"krate":0,"index":655},{"krate":0,"index":656},{"krate":0,"index":661},{"krate":0,"index":665},{"krate":0,"index":677},{"krate":0,"index":689},{"krate":0,"index":697},{"krate":0,"index":702},{"krate":0,"index":704},{"krate":0,"index":705}],"decl_id":null,"docs":" Image representations for ffi.","sig":null,"attributes":[{"value":"/ Image representations for ffi.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":127939,"byte_end":127973,"line_start":1,"line_end":1,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":127974,"byte_end":127977,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ # Usage","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":127978,"byte_end":127989,"line_start":3,"line_end":3,"column_start":1,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":127990,"byte_end":127993,"line_start":4,"line_end":4,"column_start":1,"column_end":4}},{"value":"/ Imagine you want to offer a very simple ffi interface: The caller provides an image buffer and","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":127994,"byte_end":128092,"line_start":5,"line_end":5,"column_start":1,"column_end":99}},{"value":"/ your program creates a thumbnail from it and dumps that image as `png`. This module is designed","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":128093,"byte_end":128192,"line_start":6,"line_end":6,"column_start":1,"column_end":100}},{"value":"/ to help you transition from raw memory data to Rust representation.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":128193,"byte_end":128264,"line_start":7,"line_end":7,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":128265,"byte_end":128268,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/ ```no_run","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":128269,"byte_end":128282,"line_start":9,"line_end":9,"column_start":1,"column_end":14}},{"value":"/ use std::ptr;","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":128283,"byte_end":128300,"line_start":10,"line_end":10,"column_start":1,"column_end":18}},{"value":"/ use std::slice;","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":128301,"byte_end":128320,"line_start":11,"line_end":11,"column_start":1,"column_end":20}},{"value":"/ use image::Rgb;","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":128321,"byte_end":128340,"line_start":12,"line_end":12,"column_start":1,"column_end":20}},{"value":"/ use image::flat::{FlatSamples, SampleLayout};","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":128341,"byte_end":128390,"line_start":13,"line_end":13,"column_start":1,"column_end":50}},{"value":"/ use image::imageops::thumbnail;","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":128391,"byte_end":128426,"line_start":14,"line_end":14,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":128427,"byte_end":128430,"line_start":15,"line_end":15,"column_start":1,"column_end":4}},{"value":"/ #[no_mangle]","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":128431,"byte_end":128447,"line_start":16,"line_end":16,"column_start":1,"column_end":17}},{"value":"/ pub extern \"C\" fn store_rgb8_compressed(","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":128448,"byte_end":128492,"line_start":17,"line_end":17,"column_start":1,"column_end":45}},{"value":"/     data: *const u8, len: usize,","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":128493,"byte_end":128529,"line_start":18,"line_end":18,"column_start":1,"column_end":37}},{"value":"/     layout: *const SampleLayout","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":128530,"byte_end":128565,"line_start":19,"line_end":19,"column_start":1,"column_end":36}},{"value":"/ )","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":128566,"byte_end":128571,"line_start":20,"line_end":20,"column_start":1,"column_end":6}},{"value":"/     -> bool","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":128572,"byte_end":128587,"line_start":21,"line_end":21,"column_start":1,"column_end":16}},{"value":"/ {","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":128588,"byte_end":128593,"line_start":22,"line_end":22,"column_start":1,"column_end":6}},{"value":"/     let samples = unsafe { slice::from_raw_parts(data, len) };","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":128594,"byte_end":128660,"line_start":23,"line_end":23,"column_start":1,"column_end":67}},{"value":"/     let layout = unsafe { ptr::read(layout) };","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":128661,"byte_end":128711,"line_start":24,"line_end":24,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":128712,"byte_end":128715,"line_start":25,"line_end":25,"column_start":1,"column_end":4}},{"value":"/     let buffer = FlatSamples {","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":128716,"byte_end":128750,"line_start":26,"line_end":26,"column_start":1,"column_end":35}},{"value":"/         samples,","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":128751,"byte_end":128771,"line_start":27,"line_end":27,"column_start":1,"column_end":21}},{"value":"/         layout,","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":128772,"byte_end":128791,"line_start":28,"line_end":28,"column_start":1,"column_end":20}},{"value":"/         color_hint: None,","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":128792,"byte_end":128821,"line_start":29,"line_end":29,"column_start":1,"column_end":30}},{"value":"/     };","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":128822,"byte_end":128832,"line_start":30,"line_end":30,"column_start":1,"column_end":11}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":128833,"byte_end":128836,"line_start":31,"line_end":31,"column_start":1,"column_end":4}},{"value":"/     let view = match buffer.as_view::<Rgb<u8>>() {","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":128837,"byte_end":128891,"line_start":32,"line_end":32,"column_start":1,"column_end":55}},{"value":"/         Err(_) => return false, // Invalid layout.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":128892,"byte_end":128946,"line_start":33,"line_end":33,"column_start":1,"column_end":55}},{"value":"/         Ok(view) => view,","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":128947,"byte_end":128976,"line_start":34,"line_end":34,"column_start":1,"column_end":30}},{"value":"/     };","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":128977,"byte_end":128987,"line_start":35,"line_end":35,"column_start":1,"column_end":11}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":128988,"byte_end":128991,"line_start":36,"line_end":36,"column_start":1,"column_end":4}},{"value":"/     thumbnail(&view, 64, 64)","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":128992,"byte_end":129024,"line_start":37,"line_end":37,"column_start":1,"column_end":33}},{"value":"/         .save(\"output.png\")","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":129025,"byte_end":129056,"line_start":38,"line_end":38,"column_start":1,"column_end":32}},{"value":"/         .map(|_| true)","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":129057,"byte_end":129083,"line_start":39,"line_end":39,"column_start":1,"column_end":27}},{"value":"/         .unwrap_or_else(|_| false)","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":129084,"byte_end":129122,"line_start":40,"line_end":40,"column_start":1,"column_end":39}},{"value":"/ }","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":129123,"byte_end":129128,"line_start":41,"line_end":41,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":129129,"byte_end":129136,"line_start":42,"line_end":42,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":129137,"byte_end":129140,"line_start":43,"line_end":43,"column_start":1,"column_end":4}}]},{"kind":"Struct","id":{"krate":0,"index":2358},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":131131,"byte_end":131142,"line_start":81,"line_end":81,"column_start":12,"column_end":23},"name":"FlatSamples","qualname":"::flat::FlatSamples","value":"FlatSamples { samples, layout, color_hint }","parent":null,"children":[{"krate":0,"index":2360},{"krate":0,"index":2361},{"krate":0,"index":2362}],"decl_id":null,"docs":" A flat buffer over a (multi channel) image.","sig":null,"attributes":[{"value":"/ A flat buffer over a (multi channel) image.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":129548,"byte_end":129595,"line_start":56,"line_end":56,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":129596,"byte_end":129599,"line_start":57,"line_end":57,"column_start":1,"column_end":4}},{"value":"/ In contrast to `ImageBuffer`, this representation of a sample collection is much more lenient","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":129600,"byte_end":129697,"line_start":58,"line_end":58,"column_start":1,"column_end":98}},{"value":"/ in the layout thereof. It also allows grouping by color planes instead of by pixel as long as","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":129698,"byte_end":129795,"line_start":59,"line_end":59,"column_start":1,"column_end":98}},{"value":"/ the strides of each extent are constant. This struct itself has no invariants on the strides","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":129796,"byte_end":129892,"line_start":60,"line_end":60,"column_start":1,"column_end":97}},{"value":"/ but not every possible configuration can be interpreted as a [`GenericImageView`] or","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":129893,"byte_end":129981,"line_start":61,"line_end":61,"column_start":1,"column_end":89}},{"value":"/ [`GenericImage`]. The methods [`as_view`] and [`as_view_mut`] construct the actual implementors","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":129982,"byte_end":130081,"line_start":62,"line_end":62,"column_start":1,"column_end":100}},{"value":"/ of these traits and perform necessary checks. To manually perform this and other layout checks","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":130082,"byte_end":130180,"line_start":63,"line_end":63,"column_start":1,"column_end":99}},{"value":"/ use [`is_normal`] or [`has_aliased_samples`].","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":130181,"byte_end":130230,"line_start":64,"line_end":64,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":130231,"byte_end":130234,"line_start":65,"line_end":65,"column_start":1,"column_end":4}},{"value":"/ Instances can be constructed not only by hand. The buffer instances returned by library","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":130235,"byte_end":130326,"line_start":66,"line_end":66,"column_start":1,"column_end":92}},{"value":"/ functions such as [`ImageBuffer::as_flat_samples`] guarantee that the conversion to a generic","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":130327,"byte_end":130424,"line_start":67,"line_end":67,"column_start":1,"column_end":98}},{"value":"/ image or generic view succeeds. A very different constructor is [`with_monocolor`]. It uses a","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":130425,"byte_end":130522,"line_start":68,"line_end":68,"column_start":1,"column_end":98}},{"value":"/ single pixel as the backing storage for an arbitrarily sized read-only raster by mapping each","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":130523,"byte_end":130620,"line_start":69,"line_end":69,"column_start":1,"column_end":98}},{"value":"/ pixel to the same samples by setting some strides to `0`.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":130621,"byte_end":130682,"line_start":70,"line_end":70,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":130683,"byte_end":130686,"line_start":71,"line_end":71,"column_start":1,"column_end":4}},{"value":"/ [`GenericImage`]: ../trait.GenericImage.html","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":130687,"byte_end":130735,"line_start":72,"line_end":72,"column_start":1,"column_end":49}},{"value":"/ [`GenericImageView`]: ../trait.GenericImageView.html","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":130736,"byte_end":130792,"line_start":73,"line_end":73,"column_start":1,"column_end":57}},{"value":"/ [`ImageBuffer::as_flat_samples`]: ../struct.ImageBuffer.html#method.as_flat_samples","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":130793,"byte_end":130880,"line_start":74,"line_end":74,"column_start":1,"column_end":88}},{"value":"/ [`is_normal`]: #method.is_normal","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":130881,"byte_end":130917,"line_start":75,"line_end":75,"column_start":1,"column_end":37}},{"value":"/ [`has_aliased_samples`]: #method.has_aliased_samples","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":130918,"byte_end":130974,"line_start":76,"line_end":76,"column_start":1,"column_end":57}},{"value":"/ [`as_view`]: #method.as_view","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":130975,"byte_end":131007,"line_start":77,"line_end":77,"column_start":1,"column_end":33}},{"value":"/ [`as_view_mut`]: #method.as_view_mut","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":131008,"byte_end":131048,"line_start":78,"line_end":78,"column_start":1,"column_end":41}},{"value":"/ [`with_monocolor`]: #method.with_monocolor","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":131049,"byte_end":131095,"line_start":79,"line_end":79,"column_start":1,"column_end":47}}]},{"kind":"Field","id":{"krate":0,"index":2360},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":131220,"byte_end":131227,"line_start":83,"line_end":83,"column_start":9,"column_end":16},"name":"samples","qualname":"::flat::FlatSamples::samples","value":"Buffer","parent":{"krate":0,"index":2358},"children":[],"decl_id":null,"docs":" Underlying linear container holding sample values.\n","sig":null,"attributes":[{"value":"/ Underlying linear container holding sample values.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":131157,"byte_end":131211,"line_start":82,"line_end":82,"column_start":5,"column_end":59}}]},{"kind":"Field","id":{"krate":0,"index":2361},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":131311,"byte_end":131317,"line_start":86,"line_end":86,"column_start":9,"column_end":15},"name":"layout","qualname":"::flat::FlatSamples::layout","value":"flat::SampleLayout","parent":{"krate":0,"index":2358},"children":[],"decl_id":null,"docs":" A `repr(C)` description of the layout of buffer samples.\n","sig":null,"attributes":[{"value":"/ A `repr(C)` description of the layout of buffer samples.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":131242,"byte_end":131302,"line_start":85,"line_end":85,"column_start":5,"column_end":65}}]},{"kind":"Field","id":{"krate":0,"index":2362},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":131772,"byte_end":131782,"line_start":94,"line_end":94,"column_start":9,"column_end":19},"name":"color_hint","qualname":"::flat::FlatSamples::color_hint","value":"std::option::Option<color::ColorType>","parent":{"krate":0,"index":2358},"children":[],"decl_id":null,"docs":" Supplementary color information.","sig":null,"attributes":[{"value":"/ Supplementary color information.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":131338,"byte_end":131374,"line_start":88,"line_end":88,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":131379,"byte_end":131382,"line_start":89,"line_end":89,"column_start":5,"column_end":8}},{"value":"/ You may keep this as `None` in most cases. This is NOT checked in `View` or other","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":131387,"byte_end":131472,"line_start":90,"line_end":90,"column_start":5,"column_end":90}},{"value":"/ converters. It is intended mainly as a way for types that convert to this buffer type to","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":131477,"byte_end":131569,"line_start":91,"line_end":91,"column_start":5,"column_end":97}},{"value":"/ attach their otherwise static color information. A dynamic image representation could","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":131574,"byte_end":131663,"line_start":92,"line_end":92,"column_start":5,"column_end":94}},{"value":"/ however use this to resolve representational ambiguities such as the order of RGB channels.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":131668,"byte_end":131763,"line_start":93,"line_end":93,"column_start":5,"column_end":100}}]},{"kind":"Struct","id":{"krate":0,"index":2369},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":131932,"byte_end":131944,"line_start":100,"line_end":100,"column_start":12,"column_end":24},"name":"SampleLayout","qualname":"::flat::SampleLayout","value":"SampleLayout { channels, channel_stride, width, width_stride, height, height_stride }","parent":null,"children":[{"krate":0,"index":2370},{"krate":0,"index":2371},{"krate":0,"index":2372},{"krate":0,"index":2373},{"krate":0,"index":2374},{"krate":0,"index":2375}],"decl_id":null,"docs":" A ffi compatible description of a sample buffer.\n","sig":null,"attributes":[{"value":"/ A ffi compatible description of a sample buffer.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":131806,"byte_end":131858,"line_start":97,"line_end":97,"column_start":1,"column_end":53}},{"value":"repr(C)","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":131859,"byte_end":131869,"line_start":98,"line_end":98,"column_start":1,"column_end":11}}]},{"kind":"Field","id":{"krate":0,"index":2370},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":132028,"byte_end":132036,"line_start":102,"line_end":102,"column_start":9,"column_end":17},"name":"channels","qualname":"::flat::SampleLayout::channels","value":"u8","parent":{"krate":0,"index":2369},"children":[],"decl_id":null,"docs":" The number of channels in the color representation of the image.\n","sig":null,"attributes":[{"value":"/ The number of channels in the color representation of the image.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":131951,"byte_end":132019,"line_start":101,"line_end":101,"column_start":5,"column_end":73}}]},{"kind":"Field","id":{"krate":0,"index":2371},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":132122,"byte_end":132136,"line_start":105,"line_end":105,"column_start":9,"column_end":23},"name":"channel_stride","qualname":"::flat::SampleLayout::channel_stride","value":"usize","parent":{"krate":0,"index":2369},"children":[],"decl_id":null,"docs":" Add this to an index to get to the sample in the next channel.\n","sig":null,"attributes":[{"value":"/ Add this to an index to get to the sample in the next channel.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":132047,"byte_end":132113,"line_start":104,"line_end":104,"column_start":5,"column_end":71}}]},{"kind":"Field","id":{"krate":0,"index":2372},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":132198,"byte_end":132203,"line_start":108,"line_end":108,"column_start":9,"column_end":14},"name":"width","qualname":"::flat::SampleLayout::width","value":"u32","parent":{"krate":0,"index":2369},"children":[],"decl_id":null,"docs":" The width of the represented image.\n","sig":null,"attributes":[{"value":"/ The width of the represented image.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":132150,"byte_end":132189,"line_start":107,"line_end":107,"column_start":5,"column_end":44}}]},{"kind":"Field","id":{"krate":0,"index":2373},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":132290,"byte_end":132302,"line_start":111,"line_end":111,"column_start":9,"column_end":21},"name":"width_stride","qualname":"::flat::SampleLayout::width_stride","value":"usize","parent":{"krate":0,"index":2369},"children":[],"decl_id":null,"docs":" Add this to an index to get to the next sample in x-direction.\n","sig":null,"attributes":[{"value":"/ Add this to an index to get to the next sample in x-direction.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":132215,"byte_end":132281,"line_start":110,"line_end":110,"column_start":5,"column_end":71}}]},{"kind":"Field","id":{"krate":0,"index":2374},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":132365,"byte_end":132371,"line_start":114,"line_end":114,"column_start":9,"column_end":15},"name":"height","qualname":"::flat::SampleLayout::height","value":"u32","parent":{"krate":0,"index":2369},"children":[],"decl_id":null,"docs":" The height of the represented image.\n","sig":null,"attributes":[{"value":"/ The height of the represented image.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":132316,"byte_end":132356,"line_start":113,"line_end":113,"column_start":5,"column_end":45}}]},{"kind":"Field","id":{"krate":0,"index":2375},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":132458,"byte_end":132471,"line_start":117,"line_end":117,"column_start":9,"column_end":22},"name":"height_stride","qualname":"::flat::SampleLayout::height_stride","value":"usize","parent":{"krate":0,"index":2369},"children":[],"decl_id":null,"docs":" Add this to an index to get to the next sample in y-direction.\n","sig":null,"attributes":[{"value":"/ Add this to an index to get to the next sample in y-direction.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":132383,"byte_end":132449,"line_start":116,"line_end":116,"column_start":5,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":556},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":133446,"byte_end":133462,"line_start":141,"line_end":141,"column_start":12,"column_end":28},"name":"row_major_packed","qualname":"<SampleLayout>::row_major_packed","value":"pub fn row_major_packed(u8, u32, u32) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Describe a row-major image packed in all directions.","sig":null,"attributes":[{"value":"/ Describe a row-major image packed in all directions.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":132652,"byte_end":132708,"line_start":125,"line_end":125,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":132713,"byte_end":132716,"line_start":126,"line_end":126,"column_start":5,"column_end":8}},{"value":"/ The resulting will surely be `NormalForm::RowMajorPacked`. It can therefore be converted to","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":132721,"byte_end":132816,"line_start":127,"line_end":127,"column_start":5,"column_end":100}},{"value":"/ safely to an `ImageBuffer` with a large enough underlying buffer.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":132821,"byte_end":132890,"line_start":128,"line_end":128,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":132895,"byte_end":132898,"line_start":129,"line_end":129,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":132903,"byte_end":132910,"line_start":130,"line_end":130,"column_start":5,"column_end":12}},{"value":"/ # use image::flat::{NormalForm, SampleLayout};","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":132915,"byte_end":132965,"line_start":131,"line_end":131,"column_start":5,"column_end":55}},{"value":"/ let layout = SampleLayout::row_major_packed(3, 640, 480);","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":132970,"byte_end":133031,"line_start":132,"line_end":132,"column_start":5,"column_end":66}},{"value":"/ assert!(layout.is_normal(NormalForm::RowMajorPacked));","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":133036,"byte_end":133094,"line_start":133,"line_end":133,"column_start":5,"column_end":63}},{"value":"/ ```","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":133099,"byte_end":133106,"line_start":134,"line_end":134,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":133111,"byte_end":133114,"line_start":135,"line_end":135,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":133119,"byte_end":133131,"line_start":136,"line_end":136,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":133136,"byte_end":133139,"line_start":137,"line_end":137,"column_start":5,"column_end":8}},{"value":"/ On platforms where `usize` has the same size as `u32` this panics when the resulting stride","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":133144,"byte_end":133239,"line_start":138,"line_end":138,"column_start":5,"column_end":100}},{"value":"/ in the `height` direction would be larger than `usize::max_value()`. On other platforms","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":133244,"byte_end":133335,"line_start":139,"line_end":139,"column_start":5,"column_end":96}},{"value":"/ where it can surely accomodate `u8::max_value() * u32::max_value(), this can never happen.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":133340,"byte_end":133434,"line_start":140,"line_end":140,"column_start":5,"column_end":99}}]},{"kind":"Method","id":{"krate":0,"index":557},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":134713,"byte_end":134732,"line_start":170,"line_end":170,"column_start":12,"column_end":31},"name":"column_major_packed","qualname":"<SampleLayout>::column_major_packed","value":"pub fn column_major_packed(u8, u32, u32) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Describe a column-major image packed in all directions.","sig":null,"attributes":[{"value":"/ Describe a column-major image packed in all directions.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":133900,"byte_end":133959,"line_start":154,"line_end":154,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":133964,"byte_end":133967,"line_start":155,"line_end":155,"column_start":5,"column_end":8}},{"value":"/ The resulting will surely be `NormalForm::ColumnMajorPacked`. This is not particularly","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":133972,"byte_end":134062,"line_start":156,"line_end":156,"column_start":5,"column_end":95}},{"value":"/ useful for conversion but can be used to describe such a buffer without pitfalls.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":134067,"byte_end":134152,"line_start":157,"line_end":157,"column_start":5,"column_end":90}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":134157,"byte_end":134160,"line_start":158,"line_end":158,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":134165,"byte_end":134172,"line_start":159,"line_end":159,"column_start":5,"column_end":12}},{"value":"/ # use image::flat::{NormalForm, SampleLayout};","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":134177,"byte_end":134227,"line_start":160,"line_end":160,"column_start":5,"column_end":55}},{"value":"/ let layout = SampleLayout::column_major_packed(3, 640, 480);","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":134232,"byte_end":134296,"line_start":161,"line_end":161,"column_start":5,"column_end":69}},{"value":"/ assert!(layout.is_normal(NormalForm::ColumnMajorPacked));","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":134301,"byte_end":134362,"line_start":162,"line_end":162,"column_start":5,"column_end":66}},{"value":"/ ```","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":134367,"byte_end":134374,"line_start":163,"line_end":163,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":134379,"byte_end":134382,"line_start":164,"line_end":164,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":134387,"byte_end":134399,"line_start":165,"line_end":165,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":134404,"byte_end":134407,"line_start":166,"line_end":166,"column_start":5,"column_end":8}},{"value":"/ On platforms where `usize` has the same size as `u32` this panics when the resulting stride","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":134412,"byte_end":134507,"line_start":167,"line_end":167,"column_start":5,"column_end":100}},{"value":"/ in the `width` direction would be larger than `usize::max_value()`. On other platforms","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":134512,"byte_end":134602,"line_start":168,"line_end":168,"column_start":5,"column_end":95}},{"value":"/ where it can surely accomodate `u8::max_value() * u32::max_value(), this can never happen.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":134607,"byte_end":134701,"line_start":169,"line_end":169,"column_start":5,"column_end":99}}]},{"kind":"Method","id":{"krate":0,"index":558},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":135348,"byte_end":135359,"line_start":187,"line_end":187,"column_start":12,"column_end":23},"name":"strides_cwh","qualname":"<SampleLayout>::strides_cwh","value":"pub fn strides_cwh(&Self) -> (usize, usize, usize)","parent":null,"children":[],"decl_id":null,"docs":" Get the strides for indexing matrix-like `[(c, w, h)]`.","sig":null,"attributes":[{"value":"/ Get the strides for indexing matrix-like `[(c, w, h)]`.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":135173,"byte_end":135232,"line_start":183,"line_end":183,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":135237,"byte_end":135240,"line_start":184,"line_end":184,"column_start":5,"column_end":8}},{"value":"/ For a row-major layout with grouped samples, this tuple is strictly","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":135245,"byte_end":135316,"line_start":185,"line_end":185,"column_start":5,"column_end":76}},{"value":"/ increasing.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":135321,"byte_end":135336,"line_start":186,"line_end":186,"column_start":5,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":559},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":135676,"byte_end":135683,"line_start":195,"line_end":195,"column_start":12,"column_end":19},"name":"extents","qualname":"<SampleLayout>::extents","value":"pub fn extents(&Self) -> (usize, usize, usize)","parent":null,"children":[],"decl_id":null,"docs":" Get the dimensions `(channels, width, height)`.","sig":null,"attributes":[{"value":"/ Get the dimensions `(channels, width, height)`.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":135474,"byte_end":135525,"line_start":191,"line_end":191,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":135530,"byte_end":135533,"line_start":192,"line_end":192,"column_start":5,"column_end":8}},{"value":"/ The interface is optimized for use with `strides_cwh` instead. The channel extent will be","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":135538,"byte_end":135631,"line_start":193,"line_end":193,"column_start":5,"column_end":98}},{"value":"/ before width and height.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":135636,"byte_end":135664,"line_start":194,"line_end":194,"column_start":5,"column_end":33}}]},{"kind":"Method","id":{"krate":0,"index":560},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":136057,"byte_end":136063,"line_start":203,"line_end":203,"column_start":12,"column_end":18},"name":"bounds","qualname":"<SampleLayout>::bounds","value":"pub fn bounds(&Self) -> (u8, u32, u32)","parent":null,"children":[],"decl_id":null,"docs":" Tuple of bounds in the order of coordinate inputs.","sig":null,"attributes":[{"value":"/ Tuple of bounds in the order of coordinate inputs.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":135805,"byte_end":135859,"line_start":199,"line_end":199,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":135864,"byte_end":135867,"line_start":200,"line_end":200,"column_start":5,"column_end":8}},{"value":"/ This function should be used whenever working with image coordinates opposed to buffer","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":135872,"byte_end":135962,"line_start":201,"line_end":201,"column_start":5,"column_end":95}},{"value":"/ coordinates. The only difference compared to `extents` is the output type.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":135967,"byte_end":136045,"line_start":202,"line_end":202,"column_start":5,"column_end":83}}]},{"kind":"Method","id":{"krate":0,"index":561},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":138216,"byte_end":138226,"line_start":258,"line_end":258,"column_start":12,"column_end":22},"name":"min_length","qualname":"<SampleLayout>::min_length","value":"pub fn min_length(&Self) -> Option<usize>","parent":null,"children":[],"decl_id":null,"docs":" Get the minimum length of a buffer such that all in-bounds samples have valid indices.","sig":null,"attributes":[{"value":"/ Get the minimum length of a buffer such that all in-bounds samples have valid indices.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":136151,"byte_end":136241,"line_start":207,"line_end":207,"column_start":5,"column_end":95}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":136246,"byte_end":136249,"line_start":208,"line_end":208,"column_start":5,"column_end":8}},{"value":"/ This method will allow zero strides, allowing compact representations of monochrome images.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":136254,"byte_end":136349,"line_start":209,"line_end":209,"column_start":5,"column_end":100}},{"value":"/ To check that no aliasing occurs, try `check_alias_invariants`. For compact images (no","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":136354,"byte_end":136444,"line_start":210,"line_end":210,"column_start":5,"column_end":95}},{"value":"/ aliasing and no unindexed samples) this is `width*height*channels`. But for both of the","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":136449,"byte_end":136540,"line_start":211,"line_end":211,"column_start":5,"column_end":96}},{"value":"/ other cases, the reasoning is slightly more involved.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":136545,"byte_end":136602,"line_start":212,"line_end":212,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":136607,"byte_end":136610,"line_start":213,"line_end":213,"column_start":5,"column_end":8}},{"value":"/ # Explanation","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":136615,"byte_end":136632,"line_start":214,"line_end":214,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":136637,"byte_end":136640,"line_start":215,"line_end":215,"column_start":5,"column_end":8}},{"value":"/ Note that there is a difference between `min_length` and the index of the sample","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":136645,"byte_end":136729,"line_start":216,"line_end":216,"column_start":5,"column_end":89}},{"value":"/ 'one-past-the-end`. This is due to strides that may be larger than the dimension below.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":136734,"byte_end":136825,"line_start":217,"line_end":217,"column_start":5,"column_end":96}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":136830,"byte_end":136833,"line_start":218,"line_end":218,"column_start":5,"column_end":8}},{"value":"/ ## Example with holes","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":136838,"byte_end":136863,"line_start":219,"line_end":219,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":136868,"byte_end":136871,"line_start":220,"line_end":220,"column_start":5,"column_end":8}},{"value":"/ Let's look at an example of a grayscale image with","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":136876,"byte_end":136930,"line_start":221,"line_end":221,"column_start":5,"column_end":59}},{"value":"/ * `width_stride = 1`","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":136935,"byte_end":136959,"line_start":222,"line_end":222,"column_start":5,"column_end":29}},{"value":"/ * `width = 2`","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":136964,"byte_end":136981,"line_start":223,"line_end":223,"column_start":5,"column_end":22}},{"value":"/ * `height_stride = 3`","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":136986,"byte_end":137011,"line_start":224,"line_end":224,"column_start":5,"column_end":30}},{"value":"/ * `height = 2`","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":137016,"byte_end":137034,"line_start":225,"line_end":225,"column_start":5,"column_end":23}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":137039,"byte_end":137042,"line_start":226,"line_end":226,"column_start":5,"column_end":8}},{"value":"/ ```text","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":137047,"byte_end":137058,"line_start":227,"line_end":227,"column_start":5,"column_end":16}},{"value":"/ | x x   | x x m | $","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":137063,"byte_end":137086,"line_start":228,"line_end":228,"column_start":5,"column_end":28}},{"value":"/  min_length m ^","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":137091,"byte_end":137110,"line_start":229,"line_end":229,"column_start":5,"column_end":24}},{"value":"/                   ^ one-past-the-end $","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":137115,"byte_end":137157,"line_start":230,"line_end":230,"column_start":5,"column_end":47}},{"value":"/ ```","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":137162,"byte_end":137169,"line_start":231,"line_end":231,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":137174,"byte_end":137177,"line_start":232,"line_end":232,"column_start":5,"column_end":8}},{"value":"/ The difference is also extreme for empty images with large strides. The one-past-the-end","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":137182,"byte_end":137274,"line_start":233,"line_end":233,"column_start":5,"column_end":97}},{"value":"/ sample index is still as large as the largest of these strides while `min_length = 0`.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":137279,"byte_end":137369,"line_start":234,"line_end":234,"column_start":5,"column_end":95}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":137374,"byte_end":137377,"line_start":235,"line_end":235,"column_start":5,"column_end":8}},{"value":"/ ## Example with aliasing","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":137382,"byte_end":137410,"line_start":236,"line_end":236,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":137415,"byte_end":137418,"line_start":237,"line_end":237,"column_start":5,"column_end":8}},{"value":"/ The concept gets even more important when you allow samples to alias each other. Here we","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":137423,"byte_end":137515,"line_start":238,"line_end":238,"column_start":5,"column_end":97}},{"value":"/ have the buffer of a small grayscale image where this is the case, this time we will first","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":137520,"byte_end":137614,"line_start":239,"line_end":239,"column_start":5,"column_end":99}},{"value":"/ show the buffer and then the individual rows below.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":137619,"byte_end":137674,"line_start":240,"line_end":240,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":137679,"byte_end":137682,"line_start":241,"line_end":241,"column_start":5,"column_end":8}},{"value":"/ * `width_stride = 1`","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":137687,"byte_end":137711,"line_start":242,"line_end":242,"column_start":5,"column_end":29}},{"value":"/ * `width = 3`","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":137716,"byte_end":137733,"line_start":243,"line_end":243,"column_start":5,"column_end":22}},{"value":"/ * `height_stride = 2`","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":137738,"byte_end":137763,"line_start":244,"line_end":244,"column_start":5,"column_end":30}},{"value":"/ * `height = 2`","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":137768,"byte_end":137786,"line_start":245,"line_end":245,"column_start":5,"column_end":23}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":137791,"byte_end":137794,"line_start":246,"line_end":246,"column_start":5,"column_end":8}},{"value":"/ ```text","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":137799,"byte_end":137810,"line_start":247,"line_end":247,"column_start":5,"column_end":16}},{"value":"/  1 2 3 4 5 m","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":137815,"byte_end":137831,"line_start":248,"line_end":248,"column_start":5,"column_end":21}},{"value":"/ |1 2 3| row one","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":137836,"byte_end":137855,"line_start":249,"line_end":249,"column_start":5,"column_end":24}},{"value":"/     |3 4 5| row two","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":137860,"byte_end":137883,"line_start":250,"line_end":250,"column_start":5,"column_end":28}},{"value":"/            ^ m min_length","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":137888,"byte_end":137917,"line_start":251,"line_end":251,"column_start":5,"column_end":34}},{"value":"/          ^ ??? one-past-the-end","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":137922,"byte_end":137957,"line_start":252,"line_end":252,"column_start":5,"column_end":40}},{"value":"/ ```","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":137962,"byte_end":137969,"line_start":253,"line_end":253,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":137974,"byte_end":137977,"line_start":254,"line_end":254,"column_start":5,"column_end":8}},{"value":"/ This time 'one-past-the-end' is not even simply the largest stride times the extent of its","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":137982,"byte_end":138076,"line_start":255,"line_end":255,"column_start":5,"column_end":99}},{"value":"/ dimension. That still points inside the image because `height*height_stride = 4` but also","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":138081,"byte_end":138174,"line_start":256,"line_end":256,"column_start":5,"column_end":98}},{"value":"/ `index_of(1, 2) = 4`.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":138179,"byte_end":138204,"line_start":257,"line_end":257,"column_start":5,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":563},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":138558,"byte_end":138562,"line_start":268,"line_end":268,"column_start":12,"column_end":16},"name":"fits","qualname":"<SampleLayout>::fits","value":"pub fn fits(&Self, usize) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Check if a buffer of length `len` is large enough.\n","sig":null,"attributes":[{"value":"/ Check if a buffer of length `len` is large enough.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":138492,"byte_end":138546,"line_start":267,"line_end":267,"column_start":5,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":568},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":139672,"byte_end":139691,"line_start":293,"line_end":293,"column_start":12,"column_end":31},"name":"has_aliased_samples","qualname":"<SampleLayout>::has_aliased_samples","value":"pub fn has_aliased_samples(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" If there are any samples aliasing each other.","sig":null,"attributes":[{"value":"/ If there are any samples aliasing each other.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":139322,"byte_end":139371,"line_start":288,"line_end":288,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":139376,"byte_end":139379,"line_start":289,"line_end":289,"column_start":5,"column_end":8}},{"value":"/ If this is not the case, it would always be safe to allow mutable access to two different","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":139384,"byte_end":139477,"line_start":290,"line_end":290,"column_start":5,"column_end":98}},{"value":"/ samples at the same time. Otherwise, this operation would need additional checks. When one","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":139482,"byte_end":139576,"line_start":291,"line_end":291,"column_start":5,"column_end":99}},{"value":"/ dimension overflows `usize` with its stride we also consider this aliasing.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":139581,"byte_end":139660,"line_start":292,"line_end":292,"column_start":5,"column_end":84}}]},{"kind":"Method","id":{"krate":0,"index":569},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":140936,"byte_end":140945,"line_start":323,"line_end":323,"column_start":12,"column_end":21},"name":"is_normal","qualname":"<SampleLayout>::is_normal","value":"pub fn is_normal(&Self, NormalForm) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Check if a buffer fulfills the requirements of a normal form.","sig":null,"attributes":[{"value":"/ Check if a buffer fulfills the requirements of a normal form.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":140426,"byte_end":140491,"line_start":316,"line_end":316,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":140496,"byte_end":140499,"line_start":317,"line_end":317,"column_start":5,"column_end":8}},{"value":"/ Certain conversions have preconditions on the structure of the sample buffer that are not","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":140504,"byte_end":140597,"line_start":318,"line_end":318,"column_start":5,"column_end":98}},{"value":"/ captured (by design) by the type system. These are then checked before the conversion. Such","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":140602,"byte_end":140697,"line_start":319,"line_end":319,"column_start":5,"column_end":100}},{"value":"/ checks can all be done in constant time and will not inspect the buffer content. You can","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":140702,"byte_end":140794,"line_start":320,"line_end":320,"column_start":5,"column_end":97}},{"value":"/ perform these checks yourself when the conversion is not required at this moment but maybe","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":140799,"byte_end":140893,"line_start":321,"line_end":321,"column_start":5,"column_end":99}},{"value":"/ still performed later.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":140898,"byte_end":140924,"line_start":322,"line_end":322,"column_start":5,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":570},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":142643,"byte_end":142652,"line_start":378,"line_end":378,"column_start":12,"column_end":21},"name":"in_bounds","qualname":"<SampleLayout>::in_bounds","value":"pub fn in_bounds(&Self, u8, u32, u32) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Check that the pixel and the channel index are in bounds.","sig":null,"attributes":[{"value":"/ Check that the pixel and the channel index are in bounds.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":142301,"byte_end":142362,"line_start":373,"line_end":373,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":142367,"byte_end":142370,"line_start":374,"line_end":374,"column_start":5,"column_end":8}},{"value":"/ An in-bound coordinate does not yet guarantee that the corresponding calculation of a","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":142375,"byte_end":142464,"line_start":375,"line_end":375,"column_start":5,"column_end":94}},{"value":"/ buffer index does not overflow. However, if such a buffer large enough to hold all samples","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":142469,"byte_end":142563,"line_start":376,"line_end":376,"column_start":5,"column_end":99}},{"value":"/ actually exists in memory, this porperty of course follows.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":142568,"byte_end":142631,"line_start":377,"line_end":377,"column_start":5,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":571},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":142926,"byte_end":142931,"line_start":385,"line_end":385,"column_start":12,"column_end":17},"name":"index","qualname":"<SampleLayout>::index","value":"pub fn index(&Self, u8, u32, u32) -> Option<usize>","parent":null,"children":[],"decl_id":null,"docs":" Resolve the index of a particular sample.","sig":null,"attributes":[{"value":"/ Resolve the index of a particular sample.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":142779,"byte_end":142824,"line_start":382,"line_end":382,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":142829,"byte_end":142832,"line_start":383,"line_end":383,"column_start":5,"column_end":8}},{"value":"/ `None` if the index is outside the bounds or does not fit into a `usize`.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":142837,"byte_end":142914,"line_start":384,"line_end":384,"column_start":5,"column_end":82}}]},{"kind":"Method","id":{"krate":0,"index":572},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":143525,"byte_end":143546,"line_start":398,"line_end":398,"column_start":12,"column_end":33},"name":"index_ignoring_bounds","qualname":"<SampleLayout>::index_ignoring_bounds","value":"pub fn index_ignoring_bounds(&Self, usize, usize, usize) -> Option<usize>","parent":null,"children":[],"decl_id":null,"docs":" Get the theoretical position of sample (channel, x, y).","sig":null,"attributes":[{"value":"/ Get the theoretical position of sample (channel, x, y).","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":143154,"byte_end":143213,"line_start":393,"line_end":393,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":143218,"byte_end":143221,"line_start":394,"line_end":394,"column_start":5,"column_end":8}},{"value":"/ The 'check' is for overflow during index calculation, not that it is contained in the","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":143226,"byte_end":143315,"line_start":395,"line_end":395,"column_start":5,"column_end":94}},{"value":"/ image. Two samples may return the same index, even when one of them is out of bounds. This","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":143320,"byte_end":143414,"line_start":396,"line_end":396,"column_start":5,"column_end":99}},{"value":"/ happens when all strides are `0`, i.e. the image is an arbitrarily large monochrome image.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":143419,"byte_end":143513,"line_start":397,"line_end":397,"column_start":5,"column_end":99}}]},{"kind":"Method","id":{"krate":0,"index":576},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":144477,"byte_end":144492,"line_start":419,"line_end":419,"column_start":12,"column_end":27},"name":"in_bounds_index","qualname":"<SampleLayout>::in_bounds_index","value":"pub fn in_bounds_index(&Self, u8, u32, u32) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Get an index provided it is inbouds.","sig":null,"attributes":[{"value":"/ Get an index provided it is inbouds.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":144176,"byte_end":144216,"line_start":414,"line_end":414,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":144221,"byte_end":144224,"line_start":415,"line_end":415,"column_start":5,"column_end":8}},{"value":"/ Assumes that the image is backed by some sufficiently large buffer. Then computation can","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":144229,"byte_end":144321,"line_start":416,"line_end":416,"column_start":5,"column_end":97}},{"value":"/ not overflow as we could represent the maximum coordinate. Since overflow is defined either","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":144326,"byte_end":144421,"line_start":417,"line_end":417,"column_start":5,"column_end":100}},{"value":"/ way, this method can not be unsafe.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":144426,"byte_end":144465,"line_start":418,"line_end":418,"column_start":5,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":577},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":145020,"byte_end":145029,"line_start":430,"line_end":430,"column_start":12,"column_end":21},"name":"shrink_to","qualname":"<SampleLayout>::shrink_to","value":"pub fn shrink_to(&mut Self, u8, u32, u32)","parent":null,"children":[],"decl_id":null,"docs":" Shrink the image to the minimum of current and given extents.","sig":null,"attributes":[{"value":"/ Shrink the image to the minimum of current and given extents.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":144695,"byte_end":144760,"line_start":425,"line_end":425,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":144765,"byte_end":144768,"line_start":426,"line_end":426,"column_start":5,"column_end":8}},{"value":"/ This does not modify the strides, so that the resulting sample buffer may have holes","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":144773,"byte_end":144861,"line_start":427,"line_end":427,"column_start":5,"column_end":93}},{"value":"/ created by the shrinking operation. Shrinking could also lead to an non-aliasing image when","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":144866,"byte_end":144961,"line_start":428,"line_end":428,"column_start":5,"column_end":100}},{"value":"/ samples had aliased each other before.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":144966,"byte_end":145008,"line_start":429,"line_end":429,"column_start":5,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":584},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":145702,"byte_end":145713,"line_start":457,"line_end":457,"column_start":12,"column_end":23},"name":"strides_cwh","qualname":"<FlatSamples<Buffer>>::strides_cwh","value":"pub fn strides_cwh(&Self) -> (usize, usize, usize)","parent":null,"children":[],"decl_id":null,"docs":" Get the strides for indexing matrix-like `[(c, w, h)]`.","sig":null,"attributes":[{"value":"/ Get the strides for indexing matrix-like `[(c, w, h)]`.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":145527,"byte_end":145586,"line_start":453,"line_end":453,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":145591,"byte_end":145594,"line_start":454,"line_end":454,"column_start":5,"column_end":8}},{"value":"/ For a row-major layout with grouped samples, this tuple is strictly","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":145599,"byte_end":145670,"line_start":455,"line_end":455,"column_start":5,"column_end":76}},{"value":"/ increasing.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":145675,"byte_end":145690,"line_start":456,"line_end":456,"column_start":5,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":585},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":145995,"byte_end":146002,"line_start":465,"line_end":465,"column_start":12,"column_end":19},"name":"extents","qualname":"<FlatSamples<Buffer>>::extents","value":"pub fn extents(&Self) -> (usize, usize, usize)","parent":null,"children":[],"decl_id":null,"docs":" Get the dimensions `(channels, width, height)`.","sig":null,"attributes":[{"value":"/ Get the dimensions `(channels, width, height)`.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":145793,"byte_end":145844,"line_start":461,"line_end":461,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":145849,"byte_end":145852,"line_start":462,"line_end":462,"column_start":5,"column_end":8}},{"value":"/ The interface is optimized for use with `strides_cwh` instead. The channel extent will be","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":145857,"byte_end":145950,"line_start":463,"line_end":463,"column_start":5,"column_end":98}},{"value":"/ before width and height.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":145955,"byte_end":145983,"line_start":464,"line_end":464,"column_start":5,"column_end":33}}]},{"kind":"Method","id":{"krate":0,"index":586},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":146330,"byte_end":146336,"line_start":473,"line_end":473,"column_start":12,"column_end":18},"name":"bounds","qualname":"<FlatSamples<Buffer>>::bounds","value":"pub fn bounds(&Self) -> (u8, u32, u32)","parent":null,"children":[],"decl_id":null,"docs":" Tuple of bounds in the order of coordinate inputs.","sig":null,"attributes":[{"value":"/ Tuple of bounds in the order of coordinate inputs.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":146078,"byte_end":146132,"line_start":469,"line_end":469,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":146137,"byte_end":146140,"line_start":470,"line_end":470,"column_start":5,"column_end":8}},{"value":"/ This function should be used whenever working with image coordinates opposed to buffer","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":146145,"byte_end":146235,"line_start":471,"line_end":471,"column_start":5,"column_end":95}},{"value":"/ coordinates. The only difference compared to `extents` is the output type.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":146240,"byte_end":146318,"line_start":472,"line_end":472,"column_start":5,"column_end":83}}]},{"kind":"Method","id":{"krate":0,"index":587},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":146450,"byte_end":146456,"line_start":478,"line_end":478,"column_start":12,"column_end":18},"name":"as_ref","qualname":"<FlatSamples<Buffer>>::as_ref","value":"pub fn as_ref<T>(&Self) -> FlatSamples<&[T]> where Buffer: AsRef<[T]>","parent":null,"children":[],"decl_id":null,"docs":" Get a reference based version.\n","sig":null,"attributes":[{"value":"/ Get a reference based version.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":146404,"byte_end":146438,"line_start":477,"line_end":477,"column_start":5,"column_end":39}}]},{"kind":"Method","id":{"krate":0,"index":589},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":146730,"byte_end":146736,"line_start":487,"line_end":487,"column_start":12,"column_end":18},"name":"as_mut","qualname":"<FlatSamples<Buffer>>::as_mut","value":"pub fn as_mut<T>(&mut Self) -> FlatSamples<&mut [T]> where Buffer: AsMut<[T]>","parent":null,"children":[],"decl_id":null,"docs":" Get a mutable reference based version.\n","sig":null,"attributes":[{"value":"/ Get a mutable reference based version.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":146676,"byte_end":146718,"line_start":486,"line_end":486,"column_start":5,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":591},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":147015,"byte_end":147021,"line_start":496,"line_end":496,"column_start":12,"column_end":18},"name":"to_vec","qualname":"<FlatSamples<Buffer>>::to_vec","value":"pub fn to_vec<T>(&Self) -> FlatSamples<Vec<T>> where T: Clone,\nBuffer: AsRef<[T]>","parent":null,"children":[],"decl_id":null,"docs":" Copy the data into an owned vector.\n","sig":null,"attributes":[{"value":"/ Copy the data into an owned vector.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":146964,"byte_end":147003,"line_start":495,"line_end":495,"column_start":5,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":593},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":148294,"byte_end":148304,"line_start":527,"line_end":527,"column_start":12,"column_end":22},"name":"get_sample","qualname":"<FlatSamples<Buffer>>::get_sample","value":"pub fn get_sample<T>(&Self, u8, u32, u32) -> Option<&T> where\nBuffer: AsRef<[T]>","parent":null,"children":[],"decl_id":null,"docs":" Get a reference to a single sample.","sig":null,"attributes":[{"value":"/ Get a reference to a single sample.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":147274,"byte_end":147313,"line_start":506,"line_end":506,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":147318,"byte_end":147321,"line_start":507,"line_end":507,"column_start":5,"column_end":8}},{"value":"/ This more restrictive than the method based on `std::ops::Index` but guarantees to properly","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":147326,"byte_end":147421,"line_start":508,"line_end":508,"column_start":5,"column_end":100}},{"value":"/ check all bounds and not panic as long as `Buffer::as_ref` does not do so.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":147426,"byte_end":147504,"line_start":509,"line_end":509,"column_start":5,"column_end":83}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":147509,"byte_end":147512,"line_start":510,"line_end":510,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":147517,"byte_end":147524,"line_start":511,"line_end":511,"column_start":5,"column_end":12}},{"value":"/ # use image::{RgbImage};","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":147529,"byte_end":147557,"line_start":512,"line_end":512,"column_start":5,"column_end":33}},{"value":"/ let flat = RgbImage::new(480, 640).into_flat_samples();","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":147562,"byte_end":147621,"line_start":513,"line_end":513,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":147626,"byte_end":147629,"line_start":514,"line_end":514,"column_start":5,"column_end":8}},{"value":"/ // Get the blue channel at (10, 10).","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":147634,"byte_end":147674,"line_start":515,"line_end":515,"column_start":5,"column_end":45}},{"value":"/ assert!(flat.get_sample(1, 10, 10).is_some());","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":147679,"byte_end":147729,"line_start":516,"line_end":516,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":147734,"byte_end":147737,"line_start":517,"line_end":517,"column_start":5,"column_end":8}},{"value":"/ // There is no alpha channel.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":147742,"byte_end":147775,"line_start":518,"line_end":518,"column_start":5,"column_end":38}},{"value":"/ assert!(flat.get_sample(3, 10, 10).is_none());","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":147780,"byte_end":147830,"line_start":519,"line_end":519,"column_start":5,"column_end":55}},{"value":"/ ```","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":147835,"byte_end":147842,"line_start":520,"line_end":520,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":147847,"byte_end":147850,"line_start":521,"line_end":521,"column_start":5,"column_end":8}},{"value":"/ For cases where a special buffer does not provide `AsRef<[T]>`, consider encapsulating","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":147855,"byte_end":147945,"line_start":522,"line_end":522,"column_start":5,"column_end":95}},{"value":"/ bounds checks with `min_length` in a type similar to `View`. Then you may use","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":147950,"byte_end":148031,"line_start":523,"line_end":523,"column_start":5,"column_end":86}},{"value":"/ `in_bounds_index` as a small speedup over the index calculation of this method which relies","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":148036,"byte_end":148131,"line_start":524,"line_end":524,"column_start":5,"column_end":100}},{"value":"/ on `index_ignoring_bounds` since it can not have a-priori knowledge that the sample","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":148136,"byte_end":148223,"line_start":525,"line_end":525,"column_start":5,"column_end":92}},{"value":"/ coordinate is in fact backed by any memory buffer.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":148228,"byte_end":148282,"line_start":526,"line_end":526,"column_start":5,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":596},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":149901,"byte_end":149915,"line_start":560,"line_end":560,"column_start":12,"column_end":26},"name":"get_mut_sample","qualname":"<FlatSamples<Buffer>>::get_mut_sample","value":"pub fn get_mut_sample<T>(&mut Self, u8, u32, u32) -> Option<&mut T> where\nBuffer: AsMut<[T]>","parent":null,"children":[],"decl_id":null,"docs":" Get a mutable reference to a single sample.","sig":null,"attributes":[{"value":"/ Get a mutable reference to a single sample.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":148491,"byte_end":148538,"line_start":534,"line_end":534,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":148543,"byte_end":148546,"line_start":535,"line_end":535,"column_start":5,"column_end":8}},{"value":"/ This more restrictive than the method based on `std::ops::IndexMut` but guarantees to","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":148551,"byte_end":148640,"line_start":536,"line_end":536,"column_start":5,"column_end":94}},{"value":"/ properly check all bounds and not panic as long as `Buffer::as_ref` does not do so.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":148645,"byte_end":148732,"line_start":537,"line_end":537,"column_start":5,"column_end":92}},{"value":"/ Contrary to conversion to `ViewMut`, this does not require that samples are packed since it","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":148737,"byte_end":148832,"line_start":538,"line_end":538,"column_start":5,"column_end":100}},{"value":"/ does not need to convert samples to a color representation.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":148837,"byte_end":148900,"line_start":539,"line_end":539,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":148905,"byte_end":148908,"line_start":540,"line_end":540,"column_start":5,"column_end":8}},{"value":"/ **WARNING**: Note that of course samples may alias, so that the mutable reference returned","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":148913,"byte_end":149007,"line_start":541,"line_end":541,"column_start":5,"column_end":99}},{"value":"/ here can in fact modify more than the coordinate in the argument.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":149012,"byte_end":149081,"line_start":542,"line_end":542,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":149086,"byte_end":149089,"line_start":543,"line_end":543,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":149094,"byte_end":149101,"line_start":544,"line_end":544,"column_start":5,"column_end":12}},{"value":"/ # use image::{RgbImage};","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":149106,"byte_end":149134,"line_start":545,"line_end":545,"column_start":5,"column_end":33}},{"value":"/ let mut flat = RgbImage::new(480, 640).into_flat_samples();","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":149139,"byte_end":149202,"line_start":546,"line_end":546,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":149207,"byte_end":149210,"line_start":547,"line_end":547,"column_start":5,"column_end":8}},{"value":"/ // Assign some new color to the blue channel at (10, 10).","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":149215,"byte_end":149276,"line_start":548,"line_end":548,"column_start":5,"column_end":66}},{"value":"/ *flat.get_mut_sample(1, 10, 10).unwrap() = 255;","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":149281,"byte_end":149332,"line_start":549,"line_end":549,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":149337,"byte_end":149340,"line_start":550,"line_end":550,"column_start":5,"column_end":8}},{"value":"/ // There is no alpha channel.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":149345,"byte_end":149378,"line_start":551,"line_end":551,"column_start":5,"column_end":38}},{"value":"/ assert!(flat.get_mut_sample(3, 10, 10).is_none());","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":149383,"byte_end":149437,"line_start":552,"line_end":552,"column_start":5,"column_end":59}},{"value":"/ ```","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":149442,"byte_end":149449,"line_start":553,"line_end":553,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":149454,"byte_end":149457,"line_start":554,"line_end":554,"column_start":5,"column_end":8}},{"value":"/ For cases where a special buffer does not provide `AsRef<[T]>`, consider encapsulating","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":149462,"byte_end":149552,"line_start":555,"line_end":555,"column_start":5,"column_end":95}},{"value":"/ bounds checks with `min_length` in a type similar to `View`. Then you may use","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":149557,"byte_end":149638,"line_start":556,"line_end":556,"column_start":5,"column_end":86}},{"value":"/ `in_bounds_index` as a small speedup over the index calculation of this method which relies","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":149643,"byte_end":149738,"line_start":557,"line_end":557,"column_start":5,"column_end":100}},{"value":"/ on `index_ignoring_bounds` since it can not have a-priori knowledge that the sample","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":149743,"byte_end":149830,"line_start":558,"line_end":558,"column_start":5,"column_end":92}},{"value":"/ coordinate is in fact backed by any memory buffer.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":149835,"byte_end":149889,"line_start":559,"line_end":559,"column_start":5,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":598},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":150579,"byte_end":150586,"line_start":575,"line_end":575,"column_start":12,"column_end":19},"name":"as_view","qualname":"<FlatSamples<Buffer>>::as_view","value":"pub fn as_view<P>(&Self) -> Result<View<&[P::Subpixel], P>, Error> where\nP: Pixel, Buffer: AsRef<[P::Subpixel]>","parent":null,"children":[],"decl_id":null,"docs":" View this buffer as an image over some type of pixel.","sig":null,"attributes":[{"value":"/ View this buffer as an image over some type of pixel.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":150167,"byte_end":150224,"line_start":569,"line_end":569,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":150229,"byte_end":150232,"line_start":570,"line_end":570,"column_start":5,"column_end":8}},{"value":"/ This first ensures that all in-bounds coordinates refer to valid indices in the sample","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":150237,"byte_end":150327,"line_start":571,"line_end":571,"column_start":5,"column_end":95}},{"value":"/ buffer. It also checks that the specified pixel format expects the same number of channels","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":150332,"byte_end":150426,"line_start":572,"line_end":572,"column_start":5,"column_end":99}},{"value":"/ that are present in this buffer. Neither are larger nor a smaller number will be accepted.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":150431,"byte_end":150525,"line_start":573,"line_end":573,"column_start":5,"column_end":99}},{"value":"/ There is no automatic conversion.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":150530,"byte_end":150567,"line_start":574,"line_end":574,"column_start":5,"column_end":42}}]},{"kind":"Method","id":{"krate":0,"index":600},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":152163,"byte_end":152187,"line_start":612,"line_end":612,"column_start":12,"column_end":36},"name":"as_view_with_mut_samples","qualname":"<FlatSamples<Buffer>>::as_view_with_mut_samples","value":"pub fn as_view_with_mut_samples<P>(&mut Self)\n-> Result<View<&mut [P::Subpixel], P>, Error> where P: Pixel,\nBuffer: AsMut<[P::Subpixel]>","parent":null,"children":[],"decl_id":null,"docs":" View this buffer but keep mutability at a sample level.","sig":null,"attributes":[{"value":"/ View this buffer but keep mutability at a sample level.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":151198,"byte_end":151257,"line_start":597,"line_end":597,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":151262,"byte_end":151265,"line_start":598,"line_end":598,"column_start":5,"column_end":8}},{"value":"/ This is similar to `as_view` but subtly different from `as_view_mut`. The resulting type","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":151270,"byte_end":151362,"line_start":599,"line_end":599,"column_start":5,"column_end":97}},{"value":"/ can be used as a `GenericImage` with the same prior invariants needed as for `as_view`.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":151367,"byte_end":151458,"line_start":600,"line_end":600,"column_start":5,"column_end":96}},{"value":"/ It can not be used as a mutable `GenericImage` but does not need channels to be packed in","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":151463,"byte_end":151556,"line_start":601,"line_end":601,"column_start":5,"column_end":98}},{"value":"/ their pixel representation.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":151561,"byte_end":151592,"line_start":602,"line_end":602,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":151597,"byte_end":151600,"line_start":603,"line_end":603,"column_start":5,"column_end":8}},{"value":"/ This first ensures that all in-bounds coordinates refer to valid indices in the sample","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":151605,"byte_end":151695,"line_start":604,"line_end":604,"column_start":5,"column_end":95}},{"value":"/ buffer. It also checks that the specified pixel format expects the same number of channels","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":151700,"byte_end":151794,"line_start":605,"line_end":605,"column_start":5,"column_end":99}},{"value":"/ that are present in this buffer. Neither are larger nor a smaller number will be accepted.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":151799,"byte_end":151893,"line_start":606,"line_end":606,"column_start":5,"column_end":99}},{"value":"/ There is no automatic conversion.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":151898,"byte_end":151935,"line_start":607,"line_end":607,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":151940,"byte_end":151943,"line_start":608,"line_end":608,"column_start":5,"column_end":8}},{"value":"/ **WARNING**: Note that of course samples may alias, so that the mutable reference returned","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":151948,"byte_end":152042,"line_start":609,"line_end":609,"column_start":5,"column_end":99}},{"value":"/ for one sample can in fact modify other samples as well. Sometimes exactly this is","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":152047,"byte_end":152133,"line_start":610,"line_end":610,"column_start":5,"column_end":91}},{"value":"/ intended.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":152138,"byte_end":152151,"line_start":611,"line_end":611,"column_start":5,"column_end":18}}]},{"kind":"Method","id":{"krate":0,"index":602},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":153550,"byte_end":153561,"line_start":645,"line_end":645,"column_start":12,"column_end":23},"name":"as_view_mut","qualname":"<FlatSamples<Buffer>>::as_view_mut","value":"pub fn as_view_mut<P>(&mut Self)\n-> Result<ViewMut<&mut [P::Subpixel], P>, Error> where P: Pixel,\nBuffer: AsMut<[P::Subpixel]>","parent":null,"children":[],"decl_id":null,"docs":" Interpret this buffer as a mutable image.","sig":null,"attributes":[{"value":"/ Interpret this buffer as a mutable image.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":152807,"byte_end":152852,"line_start":634,"line_end":634,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":152857,"byte_end":152860,"line_start":635,"line_end":635,"column_start":5,"column_end":8}},{"value":"/ To succeed, the pixels in this buffer may not alias each other and the samples of each","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":152865,"byte_end":152955,"line_start":636,"line_end":636,"column_start":5,"column_end":95}},{"value":"/ pixel must be packed (i.e. `channel_stride` is `1`). The number of channels must be","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":152960,"byte_end":153047,"line_start":637,"line_end":637,"column_start":5,"column_end":92}},{"value":"/ consistent with the channel count expected by the pixel format.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":153052,"byte_end":153119,"line_start":638,"line_end":638,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":153124,"byte_end":153127,"line_start":639,"line_end":639,"column_start":5,"column_end":8}},{"value":"/ This is similar to an `ImageBuffer` except it is a temporary view that is not normalized as","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":153132,"byte_end":153227,"line_start":640,"line_end":640,"column_start":5,"column_end":100}},{"value":"/ strongly. To get an owning version, consider copying the data into an `ImageBuffer`. This","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":153232,"byte_end":153325,"line_start":641,"line_end":641,"column_start":5,"column_end":98}},{"value":"/ provides many more operations, is possibly faster (if not you may want to open an issue) is","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":153330,"byte_end":153425,"line_start":642,"line_end":642,"column_start":5,"column_end":100}},{"value":"/ generally polished. You can also try to convert this buffer inline, see","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":153430,"byte_end":153505,"line_start":643,"line_end":643,"column_start":5,"column_end":80}},{"value":"/ `ImageBuffer::from_raw`.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":153510,"byte_end":153538,"line_start":644,"line_end":644,"column_start":5,"column_end":33}}]},{"kind":"Method","id":{"krate":0,"index":604},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":154558,"byte_end":154566,"line_start":675,"line_end":675,"column_start":12,"column_end":20},"name":"as_slice","qualname":"<FlatSamples<Buffer>>::as_slice","value":"pub fn as_slice<T>(&Self) -> &[T] where Buffer: AsRef<[T]>","parent":null,"children":[],"decl_id":null,"docs":" View the samples as a slice.","sig":null,"attributes":[{"value":"/ View the samples as a slice.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":154334,"byte_end":154366,"line_start":671,"line_end":671,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":154371,"byte_end":154374,"line_start":672,"line_end":672,"column_start":5,"column_end":8}},{"value":"/ The slice is not limited to the region of the image and not all sample indices are valid","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":154379,"byte_end":154471,"line_start":673,"line_end":673,"column_start":5,"column_end":97}},{"value":"/ indices into this buffer. See `image_mut_slice` as an alternative.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":154476,"byte_end":154546,"line_start":674,"line_end":674,"column_start":5,"column_end":75}}]},{"kind":"Method","id":{"krate":0,"index":606},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":154877,"byte_end":154889,"line_start":683,"line_end":683,"column_start":12,"column_end":24},"name":"as_mut_slice","qualname":"<FlatSamples<Buffer>>::as_mut_slice","value":"pub fn as_mut_slice<T>(&mut Self) -> &mut [T] where Buffer: AsMut<[T]>","parent":null,"children":[],"decl_id":null,"docs":" View the samples as a slice.","sig":null,"attributes":[{"value":"/ View the samples as a slice.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":154653,"byte_end":154685,"line_start":679,"line_end":679,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":154690,"byte_end":154693,"line_start":680,"line_end":680,"column_start":5,"column_end":8}},{"value":"/ The slice is not limited to the region of the image and not all sample indices are valid","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":154698,"byte_end":154790,"line_start":681,"line_end":681,"column_start":5,"column_end":97}},{"value":"/ indices into this buffer. See `image_mut_slice` as an alternative.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":154795,"byte_end":154865,"line_start":682,"line_end":682,"column_start":5,"column_end":75}}]},{"kind":"Method","id":{"krate":0,"index":608},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":155320,"byte_end":155331,"line_start":692,"line_end":692,"column_start":12,"column_end":23},"name":"image_slice","qualname":"<FlatSamples<Buffer>>::image_slice","value":"pub fn image_slice<T>(&Self) -> Option<&[T]> where Buffer: AsRef<[T]>","parent":null,"children":[],"decl_id":null,"docs":" Return the portion of the buffer that holds sample values.","sig":null,"attributes":[{"value":"/ Return the portion of the buffer that holds sample values.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":154984,"byte_end":155046,"line_start":687,"line_end":687,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":155051,"byte_end":155054,"line_start":688,"line_end":688,"column_start":5,"column_end":8}},{"value":"/ This may fail when the coordinates in this image are either out-of-bounds of the underlying","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":155059,"byte_end":155154,"line_start":689,"line_end":689,"column_start":5,"column_end":100}},{"value":"/ buffer or can not be represented. Note that the slice may have holes that do not correspond","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":155159,"byte_end":155254,"line_start":690,"line_end":690,"column_start":5,"column_end":100}},{"value":"/ to any sample in the image represented by it.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":155259,"byte_end":155308,"line_start":691,"line_end":691,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":610},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":155748,"byte_end":155763,"line_start":707,"line_end":707,"column_start":12,"column_end":27},"name":"image_mut_slice","qualname":"<FlatSamples<Buffer>>::image_mut_slice","value":"pub fn image_mut_slice<T>(&mut Self) -> Option<&mut [T]> where\nBuffer: AsMut<[T]>","parent":null,"children":[],"decl_id":null,"docs":" Mutable portion of the buffer that holds sample values.\n","sig":null,"attributes":[{"value":"/ Mutable portion of the buffer that holds sample values.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":155677,"byte_end":155736,"line_start":706,"line_end":706,"column_start":5,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":612},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":156417,"byte_end":156432,"line_start":726,"line_end":726,"column_start":12,"column_end":27},"name":"try_into_buffer","qualname":"<FlatSamples<Buffer>>::try_into_buffer","value":"pub fn try_into_buffer<P>(Self)\n-> Result<ImageBuffer<P, Buffer>, (Error, Self)> where P: Pixel + 'static,\nP::Subpixel: 'static, Buffer: Deref<Target = [P::Subpixel]>","parent":null,"children":[],"decl_id":null,"docs":" Move the data into an image buffer.","sig":null,"attributes":[{"value":"/ Move the data into an image buffer.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":156121,"byte_end":156160,"line_start":721,"line_end":721,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":156165,"byte_end":156168,"line_start":722,"line_end":722,"column_start":5,"column_end":8}},{"value":"/ This does **not** convert the sample layout. The buffer needs to be in packed row-major form","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":156173,"byte_end":156269,"line_start":723,"line_end":723,"column_start":5,"column_end":101}},{"value":"/ before calling this function. In case of an error, returns the buffer again so that it does","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":156274,"byte_end":156369,"line_start":724,"line_end":724,"column_start":5,"column_end":100}},{"value":"/ not release any allocation.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":156374,"byte_end":156405,"line_start":725,"line_end":725,"column_start":5,"column_end":36}}]},{"kind":"Method","id":{"krate":0,"index":615},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":159268,"byte_end":159278,"line_start":800,"line_end":800,"column_start":12,"column_end":22},"name":"min_length","qualname":"<FlatSamples<Buffer>>::min_length","value":"pub fn min_length(&Self) -> Option<usize>","parent":null,"children":[],"decl_id":null,"docs":" Get the minimum length of a buffer such that all in-bounds samples have valid indices.","sig":null,"attributes":[{"value":"/ Get the minimum length of a buffer such that all in-bounds samples have valid indices.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":157203,"byte_end":157293,"line_start":749,"line_end":749,"column_start":5,"column_end":95}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":157298,"byte_end":157301,"line_start":750,"line_end":750,"column_start":5,"column_end":8}},{"value":"/ This method will allow zero strides, allowing compact representations of monochrome images.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":157306,"byte_end":157401,"line_start":751,"line_end":751,"column_start":5,"column_end":100}},{"value":"/ To check that no aliasing occurs, try `check_alias_invariants`. For compact images (no","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":157406,"byte_end":157496,"line_start":752,"line_end":752,"column_start":5,"column_end":95}},{"value":"/ aliasing and no unindexed samples) this is `width*height*channels`. But for both of the","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":157501,"byte_end":157592,"line_start":753,"line_end":753,"column_start":5,"column_end":96}},{"value":"/ other cases, the reasoning is slightly more involved.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":157597,"byte_end":157654,"line_start":754,"line_end":754,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":157659,"byte_end":157662,"line_start":755,"line_end":755,"column_start":5,"column_end":8}},{"value":"/ # Explanation","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":157667,"byte_end":157684,"line_start":756,"line_end":756,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":157689,"byte_end":157692,"line_start":757,"line_end":757,"column_start":5,"column_end":8}},{"value":"/ Note that there is a difference between `min_length` and the index of the sample","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":157697,"byte_end":157781,"line_start":758,"line_end":758,"column_start":5,"column_end":89}},{"value":"/ 'one-past-the-end`. This is due to strides that may be larger than the dimension below.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":157786,"byte_end":157877,"line_start":759,"line_end":759,"column_start":5,"column_end":96}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":157882,"byte_end":157885,"line_start":760,"line_end":760,"column_start":5,"column_end":8}},{"value":"/ ## Example with holes","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":157890,"byte_end":157915,"line_start":761,"line_end":761,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":157920,"byte_end":157923,"line_start":762,"line_end":762,"column_start":5,"column_end":8}},{"value":"/ Let's look at an example of a grayscale image with","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":157928,"byte_end":157982,"line_start":763,"line_end":763,"column_start":5,"column_end":59}},{"value":"/ * `width_stride = 1`","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":157987,"byte_end":158011,"line_start":764,"line_end":764,"column_start":5,"column_end":29}},{"value":"/ * `width = 2`","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":158016,"byte_end":158033,"line_start":765,"line_end":765,"column_start":5,"column_end":22}},{"value":"/ * `height_stride = 3`","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":158038,"byte_end":158063,"line_start":766,"line_end":766,"column_start":5,"column_end":30}},{"value":"/ * `height = 2`","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":158068,"byte_end":158086,"line_start":767,"line_end":767,"column_start":5,"column_end":23}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":158091,"byte_end":158094,"line_start":768,"line_end":768,"column_start":5,"column_end":8}},{"value":"/ ```text","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":158099,"byte_end":158110,"line_start":769,"line_end":769,"column_start":5,"column_end":16}},{"value":"/ | x x   | x x m | $","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":158115,"byte_end":158138,"line_start":770,"line_end":770,"column_start":5,"column_end":28}},{"value":"/  min_length m ^","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":158143,"byte_end":158162,"line_start":771,"line_end":771,"column_start":5,"column_end":24}},{"value":"/                   ^ one-past-the-end $","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":158167,"byte_end":158209,"line_start":772,"line_end":772,"column_start":5,"column_end":47}},{"value":"/ ```","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":158214,"byte_end":158221,"line_start":773,"line_end":773,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":158226,"byte_end":158229,"line_start":774,"line_end":774,"column_start":5,"column_end":8}},{"value":"/ The difference is also extreme for empty images with large strides. The one-past-the-end","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":158234,"byte_end":158326,"line_start":775,"line_end":775,"column_start":5,"column_end":97}},{"value":"/ sample index is still as large as the largest of these strides while `min_length = 0`.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":158331,"byte_end":158421,"line_start":776,"line_end":776,"column_start":5,"column_end":95}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":158426,"byte_end":158429,"line_start":777,"line_end":777,"column_start":5,"column_end":8}},{"value":"/ ## Example with aliasing","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":158434,"byte_end":158462,"line_start":778,"line_end":778,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":158467,"byte_end":158470,"line_start":779,"line_end":779,"column_start":5,"column_end":8}},{"value":"/ The concept gets even more important when you allow samples to alias each other. Here we","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":158475,"byte_end":158567,"line_start":780,"line_end":780,"column_start":5,"column_end":97}},{"value":"/ have the buffer of a small grayscale image where this is the case, this time we will first","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":158572,"byte_end":158666,"line_start":781,"line_end":781,"column_start":5,"column_end":99}},{"value":"/ show the buffer and then the individual rows below.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":158671,"byte_end":158726,"line_start":782,"line_end":782,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":158731,"byte_end":158734,"line_start":783,"line_end":783,"column_start":5,"column_end":8}},{"value":"/ * `width_stride = 1`","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":158739,"byte_end":158763,"line_start":784,"line_end":784,"column_start":5,"column_end":29}},{"value":"/ * `width = 3`","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":158768,"byte_end":158785,"line_start":785,"line_end":785,"column_start":5,"column_end":22}},{"value":"/ * `height_stride = 2`","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":158790,"byte_end":158815,"line_start":786,"line_end":786,"column_start":5,"column_end":30}},{"value":"/ * `height = 2`","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":158820,"byte_end":158838,"line_start":787,"line_end":787,"column_start":5,"column_end":23}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":158843,"byte_end":158846,"line_start":788,"line_end":788,"column_start":5,"column_end":8}},{"value":"/ ```text","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":158851,"byte_end":158862,"line_start":789,"line_end":789,"column_start":5,"column_end":16}},{"value":"/  1 2 3 4 5 m","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":158867,"byte_end":158883,"line_start":790,"line_end":790,"column_start":5,"column_end":21}},{"value":"/ |1 2 3| row one","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":158888,"byte_end":158907,"line_start":791,"line_end":791,"column_start":5,"column_end":24}},{"value":"/     |3 4 5| row two","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":158912,"byte_end":158935,"line_start":792,"line_end":792,"column_start":5,"column_end":28}},{"value":"/            ^ m min_length","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":158940,"byte_end":158969,"line_start":793,"line_end":793,"column_start":5,"column_end":34}},{"value":"/          ^ ??? one-past-the-end","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":158974,"byte_end":159009,"line_start":794,"line_end":794,"column_start":5,"column_end":40}},{"value":"/ ```","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":159014,"byte_end":159021,"line_start":795,"line_end":795,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":159026,"byte_end":159029,"line_start":796,"line_end":796,"column_start":5,"column_end":8}},{"value":"/ This time 'one-past-the-end' is not even simply the largest stride times the extent of its","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":159034,"byte_end":159128,"line_start":797,"line_end":797,"column_start":5,"column_end":99}},{"value":"/ dimension. That still points inside the image because `height*height_stride = 4` but also","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":159133,"byte_end":159226,"line_start":798,"line_end":798,"column_start":5,"column_end":98}},{"value":"/ `index_of(1, 2) = 4`.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":159231,"byte_end":159256,"line_start":799,"line_end":799,"column_start":5,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":616},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":159415,"byte_end":159419,"line_start":805,"line_end":805,"column_start":12,"column_end":16},"name":"fits","qualname":"<FlatSamples<Buffer>>::fits","value":"pub fn fits(&Self, usize) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Check if a buffer of length `len` is large enough.\n","sig":null,"attributes":[{"value":"/ Check if a buffer of length `len` is large enough.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":159349,"byte_end":159403,"line_start":804,"line_end":804,"column_start":5,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":617},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":159840,"byte_end":159859,"line_start":814,"line_end":814,"column_start":12,"column_end":31},"name":"has_aliased_samples","qualname":"<FlatSamples<Buffer>>::has_aliased_samples","value":"pub fn has_aliased_samples(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" If there are any samples aliasing each other.","sig":null,"attributes":[{"value":"/ If there are any samples aliasing each other.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":159490,"byte_end":159539,"line_start":809,"line_end":809,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":159544,"byte_end":159547,"line_start":810,"line_end":810,"column_start":5,"column_end":8}},{"value":"/ If this is not the case, it would always be safe to allow mutable access to two different","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":159552,"byte_end":159645,"line_start":811,"line_end":811,"column_start":5,"column_end":98}},{"value":"/ samples at the same time. Otherwise, this operation would need additional checks. When one","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":159650,"byte_end":159744,"line_start":812,"line_end":812,"column_start":5,"column_end":99}},{"value":"/ dimension overflows `usize` with its stride we also consider this aliasing.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":159749,"byte_end":159828,"line_start":813,"line_end":813,"column_start":5,"column_end":84}}]},{"kind":"Method","id":{"krate":0,"index":618},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":160440,"byte_end":160449,"line_start":825,"line_end":825,"column_start":12,"column_end":21},"name":"is_normal","qualname":"<FlatSamples<Buffer>>::is_normal","value":"pub fn is_normal(&Self, NormalForm) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Check if a buffer fulfills the requirements of a normal form.","sig":null,"attributes":[{"value":"/ Check if a buffer fulfills the requirements of a normal form.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":159930,"byte_end":159995,"line_start":818,"line_end":818,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":160000,"byte_end":160003,"line_start":819,"line_end":819,"column_start":5,"column_end":8}},{"value":"/ Certain conversions have preconditions on the structure of the sample buffer that are not","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":160008,"byte_end":160101,"line_start":820,"line_end":820,"column_start":5,"column_end":98}},{"value":"/ captured (by design) by the type system. These are then checked before the conversion. Such","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":160106,"byte_end":160201,"line_start":821,"line_end":821,"column_start":5,"column_end":100}},{"value":"/ checks can all be done in constant time and will not inspect the buffer content. You can","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":160206,"byte_end":160298,"line_start":822,"line_end":822,"column_start":5,"column_end":97}},{"value":"/ perform these checks yourself when the conversion is not required at this moment but maybe","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":160303,"byte_end":160397,"line_start":823,"line_end":823,"column_start":5,"column_end":99}},{"value":"/ still performed later.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":160402,"byte_end":160428,"line_start":824,"line_end":824,"column_start":5,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":619},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":160874,"byte_end":160883,"line_start":834,"line_end":834,"column_start":12,"column_end":21},"name":"in_bounds","qualname":"<FlatSamples<Buffer>>::in_bounds","value":"pub fn in_bounds(&Self, u8, u32, u32) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Check that the pixel and the channel index are in bounds.","sig":null,"attributes":[{"value":"/ Check that the pixel and the channel index are in bounds.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":160532,"byte_end":160593,"line_start":829,"line_end":829,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":160598,"byte_end":160601,"line_start":830,"line_end":830,"column_start":5,"column_end":8}},{"value":"/ An in-bound coordinate does not yet guarantee that the corresponding calculation of a","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":160606,"byte_end":160695,"line_start":831,"line_end":831,"column_start":5,"column_end":94}},{"value":"/ buffer index does not overflow. However, if such a buffer large enough to hold all samples","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":160700,"byte_end":160794,"line_start":832,"line_end":832,"column_start":5,"column_end":99}},{"value":"/ actually exists in memory, this porperty of course follows.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":160799,"byte_end":160862,"line_start":833,"line_end":833,"column_start":5,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":620},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":161133,"byte_end":161138,"line_start":841,"line_end":841,"column_start":12,"column_end":17},"name":"index","qualname":"<FlatSamples<Buffer>>::index","value":"pub fn index(&Self, u8, u32, u32) -> Option<usize>","parent":null,"children":[],"decl_id":null,"docs":" Resolve the index of a particular sample.","sig":null,"attributes":[{"value":"/ Resolve the index of a particular sample.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":160986,"byte_end":161031,"line_start":838,"line_end":838,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":161036,"byte_end":161039,"line_start":839,"line_end":839,"column_start":5,"column_end":8}},{"value":"/ `None` if the index is outside the bounds or does not fit into a `usize`.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":161044,"byte_end":161121,"line_start":840,"line_end":840,"column_start":5,"column_end":82}}]},{"kind":"Method","id":{"krate":0,"index":621},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":161617,"byte_end":161638,"line_start":850,"line_end":850,"column_start":12,"column_end":33},"name":"index_ignoring_bounds","qualname":"<FlatSamples<Buffer>>::index_ignoring_bounds","value":"pub fn index_ignoring_bounds(&Self, usize, usize, usize) -> Option<usize>","parent":null,"children":[],"decl_id":null,"docs":" Get the theoretical position of sample (x, y, channel).","sig":null,"attributes":[{"value":"/ Get the theoretical position of sample (x, y, channel).","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":161246,"byte_end":161305,"line_start":845,"line_end":845,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":161310,"byte_end":161313,"line_start":846,"line_end":846,"column_start":5,"column_end":8}},{"value":"/ The 'check' is for overflow during index calculation, not that it is contained in the","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":161318,"byte_end":161407,"line_start":847,"line_end":847,"column_start":5,"column_end":94}},{"value":"/ image. Two samples may return the same index, even when one of them is out of bounds. This","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":161412,"byte_end":161506,"line_start":848,"line_end":848,"column_start":5,"column_end":99}},{"value":"/ happens when all strides are `0`, i.e. the image is an arbitrarily large monochrome image.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":161511,"byte_end":161605,"line_start":849,"line_end":849,"column_start":5,"column_end":99}}]},{"kind":"Method","id":{"krate":0,"index":622},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":162070,"byte_end":162085,"line_start":859,"line_end":859,"column_start":12,"column_end":27},"name":"in_bounds_index","qualname":"<FlatSamples<Buffer>>::in_bounds_index","value":"pub fn in_bounds_index(&Self, u8, u32, u32) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Get an index provided it is inbouds.","sig":null,"attributes":[{"value":"/ Get an index provided it is inbouds.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":161769,"byte_end":161809,"line_start":854,"line_end":854,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":161814,"byte_end":161817,"line_start":855,"line_end":855,"column_start":5,"column_end":8}},{"value":"/ Assumes that the image is backed by some sufficiently large buffer. Then computation can","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":161822,"byte_end":161914,"line_start":856,"line_end":856,"column_start":5,"column_end":97}},{"value":"/ not overflow as we could represent the maximum coordinate. Since overflow is defined either","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":161919,"byte_end":162014,"line_start":857,"line_end":857,"column_start":5,"column_end":100}},{"value":"/ way, this method can not be unsafe.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":162019,"byte_end":162058,"line_start":858,"line_end":858,"column_start":5,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":623},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":162520,"byte_end":162529,"line_start":868,"line_end":868,"column_start":12,"column_end":21},"name":"shrink_to","qualname":"<FlatSamples<Buffer>>::shrink_to","value":"pub fn shrink_to(&mut Self, u8, u32, u32)","parent":null,"children":[],"decl_id":null,"docs":" Shrink the image to the minimum of current and given extents.","sig":null,"attributes":[{"value":"/ Shrink the image to the minimum of current and given extents.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":162195,"byte_end":162260,"line_start":863,"line_end":863,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":162265,"byte_end":162268,"line_start":864,"line_end":864,"column_start":5,"column_end":8}},{"value":"/ This does not modify the strides, so that the resulting sample buffer may have holes","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":162273,"byte_end":162361,"line_start":865,"line_end":865,"column_start":5,"column_end":93}},{"value":"/ created by the shrinking operation. Shrinking could also lead to an non-aliasing image when","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":162366,"byte_end":162461,"line_start":866,"line_end":866,"column_start":5,"column_end":100}},{"value":"/ samples had aliased each other before.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":162466,"byte_end":162508,"line_start":867,"line_end":867,"column_start":5,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":627},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":163415,"byte_end":163429,"line_start":894,"line_end":894,"column_start":12,"column_end":26},"name":"with_monocolor","qualname":"<FlatSamples<&'buf [Subpixel]>>::with_monocolor","value":"pub fn with_monocolor<P>(&'buf P, u32, u32) -> Self where P: Pixel<Subpixel =\nSubpixel>, Subpixel: Primitive","parent":null,"children":[],"decl_id":null,"docs":" Create a monocolor image from a single pixel.","sig":null,"attributes":[{"value":"/ Create a monocolor image from a single pixel.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":162703,"byte_end":162752,"line_start":874,"line_end":874,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":162757,"byte_end":162760,"line_start":875,"line_end":875,"column_start":5,"column_end":8}},{"value":"/ This can be used as a very cheap source of a `GenericImageView` with an arbitrary number of","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":162765,"byte_end":162860,"line_start":876,"line_end":876,"column_start":5,"column_end":100}},{"value":"/ pixels of a single color, without any dynamic allocation.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":162865,"byte_end":162926,"line_start":877,"line_end":877,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":162931,"byte_end":162934,"line_start":878,"line_end":878,"column_start":5,"column_end":8}},{"value":"/ ## Examples","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":162939,"byte_end":162954,"line_start":879,"line_end":879,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":162959,"byte_end":162962,"line_start":880,"line_end":880,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":162967,"byte_end":162974,"line_start":881,"line_end":881,"column_start":5,"column_end":12}},{"value":"/ # fn paint_something<T>(_: T) {}","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":162979,"byte_end":163015,"line_start":882,"line_end":882,"column_start":5,"column_end":41}},{"value":"/ use image::{flat::FlatSamples, GenericImage, RgbImage, Rgb};","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":163020,"byte_end":163084,"line_start":883,"line_end":883,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":163089,"byte_end":163092,"line_start":884,"line_end":884,"column_start":5,"column_end":8}},{"value":"/ let background = Rgb([20, 20, 20]);","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":163097,"byte_end":163136,"line_start":885,"line_end":885,"column_start":5,"column_end":44}},{"value":"/ let bg = FlatSamples::with_monocolor(&background, 200, 200);;","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":163141,"byte_end":163206,"line_start":886,"line_end":886,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":163211,"byte_end":163214,"line_start":887,"line_end":887,"column_start":5,"column_end":8}},{"value":"/ let mut image = RgbImage::new(200, 200);","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":163219,"byte_end":163263,"line_start":888,"line_end":888,"column_start":5,"column_end":49}},{"value":"/ paint_something(&mut image);","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":163268,"byte_end":163300,"line_start":889,"line_end":889,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":163305,"byte_end":163308,"line_start":890,"line_end":890,"column_start":5,"column_end":8}},{"value":"/ // Reset the canvas","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":163313,"byte_end":163336,"line_start":891,"line_end":891,"column_start":5,"column_end":28}},{"value":"/ image.copy_from(&bg.as_view().unwrap(), 0, 0);","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":163341,"byte_end":163391,"line_start":892,"line_end":892,"column_start":5,"column_end":55}},{"value":"/ ```","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":163396,"byte_end":163403,"line_start":893,"line_end":893,"column_start":5,"column_end":12}}]},{"kind":"Struct","id":{"krate":0,"index":2419},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":164634,"byte_end":164638,"line_start":929,"line_end":929,"column_start":12,"column_end":16},"name":"View","qualname":"::flat::View","value":"View {  }","parent":null,"children":[{"krate":0,"index":2422},{"krate":0,"index":2423}],"decl_id":null,"docs":" A flat buffer that can be used as an image view.","sig":null,"attributes":[{"value":"/ A flat buffer that can be used as an image view.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":163932,"byte_end":163984,"line_start":914,"line_end":914,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":163985,"byte_end":163988,"line_start":915,"line_end":915,"column_start":1,"column_end":4}},{"value":"/ This is a nearly trivial wrapper around a buffer but at least sanitizes by checking the buffer","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":163989,"byte_end":164087,"line_start":916,"line_end":916,"column_start":1,"column_end":99}},{"value":"/ length first and constraining the pixel type.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":164088,"byte_end":164137,"line_start":917,"line_end":917,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":164138,"byte_end":164141,"line_start":918,"line_end":918,"column_start":1,"column_end":4}},{"value":"/ Note that this does not eliminate panics as the `AsRef<[T]>` implementation of `Buffer` may be","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":164142,"byte_end":164240,"line_start":919,"line_end":919,"column_start":1,"column_end":99}},{"value":"/ unreliable, i.e. return different buffers at different times. This of course is a non-issue for","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":164241,"byte_end":164340,"line_start":920,"line_end":920,"column_start":1,"column_end":100}},{"value":"/ all common collections where the bounds check once must be enough.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":164341,"byte_end":164411,"line_start":921,"line_end":921,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":164412,"byte_end":164415,"line_start":922,"line_end":922,"column_start":1,"column_end":4}},{"value":"/ # Inner invariants","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":164416,"byte_end":164438,"line_start":923,"line_end":923,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":164439,"byte_end":164442,"line_start":924,"line_end":924,"column_start":1,"column_end":4}},{"value":"/ * For all indices inside bounds, the corresponding index is valid in the buffer","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":164443,"byte_end":164526,"line_start":925,"line_end":925,"column_start":1,"column_end":84}},{"value":"/ * `P::channel_count()` agrees with `self.inner.layout.channels`","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":164527,"byte_end":164594,"line_start":926,"line_end":926,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":164595,"byte_end":164598,"line_start":927,"line_end":927,"column_start":1,"column_end":4}}]},{"kind":"Struct","id":{"krate":0,"index":2432},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":165484,"byte_end":165491,"line_start":952,"line_end":952,"column_start":12,"column_end":19},"name":"ViewMut","qualname":"::flat::ViewMut","value":"ViewMut {  }","parent":null,"children":[{"krate":0,"index":2435},{"krate":0,"index":2436}],"decl_id":null,"docs":" A mutable owning version of a flat buffer.","sig":null,"attributes":[{"value":"/ A mutable owning version of a flat buffer.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":164762,"byte_end":164808,"line_start":937,"line_end":937,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":164809,"byte_end":164812,"line_start":938,"line_end":938,"column_start":1,"column_end":4}},{"value":"/ While this wraps a buffer similar to `ImageBuffer`, this is mostly intended as a utility. The","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":164813,"byte_end":164910,"line_start":939,"line_end":939,"column_start":1,"column_end":98}},{"value":"/ library endorsed normalized representation is still `ImageBuffer`. Also, the implementation of","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":164911,"byte_end":165009,"line_start":940,"line_end":940,"column_start":1,"column_end":99}},{"value":"/ `AsMut<[P::Subpixel]>` must always yield the same buffer. Therefore there is no public way to","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":165010,"byte_end":165107,"line_start":941,"line_end":941,"column_start":1,"column_end":98}},{"value":"/ construct this with an owning buffer.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":165108,"byte_end":165149,"line_start":942,"line_end":942,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":165150,"byte_end":165153,"line_start":943,"line_end":943,"column_start":1,"column_end":4}},{"value":"/ # Inner invariants","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":165154,"byte_end":165176,"line_start":944,"line_end":944,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":165177,"byte_end":165180,"line_start":945,"line_end":945,"column_start":1,"column_end":4}},{"value":"/ * For all indices inside bounds, the corresponding index is valid in the buffer","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":165181,"byte_end":165264,"line_start":946,"line_end":946,"column_start":1,"column_end":84}},{"value":"/ * There is no aliasing of samples","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":165265,"byte_end":165302,"line_start":947,"line_end":947,"column_start":1,"column_end":38}},{"value":"/ * The samples are packed, i.e. `self.inner.layout.sample_stride == 1`","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":165303,"byte_end":165376,"line_start":948,"line_end":948,"column_start":1,"column_end":74}},{"value":"/ * `P::channel_count()` agrees with `self.inner.layout.channels`","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":165377,"byte_end":165444,"line_start":949,"line_end":949,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":165445,"byte_end":165448,"line_start":950,"line_end":950,"column_start":1,"column_end":4}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2446},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":166199,"byte_end":166207,"line_start":971,"line_end":971,"column_start":5,"column_end":13},"name":"TooLarge","qualname":"::flat::Error::TooLarge","value":"Error::TooLarge","parent":{"krate":0,"index":2445},"children":[],"decl_id":null,"docs":" The represented image was too large.","sig":null,"attributes":[{"value":"/ The represented image was too large.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":166076,"byte_end":166116,"line_start":968,"line_end":968,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":166121,"byte_end":166124,"line_start":969,"line_end":969,"column_start":5,"column_end":8}},{"value":"/ The optional value denotes a possibly accepted maximal bound.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":166129,"byte_end":166194,"line_start":970,"line_end":970,"column_start":5,"column_end":70}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2448},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":166364,"byte_end":166382,"line_start":976,"line_end":976,"column_start":5,"column_end":23},"name":"NormalFormRequired","qualname":"::flat::Error::NormalFormRequired","value":"Error::NormalFormRequired(NormalForm)","parent":{"krate":0,"index":2445},"children":[],"decl_id":null,"docs":" The represented image can not use this representation.","sig":null,"attributes":[{"value":"/ The represented image can not use this representation.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":166214,"byte_end":166272,"line_start":973,"line_end":973,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":166277,"byte_end":166280,"line_start":974,"line_end":974,"column_start":5,"column_end":8}},{"value":"/ Has an additional value of the normalized form that would be accepted.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":166285,"byte_end":166359,"line_start":975,"line_end":975,"column_start":5,"column_end":79}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2451},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":166991,"byte_end":167001,"line_start":987,"line_end":987,"column_start":5,"column_end":15},"name":"WrongColor","qualname":"::flat::Error::WrongColor","value":"Error::WrongColor(ColorType)","parent":{"krate":0,"index":2445},"children":[],"decl_id":null,"docs":" The color format did not match the channel count.","sig":null,"attributes":[{"value":"/ The color format did not match the channel count.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":166401,"byte_end":166454,"line_start":978,"line_end":978,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":166459,"byte_end":166462,"line_start":979,"line_end":979,"column_start":5,"column_end":8}},{"value":"/ In some cases you might be able to fix this by lowering the reported pixel count of the","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":166467,"byte_end":166558,"line_start":980,"line_end":980,"column_start":5,"column_end":96}},{"value":"/ buffer without touching the strides.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":166563,"byte_end":166603,"line_start":981,"line_end":981,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":166608,"byte_end":166611,"line_start":982,"line_end":982,"column_start":5,"column_end":8}},{"value":"/ In very special circumstances you *may* do the opposite. This is **VERY** dangerous but not","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":166616,"byte_end":166711,"line_start":983,"line_end":983,"column_start":5,"column_end":100}},{"value":"/ directly memory unsafe although that will likely alias pixels. One scenario is when you","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":166716,"byte_end":166807,"line_start":984,"line_end":984,"column_start":5,"column_end":96}},{"value":"/ want to construct an `Rgba` image but have only 3 bytes per pixel and for some reason don't","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":166812,"byte_end":166907,"line_start":985,"line_end":985,"column_start":5,"column_end":100}},{"value":"/ care about the value of the alpha channel even though you need `Rgba`.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":166912,"byte_end":166986,"line_start":986,"line_end":986,"column_start":5,"column_end":79}}]},{"kind":"Enum","id":{"krate":0,"index":2445},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":166064,"byte_end":166069,"line_start":967,"line_end":967,"column_start":10,"column_end":15},"name":"Error","qualname":"::flat::Error","value":"pub enum Error {\n\n    /// The represented image was too large.\n    ///\n    /// The optional value denotes a possibly accepted maximal bound.\n    TooLarge,\n\n    /// The represented image can not use this representation.\n    ///\n    /// Has an additional value of the normalized form that would be accepted.\n    NormalFormRequired(NormalForm),\n\n    /// The color format did not match the channel count.\n    ///\n    /// In some cases you might be able to fix this by lowering the reported pixel count of the\n    /// buffer without touching the strides.\n    ///\n    /// In very special circumstances you *may* do the opposite. This is **VERY** dangerous but not\n    /// directly memory unsafe although that will likely alias pixels. One scenario is when you\n    /// want to construct an `Rgba` image but have only 3 bytes per pixel and for some reason don't\n    /// care about the value of the alpha channel even though you need `Rgba`.\n    WrongColor(ColorType),\n}","parent":null,"children":[{"krate":0,"index":2446},{"krate":0,"index":2448},{"krate":0,"index":2451}],"decl_id":null,"docs":" Denotes invalid flat sample buffers when trying to convert to stricter types.","sig":null,"attributes":[{"value":"/ Denotes invalid flat sample buffers when trying to convert to stricter types.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":165615,"byte_end":165696,"line_start":960,"line_end":960,"column_start":1,"column_end":82}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":165697,"byte_end":165700,"line_start":961,"line_end":961,"column_start":1,"column_end":4}},{"value":"/ The biggest use case being `ImageBuffer` which expects closely packed","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":165701,"byte_end":165774,"line_start":962,"line_end":962,"column_start":1,"column_end":74}},{"value":"/ samples in a row major matrix representation. But this error type may be","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":165775,"byte_end":165851,"line_start":963,"line_end":963,"column_start":1,"column_end":77}},{"value":"/ resused for other import functions. A more versatile user may also try to","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":165852,"byte_end":165929,"line_start":964,"line_end":964,"column_start":1,"column_end":78}},{"value":"/ correct the underlying representation depending on the error variant.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":165930,"byte_end":166003,"line_start":965,"line_end":965,"column_start":1,"column_end":74}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2470},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":167500,"byte_end":167509,"line_start":1000,"line_end":1000,"column_start":5,"column_end":14},"name":"Unaliased","qualname":"::flat::NormalForm::Unaliased","value":"NormalForm::Unaliased","parent":{"krate":0,"index":2469},"children":[],"decl_id":null,"docs":" No pixel aliases another.","sig":null,"attributes":[{"value":"/ No pixel aliases another.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":167277,"byte_end":167306,"line_start":996,"line_end":996,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":167311,"byte_end":167314,"line_start":997,"line_end":997,"column_start":5,"column_end":8}},{"value":"/ Unaliased also guarantees that all index calculations in the image bounds using","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":167319,"byte_end":167402,"line_start":998,"line_end":998,"column_start":5,"column_end":88}},{"value":"/ `dim_index*dim_stride` (such as `x*width_stride + y*height_stride`) do not overflow.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":167407,"byte_end":167495,"line_start":999,"line_end":999,"column_start":5,"column_end":93}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2472},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":167739,"byte_end":167750,"line_start":1006,"line_end":1006,"column_start":5,"column_end":16},"name":"PixelPacked","qualname":"::flat::NormalForm::PixelPacked","value":"NormalForm::PixelPacked","parent":{"krate":0,"index":2469},"children":[],"decl_id":null,"docs":" At least pixels are packed.","sig":null,"attributes":[{"value":"/ At least pixels are packed.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":167516,"byte_end":167547,"line_start":1002,"line_end":1002,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":167552,"byte_end":167555,"line_start":1003,"line_end":1003,"column_start":5,"column_end":8}},{"value":"/ Images of these types can wrap `[T]`-slices into the standard color types. This is a","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":167560,"byte_end":167648,"line_start":1004,"line_end":1004,"column_start":5,"column_end":93}},{"value":"/ precondition for `GenericImage` which requires by-reference access to pixels.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":167653,"byte_end":167734,"line_start":1005,"line_end":1005,"column_start":5,"column_end":86}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2474},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":168034,"byte_end":168045,"line_start":1013,"line_end":1013,"column_start":5,"column_end":16},"name":"ImagePacked","qualname":"::flat::NormalForm::ImagePacked","value":"NormalForm::ImagePacked","parent":{"krate":0,"index":2469},"children":[],"decl_id":null,"docs":" All samples are packed.","sig":null,"attributes":[{"value":"/ All samples are packed.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":167757,"byte_end":167784,"line_start":1008,"line_end":1008,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":167789,"byte_end":167792,"line_start":1009,"line_end":1009,"column_start":5,"column_end":8}},{"value":"/ This is orthogonal to `PixelPacked`. It requires that there are no holes in the image but","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":167797,"byte_end":167890,"line_start":1010,"line_end":1010,"column_start":5,"column_end":98}},{"value":"/ it is not necessary that the pixel samples themselves are adjacent. An example of this","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":167895,"byte_end":167985,"line_start":1011,"line_end":1011,"column_start":5,"column_end":95}},{"value":"/ behaviour is a planar image layout.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":167990,"byte_end":168029,"line_start":1012,"line_end":1012,"column_start":5,"column_end":44}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2476},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":168255,"byte_end":168269,"line_start":1019,"line_end":1019,"column_start":5,"column_end":19},"name":"RowMajorPacked","qualname":"::flat::NormalForm::RowMajorPacked","value":"NormalForm::RowMajorPacked","parent":{"krate":0,"index":2469},"children":[],"decl_id":null,"docs":" The samples are in row-major form and all samples are packed.","sig":null,"attributes":[{"value":"/ The samples are in row-major form and all samples are packed.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":168052,"byte_end":168117,"line_start":1015,"line_end":1015,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":168122,"byte_end":168125,"line_start":1016,"line_end":1016,"column_start":5,"column_end":8}},{"value":"/ In addition to `PixelPacked` and `ImagePacked` this also asserts that the pixel matrix is","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":168130,"byte_end":168223,"line_start":1017,"line_end":1017,"column_start":5,"column_end":98}},{"value":"/ in row-major form.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":168228,"byte_end":168250,"line_start":1018,"line_end":1018,"column_start":5,"column_end":27}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2478},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":168485,"byte_end":168502,"line_start":1025,"line_end":1025,"column_start":5,"column_end":22},"name":"ColumnMajorPacked","qualname":"::flat::NormalForm::ColumnMajorPacked","value":"NormalForm::ColumnMajorPacked","parent":{"krate":0,"index":2469},"children":[],"decl_id":null,"docs":" The samples are in column-major form and all samples are packed.","sig":null,"attributes":[{"value":"/ The samples are in column-major form and all samples are packed.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":168276,"byte_end":168344,"line_start":1021,"line_end":1021,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":168349,"byte_end":168352,"line_start":1022,"line_end":1022,"column_start":5,"column_end":8}},{"value":"/ In addition to `PixelPacked` and `ImagePacked` this also asserts that the pixel matrix is","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":168357,"byte_end":168450,"line_start":1023,"line_end":1023,"column_start":5,"column_end":98}},{"value":"/ in column-major form.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":168455,"byte_end":168480,"line_start":1024,"line_end":1024,"column_start":5,"column_end":30}}]},{"kind":"Enum","id":{"krate":0,"index":2469},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":167260,"byte_end":167270,"line_start":995,"line_end":995,"column_start":10,"column_end":20},"name":"NormalForm","qualname":"::flat::NormalForm","value":"pub enum NormalForm {\n\n    /// No pixel aliases another.\n    ///\n    /// Unaliased also guarantees that all index calculations in the image bounds using\n    /// `dim_index*dim_stride` (such as `x*width_stride + y*height_stride`) do not overflow.\n    Unaliased,\n\n    /// At least pixels are packed.\n    ///\n    /// Images of these types can wrap `[T]`-slices into the standard color types. This is a\n    /// precondition for `GenericImage` which requires by-reference access to pixels.\n    PixelPacked,\n\n    /// All samples are packed.\n    ///\n    /// This is orthogonal to `PixelPacked`. It requires that there are no holes in the image but\n    /// it is not necessary that the pixel samples themselves are adjacent. An example of this\n    /// behaviour is a planar image layout.\n    ImagePacked,\n\n    /// The samples are in row-major form and all samples are packed.\n    ///\n    /// In addition to `PixelPacked` and `ImagePacked` this also asserts that the pixel matrix is\n    /// in row-major form.\n    RowMajorPacked,\n\n    /// The samples are in column-major form and all samples are packed.\n    ///\n    /// In addition to `PixelPacked` and `ImagePacked` this also asserts that the pixel matrix is\n    /// in column-major form.\n    ColumnMajorPacked,\n}","parent":null,"children":[{"krate":0,"index":2470},{"krate":0,"index":2472},{"krate":0,"index":2474},{"krate":0,"index":2476},{"krate":0,"index":2478}],"decl_id":null,"docs":" Different normal forms of buffers.","sig":null,"attributes":[{"value":"/ Different normal forms of buffers.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":167017,"byte_end":167055,"line_start":990,"line_end":990,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":167056,"byte_end":167059,"line_start":991,"line_end":991,"column_start":1,"column_end":4}},{"value":"/ A normal form is an unaliased buffer with some additional constraints.  The `ÌmageBuffer` uses","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":167060,"byte_end":167159,"line_start":992,"line_end":992,"column_start":1,"column_end":99}},{"value":"/ row major form with packed samples.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":167160,"byte_end":167199,"line_start":993,"line_end":993,"column_start":1,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":632},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":168710,"byte_end":168720,"line_start":1035,"line_end":1035,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<View<Buffer, P>>::into_inner","value":"pub fn into_inner(Self) -> FlatSamples<Buffer>","parent":null,"children":[],"decl_id":null,"docs":" Take out the sample buffer.","sig":null,"attributes":[{"value":"/ Take out the sample buffer.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":168591,"byte_end":168622,"line_start":1032,"line_end":1032,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":168627,"byte_end":168630,"line_start":1033,"line_end":1033,"column_start":5,"column_end":8}},{"value":"/ Gives up the normalization invariants on the buffer format.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":168635,"byte_end":168698,"line_start":1034,"line_end":1034,"column_start":5,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":633},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":169203,"byte_end":169207,"line_start":1045,"line_end":1045,"column_start":12,"column_end":16},"name":"flat","qualname":"<View<Buffer, P>>::flat","value":"pub fn flat(&Self) -> &FlatSamples<Buffer>","parent":null,"children":[],"decl_id":null,"docs":" Get a reference on the inner sample descriptor.","sig":null,"attributes":[{"value":"/ Get a reference on the inner sample descriptor.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":168782,"byte_end":168833,"line_start":1039,"line_end":1039,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":168838,"byte_end":168841,"line_start":1040,"line_end":1040,"column_start":5,"column_end":8}},{"value":"/ There is no mutable counterpart as modifying the buffer format, including strides and","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":168846,"byte_end":168935,"line_start":1041,"line_end":1041,"column_start":5,"column_end":94}},{"value":"/ lengths, could invalidate the accessibility invariants of the `View`. It is not specified","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":168940,"byte_end":169033,"line_start":1042,"line_end":1042,"column_start":5,"column_end":98}},{"value":"/ if the inner buffer is the same as the buffer of the image from which this view was","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":169038,"byte_end":169125,"line_start":1043,"line_end":1043,"column_start":5,"column_end":92}},{"value":"/ created. It might have been truncated as an optimization.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":169130,"byte_end":169191,"line_start":1044,"line_end":1044,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":634},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":169486,"byte_end":169493,"line_start":1053,"line_end":1053,"column_start":12,"column_end":19},"name":"samples","qualname":"<View<Buffer, P>>::samples","value":"pub fn samples(&Self) -> &Buffer","parent":null,"children":[],"decl_id":null,"docs":" Get a reference on the inner buffer.","sig":null,"attributes":[{"value":"/ Get a reference on the inner buffer.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":169272,"byte_end":169312,"line_start":1049,"line_end":1049,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":169317,"byte_end":169320,"line_start":1050,"line_end":1050,"column_start":5,"column_end":8}},{"value":"/ There is no mutable counter part since it is not intended to allow you to reassign the","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":169325,"byte_end":169415,"line_start":1051,"line_end":1051,"column_start":5,"column_end":95}},{"value":"/ buffer or otherwise change its size or properties.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":169420,"byte_end":169474,"line_start":1052,"line_end":1052,"column_start":5,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":635},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":169812,"byte_end":169822,"line_start":1061,"line_end":1061,"column_start":12,"column_end":22},"name":"get_sample","qualname":"<View<Buffer, P>>::get_sample","value":"pub fn get_sample(&Self, u8, u32, u32) -> Option<&P::Subpixel>","parent":null,"children":[],"decl_id":null,"docs":" Get a reference to a selected subpixel if it is in-bounds.","sig":null,"attributes":[{"value":"/ Get a reference to a selected subpixel if it is in-bounds.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":169553,"byte_end":169615,"line_start":1057,"line_end":1057,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":169620,"byte_end":169623,"line_start":1058,"line_end":1058,"column_start":5,"column_end":8}},{"value":"/ This method will return `None` when the sample is out-of-bounds. All errors that could","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":169628,"byte_end":169718,"line_start":1059,"line_end":1059,"column_start":5,"column_end":95}},{"value":"/ occur due to overflow have been eliminated while construction the `View`.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":169723,"byte_end":169800,"line_start":1060,"line_end":1060,"column_start":5,"column_end":82}}]},{"kind":"Method","id":{"krate":0,"index":636},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":170696,"byte_end":170710,"line_start":1079,"line_end":1079,"column_start":12,"column_end":26},"name":"get_mut_sample","qualname":"<View<Buffer, P>>::get_mut_sample","value":"pub fn get_mut_sample(&mut Self, u8, u32, u32) -> Option<&mut P::Subpixel>\nwhere Buffer: AsMut<[P::Subpixel]>","parent":null,"children":[],"decl_id":null,"docs":" Get a mutable reference to a selected subpixel if it is in-bounds.","sig":null,"attributes":[{"value":"/ Get a mutable reference to a selected subpixel if it is in-bounds.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":170154,"byte_end":170224,"line_start":1071,"line_end":1071,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":170229,"byte_end":170232,"line_start":1072,"line_end":1072,"column_start":5,"column_end":8}},{"value":"/ This is relevant only when constructed with `FlatSamples::as_view_with_mut_samples`.  This","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":170237,"byte_end":170331,"line_start":1073,"line_end":1073,"column_start":5,"column_end":99}},{"value":"/ method will return `None` when the sample is out-of-bounds. All errors that could occur due","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":170336,"byte_end":170431,"line_start":1074,"line_end":1074,"column_start":5,"column_end":100}},{"value":"/ to overflow have been eliminated while construction the `View`.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":170436,"byte_end":170503,"line_start":1075,"line_end":1075,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":170508,"byte_end":170511,"line_start":1076,"line_end":1076,"column_start":5,"column_end":8}},{"value":"/ **WARNING**: Note that of course samples may alias, so that the mutable reference returned","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":170516,"byte_end":170610,"line_start":1077,"line_end":1077,"column_start":5,"column_end":99}},{"value":"/ here can in fact modify more than the coordinate in the argument.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":170615,"byte_end":170684,"line_start":1078,"line_end":1078,"column_start":5,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":637},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":171287,"byte_end":171297,"line_start":1094,"line_end":1094,"column_start":12,"column_end":22},"name":"min_length","qualname":"<View<Buffer, P>>::min_length","value":"pub fn min_length(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Get the minimum length of a buffer such that all in-bounds samples have valid indices.","sig":null,"attributes":[{"value":"/ Get the minimum length of a buffer such that all in-bounds samples have valid indices.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":171105,"byte_end":171195,"line_start":1091,"line_end":1091,"column_start":5,"column_end":95}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":171200,"byte_end":171203,"line_start":1092,"line_end":1092,"column_start":5,"column_end":8}},{"value":"/ See `FlatSamples::min_length`. This method will always succeed.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":171208,"byte_end":171275,"line_start":1093,"line_end":1093,"column_start":5,"column_end":72}}]},{"kind":"Method","id":{"krate":0,"index":638},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":171631,"byte_end":171642,"line_start":1102,"line_end":1102,"column_start":12,"column_end":23},"name":"image_slice","qualname":"<View<Buffer, P>>::image_slice","value":"pub fn image_slice(&Self) -> &[P::Subpixel]","parent":null,"children":[],"decl_id":null,"docs":" Return the portion of the buffer that holds sample values.","sig":null,"attributes":[{"value":"/ Return the portion of the buffer that holds sample values.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":171368,"byte_end":171430,"line_start":1098,"line_end":1098,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":171435,"byte_end":171438,"line_start":1099,"line_end":1099,"column_start":5,"column_end":8}},{"value":"/ While this can not fail–the validity of all coordinates has been validated during the","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":171443,"byte_end":171534,"line_start":1100,"line_end":1100,"column_start":5,"column_end":94}},{"value":"/ conversion from `FlatSamples`–the resulting slice may still contain holes.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":171539,"byte_end":171619,"line_start":1101,"line_end":1101,"column_start":5,"column_end":83}}]},{"kind":"Method","id":{"krate":0,"index":639},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":172099,"byte_end":172114,"line_start":1111,"line_end":1111,"column_start":12,"column_end":27},"name":"image_mut_slice","qualname":"<View<Buffer, P>>::image_mut_slice","value":"pub fn image_mut_slice(&mut Self) -> &mut [P::Subpixel] where\nBuffer: AsMut<[P::Subpixel]>","parent":null,"children":[],"decl_id":null,"docs":" Return the mutable portion of the buffer that holds sample values.","sig":null,"attributes":[{"value":"/ Return the mutable portion of the buffer that holds sample values.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":171735,"byte_end":171805,"line_start":1106,"line_end":1106,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":171810,"byte_end":171813,"line_start":1107,"line_end":1107,"column_start":5,"column_end":8}},{"value":"/ This is relevant only when constructed with `FlatSamples::as_view_with_mut_samples`. While","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":171818,"byte_end":171912,"line_start":1108,"line_end":1108,"column_start":5,"column_end":99}},{"value":"/ this can not fail–the validity of all coordinates has been validated during the conversion","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":171917,"byte_end":172013,"line_start":1109,"line_end":1109,"column_start":5,"column_end":99}},{"value":"/ from `FlatSamples`–the resulting slice may still contain holes.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":172018,"byte_end":172087,"line_start":1110,"line_end":1110,"column_start":5,"column_end":72}}]},{"kind":"Method","id":{"krate":0,"index":640},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":172637,"byte_end":172646,"line_start":1123,"line_end":1123,"column_start":12,"column_end":21},"name":"shrink_to","qualname":"<View<Buffer, P>>::shrink_to","value":"pub fn shrink_to(&mut Self, u32, u32)","parent":null,"children":[],"decl_id":null,"docs":" Shrink the inner image.","sig":null,"attributes":[{"value":"/ Shrink the inner image.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":172307,"byte_end":172334,"line_start":1118,"line_end":1118,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":172339,"byte_end":172342,"line_start":1119,"line_end":1119,"column_start":5,"column_end":8}},{"value":"/ The new dimensions will be the minimum of the previous dimensions. Since the set of","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":172347,"byte_end":172434,"line_start":1120,"line_end":1120,"column_start":5,"column_end":92}},{"value":"/ in-bounds pixels afterwards is a subset of the current ones, this is allowed on a `View`.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":172439,"byte_end":172532,"line_start":1121,"line_end":1121,"column_start":5,"column_end":98}},{"value":"/ Note that you can not change the number of channels as an intrinsic property of `P`.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":172537,"byte_end":172625,"line_start":1122,"line_end":1122,"column_start":5,"column_end":93}}]},{"kind":"Method","id":{"krate":0,"index":641},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":173650,"byte_end":173661,"line_start":1146,"line_end":1146,"column_start":12,"column_end":23},"name":"try_upgrade","qualname":"<View<Buffer, P>>::try_upgrade","value":"pub fn try_upgrade(Self) -> Result<ViewMut<Buffer, P>, (Error, Self)> where\nBuffer: AsMut<[P::Subpixel]>","parent":null,"children":[],"decl_id":null,"docs":" Try to convert this into an image with mutable pixels.","sig":null,"attributes":[{"value":"/ Try to convert this into an image with mutable pixels.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":172801,"byte_end":172859,"line_start":1128,"line_end":1128,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":172864,"byte_end":172867,"line_start":1129,"line_end":1129,"column_start":5,"column_end":8}},{"value":"/ The resulting image implements `GenericImage` in addition to `GenericImageView`. While this","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":172872,"byte_end":172967,"line_start":1130,"line_end":1130,"column_start":5,"column_end":100}},{"value":"/ has mutable samples, it does not enforce that pixel can not alias and that samples are","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":172972,"byte_end":173062,"line_start":1131,"line_end":1131,"column_start":5,"column_end":95}},{"value":"/ packed enough for a mutable pixel reference. This is slightly cheaper than the chain","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":173067,"byte_end":173155,"line_start":1132,"line_end":1132,"column_start":5,"column_end":93}},{"value":"/ `self.into_inner().as_view_mut()` and keeps the `View` alive on failure.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":173160,"byte_end":173236,"line_start":1133,"line_end":1133,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":173241,"byte_end":173244,"line_start":1134,"line_end":1134,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":173249,"byte_end":173256,"line_start":1135,"line_end":1135,"column_start":5,"column_end":12}},{"value":"/ # use image::RgbImage;","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":173261,"byte_end":173287,"line_start":1136,"line_end":1136,"column_start":5,"column_end":31}},{"value":"/ # use image::Rgb;","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":173292,"byte_end":173313,"line_start":1137,"line_end":1137,"column_start":5,"column_end":26}},{"value":"/ let mut buffer = RgbImage::new(480, 640).into_flat_samples();","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":173318,"byte_end":173383,"line_start":1138,"line_end":1138,"column_start":5,"column_end":70}},{"value":"/ let view = buffer.as_view_with_mut_samples::<Rgb<u8>>().unwrap();","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":173388,"byte_end":173457,"line_start":1139,"line_end":1139,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":173462,"byte_end":173465,"line_start":1140,"line_end":1140,"column_start":5,"column_end":8}},{"value":"/ // Inspect some pixels, …","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":173470,"byte_end":173501,"line_start":1141,"line_end":1141,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":173506,"byte_end":173509,"line_start":1142,"line_end":1142,"column_start":5,"column_end":8}},{"value":"/ // Doesn't fail because it was originally an `RgbImage`.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":173514,"byte_end":173574,"line_start":1143,"line_end":1143,"column_start":5,"column_end":65}},{"value":"/ let view_mut = view.try_upgrade().unwrap();","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":173579,"byte_end":173626,"line_start":1144,"line_end":1144,"column_start":5,"column_end":52}},{"value":"/ ```","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":173631,"byte_end":173638,"line_start":1145,"line_end":1145,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":645},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":174302,"byte_end":174312,"line_start":1168,"line_end":1168,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<ViewMut<Buffer, P>>::into_inner","value":"pub fn into_inner(Self) -> FlatSamples<Buffer>","parent":null,"children":[],"decl_id":null,"docs":" Take out the sample buffer.","sig":null,"attributes":[{"value":"/ Take out the sample buffer.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":174183,"byte_end":174214,"line_start":1165,"line_end":1165,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":174219,"byte_end":174222,"line_start":1166,"line_end":1166,"column_start":5,"column_end":8}},{"value":"/ Gives up the normalization invariants on the buffer format.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":174227,"byte_end":174290,"line_start":1167,"line_end":1167,"column_start":5,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":646},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":174796,"byte_end":174800,"line_start":1178,"line_end":1178,"column_start":12,"column_end":16},"name":"flat","qualname":"<ViewMut<Buffer, P>>::flat","value":"pub fn flat(&Self) -> &FlatSamples<Buffer>","parent":null,"children":[],"decl_id":null,"docs":" Get a reference on the sample buffer descriptor.","sig":null,"attributes":[{"value":"/ Get a reference on the sample buffer descriptor.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":174374,"byte_end":174426,"line_start":1172,"line_end":1172,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":174431,"byte_end":174434,"line_start":1173,"line_end":1173,"column_start":5,"column_end":8}},{"value":"/ There is no mutable counterpart as modifying the buffer format, including strides and","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":174439,"byte_end":174528,"line_start":1174,"line_end":1174,"column_start":5,"column_end":94}},{"value":"/ lengths, could invalidate the accessibility invariants of the `View`. It is not specified","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":174533,"byte_end":174626,"line_start":1175,"line_end":1175,"column_start":5,"column_end":98}},{"value":"/ if the inner buffer is the same as the buffer of the image from which this view was","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":174631,"byte_end":174718,"line_start":1176,"line_end":1176,"column_start":5,"column_end":92}},{"value":"/ created. It might have been truncated as an optimization.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":174723,"byte_end":174784,"line_start":1177,"line_end":1177,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":647},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":175173,"byte_end":175180,"line_start":1187,"line_end":1187,"column_start":12,"column_end":19},"name":"samples","qualname":"<ViewMut<Buffer, P>>::samples","value":"pub fn samples(&Self) -> &Buffer","parent":null,"children":[],"decl_id":null,"docs":" Get a reference on the inner buffer.","sig":null,"attributes":[{"value":"/ Get a reference on the inner buffer.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":174865,"byte_end":174905,"line_start":1182,"line_end":1182,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":174910,"byte_end":174913,"line_start":1183,"line_end":1183,"column_start":5,"column_end":8}},{"value":"/ There is no mutable counter part since it is not intended to allow you to reassign the","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":174918,"byte_end":175008,"line_start":1184,"line_end":1184,"column_start":5,"column_end":95}},{"value":"/ buffer or otherwise change its size or properties. However, its contents can be accessed","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":175013,"byte_end":175105,"line_start":1185,"line_end":1185,"column_start":5,"column_end":97}},{"value":"/ mutable through a slice with `image_mut_slice`.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":175110,"byte_end":175161,"line_start":1186,"line_end":1186,"column_start":5,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":648},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":175422,"byte_end":175432,"line_start":1194,"line_end":1194,"column_start":12,"column_end":22},"name":"min_length","qualname":"<ViewMut<Buffer, P>>::min_length","value":"pub fn min_length(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Get the minimum length of a buffer such that all in-bounds samples have valid indices.","sig":null,"attributes":[{"value":"/ Get the minimum length of a buffer such that all in-bounds samples have valid indices.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":175240,"byte_end":175330,"line_start":1191,"line_end":1191,"column_start":5,"column_end":95}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":175335,"byte_end":175338,"line_start":1192,"line_end":1192,"column_start":5,"column_end":8}},{"value":"/ See `FlatSamples::min_length`. This method will always succeed.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":175343,"byte_end":175410,"line_start":1193,"line_end":1193,"column_start":5,"column_end":72}}]},{"kind":"Method","id":{"krate":0,"index":649},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":175743,"byte_end":175753,"line_start":1202,"line_end":1202,"column_start":12,"column_end":22},"name":"get_sample","qualname":"<ViewMut<Buffer, P>>::get_sample","value":"pub fn get_sample(&Self, u8, u32, u32) -> Option<&P::Subpixel> where\nBuffer: AsRef<[P::Subpixel]>","parent":null,"children":[],"decl_id":null,"docs":" Get a reference to a selected subpixel.","sig":null,"attributes":[{"value":"/ Get a reference to a selected subpixel.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":175503,"byte_end":175546,"line_start":1198,"line_end":1198,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":175551,"byte_end":175554,"line_start":1199,"line_end":1199,"column_start":5,"column_end":8}},{"value":"/ This method will return `None` when the sample is out-of-bounds. All errors that could","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":175559,"byte_end":175649,"line_start":1200,"line_end":1200,"column_start":5,"column_end":95}},{"value":"/ occur due to overflow have been eliminated while construction the `View`.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":175654,"byte_end":175731,"line_start":1201,"line_end":1201,"column_start":5,"column_end":82}}]},{"kind":"Method","id":{"krate":0,"index":650},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":176378,"byte_end":176392,"line_start":1218,"line_end":1218,"column_start":12,"column_end":26},"name":"get_mut_sample","qualname":"<ViewMut<Buffer, P>>::get_mut_sample","value":"pub fn get_mut_sample(&mut Self, u8, u32, u32) -> Option<&mut P::Subpixel>","parent":null,"children":[],"decl_id":null,"docs":" Get a mutable reference to a selected sample.","sig":null,"attributes":[{"value":"/ Get a mutable reference to a selected sample.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":176132,"byte_end":176181,"line_start":1214,"line_end":1214,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":176186,"byte_end":176189,"line_start":1215,"line_end":1215,"column_start":5,"column_end":8}},{"value":"/ This method will return `None` when the sample is out-of-bounds. All errors that could","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":176194,"byte_end":176284,"line_start":1216,"line_end":1216,"column_start":5,"column_end":95}},{"value":"/ occur due to overflow have been eliminated while construction the `View`.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":176289,"byte_end":176366,"line_start":1217,"line_end":1217,"column_start":5,"column_end":82}}]},{"kind":"Method","id":{"krate":0,"index":651},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":177003,"byte_end":177014,"line_start":1232,"line_end":1232,"column_start":12,"column_end":23},"name":"image_slice","qualname":"<ViewMut<Buffer, P>>::image_slice","value":"pub fn image_slice(&Self) -> &[P::Subpixel] where Buffer: AsRef<[P::Subpixel]>","parent":null,"children":[],"decl_id":null,"docs":" Return the portion of the buffer that holds sample values.","sig":null,"attributes":[{"value":"/ Return the portion of the buffer that holds sample values.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":176740,"byte_end":176802,"line_start":1228,"line_end":1228,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":176807,"byte_end":176810,"line_start":1229,"line_end":1229,"column_start":5,"column_end":8}},{"value":"/ While this can not fail–the validity of all coordinates has been validated during the","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":176815,"byte_end":176906,"line_start":1230,"line_end":1230,"column_start":5,"column_end":94}},{"value":"/ conversion from `FlatSamples`–the resulting slice may still contain holes.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":176911,"byte_end":176991,"line_start":1231,"line_end":1231,"column_start":5,"column_end":83}}]},{"kind":"Method","id":{"krate":0,"index":652},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":177213,"byte_end":177228,"line_start":1237,"line_end":1237,"column_start":12,"column_end":27},"name":"image_mut_slice","qualname":"<ViewMut<Buffer, P>>::image_mut_slice","value":"pub fn image_mut_slice(&mut Self) -> &mut [P::Subpixel]","parent":null,"children":[],"decl_id":null,"docs":" Return the mutable buffer that holds sample values.\n","sig":null,"attributes":[{"value":"/ Return the mutable buffer that holds sample values.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":177146,"byte_end":177201,"line_start":1236,"line_end":1236,"column_start":5,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":653},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":177696,"byte_end":177705,"line_start":1247,"line_end":1247,"column_start":12,"column_end":21},"name":"shrink_to","qualname":"<ViewMut<Buffer, P>>::shrink_to","value":"pub fn shrink_to(&mut Self, u32, u32)","parent":null,"children":[],"decl_id":null,"docs":" Shrink the inner image.","sig":null,"attributes":[{"value":"/ Shrink the inner image.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":177366,"byte_end":177393,"line_start":1242,"line_end":1242,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":177398,"byte_end":177401,"line_start":1243,"line_end":1243,"column_start":5,"column_end":8}},{"value":"/ The new dimensions will be the minimum of the previous dimensions. Since the set of","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":177406,"byte_end":177493,"line_start":1244,"line_end":1244,"column_start":5,"column_end":92}},{"value":"/ in-bounds pixels afterwards is a subset of the current ones, this is allowed on a `View`.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":177498,"byte_end":177591,"line_start":1245,"line_end":1245,"column_start":5,"column_end":98}},{"value":"/ Note that you can not change the number of channels as an intrinsic property of `P`.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":177596,"byte_end":177684,"line_start":1246,"line_end":1246,"column_start":5,"column_end":93}}]},{"kind":"Mod","id":{"krate":0,"index":707},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src/lib.rs","byte_start":7647,"byte_end":7653,"line_start":216,"line_end":216,"column_start":9,"column_end":15},"name":"codecs","qualname":"::codecs","value":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src/lib.rs","parent":null,"children":[{"krate":0,"index":708},{"krate":0,"index":952}],"decl_id":null,"docs":" Encoding and decoding for various image file formats.","sig":null,"attributes":[{"value":"/ Encoding and decoding for various image file formats.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src/lib.rs","byte_start":5569,"byte_end":5626,"line_start":176,"line_end":176,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src/lib.rs","byte_start":5627,"byte_end":5630,"line_start":177,"line_end":177,"column_start":1,"column_end":4}},{"value":"/ # Supported formats","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src/lib.rs","byte_start":5631,"byte_end":5654,"line_start":178,"line_end":178,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src/lib.rs","byte_start":5655,"byte_end":5658,"line_start":179,"line_end":179,"column_start":1,"column_end":4}},{"value":"/ | Format | Decoding | Encoding |","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src/lib.rs","byte_start":5659,"byte_end":5695,"line_start":180,"line_end":180,"column_start":1,"column_end":37}},{"value":"/ | ------ | -------- | -------- |","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src/lib.rs","byte_start":5696,"byte_end":5732,"line_start":181,"line_end":181,"column_start":1,"column_end":37}},{"value":"/ | PNG    | All supported color types | Same as decoding |","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src/lib.rs","byte_start":5733,"byte_end":5794,"line_start":182,"line_end":182,"column_start":1,"column_end":62}},{"value":"/ | JPEG   | Baseline and progressive | Baseline JPEG |","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src/lib.rs","byte_start":5795,"byte_end":5852,"line_start":183,"line_end":183,"column_start":1,"column_end":58}},{"value":"/ | GIF    | Yes | Yes |","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src/lib.rs","byte_start":5853,"byte_end":5879,"line_start":184,"line_end":184,"column_start":1,"column_end":27}},{"value":"/ | BMP    | Yes | RGB8, RGBA8, Gray8, GrayA8 |","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src/lib.rs","byte_start":5880,"byte_end":5929,"line_start":185,"line_end":185,"column_start":1,"column_end":50}},{"value":"/ | ICO    | Yes | Yes |","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src/lib.rs","byte_start":5930,"byte_end":5956,"line_start":186,"line_end":186,"column_start":1,"column_end":27}},{"value":"/ | TIFF   | Baseline(no fax support) + LZW + PackBits | RGB8, RGBA8, Gray8 |","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src/lib.rs","byte_start":5957,"byte_end":6036,"line_start":187,"line_end":187,"column_start":1,"column_end":80}},{"value":"/ | WebP   | Lossy(Luma channel only) | No |","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src/lib.rs","byte_start":6037,"byte_end":6083,"line_start":188,"line_end":188,"column_start":1,"column_end":47}},{"value":"/ | AVIF   | Only 8-bit | Lossy |","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src/lib.rs","byte_start":6084,"byte_end":6119,"line_start":189,"line_end":189,"column_start":1,"column_end":36}},{"value":"/ | PNM    | PBM, PGM, PPM, standard PAM | Yes |","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src/lib.rs","byte_start":6120,"byte_end":6170,"line_start":190,"line_end":190,"column_start":1,"column_end":51}},{"value":"/ | DDS    | DXT1, DXT3, DXT5 | No |","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src/lib.rs","byte_start":6171,"byte_end":6209,"line_start":191,"line_end":191,"column_start":1,"column_end":39}},{"value":"/ | TGA    | Yes | RGB8, RGBA8, BGR8, BGRA8, Gray8, GrayA8 |","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src/lib.rs","byte_start":6210,"byte_end":6272,"line_start":192,"line_end":192,"column_start":1,"column_end":63}},{"value":"/ | farbfeld | Yes | Yes |","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src/lib.rs","byte_start":6273,"byte_end":6301,"line_start":193,"line_end":193,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src/lib.rs","byte_start":6302,"byte_end":6305,"line_start":194,"line_end":194,"column_start":1,"column_end":4}},{"value":"/ ## A note on format specific features","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src/lib.rs","byte_start":6306,"byte_end":6347,"line_start":195,"line_end":195,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src/lib.rs","byte_start":6348,"byte_end":6351,"line_start":196,"line_end":196,"column_start":1,"column_end":4}},{"value":"/ One of the main goals of `image` is stability, in runtime but also for programmers. This","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src/lib.rs","byte_start":6352,"byte_end":6444,"line_start":197,"line_end":197,"column_start":1,"column_end":93}},{"value":"/ ensures that performance as well as safety fixes reach a majority of its user base with little","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src/lib.rs","byte_start":6445,"byte_end":6543,"line_start":198,"line_end":198,"column_start":1,"column_end":99}},{"value":"/ effort. Re-exporting all details of its dependencies would run counter to this goal as it","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src/lib.rs","byte_start":6544,"byte_end":6637,"line_start":199,"line_end":199,"column_start":1,"column_end":94}},{"value":"/ linked _all_ major version bumps between them and `image`. As such, we are wary of exposing too","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src/lib.rs","byte_start":6638,"byte_end":6737,"line_start":200,"line_end":200,"column_start":1,"column_end":100}},{"value":"/ many details, or configuration options, that are not shared between different image formats.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src/lib.rs","byte_start":6738,"byte_end":6834,"line_start":201,"line_end":201,"column_start":1,"column_end":97}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src/lib.rs","byte_start":6835,"byte_end":6838,"line_start":202,"line_end":202,"column_start":1,"column_end":4}},{"value":"/ Nevertheless, the advantage of precise control is hard to ignore. We will thus consider","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src/lib.rs","byte_start":6839,"byte_end":6930,"line_start":203,"line_end":203,"column_start":1,"column_end":92}},{"value":"/ _wrappers_, not direct re-exports, in either of the following cases:","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src/lib.rs","byte_start":6931,"byte_end":7003,"line_start":204,"line_end":204,"column_start":1,"column_end":73}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src/lib.rs","byte_start":7004,"byte_end":7007,"line_start":205,"line_end":205,"column_start":1,"column_end":4}},{"value":"/ 1. A standard specifies that configuration _x_ is required for decoders/encoders and there","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src/lib.rs","byte_start":7008,"byte_end":7102,"line_start":206,"line_end":206,"column_start":1,"column_end":95}},{"value":"/    exists an essentially canonical way to control it.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src/lib.rs","byte_start":7103,"byte_end":7160,"line_start":207,"line_end":207,"column_start":1,"column_end":58}},{"value":"/ 2. At least two different implementations agree on some (sub-)set of features in practice.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src/lib.rs","byte_start":7161,"byte_end":7255,"line_start":208,"line_end":208,"column_start":1,"column_end":95}},{"value":"/ 3. A technical argument including measurements of the performance, space benefits, or otherwise","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src/lib.rs","byte_start":7256,"byte_end":7355,"line_start":209,"line_end":209,"column_start":1,"column_end":100}},{"value":"/    objectively quantified benefits can be made, and the added interface is unlikely to require","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src/lib.rs","byte_start":7356,"byte_end":7454,"line_start":210,"line_end":210,"column_start":1,"column_end":99}},{"value":"/    breaking changes.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src/lib.rs","byte_start":7455,"byte_end":7479,"line_start":211,"line_end":211,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src/lib.rs","byte_start":7480,"byte_end":7483,"line_start":212,"line_end":212,"column_start":1,"column_end":4}},{"value":"/ Features that fulfill two or more criteria are preferred.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src/lib.rs","byte_start":7484,"byte_end":7545,"line_start":213,"line_end":213,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src/lib.rs","byte_start":7546,"byte_end":7549,"line_start":214,"line_end":214,"column_start":1,"column_end":4}},{"value":"/ Re-exports of dependencies that reach version `1` will be discussed when it happens.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src/lib.rs","byte_start":7550,"byte_end":7638,"line_start":215,"line_end":215,"column_start":1,"column_end":89}}]},{"kind":"Mod","id":{"krate":0,"index":708},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\codecs\\jpeg\\mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"jpeg","qualname":"::codecs::jpeg","value":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\codecs\\jpeg\\mod.rs","parent":null,"children":[{"krate":0,"index":709},{"krate":0,"index":710},{"krate":0,"index":711},{"krate":0,"index":712},{"krate":0,"index":713},{"krate":0,"index":714},{"krate":0,"index":715},{"krate":0,"index":766},{"krate":0,"index":923},{"krate":0,"index":934}],"decl_id":null,"docs":" Decoding and Encoding of JPEG Images","sig":null,"attributes":[{"value":"cfg(feature = \"jpeg\")","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src/lib.rs","byte_start":8071,"byte_end":8095,"line_start":233,"line_end":233,"column_start":5,"column_end":29}},{"value":"/ Decoding and Encoding of JPEG Images","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\codecs\\jpeg\\mod.rs","byte_start":190881,"byte_end":190921,"line_start":1,"line_end":1,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\codecs\\jpeg\\mod.rs","byte_start":190922,"byte_end":190925,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ JPEG (Joint Photographic Experts Group) is an image format that supports lossy compression.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\codecs\\jpeg\\mod.rs","byte_start":190926,"byte_end":191021,"line_start":3,"line_end":3,"column_start":1,"column_end":96}},{"value":"/ This module implements the Baseline JPEG standard.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\codecs\\jpeg\\mod.rs","byte_start":191022,"byte_end":191076,"line_start":4,"line_end":4,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\codecs\\jpeg\\mod.rs","byte_start":191077,"byte_end":191080,"line_start":5,"line_end":5,"column_start":1,"column_end":4}},{"value":"/ # Related Links","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\codecs\\jpeg\\mod.rs","byte_start":191081,"byte_end":191100,"line_start":6,"line_end":6,"column_start":1,"column_end":20}},{"value":"/ * <http://www.w3.org/Graphics/JPEG/itu-t81.pdf> - The JPEG specification","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\codecs\\jpeg\\mod.rs","byte_start":191101,"byte_end":191177,"line_start":7,"line_end":7,"column_start":1,"column_end":77}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\codecs\\jpeg\\mod.rs","byte_start":191178,"byte_end":191181,"line_start":8,"line_end":8,"column_start":1,"column_end":4}}]},{"kind":"Struct","id":{"krate":0,"index":733},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\codecs\\jpeg\\decoder.rs","byte_start":191754,"byte_end":191765,"line_start":13,"line_end":13,"column_start":12,"column_end":23},"name":"JpegDecoder","qualname":"::codecs::jpeg::decoder::JpegDecoder","value":"JpegDecoder {  }","parent":null,"children":[{"krate":0,"index":735},{"krate":0,"index":736}],"decl_id":null,"docs":" JPEG decoder\n","sig":null,"attributes":[{"value":"/ JPEG decoder","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\codecs\\jpeg\\decoder.rs","byte_start":191726,"byte_end":191742,"line_start":12,"line_end":12,"column_start":1,"column_end":17}}]},{"kind":"Method","id":{"krate":0,"index":739},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\codecs\\jpeg\\decoder.rs","byte_start":191944,"byte_end":191947,"line_start":20,"line_end":20,"column_start":12,"column_end":15},"name":"new","qualname":"<JpegDecoder<R>>::new","value":"pub fn new(R) -> ImageResult<JpegDecoder<R>>","parent":null,"children":[],"decl_id":null,"docs":" Create a new decoder that decodes from the stream ```r```\n","sig":null,"attributes":[{"value":"/ Create a new decoder that decodes from the stream ```r```","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\codecs\\jpeg\\decoder.rs","byte_start":191871,"byte_end":191932,"line_start":19,"line_end":19,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":741},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\codecs\\jpeg\\decoder.rs","byte_start":193175,"byte_end":193180,"line_start":52,"line_end":52,"column_start":12,"column_end":17},"name":"scale","qualname":"<JpegDecoder<R>>::scale","value":"pub fn scale(&mut Self, u16, u16) -> ImageResult<(u16, u16)>","parent":null,"children":[],"decl_id":null,"docs":" Configure the decoder to scale the image during decoding.","sig":null,"attributes":[{"value":"/ Configure the decoder to scale the image during decoding.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\codecs\\jpeg\\decoder.rs","byte_start":192561,"byte_end":192622,"line_start":39,"line_end":39,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\codecs\\jpeg\\decoder.rs","byte_start":192627,"byte_end":192630,"line_start":40,"line_end":40,"column_start":5,"column_end":8}},{"value":"/ This efficiently scales the image by the smallest supported","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\codecs\\jpeg\\decoder.rs","byte_start":192635,"byte_end":192698,"line_start":41,"line_end":41,"column_start":5,"column_end":68}},{"value":"/ scale factor that produces an image larger than or equal to","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\codecs\\jpeg\\decoder.rs","byte_start":192703,"byte_end":192766,"line_start":42,"line_end":42,"column_start":5,"column_end":68}},{"value":"/ the requested size in at least one axis. The currently","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\codecs\\jpeg\\decoder.rs","byte_start":192771,"byte_end":192829,"line_start":43,"line_end":43,"column_start":5,"column_end":63}},{"value":"/ implemented scale factors are 1/8, 1/4, 1/2 and 1.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\codecs\\jpeg\\decoder.rs","byte_start":192834,"byte_end":192888,"line_start":44,"line_end":44,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\codecs\\jpeg\\decoder.rs","byte_start":192893,"byte_end":192896,"line_start":45,"line_end":45,"column_start":5,"column_end":8}},{"value":"/ To generate a thumbnail of an exact size, pass the desired","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\codecs\\jpeg\\decoder.rs","byte_start":192901,"byte_end":192963,"line_start":46,"line_end":46,"column_start":5,"column_end":67}},{"value":"/ size and then scale to the final size using a traditional","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\codecs\\jpeg\\decoder.rs","byte_start":192968,"byte_end":193029,"line_start":47,"line_end":47,"column_start":5,"column_end":66}},{"value":"/ resampling algorithm.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\codecs\\jpeg\\decoder.rs","byte_start":193034,"byte_end":193059,"line_start":48,"line_end":48,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\codecs\\jpeg\\decoder.rs","byte_start":193064,"byte_end":193067,"line_start":49,"line_end":49,"column_start":5,"column_end":8}},{"value":"/ The size of the image to be loaded, with the scale factor","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\codecs\\jpeg\\decoder.rs","byte_start":193072,"byte_end":193133,"line_start":50,"line_end":50,"column_start":5,"column_end":66}},{"value":"/ applied, is returned.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\codecs\\jpeg\\decoder.rs","byte_start":193138,"byte_end":193163,"line_start":51,"line_end":51,"column_start":5,"column_end":30}}]},{"kind":"Struct","id":{"krate":0,"index":742},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\codecs\\jpeg\\decoder.rs","byte_start":193585,"byte_end":193595,"line_start":68,"line_end":68,"column_start":12,"column_end":22},"name":"JpegReader","qualname":"::codecs::jpeg::decoder::JpegReader","value":"","parent":null,"children":[],"decl_id":null,"docs":" Wrapper struct around a `Cursor<Vec<u8>>`\n","sig":null,"attributes":[{"value":"/ Wrapper struct around a `Cursor<Vec<u8>>`","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\codecs\\jpeg\\decoder.rs","byte_start":193528,"byte_end":193573,"line_start":67,"line_end":67,"column_start":1,"column_end":46}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2517},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\codecs\\jpeg\\encoder.rs","byte_start":225184,"byte_end":225200,"line_start":275,"line_end":275,"column_start":5,"column_end":21},"name":"PixelAspectRatio","qualname":"::codecs::jpeg::encoder::PixelDensityUnit::PixelAspectRatio","value":"PixelDensityUnit::PixelAspectRatio","parent":{"krate":0,"index":2516},"children":[],"decl_id":null,"docs":" Represents the absence of a unit, the values indicate only a\n [pixel aspect ratio](https://en.wikipedia.org/wiki/Pixel_aspect_ratio)\n","sig":null,"attributes":[{"value":"/ Represents the absence of a unit, the values indicate only a","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\codecs\\jpeg\\encoder.rs","byte_start":225036,"byte_end":225100,"line_start":273,"line_end":273,"column_start":5,"column_end":69}},{"value":"/ [pixel aspect ratio](https://en.wikipedia.org/wiki/Pixel_aspect_ratio)","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\codecs\\jpeg\\encoder.rs","byte_start":225105,"byte_end":225179,"line_start":274,"line_end":274,"column_start":5,"column_end":79}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2519},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\codecs\\jpeg\\encoder.rs","byte_start":225241,"byte_end":225247,"line_start":278,"line_end":278,"column_start":5,"column_end":11},"name":"Inches","qualname":"::codecs::jpeg::encoder::PixelDensityUnit::Inches","value":"PixelDensityUnit::Inches","parent":{"krate":0,"index":2516},"children":[],"decl_id":null,"docs":" Pixels per inch (2.54 cm)\n","sig":null,"attributes":[{"value":"/ Pixels per inch (2.54 cm)","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\codecs\\jpeg\\encoder.rs","byte_start":225207,"byte_end":225236,"line_start":277,"line_end":277,"column_start":5,"column_end":34}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2521},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\codecs\\jpeg\\encoder.rs","byte_start":225284,"byte_end":225295,"line_start":281,"line_end":281,"column_start":5,"column_end":16},"name":"Centimeters","qualname":"::codecs::jpeg::encoder::PixelDensityUnit::Centimeters","value":"PixelDensityUnit::Centimeters","parent":{"krate":0,"index":2516},"children":[],"decl_id":null,"docs":" Pixels per centimeter\n","sig":null,"attributes":[{"value":"/ Pixels per centimeter","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\codecs\\jpeg\\encoder.rs","byte_start":225254,"byte_end":225279,"line_start":280,"line_end":280,"column_start":5,"column_end":30}}]},{"kind":"Enum","id":{"krate":0,"index":2516},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\codecs\\jpeg\\encoder.rs","byte_start":225013,"byte_end":225029,"line_start":272,"line_end":272,"column_start":10,"column_end":26},"name":"PixelDensityUnit","qualname":"::codecs::jpeg::encoder::PixelDensityUnit","value":"pub enum PixelDensityUnit {\n\n    /// Represents the absence of a unit, the values indicate only a\n    /// [pixel aspect ratio](https://en.wikipedia.org/wiki/Pixel_aspect_ratio)\n    PixelAspectRatio,\n\n    /// Pixels per inch (2.54 cm)\n    Inches,\n\n    /// Pixels per centimeter\n    Centimeters,\n}","parent":null,"children":[{"krate":0,"index":2517},{"krate":0,"index":2519},{"krate":0,"index":2521}],"decl_id":null,"docs":" Represents a unit in which the density of an image is measured\n","sig":null,"attributes":[{"value":"/ Represents a unit in which the density of an image is measured","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\codecs\\jpeg\\encoder.rs","byte_start":224892,"byte_end":224958,"line_start":270,"line_end":270,"column_start":1,"column_end":67}}]},{"kind":"Struct","id":{"krate":0,"index":2534},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\codecs\\jpeg\\encoder.rs","byte_start":225632,"byte_end":225644,"line_start":294,"line_end":294,"column_start":12,"column_end":24},"name":"PixelDensity","qualname":"::codecs::jpeg::encoder::PixelDensity","value":"PixelDensity { density, unit }","parent":null,"children":[{"krate":0,"index":2535},{"krate":0,"index":2536}],"decl_id":null,"docs":" Represents the pixel density of an image","sig":null,"attributes":[{"value":"/ Represents the pixel density of an image","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\codecs\\jpeg\\encoder.rs","byte_start":225300,"byte_end":225344,"line_start":284,"line_end":284,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\codecs\\jpeg\\encoder.rs","byte_start":225345,"byte_end":225348,"line_start":285,"line_end":285,"column_start":1,"column_end":4}},{"value":"/ For example, a 300 DPI image is represented by:","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\codecs\\jpeg\\encoder.rs","byte_start":225349,"byte_end":225400,"line_start":286,"line_end":286,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\codecs\\jpeg\\encoder.rs","byte_start":225401,"byte_end":225404,"line_start":287,"line_end":287,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\codecs\\jpeg\\encoder.rs","byte_start":225405,"byte_end":225416,"line_start":288,"line_end":288,"column_start":1,"column_end":12}},{"value":"/ use image::jpeg::*;","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\codecs\\jpeg\\encoder.rs","byte_start":225417,"byte_end":225440,"line_start":289,"line_end":289,"column_start":1,"column_end":24}},{"value":"/ let hdpi = PixelDensity::dpi(300);","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\codecs\\jpeg\\encoder.rs","byte_start":225441,"byte_end":225479,"line_start":290,"line_end":290,"column_start":1,"column_end":39}},{"value":"/ assert_eq!(hdpi, PixelDensity {density: (300,300), unit: PixelDensityUnit::Inches})","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\codecs\\jpeg\\encoder.rs","byte_start":225480,"byte_end":225567,"line_start":291,"line_end":291,"column_start":1,"column_end":88}},{"value":"/ ```","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\codecs\\jpeg\\encoder.rs","byte_start":225568,"byte_end":225575,"line_start":292,"line_end":292,"column_start":1,"column_end":8}}]},{"kind":"Field","id":{"krate":0,"index":2535},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\codecs\\jpeg\\encoder.rs","byte_start":225707,"byte_end":225714,"line_start":296,"line_end":296,"column_start":9,"column_end":16},"name":"density","qualname":"::codecs::jpeg::encoder::PixelDensity::density","value":"(u16, u16)","parent":{"krate":0,"index":2534},"children":[],"decl_id":null,"docs":" A couple of values for (Xdensity, Ydensity)\n","sig":null,"attributes":[{"value":"/ A couple of values for (Xdensity, Ydensity)","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\codecs\\jpeg\\encoder.rs","byte_start":225651,"byte_end":225698,"line_start":295,"line_end":295,"column_start":5,"column_end":52}}]},{"kind":"Field","id":{"krate":0,"index":2536},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\codecs\\jpeg\\encoder.rs","byte_start":225786,"byte_end":225790,"line_start":298,"line_end":298,"column_start":9,"column_end":13},"name":"unit","qualname":"::codecs::jpeg::encoder::PixelDensity::unit","value":"codecs::jpeg::encoder::PixelDensityUnit","parent":{"krate":0,"index":2534},"children":[],"decl_id":null,"docs":" The unit in which the density is measured\n","sig":null,"attributes":[{"value":"/ The unit in which the density is measured","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\codecs\\jpeg\\encoder.rs","byte_start":225732,"byte_end":225777,"line_start":297,"line_end":297,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":847},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\codecs\\jpeg\\encoder.rs","byte_start":225996,"byte_end":225999,"line_start":305,"line_end":305,"column_start":12,"column_end":15},"name":"dpi","qualname":"<PixelDensity>::dpi","value":"pub fn dpi(u16) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates the most common pixel density type:\n the horizontal and the vertical density are equal,\n and measured in pixels per inch.\n","sig":null,"attributes":[{"value":"/ Creates the most common pixel density type:","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\codecs\\jpeg\\encoder.rs","byte_start":225837,"byte_end":225884,"line_start":302,"line_end":302,"column_start":5,"column_end":52}},{"value":"/ the horizontal and the vertical density are equal,","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\codecs\\jpeg\\encoder.rs","byte_start":225889,"byte_end":225943,"line_start":303,"line_end":303,"column_start":5,"column_end":59}},{"value":"/ and measured in pixels per inch.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\codecs\\jpeg\\encoder.rs","byte_start":225948,"byte_end":225984,"line_start":304,"line_end":304,"column_start":5,"column_end":41}}]},{"kind":"Struct","id":{"krate":0,"index":850},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\codecs\\jpeg\\encoder.rs","byte_start":226450,"byte_end":226461,"line_start":324,"line_end":324,"column_start":12,"column_end":23},"name":"JpegEncoder","qualname":"::codecs::jpeg::encoder::JpegEncoder","value":"JpegEncoder {  }","parent":null,"children":[{"krate":0,"index":853},{"krate":0,"index":854},{"krate":0,"index":855},{"krate":0,"index":857},{"krate":0,"index":859},{"krate":0,"index":861},{"krate":0,"index":863},{"krate":0,"index":865}],"decl_id":null,"docs":" The representation of a JPEG encoder\n","sig":null,"attributes":[{"value":"/ The representation of a JPEG encoder","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\codecs\\jpeg\\encoder.rs","byte_start":226398,"byte_end":226438,"line_start":323,"line_end":323,"column_start":1,"column_end":41}}]},{"kind":"Type","id":{"krate":0,"index":866},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\codecs\\jpeg\\encoder.rs","byte_start":226974,"byte_end":226985,"line_start":347,"line_end":347,"column_start":10,"column_end":21},"name":"JPEGEncoder","qualname":"::codecs::jpeg::encoder::JPEGEncoder","value":"JpegEncoder","parent":null,"children":[],"decl_id":null,"docs":" JPEG Encoder","sig":null,"attributes":[{"value":"/ JPEG Encoder","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\codecs\\jpeg\\encoder.rs","byte_start":226771,"byte_end":226787,"line_start":338,"line_end":338,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\codecs\\jpeg\\encoder.rs","byte_start":226788,"byte_end":226791,"line_start":339,"line_end":339,"column_start":1,"column_end":4}},{"value":"/ An alias of [`JpegEncoder`].","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\codecs\\jpeg\\encoder.rs","byte_start":226792,"byte_end":226824,"line_start":340,"line_end":340,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\codecs\\jpeg\\encoder.rs","byte_start":226825,"byte_end":226828,"line_start":341,"line_end":341,"column_start":1,"column_end":4}},{"value":"/ TODO: remove","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\codecs\\jpeg\\encoder.rs","byte_start":226829,"byte_end":226845,"line_start":342,"line_end":342,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\codecs\\jpeg\\encoder.rs","byte_start":226846,"byte_end":226849,"line_start":343,"line_end":343,"column_start":1,"column_end":4}},{"value":"/ [`JpegEncoder`]: struct.JpegEncoder.html","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\codecs\\jpeg\\encoder.rs","byte_start":226850,"byte_end":226894,"line_start":344,"line_end":344,"column_start":1,"column_end":45}},{"value":"allow(dead_code)","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\codecs\\jpeg\\encoder.rs","byte_start":226895,"byte_end":226914,"line_start":345,"line_end":345,"column_start":1,"column_end":20}},{"value":"deprecated(note = \"Use `JpegEncoder` instead\")","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\codecs\\jpeg\\encoder.rs","byte_start":226915,"byte_end":226964,"line_start":346,"line_end":346,"column_start":1,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":872},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\codecs\\jpeg\\encoder.rs","byte_start":227130,"byte_end":227133,"line_start":351,"line_end":351,"column_start":12,"column_end":15},"name":"new","qualname":"<JpegEncoder>::new","value":"pub fn new(&mut W) -> JpegEncoder<, W>","parent":null,"children":[],"decl_id":null,"docs":" Create a new encoder that writes its output to ```w```\n","sig":null,"attributes":[{"value":"/ Create a new encoder that writes its output to ```w```","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\codecs\\jpeg\\encoder.rs","byte_start":227060,"byte_end":227118,"line_start":350,"line_end":350,"column_start":5,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":873},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\codecs\\jpeg\\encoder.rs","byte_start":227426,"byte_end":227442,"line_start":358,"line_end":358,"column_start":12,"column_end":28},"name":"new_with_quality","qualname":"<JpegEncoder>::new_with_quality","value":"pub fn new_with_quality(&mut W, u8) -> JpegEncoder<, W>","parent":null,"children":[],"decl_id":null,"docs":" Create a new encoder that writes its output to ```w```, and has\n the quality parameter ```quality``` with a value in the range 1-100\n where 1 is the worst and 100 is the best.\n","sig":null,"attributes":[{"value":"/ Create a new encoder that writes its output to ```w```, and has","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\codecs\\jpeg\\encoder.rs","byte_start":227221,"byte_end":227288,"line_start":355,"line_end":355,"column_start":5,"column_end":72}},{"value":"/ the quality parameter ```quality``` with a value in the range 1-100","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\codecs\\jpeg\\encoder.rs","byte_start":227293,"byte_end":227364,"line_start":356,"line_end":356,"column_start":5,"column_end":76}},{"value":"/ where 1 is the worst and 100 is the best.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\codecs\\jpeg\\encoder.rs","byte_start":227369,"byte_end":227414,"line_start":357,"line_end":357,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":876},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\codecs\\jpeg\\encoder.rs","byte_start":229824,"byte_end":229841,"line_start":430,"line_end":430,"column_start":12,"column_end":29},"name":"set_pixel_density","qualname":"<JpegEncoder>::set_pixel_density","value":"pub fn set_pixel_density(&mut Self, PixelDensity)","parent":null,"children":[],"decl_id":null,"docs":" Set the pixel density of the images the encoder will encode.\n If this method is not called, then a default pixel aspect ratio of 1x1 will be applied,\n and no DPI information will be stored in the image.\n","sig":null,"attributes":[{"value":"/ Set the pixel density of the images the encoder will encode.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\codecs\\jpeg\\encoder.rs","byte_start":229592,"byte_end":229656,"line_start":427,"line_end":427,"column_start":5,"column_end":69}},{"value":"/ If this method is not called, then a default pixel aspect ratio of 1x1 will be applied,","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\codecs\\jpeg\\encoder.rs","byte_start":229661,"byte_end":229752,"line_start":428,"line_end":428,"column_start":5,"column_end":96}},{"value":"/ and no DPI information will be stored in the image.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\codecs\\jpeg\\encoder.rs","byte_start":229757,"byte_end":229812,"line_start":429,"line_end":429,"column_start":5,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":877},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\codecs\\jpeg\\encoder.rs","byte_start":230173,"byte_end":230179,"line_start":439,"line_end":439,"column_start":12,"column_end":18},"name":"encode","qualname":"<JpegEncoder>::encode","value":"pub fn encode(&mut Self, &[u8], u32, u32, ColorType) -> ImageResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Encodes the image stored in the raw byte buffer ```image```\n that has dimensions ```width``` and ```height```\n and ```ColorType``` ```c```","sig":null,"attributes":[{"value":"/ Encodes the image stored in the raw byte buffer ```image```","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\codecs\\jpeg\\encoder.rs","byte_start":229939,"byte_end":230002,"line_start":434,"line_end":434,"column_start":5,"column_end":68}},{"value":"/ that has dimensions ```width``` and ```height```","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\codecs\\jpeg\\encoder.rs","byte_start":230007,"byte_end":230059,"line_start":435,"line_end":435,"column_start":5,"column_end":57}},{"value":"/ and ```ColorType``` ```c```","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\codecs\\jpeg\\encoder.rs","byte_start":230064,"byte_end":230095,"line_start":436,"line_end":436,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\codecs\\jpeg\\encoder.rs","byte_start":230100,"byte_end":230103,"line_start":437,"line_end":437,"column_start":5,"column_end":8}},{"value":"/ The Image in encoded with subsampling ratio 4:2:2","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\codecs\\jpeg\\encoder.rs","byte_start":230108,"byte_end":230161,"line_start":438,"line_end":438,"column_start":5,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":878},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\codecs\\jpeg\\encoder.rs","byte_start":232380,"byte_end":232392,"line_start":491,"line_end":491,"column_start":12,"column_end":24},"name":"encode_image","qualname":"<JpegEncoder>::encode_image","value":"pub fn encode_image<I: GenericImageView>(&mut Self, &I) -> ImageResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Encodes the given image.","sig":null,"attributes":[{"value":"/ Encodes the given image.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\codecs\\jpeg\\encoder.rs","byte_start":231852,"byte_end":231880,"line_start":482,"line_end":482,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\codecs\\jpeg\\encoder.rs","byte_start":231885,"byte_end":231888,"line_start":483,"line_end":483,"column_start":5,"column_end":8}},{"value":"/ As a special feature this does not require the whole image to be present in memory at the","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\codecs\\jpeg\\encoder.rs","byte_start":231893,"byte_end":231986,"line_start":484,"line_end":484,"column_start":5,"column_end":98}},{"value":"/ same time such that it may be computed on the fly, which is why this method exists on this","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\codecs\\jpeg\\encoder.rs","byte_start":231991,"byte_end":232085,"line_start":485,"line_end":485,"column_start":5,"column_end":99}},{"value":"/ encoder but not on others. Instead the encoder will iterate over 8-by-8 blocks of pixels at","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\codecs\\jpeg\\encoder.rs","byte_start":232090,"byte_end":232185,"line_start":486,"line_end":486,"column_start":5,"column_end":100}},{"value":"/ a time, inspecting each pixel exactly once. You can rely on this behaviour when calling","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\codecs\\jpeg\\encoder.rs","byte_start":232190,"byte_end":232281,"line_start":487,"line_end":487,"column_start":5,"column_end":96}},{"value":"/ this method.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\codecs\\jpeg\\encoder.rs","byte_start":232286,"byte_end":232302,"line_start":488,"line_end":488,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\codecs\\jpeg\\encoder.rs","byte_start":232307,"byte_end":232310,"line_start":489,"line_end":489,"column_start":5,"column_end":8}},{"value":"/ The Image in encoded with subsampling ratio 4:2:2","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\codecs\\jpeg\\encoder.rs","byte_start":232315,"byte_end":232368,"line_start":490,"line_end":490,"column_start":5,"column_end":58}}]},{"kind":"Mod","id":{"krate":0,"index":952},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\codecs\\png.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"png","qualname":"::codecs::png","value":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\codecs\\png.rs","parent":null,"children":[{"krate":0,"index":953},{"krate":0,"index":954},{"krate":0,"index":955},{"krate":0,"index":956},{"krate":0,"index":957},{"krate":0,"index":958},{"krate":0,"index":959},{"krate":0,"index":960},{"krate":0,"index":961},{"krate":0,"index":962},{"krate":0,"index":963},{"krate":0,"index":964},{"krate":0,"index":965},{"krate":0,"index":966},{"krate":0,"index":3964},{"krate":0,"index":967},{"krate":0,"index":3966},{"krate":0,"index":968},{"krate":0,"index":969},{"krate":0,"index":3970},{"krate":0,"index":970},{"krate":0,"index":3972},{"krate":0,"index":971},{"krate":0,"index":972},{"krate":0,"index":973},{"krate":0,"index":974},{"krate":0,"index":975},{"krate":0,"index":976},{"krate":0,"index":977},{"krate":0,"index":978},{"krate":0,"index":979},{"krate":0,"index":980},{"krate":0,"index":981},{"krate":0,"index":982},{"krate":0,"index":983},{"krate":0,"index":984},{"krate":0,"index":985},{"krate":0,"index":986},{"krate":0,"index":987},{"krate":0,"index":988},{"krate":0,"index":989},{"krate":0,"index":990},{"krate":0,"index":991},{"krate":0,"index":992},{"krate":0,"index":993},{"krate":0,"index":994},{"krate":0,"index":999},{"krate":0,"index":1001},{"krate":0,"index":1004},{"krate":0,"index":1008},{"krate":0,"index":1012},{"krate":0,"index":1017},{"krate":0,"index":1018},{"krate":0,"index":1032},{"krate":0,"index":1040},{"krate":0,"index":1046},{"krate":0,"index":1058},{"krate":0,"index":1063},{"krate":0,"index":2549},{"krate":0,"index":2573},{"krate":0,"index":2572},{"krate":0,"index":2570},{"krate":0,"index":2567},{"krate":0,"index":2568},{"krate":0,"index":2563},{"krate":0,"index":2564},{"krate":0,"index":2575},{"krate":0,"index":2599},{"krate":0,"index":2598},{"krate":0,"index":2596},{"krate":0,"index":2593},{"krate":0,"index":2594},{"krate":0,"index":2589},{"krate":0,"index":2590},{"krate":0,"index":1065},{"krate":0,"index":1072},{"krate":0,"index":1080},{"krate":0,"index":1083},{"krate":0,"index":1085}],"decl_id":null,"docs":" Decoding and Encoding of PNG Images","sig":null,"attributes":[{"value":"cfg(feature = \"png\")","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src/lib.rs","byte_start":8118,"byte_end":8141,"line_start":235,"line_end":235,"column_start":5,"column_end":28}},{"value":"/ Decoding and Encoding of PNG Images","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\codecs\\png.rs","byte_start":259959,"byte_end":259998,"line_start":1,"line_end":1,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\codecs\\png.rs","byte_start":259999,"byte_end":260002,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ PNG (Portable Network Graphics) is an image format that supports lossless compression.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\codecs\\png.rs","byte_start":260003,"byte_end":260093,"line_start":3,"line_end":3,"column_start":1,"column_end":91}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\codecs\\png.rs","byte_start":260094,"byte_end":260097,"line_start":4,"line_end":4,"column_start":1,"column_end":4}},{"value":"/ # Related Links","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\codecs\\png.rs","byte_start":260098,"byte_end":260117,"line_start":5,"line_end":5,"column_start":1,"column_end":20}},{"value":"/ * <http://www.w3.org/TR/PNG/> - The PNG Specification","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\codecs\\png.rs","byte_start":260118,"byte_end":260175,"line_start":6,"line_end":6,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\codecs\\png.rs","byte_start":260176,"byte_end":260179,"line_start":7,"line_end":7,"column_start":1,"column_end":4}}]},{"kind":"Struct","id":{"krate":0,"index":994},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\codecs\\png.rs","byte_start":260932,"byte_end":260941,"line_start":28,"line_end":28,"column_start":12,"column_end":21},"name":"PngReader","qualname":"::codecs::png::PngReader","value":"PngReader {  }","parent":null,"children":[{"krate":0,"index":996},{"krate":0,"index":997},{"krate":0,"index":998}],"decl_id":null,"docs":" Png Reader","sig":null,"attributes":[{"value":"/ Png Reader","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\codecs\\png.rs","byte_start":260742,"byte_end":260756,"line_start":23,"line_end":23,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\codecs\\png.rs","byte_start":260757,"byte_end":260760,"line_start":24,"line_end":24,"column_start":1,"column_end":4}},{"value":"/ This reader will try to read the png one row at a time,","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\codecs\\png.rs","byte_start":260761,"byte_end":260820,"line_start":25,"line_end":25,"column_start":1,"column_end":60}},{"value":"/ however for interlaced png files this is not possible and","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\codecs\\png.rs","byte_start":260821,"byte_end":260882,"line_start":26,"line_end":26,"column_start":1,"column_end":62}},{"value":"/ these are therefore read at once.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\codecs\\png.rs","byte_start":260883,"byte_end":260920,"line_start":27,"line_end":27,"column_start":1,"column_end":38}}]},{"kind":"Type","id":{"krate":0,"index":999},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\codecs\\png.rs","byte_start":261216,"byte_end":261225,"line_start":43,"line_end":43,"column_start":10,"column_end":19},"name":"PNGReader","qualname":"::codecs::png::PNGReader","value":"PngReader<R>","parent":null,"children":[],"decl_id":null,"docs":" PNG Reader","sig":null,"attributes":[{"value":"/ PNG Reader","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\codecs\\png.rs","byte_start":261023,"byte_end":261037,"line_start":34,"line_end":34,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\codecs\\png.rs","byte_start":261038,"byte_end":261041,"line_start":35,"line_end":35,"column_start":1,"column_end":4}},{"value":"/ An alias of [`PngReader`].","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\codecs\\png.rs","byte_start":261042,"byte_end":261072,"line_start":36,"line_end":36,"column_start":1,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\codecs\\png.rs","byte_start":261073,"byte_end":261076,"line_start":37,"line_end":37,"column_start":1,"column_end":4}},{"value":"/ TODO: remove","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\codecs\\png.rs","byte_start":261077,"byte_end":261093,"line_start":38,"line_end":38,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\codecs\\png.rs","byte_start":261094,"byte_end":261097,"line_start":39,"line_end":39,"column_start":1,"column_end":4}},{"value":"/ [`PngReader`]: struct.PngReader.html","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\codecs\\png.rs","byte_start":261098,"byte_end":261138,"line_start":40,"line_end":40,"column_start":1,"column_end":41}},{"value":"allow(dead_code)","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\codecs\\png.rs","byte_start":261139,"byte_end":261158,"line_start":41,"line_end":41,"column_start":1,"column_end":20}},{"value":"deprecated(note = \"Use `PngReader` instead\")","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\codecs\\png.rs","byte_start":261159,"byte_end":261206,"line_start":42,"line_end":42,"column_start":1,"column_end":48}}]},{"kind":"Struct","id":{"krate":0,"index":1008},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\codecs\\png.rs","byte_start":263307,"byte_end":263317,"line_start":115,"line_end":115,"column_start":12,"column_end":22},"name":"PngDecoder","qualname":"::codecs::png::PngDecoder","value":"PngDecoder {  }","parent":null,"children":[{"krate":0,"index":1010},{"krate":0,"index":1011}],"decl_id":null,"docs":" PNG decoder\n","sig":null,"attributes":[{"value":"/ PNG decoder","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\codecs\\png.rs","byte_start":263280,"byte_end":263295,"line_start":114,"line_end":114,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1014},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\codecs\\png.rs","byte_start":263495,"byte_end":263498,"line_start":122,"line_end":122,"column_start":12,"column_end":15},"name":"new","qualname":"<PngDecoder<R>>::new","value":"pub fn new(R) -> ImageResult<PngDecoder<R>>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new decoder that decodes from the stream ```r```\n","sig":null,"attributes":[{"value":"/ Creates a new decoder that decodes from the stream ```r```","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\codecs\\png.rs","byte_start":263421,"byte_end":263483,"line_start":121,"line_end":121,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":1015},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\codecs\\png.rs","byte_start":267251,"byte_end":267255,"line_start":187,"line_end":187,"column_start":12,"column_end":16},"name":"apng","qualname":"<PngDecoder<R>>::apng","value":"pub fn apng(Self) -> ApngDecoder<R>","parent":null,"children":[],"decl_id":null,"docs":" Turn this into an iterator over the animation frames.","sig":null,"attributes":[{"value":"/ Turn this into an iterator over the animation frames.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\codecs\\png.rs","byte_start":266604,"byte_end":266661,"line_start":177,"line_end":177,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\codecs\\png.rs","byte_start":266666,"byte_end":266669,"line_start":178,"line_end":178,"column_start":5,"column_end":8}},{"value":"/ Reading the complete animation requires more memory than reading the data from the IDAT","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\codecs\\png.rs","byte_start":266674,"byte_end":266765,"line_start":179,"line_end":179,"column_start":5,"column_end":96}},{"value":"/ frame–multiple frame buffers need to be reserved at the same time. We further do not","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\codecs\\png.rs","byte_start":266770,"byte_end":266860,"line_start":180,"line_end":180,"column_start":5,"column_end":93}},{"value":"/ support compositing 16-bit colors. In any case this would be lossy as the interface of","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\codecs\\png.rs","byte_start":266865,"byte_end":266955,"line_start":181,"line_end":181,"column_start":5,"column_end":95}},{"value":"/ animation decoders does not support 16-bit colors.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\codecs\\png.rs","byte_start":266960,"byte_end":267014,"line_start":182,"line_end":182,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\codecs\\png.rs","byte_start":267019,"byte_end":267022,"line_start":183,"line_end":183,"column_start":5,"column_end":8}},{"value":"/ If something is not supported or a limit is violated then the decoding step that requires","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\codecs\\png.rs","byte_start":267027,"byte_end":267120,"line_start":184,"line_end":184,"column_start":5,"column_end":98}},{"value":"/ them will fail and an error will be returned instead of the frame. No further frames will","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\codecs\\png.rs","byte_start":267125,"byte_end":267218,"line_start":185,"line_end":185,"column_start":5,"column_end":98}},{"value":"/ be returned.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\codecs\\png.rs","byte_start":267223,"byte_end":267239,"line_start":186,"line_end":186,"column_start":5,"column_end":21}}]},{"kind":"Method","id":{"krate":0,"index":1016},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\codecs\\png.rs","byte_start":267678,"byte_end":267685,"line_start":197,"line_end":197,"column_start":12,"column_end":19},"name":"is_apng","qualname":"<PngDecoder<R>>::is_apng","value":"pub fn is_apng(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns if the image contains an animation.","sig":null,"attributes":[{"value":"/ Returns if the image contains an animation.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\codecs\\png.rs","byte_start":267324,"byte_end":267371,"line_start":191,"line_end":191,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\codecs\\png.rs","byte_start":267376,"byte_end":267379,"line_start":192,"line_end":192,"column_start":5,"column_end":8}},{"value":"/ Note that the file itself decides if the default image is considered to be part of the","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\codecs\\png.rs","byte_start":267384,"byte_end":267474,"line_start":193,"line_end":193,"column_start":5,"column_end":95}},{"value":"/ animation. When it is not the common interpretation is to use it as a thumbnail.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\codecs\\png.rs","byte_start":267479,"byte_end":267563,"line_start":194,"line_end":194,"column_start":5,"column_end":89}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\codecs\\png.rs","byte_start":267568,"byte_end":267571,"line_start":195,"line_end":195,"column_start":5,"column_end":8}},{"value":"/ If a non-animated image is converted into an `ApngDecoder` then its iterator is empty.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\codecs\\png.rs","byte_start":267576,"byte_end":267666,"line_start":196,"line_end":196,"column_start":5,"column_end":95}}]},{"kind":"Struct","id":{"krate":0,"index":1032},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\codecs\\png.rs","byte_start":269654,"byte_end":269665,"line_start":258,"line_end":258,"column_start":12,"column_end":23},"name":"ApngDecoder","qualname":"::codecs::png::ApngDecoder","value":"ApngDecoder {  }","parent":null,"children":[{"krate":0,"index":1034},{"krate":0,"index":1035},{"krate":0,"index":1036},{"krate":0,"index":1037},{"krate":0,"index":1038},{"krate":0,"index":1039}],"decl_id":null,"docs":" An [`AnimationDecoder`] adapter of [`PngDecoder`].","sig":null,"attributes":[{"value":"/ An [`AnimationDecoder`] adapter of [`PngDecoder`].","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\codecs\\png.rs","byte_start":269368,"byte_end":269422,"line_start":251,"line_end":251,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\codecs\\png.rs","byte_start":269423,"byte_end":269426,"line_start":252,"line_end":252,"column_start":1,"column_end":4}},{"value":"/ See [`PngDecoder::apng`] for more information.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\codecs\\png.rs","byte_start":269427,"byte_end":269477,"line_start":253,"line_end":253,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\codecs\\png.rs","byte_start":269478,"byte_end":269481,"line_start":254,"line_end":254,"column_start":1,"column_end":4}},{"value":"/ [`AnimationDecoder`]: ../trait.AnimationDecoder.html","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\codecs\\png.rs","byte_start":269482,"byte_end":269538,"line_start":255,"line_end":255,"column_start":1,"column_end":57}},{"value":"/ [`PngDecoder`]: struct.PngDecoder.html","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\codecs\\png.rs","byte_start":269539,"byte_end":269581,"line_start":256,"line_end":256,"column_start":1,"column_end":43}},{"value":"/ [`PngDecoder::apng`]: struct.PngDecoder.html#method.apng","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\codecs\\png.rs","byte_start":269582,"byte_end":269642,"line_start":257,"line_end":257,"column_start":1,"column_end":61}}]},{"kind":"Struct","id":{"krate":0,"index":1058},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\codecs\\png.rs","byte_start":276861,"byte_end":276871,"line_start":445,"line_end":445,"column_start":12,"column_end":22},"name":"PngEncoder","qualname":"::codecs::png::PngEncoder","value":"PngEncoder {  }","parent":null,"children":[{"krate":0,"index":1060},{"krate":0,"index":1061},{"krate":0,"index":1062}],"decl_id":null,"docs":" PNG encoder\n","sig":null,"attributes":[{"value":"/ PNG encoder","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\codecs\\png.rs","byte_start":276834,"byte_end":276849,"line_start":444,"line_end":444,"column_start":1,"column_end":16}}]},{"kind":"Type","id":{"krate":0,"index":1063},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\codecs\\png.rs","byte_start":277153,"byte_end":277163,"line_start":460,"line_end":460,"column_start":10,"column_end":20},"name":"PNGEncoder","qualname":"::codecs::png::PNGEncoder","value":"PngEncoder<W>","parent":null,"children":[],"decl_id":null,"docs":" PNG Encoder","sig":null,"attributes":[{"value":"/ PNG Encoder","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\codecs\\png.rs","byte_start":276955,"byte_end":276970,"line_start":451,"line_end":451,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\codecs\\png.rs","byte_start":276971,"byte_end":276974,"line_start":452,"line_end":452,"column_start":1,"column_end":4}},{"value":"/ An alias of [`PngEncoder`].","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\codecs\\png.rs","byte_start":276975,"byte_end":277006,"line_start":453,"line_end":453,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\codecs\\png.rs","byte_start":277007,"byte_end":277010,"line_start":454,"line_end":454,"column_start":1,"column_end":4}},{"value":"/ TODO: remove","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\codecs\\png.rs","byte_start":277011,"byte_end":277027,"line_start":455,"line_end":455,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\codecs\\png.rs","byte_start":277028,"byte_end":277031,"line_start":456,"line_end":456,"column_start":1,"column_end":4}},{"value":"/ [`PngEncoder`]: struct.PngEncoder.html","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\codecs\\png.rs","byte_start":277032,"byte_end":277074,"line_start":457,"line_end":457,"column_start":1,"column_end":43}},{"value":"allow(dead_code)","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\codecs\\png.rs","byte_start":277075,"byte_end":277094,"line_start":458,"line_end":458,"column_start":1,"column_end":20}},{"value":"deprecated(note = \"Use `PngEncoder` instead\")","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\codecs\\png.rs","byte_start":277095,"byte_end":277143,"line_start":459,"line_end":459,"column_start":1,"column_end":49}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2550},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\codecs\\png.rs","byte_start":277366,"byte_end":277373,"line_start":466,"line_end":466,"column_start":5,"column_end":12},"name":"Default","qualname":"::codecs::png::CompressionType::Default","value":"CompressionType::Default","parent":{"krate":0,"index":2549},"children":[],"decl_id":null,"docs":" Default compression level\n","sig":null,"attributes":[{"value":"/ Default compression level","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\codecs\\png.rs","byte_start":277332,"byte_end":277361,"line_start":465,"line_end":465,"column_start":5,"column_end":34}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2552},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\codecs\\png.rs","byte_start":277413,"byte_end":277417,"line_start":468,"line_end":468,"column_start":5,"column_end":9},"name":"Fast","qualname":"::codecs::png::CompressionType::Fast","value":"CompressionType::Fast","parent":{"krate":0,"index":2549},"children":[],"decl_id":null,"docs":" Fast, minimal compression\n","sig":null,"attributes":[{"value":"/ Fast, minimal compression","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\codecs\\png.rs","byte_start":277379,"byte_end":277408,"line_start":467,"line_end":467,"column_start":5,"column_end":34}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2554},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\codecs\\png.rs","byte_start":277454,"byte_end":277458,"line_start":470,"line_end":470,"column_start":5,"column_end":9},"name":"Best","qualname":"::codecs::png::CompressionType::Best","value":"CompressionType::Best","parent":{"krate":0,"index":2549},"children":[],"decl_id":null,"docs":" High compression level\n","sig":null,"attributes":[{"value":"/ High compression level","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\codecs\\png.rs","byte_start":277423,"byte_end":277449,"line_start":469,"line_end":469,"column_start":5,"column_end":31}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2556},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\codecs\\png.rs","byte_start":277499,"byte_end":277506,"line_start":472,"line_end":472,"column_start":5,"column_end":12},"name":"Huffman","qualname":"::codecs::png::CompressionType::Huffman","value":"CompressionType::Huffman","parent":{"krate":0,"index":2549},"children":[],"decl_id":null,"docs":" Huffman coding compression\n","sig":null,"attributes":[{"value":"/ Huffman coding compression","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\codecs\\png.rs","byte_start":277464,"byte_end":277494,"line_start":471,"line_end":471,"column_start":5,"column_end":35}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2558},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\codecs\\png.rs","byte_start":277552,"byte_end":277555,"line_start":474,"line_end":474,"column_start":5,"column_end":8},"name":"Rle","qualname":"::codecs::png::CompressionType::Rle","value":"CompressionType::Rle","parent":{"krate":0,"index":2549},"children":[],"decl_id":null,"docs":" Run-length encoding compression\n","sig":null,"attributes":[{"value":"/ Run-length encoding compression","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\codecs\\png.rs","byte_start":277512,"byte_end":277547,"line_start":473,"line_end":473,"column_start":5,"column_end":40}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2560},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\codecs\\png.rs","byte_start":277581,"byte_end":277596,"line_start":477,"line_end":477,"column_start":5,"column_end":20},"name":"__NonExhaustive","qualname":"::codecs::png::CompressionType::__NonExhaustive","value":"CompressionType::__NonExhaustive(crate::utils::NonExhaustiveMarker)","parent":{"krate":0,"index":2549},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":2549},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\codecs\\png.rs","byte_start":277310,"byte_end":277325,"line_start":464,"line_end":464,"column_start":10,"column_end":25},"name":"CompressionType","qualname":"::codecs::png::CompressionType","value":"pub enum CompressionType {\n\n    /// Default compression level\n    Default,\n\n    /// Fast, minimal compression\n    Fast,\n\n    /// High compression level\n    Best,\n\n    /// Huffman coding compression\n    Huffman,\n\n    /// Run-length encoding compression\n    Rle,\n\n    #[doc(hidden)]\n    __NonExhaustive(crate::utils::NonExhaustiveMarker),\n}","parent":null,"children":[{"krate":0,"index":2550},{"krate":0,"index":2552},{"krate":0,"index":2554},{"krate":0,"index":2556},{"krate":0,"index":2558},{"krate":0,"index":2560}],"decl_id":null,"docs":" Compression level of a PNG encoder. The default setting is `Fast`.\n","sig":null,"attributes":[{"value":"/ Compression level of a PNG encoder. The default setting is `Fast`.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\codecs\\png.rs","byte_start":277185,"byte_end":277255,"line_start":462,"line_end":462,"column_start":1,"column_end":71}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2576},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\codecs\\png.rs","byte_start":278031,"byte_end":278039,"line_start":488,"line_end":488,"column_start":5,"column_end":13},"name":"NoFilter","qualname":"::codecs::png::FilterType::NoFilter","value":"FilterType::NoFilter","parent":{"krate":0,"index":2575},"children":[],"decl_id":null,"docs":" No processing done, best used for low bit depth greyscale or data with a\n low color count\n","sig":null,"attributes":[{"value":"/ No processing done, best used for low bit depth greyscale or data with a","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\codecs\\png.rs","byte_start":277926,"byte_end":278002,"line_start":486,"line_end":486,"column_start":5,"column_end":81}},{"value":"/ low color count","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\codecs\\png.rs","byte_start":278007,"byte_end":278026,"line_start":487,"line_end":487,"column_start":5,"column_end":24}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2578},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\codecs\\png.rs","byte_start":278106,"byte_end":278109,"line_start":490,"line_end":490,"column_start":5,"column_end":8},"name":"Sub","qualname":"::codecs::png::FilterType::Sub","value":"FilterType::Sub","parent":{"krate":0,"index":2575},"children":[],"decl_id":null,"docs":" Filters based on previous pixel in the same scanline\n","sig":null,"attributes":[{"value":"/ Filters based on previous pixel in the same scanline","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\codecs\\png.rs","byte_start":278045,"byte_end":278101,"line_start":489,"line_end":489,"column_start":5,"column_end":61}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2580},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\codecs\\png.rs","byte_start":278159,"byte_end":278161,"line_start":492,"line_end":492,"column_start":5,"column_end":7},"name":"Up","qualname":"::codecs::png::FilterType::Up","value":"FilterType::Up","parent":{"krate":0,"index":2575},"children":[],"decl_id":null,"docs":" Filters based on the scanline above\n","sig":null,"attributes":[{"value":"/ Filters based on the scanline above","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\codecs\\png.rs","byte_start":278115,"byte_end":278154,"line_start":491,"line_end":491,"column_start":5,"column_end":44}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2582},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\codecs\\png.rs","byte_start":278238,"byte_end":278241,"line_start":494,"line_end":494,"column_start":5,"column_end":8},"name":"Avg","qualname":"::codecs::png::FilterType::Avg","value":"FilterType::Avg","parent":{"krate":0,"index":2575},"children":[],"decl_id":null,"docs":" Filters based on the average of left and right neighbor pixels\n","sig":null,"attributes":[{"value":"/ Filters based on the average of left and right neighbor pixels","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\codecs\\png.rs","byte_start":278167,"byte_end":278233,"line_start":493,"line_end":493,"column_start":5,"column_end":71}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2584},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\codecs\\png.rs","byte_start":278328,"byte_end":278333,"line_start":496,"line_end":496,"column_start":5,"column_end":10},"name":"Paeth","qualname":"::codecs::png::FilterType::Paeth","value":"FilterType::Paeth","parent":{"krate":0,"index":2575},"children":[],"decl_id":null,"docs":" Algorithm that takes into account the left, upper left, and above pixels\n","sig":null,"attributes":[{"value":"/ Algorithm that takes into account the left, upper left, and above pixels","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\codecs\\png.rs","byte_start":278247,"byte_end":278323,"line_start":495,"line_end":495,"column_start":5,"column_end":81}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2586},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\codecs\\png.rs","byte_start":278359,"byte_end":278374,"line_start":499,"line_end":499,"column_start":5,"column_end":20},"name":"__NonExhaustive","qualname":"::codecs::png::FilterType::__NonExhaustive","value":"FilterType::__NonExhaustive(crate::utils::NonExhaustiveMarker)","parent":{"krate":0,"index":2575},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":2575},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\codecs\\png.rs","byte_start":277909,"byte_end":277919,"line_start":485,"line_end":485,"column_start":10,"column_end":20},"name":"FilterType","qualname":"::codecs::png::FilterType","value":"pub enum FilterType {\n\n    /// No processing done, best used for low bit depth greyscale or data with a\n    /// low color count\n    NoFilter,\n\n    /// Filters based on previous pixel in the same scanline\n    Sub,\n\n    /// Filters based on the scanline above\n    Up,\n\n    /// Filters based on the average of left and right neighbor pixels\n    Avg,\n\n    /// Algorithm that takes into account the left, upper left, and above pixels\n    Paeth,\n\n    #[doc(hidden)]\n    __NonExhaustive(crate::utils::NonExhaustiveMarker),\n}","parent":null,"children":[{"krate":0,"index":2576},{"krate":0,"index":2578},{"krate":0,"index":2580},{"krate":0,"index":2582},{"krate":0,"index":2584},{"krate":0,"index":2586}],"decl_id":null,"docs":" Filter algorithms used to process image data to improve compression.","sig":null,"attributes":[{"value":"/ Filter algorithms used to process image data to improve compression.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\codecs\\png.rs","byte_start":277636,"byte_end":277708,"line_start":480,"line_end":480,"column_start":1,"column_end":73}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\codecs\\png.rs","byte_start":277709,"byte_end":277712,"line_start":481,"line_end":481,"column_start":1,"column_end":4}},{"value":"/ The default filter is `Sub` though this default may change in the future, most notable if an","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\codecs\\png.rs","byte_start":277713,"byte_end":277809,"line_start":482,"line_end":482,"column_start":1,"column_end":97}},{"value":"/ adaptive encoding option is implemented.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\codecs\\png.rs","byte_start":277810,"byte_end":277854,"line_start":483,"line_end":483,"column_start":1,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":1067},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\codecs\\png.rs","byte_start":278519,"byte_end":278522,"line_start":504,"line_end":504,"column_start":12,"column_end":15},"name":"new","qualname":"<PngEncoder<W>>::new","value":"pub fn new(W) -> PngEncoder<W>","parent":null,"children":[],"decl_id":null,"docs":" Create a new encoder that writes its output to ```w```\n","sig":null,"attributes":[{"value":"/ Create a new encoder that writes its output to ```w```","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\codecs\\png.rs","byte_start":278449,"byte_end":278507,"line_start":503,"line_end":503,"column_start":5,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":1068},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\codecs\\png.rs","byte_start":279704,"byte_end":279720,"line_start":526,"line_end":526,"column_start":12,"column_end":28},"name":"new_with_quality","qualname":"<PngEncoder<W>>::new_with_quality","value":"pub fn new_with_quality(W, CompressionType, FilterType) -> PngEncoder<W>","parent":null,"children":[],"decl_id":null,"docs":" Create a new encoder that writes its output to `w` with `CompressionType` `compression` and\n `FilterType` `filter`.","sig":null,"attributes":[{"value":"/ Create a new encoder that writes its output to `w` with `CompressionType` `compression` and","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\codecs\\png.rs","byte_start":278690,"byte_end":278785,"line_start":512,"line_end":512,"column_start":5,"column_end":100}},{"value":"/ `FilterType` `filter`.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\codecs\\png.rs","byte_start":278790,"byte_end":278816,"line_start":513,"line_end":513,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\codecs\\png.rs","byte_start":278821,"byte_end":278824,"line_start":514,"line_end":514,"column_start":5,"column_end":8}},{"value":"/ It is best to view the options as a _hint_ to the implementation on the smallest or fastest","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\codecs\\png.rs","byte_start":278829,"byte_end":278924,"line_start":515,"line_end":515,"column_start":5,"column_end":100}},{"value":"/ option for encoding a particular image. That is, using options that map directly to a PNG","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\codecs\\png.rs","byte_start":278929,"byte_end":279022,"line_start":516,"line_end":516,"column_start":5,"column_end":98}},{"value":"/ image parameter will use this parameter where possible. But variants that have no direct","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\codecs\\png.rs","byte_start":279027,"byte_end":279119,"line_start":517,"line_end":517,"column_start":5,"column_end":97}},{"value":"/ mapping may be interpreted differently in minor versions. The exact output is expressly","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\codecs\\png.rs","byte_start":279124,"byte_end":279215,"line_start":518,"line_end":518,"column_start":5,"column_end":96}},{"value":"/ __not__ part the SemVer stability guarantee.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\codecs\\png.rs","byte_start":279220,"byte_end":279268,"line_start":519,"line_end":519,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\codecs\\png.rs","byte_start":279273,"byte_end":279276,"line_start":520,"line_end":520,"column_start":5,"column_end":8}},{"value":"/ Note that it is not optimal to use a single filter type. It is likely that the library used","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\codecs\\png.rs","byte_start":279281,"byte_end":279376,"line_start":521,"line_end":521,"column_start":5,"column_end":100}},{"value":"/ will at some point gain the ability to use adaptive filtering methods per pixel row (or","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\codecs\\png.rs","byte_start":279381,"byte_end":279472,"line_start":522,"line_end":522,"column_start":5,"column_end":96}},{"value":"/ even interlaced row). We might make it the new default variant in which case choosing a","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\codecs\\png.rs","byte_start":279477,"byte_end":279568,"line_start":523,"line_end":523,"column_start":5,"column_end":96}},{"value":"/ particular filter method likely produces larger images. Be sure to check the release notes","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\codecs\\png.rs","byte_start":279573,"byte_end":279667,"line_start":524,"line_end":524,"column_start":5,"column_end":99}},{"value":"/ once in a while.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\codecs\\png.rs","byte_start":279672,"byte_end":279692,"line_start":525,"line_end":525,"column_start":5,"column_end":25}}]},{"kind":"Method","id":{"krate":0,"index":1069},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\codecs\\png.rs","byte_start":280000,"byte_end":280006,"line_start":535,"line_end":535,"column_start":12,"column_end":18},"name":"encode","qualname":"<PngEncoder<W>>::encode","value":"pub fn encode(Self, &[u8], u32, u32, ColorType) -> ImageResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Encodes the image `data` that has dimensions `width` and `height` and `ColorType` `c`.\n","sig":null,"attributes":[{"value":"/ Encodes the image `data` that has dimensions `width` and `height` and `ColorType` `c`.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\codecs\\png.rs","byte_start":279898,"byte_end":279988,"line_start":534,"line_end":534,"column_start":5,"column_end":95}}]},{"kind":"Mod","id":{"krate":0,"index":1087},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src/lib.rs","byte_start":10342,"byte_end":10346,"line_start":308,"line_end":308,"column_start":9,"column_end":13},"name":"jpeg","qualname":"::jpeg","value":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src/lib.rs","parent":null,"children":[{"krate":0,"index":1088},{"krate":0,"index":1089},{"krate":0,"index":1090},{"krate":0,"index":1091},{"krate":0,"index":1092},{"krate":0,"index":1093}],"decl_id":null,"docs":" Decoding and Encoding of JPEG Images\n","sig":null,"attributes":[{"value":"cfg(feature = \"jpeg\")","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src/lib.rs","byte_start":10266,"byte_end":10290,"line_start":306,"line_end":306,"column_start":1,"column_end":25}},{"value":"deprecated = \"Use codecs::jpeg instead\"","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src/lib.rs","byte_start":10291,"byte_end":10333,"line_start":307,"line_end":307,"column_start":1,"column_end":43}},{"value":"/ Decoding and Encoding of JPEG Images","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src/lib.rs","byte_start":10353,"byte_end":10393,"line_start":309,"line_end":309,"column_start":5,"column_end":45}}]},{"kind":"Mod","id":{"krate":0,"index":1094},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src/lib.rs","byte_start":10616,"byte_end":10619,"line_start":317,"line_end":317,"column_start":9,"column_end":12},"name":"png","qualname":"::png","value":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src/lib.rs","parent":null,"children":[{"krate":0,"index":1095},{"krate":0,"index":1096},{"krate":0,"index":1097},{"krate":0,"index":1098},{"krate":0,"index":1099},{"krate":0,"index":1100},{"krate":0,"index":1101},{"krate":0,"index":1102},{"krate":0,"index":1103}],"decl_id":null,"docs":" Decoding and Encoding of PNG Images\n","sig":null,"attributes":[{"value":"cfg(feature = \"png\")","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src/lib.rs","byte_start":10542,"byte_end":10565,"line_start":315,"line_end":315,"column_start":1,"column_end":24}},{"value":"deprecated = \"Use codecs::png instead\"","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src/lib.rs","byte_start":10566,"byte_end":10607,"line_start":316,"line_end":316,"column_start":1,"column_end":42}},{"value":"/ Decoding and Encoding of PNG Images","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src/lib.rs","byte_start":10626,"byte_end":10665,"line_start":318,"line_end":318,"column_start":5,"column_end":44}}]},{"kind":"Struct","id":{"krate":0,"index":1110},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\animation.rs","byte_start":286201,"byte_end":286207,"line_start":10,"line_end":10,"column_start":12,"column_end":18},"name":"Frames","qualname":"::animation::Frames","value":"Frames {  }","parent":null,"children":[{"krate":0,"index":1112}],"decl_id":null,"docs":" An implementation dependent iterator, reading the frames as requested\n","sig":null,"attributes":[{"value":"/ An implementation dependent iterator, reading the frames as requested","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\animation.rs","byte_start":286116,"byte_end":286189,"line_start":9,"line_end":9,"column_start":1,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":1115},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\animation.rs","byte_start":286387,"byte_end":286390,"line_start":16,"line_end":16,"column_start":12,"column_end":15},"name":"new","qualname":"<Frames>::new","value":"pub fn new(Box<Iterator<Item = ImageResult<Frame>> + 'a>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new `Frames` from an implementation specific iterator.\n","sig":null,"attributes":[{"value":"/ Creates a new `Frames` from an implementation specific iterator.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\animation.rs","byte_start":286307,"byte_end":286375,"line_start":15,"line_end":15,"column_start":5,"column_end":73}}]},{"kind":"Method","id":{"krate":0,"index":1116},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\animation.rs","byte_start":286782,"byte_end":286796,"line_start":25,"line_end":25,"column_start":12,"column_end":26},"name":"collect_frames","qualname":"<Frames>::collect_frames","value":"pub fn collect_frames(Self) -> ImageResult<Vec<Frame>>","parent":null,"children":[],"decl_id":null,"docs":" Steps through the iterator from the current frame until the end and pushes each frame into\n a `Vec`.\n If en error is encountered that error is returned instead.","sig":null,"attributes":[{"value":"/ Steps through the iterator from the current frame until the end and pushes each frame into","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\animation.rs","byte_start":286501,"byte_end":286595,"line_start":20,"line_end":20,"column_start":5,"column_end":99}},{"value":"/ a `Vec`.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\animation.rs","byte_start":286600,"byte_end":286612,"line_start":21,"line_end":21,"column_start":5,"column_end":17}},{"value":"/ If en error is encountered that error is returned instead.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\animation.rs","byte_start":286617,"byte_end":286679,"line_start":22,"line_end":22,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\animation.rs","byte_start":286684,"byte_end":286687,"line_start":23,"line_end":23,"column_start":5,"column_end":8}},{"value":"/ Note: This is equivalent to `Frames::collect::<ImageResult<Vec<Frame>>>()`","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\animation.rs","byte_start":286692,"byte_end":286770,"line_start":24,"line_end":24,"column_start":5,"column_end":83}}]},{"kind":"Struct","id":{"krate":0,"index":2601},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\animation.rs","byte_start":287085,"byte_end":287090,"line_start":39,"line_end":39,"column_start":12,"column_end":17},"name":"Frame","qualname":"::animation::Frame","value":"Frame {  }","parent":null,"children":[{"krate":0,"index":2602},{"krate":0,"index":2603},{"krate":0,"index":2604},{"krate":0,"index":2605}],"decl_id":null,"docs":" A single animation frame\n","sig":null,"attributes":[{"value":"/ A single animation frame","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\animation.rs","byte_start":287028,"byte_end":287056,"line_start":37,"line_end":37,"column_start":1,"column_end":29}}]},{"kind":"Struct","id":{"krate":0,"index":2608},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\animation.rs","byte_start":287372,"byte_end":287377,"line_start":51,"line_end":51,"column_start":12,"column_end":17},"name":"Delay","qualname":"::animation::Delay","value":"Delay {  }","parent":null,"children":[{"krate":0,"index":2609}],"decl_id":null,"docs":" The delay of a frame relative to the previous one.\n","sig":null,"attributes":[{"value":"/ The delay of a frame relative to the previous one.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\animation.rs","byte_start":287249,"byte_end":287303,"line_start":49,"line_end":49,"column_start":1,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":1122},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\animation.rs","byte_start":287479,"byte_end":287482,"line_start":57,"line_end":57,"column_start":12,"column_end":15},"name":"new","qualname":"<Frame>::new","value":"pub fn new(RgbaImage) -> Frame","parent":null,"children":[],"decl_id":null,"docs":" Contructs a new frame without any delay.\n","sig":null,"attributes":[{"value":"/ Contructs a new frame without any delay.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\animation.rs","byte_start":287423,"byte_end":287467,"line_start":56,"line_end":56,"column_start":5,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":1123},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\animation.rs","byte_start":287710,"byte_end":287720,"line_start":67,"line_end":67,"column_start":12,"column_end":22},"name":"from_parts","qualname":"<Frame>::from_parts","value":"pub fn from_parts(RgbaImage, u32, u32, Delay) -> Frame","parent":null,"children":[],"decl_id":null,"docs":" Contructs a new frame\n","sig":null,"attributes":[{"value":"/ Contructs a new frame","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\animation.rs","byte_start":287673,"byte_end":287698,"line_start":66,"line_end":66,"column_start":5,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":1124},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\animation.rs","byte_start":287932,"byte_end":287937,"line_start":77,"line_end":77,"column_start":12,"column_end":17},"name":"delay","qualname":"<Frame>::delay","value":"pub fn delay(&Self) -> Delay","parent":null,"children":[],"decl_id":null,"docs":" Delay of this frame\n","sig":null,"attributes":[{"value":"/ Delay of this frame","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\animation.rs","byte_start":287897,"byte_end":287920,"line_start":76,"line_end":76,"column_start":5,"column_end":28}}]},{"kind":"Method","id":{"krate":0,"index":1125},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\animation.rs","byte_start":288026,"byte_end":288032,"line_start":82,"line_end":82,"column_start":12,"column_end":18},"name":"buffer","qualname":"<Frame>::buffer","value":"pub fn buffer(&Self) -> &RgbaImage","parent":null,"children":[],"decl_id":null,"docs":" Returns the image buffer\n","sig":null,"attributes":[{"value":"/ Returns the image buffer","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\animation.rs","byte_start":287986,"byte_end":288014,"line_start":81,"line_end":81,"column_start":5,"column_end":33}}]},{"kind":"Method","id":{"krate":0,"index":1126},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\animation.rs","byte_start":288134,"byte_end":288144,"line_start":87,"line_end":87,"column_start":12,"column_end":22},"name":"buffer_mut","qualname":"<Frame>::buffer_mut","value":"pub fn buffer_mut(&mut Self) -> &mut RgbaImage","parent":null,"children":[],"decl_id":null,"docs":" Returns a mutable image buffer\n","sig":null,"attributes":[{"value":"/ Returns a mutable image buffer","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\animation.rs","byte_start":288088,"byte_end":288122,"line_start":86,"line_end":86,"column_start":5,"column_end":39}}]},{"kind":"Method","id":{"krate":0,"index":1127},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\animation.rs","byte_start":288252,"byte_end":288263,"line_start":92,"line_end":92,"column_start":12,"column_end":23},"name":"into_buffer","qualname":"<Frame>::into_buffer","value":"pub fn into_buffer(Self) -> RgbaImage","parent":null,"children":[],"decl_id":null,"docs":" Returns the image buffer\n","sig":null,"attributes":[{"value":"/ Returns the image buffer","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\animation.rs","byte_start":288212,"byte_end":288240,"line_start":91,"line_end":91,"column_start":5,"column_end":33}}]},{"kind":"Method","id":{"krate":0,"index":1128},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\animation.rs","byte_start":288352,"byte_end":288356,"line_start":97,"line_end":97,"column_start":12,"column_end":16},"name":"left","qualname":"<Frame>::left","value":"pub fn left(&Self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Returns the x offset\n","sig":null,"attributes":[{"value":"/ Returns the x offset","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\animation.rs","byte_start":288316,"byte_end":288340,"line_start":96,"line_end":96,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":1129},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\animation.rs","byte_start":288438,"byte_end":288441,"line_start":102,"line_end":102,"column_start":12,"column_end":15},"name":"top","qualname":"<Frame>::top","value":"pub fn top(&Self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Returns the y offset\n","sig":null,"attributes":[{"value":"/ Returns the y offset","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\animation.rs","byte_start":288402,"byte_end":288426,"line_start":101,"line_end":101,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":1131},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\animation.rs","byte_start":288706,"byte_end":288725,"line_start":116,"line_end":116,"column_start":12,"column_end":31},"name":"from_numer_denom_ms","qualname":"<Delay>::from_numer_denom_ms","value":"pub fn from_numer_denom_ms(u32, u32) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a delay from a ratio of milliseconds.","sig":null,"attributes":[{"value":"/ Create a delay from a ratio of milliseconds.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\animation.rs","byte_start":288501,"byte_end":288549,"line_start":108,"line_end":108,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\animation.rs","byte_start":288554,"byte_end":288557,"line_start":109,"line_end":109,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\animation.rs","byte_start":288562,"byte_end":288576,"line_start":110,"line_end":110,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\animation.rs","byte_start":288581,"byte_end":288584,"line_start":111,"line_end":111,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\animation.rs","byte_start":288589,"byte_end":288596,"line_start":112,"line_end":112,"column_start":5,"column_end":12}},{"value":"/ use image::Delay;","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\animation.rs","byte_start":288601,"byte_end":288622,"line_start":113,"line_end":113,"column_start":5,"column_end":26}},{"value":"/ let delay_10ms = Delay::from_numer_denom_ms(10, 1);","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\animation.rs","byte_start":288627,"byte_end":288682,"line_start":114,"line_end":114,"column_start":5,"column_end":60}},{"value":"/ ```","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\animation.rs","byte_start":288687,"byte_end":288694,"line_start":115,"line_end":115,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1132},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\animation.rs","byte_start":289368,"byte_end":289392,"line_start":134,"line_end":134,"column_start":12,"column_end":36},"name":"from_saturating_duration","qualname":"<Delay>::from_saturating_duration","value":"pub fn from_saturating_duration(Duration) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Convert from a duration, clamped between 0 and an implemented defined maximum.","sig":null,"attributes":[{"value":"/ Convert from a duration, clamped between 0 and an implemented defined maximum.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\animation.rs","byte_start":288845,"byte_end":288927,"line_start":120,"line_end":120,"column_start":5,"column_end":87}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\animation.rs","byte_start":288932,"byte_end":288935,"line_start":121,"line_end":121,"column_start":5,"column_end":8}},{"value":"/ The maximum is *at least* `i32::MAX` milliseconds. It should be noted that the accuracy of","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\animation.rs","byte_start":288940,"byte_end":289034,"line_start":122,"line_end":122,"column_start":5,"column_end":99}},{"value":"/ the result may be relative and very large delays have a coarse resolution.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\animation.rs","byte_start":289039,"byte_end":289117,"line_start":123,"line_end":123,"column_start":5,"column_end":83}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\animation.rs","byte_start":289122,"byte_end":289125,"line_start":124,"line_end":124,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\animation.rs","byte_start":289130,"byte_end":289144,"line_start":125,"line_end":125,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\animation.rs","byte_start":289149,"byte_end":289152,"line_start":126,"line_end":126,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\animation.rs","byte_start":289157,"byte_end":289164,"line_start":127,"line_end":127,"column_start":5,"column_end":12}},{"value":"/ use std::time::Duration;","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\animation.rs","byte_start":289169,"byte_end":289197,"line_start":128,"line_end":128,"column_start":5,"column_end":33}},{"value":"/ use image::Delay;","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\animation.rs","byte_start":289202,"byte_end":289223,"line_start":129,"line_end":129,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\animation.rs","byte_start":289228,"byte_end":289231,"line_start":130,"line_end":130,"column_start":5,"column_end":8}},{"value":"/ let duration = Duration::from_millis(20);","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\animation.rs","byte_start":289236,"byte_end":289281,"line_start":131,"line_end":131,"column_start":5,"column_end":50}},{"value":"/ let delay = Delay::from_saturating_duration(duration);","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\animation.rs","byte_start":289286,"byte_end":289344,"line_start":132,"line_end":132,"column_start":5,"column_end":63}},{"value":"/ ```","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\animation.rs","byte_start":289349,"byte_end":289356,"line_start":133,"line_end":133,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1134},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\animation.rs","byte_start":290568,"byte_end":290582,"line_start":163,"line_end":163,"column_start":12,"column_end":26},"name":"numer_denom_ms","qualname":"<Delay>::numer_denom_ms","value":"pub fn numer_denom_ms(Self) -> (u32, u32)","parent":null,"children":[],"decl_id":null,"docs":" The numerator and denominator of the delay in milliseconds.","sig":null,"attributes":[{"value":"/ The numerator and denominator of the delay in milliseconds.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\animation.rs","byte_start":290342,"byte_end":290405,"line_start":159,"line_end":159,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\animation.rs","byte_start":290410,"byte_end":290413,"line_start":160,"line_end":160,"column_start":5,"column_end":8}},{"value":"/ This is guaranteed to be an exact conversion if the `Delay` was previously created with the","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\animation.rs","byte_start":290418,"byte_end":290513,"line_start":161,"line_end":161,"column_start":5,"column_end":100}},{"value":"/ `from_numer_denom_ms` constructor.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\animation.rs","byte_start":290518,"byte_end":290556,"line_start":162,"line_end":162,"column_start":5,"column_end":43}}]},{"kind":"Struct","id":{"krate":0,"index":1183},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\buffer.rs","byte_start":297862,"byte_end":297868,"line_start":19,"line_end":19,"column_start":12,"column_end":18},"name":"Pixels","qualname":"::buffer_::Pixels","value":"Pixels {  }","parent":null,"children":[{"krate":0,"index":1186}],"decl_id":null,"docs":" Iterate over pixel refs.\n","sig":null,"attributes":[{"value":"/ Iterate over pixel refs.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\buffer.rs","byte_start":297822,"byte_end":297850,"line_start":18,"line_end":18,"column_start":1,"column_end":29}}]},{"kind":"Struct","id":{"krate":0,"index":1208},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\buffer.rs","byte_start":299029,"byte_end":299038,"line_start":76,"line_end":76,"column_start":12,"column_end":21},"name":"PixelsMut","qualname":"::buffer_::PixelsMut","value":"PixelsMut {  }","parent":null,"children":[{"krate":0,"index":1211}],"decl_id":null,"docs":" Iterate over mutable pixel refs.\n","sig":null,"attributes":[{"value":"/ Iterate over mutable pixel refs.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\buffer.rs","byte_start":298981,"byte_end":299017,"line_start":75,"line_end":75,"column_start":1,"column_end":37}}]},{"kind":"Struct","id":{"krate":0,"index":1230},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\buffer.rs","byte_start":300294,"byte_end":300298,"line_start":133,"line_end":133,"column_start":12,"column_end":16},"name":"Rows","qualname":"::buffer_::Rows","value":"Rows {  }","parent":null,"children":[{"krate":0,"index":1233}],"decl_id":null,"docs":" Iterate over rows of an image","sig":null,"attributes":[{"value":"/ Iterate over rows of an image","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\buffer.rs","byte_start":300088,"byte_end":300121,"line_start":128,"line_end":128,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\buffer.rs","byte_start":300122,"byte_end":300125,"line_start":129,"line_end":129,"column_start":1,"column_end":4}},{"value":"/ This iterator is created with [`ImageBuffer::rows`]. See its document for details.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\buffer.rs","byte_start":300126,"byte_end":300212,"line_start":130,"line_end":130,"column_start":1,"column_end":87}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\buffer.rs","byte_start":300213,"byte_end":300216,"line_start":131,"line_end":131,"column_start":1,"column_end":4}},{"value":"/ [`ImageBuffer::rows`]: ../struct.ImageBuffer.html#method.rows","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\buffer.rs","byte_start":300217,"byte_end":300282,"line_start":132,"line_end":132,"column_start":1,"column_end":66}}]},{"kind":"Struct","id":{"krate":0,"index":1257},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\buffer.rs","byte_start":302848,"byte_end":302855,"line_start":223,"line_end":223,"column_start":12,"column_end":19},"name":"RowsMut","qualname":"::buffer_::RowsMut","value":"RowsMut {  }","parent":null,"children":[{"krate":0,"index":1260}],"decl_id":null,"docs":" Iterate over mutable rows of an image","sig":null,"attributes":[{"value":"/ Iterate over mutable rows of an image","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\buffer.rs","byte_start":302622,"byte_end":302663,"line_start":218,"line_end":218,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\buffer.rs","byte_start":302664,"byte_end":302667,"line_start":219,"line_end":219,"column_start":1,"column_end":4}},{"value":"/ This iterator is created with [`ImageBuffer::rows_mut`]. See its document for details.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\buffer.rs","byte_start":302668,"byte_end":302758,"line_start":220,"line_end":220,"column_start":1,"column_end":91}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\buffer.rs","byte_start":302759,"byte_end":302762,"line_start":221,"line_end":221,"column_start":1,"column_end":4}},{"value":"/ [`ImageBuffer::rows_mut`]: ../struct.ImageBuffer.html#method.rows_mut","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\buffer.rs","byte_start":302763,"byte_end":302836,"line_start":222,"line_end":222,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":1281},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\buffer.rs","byte_start":305171,"byte_end":305186,"line_start":303,"line_end":303,"column_start":12,"column_end":27},"name":"EnumeratePixels","qualname":"::buffer_::EnumeratePixels","value":"EnumeratePixels {  }","parent":null,"children":[{"krate":0,"index":1284},{"krate":0,"index":1285},{"krate":0,"index":1286},{"krate":0,"index":1287}],"decl_id":null,"docs":" Enumerate the pixels of an image.\n","sig":null,"attributes":[{"value":"/ Enumerate the pixels of an image.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\buffer.rs","byte_start":305122,"byte_end":305159,"line_start":302,"line_end":302,"column_start":1,"column_end":38}}]},{"kind":"Struct","id":{"krate":0,"index":1304},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\buffer.rs","byte_start":306493,"byte_end":306506,"line_start":365,"line_end":365,"column_start":12,"column_end":25},"name":"EnumerateRows","qualname":"::buffer_::EnumerateRows","value":"EnumerateRows {  }","parent":null,"children":[{"krate":0,"index":1307},{"krate":0,"index":1308},{"krate":0,"index":1309}],"decl_id":null,"docs":" Enumerate the rows of an image.\n","sig":null,"attributes":[{"value":"/ Enumerate the rows of an image.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\buffer.rs","byte_start":306446,"byte_end":306481,"line_start":364,"line_end":364,"column_start":1,"column_end":36}}]},{"kind":"Struct","id":{"krate":0,"index":1326},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\buffer.rs","byte_start":307881,"byte_end":307899,"line_start":431,"line_end":431,"column_start":12,"column_end":30},"name":"EnumeratePixelsMut","qualname":"::buffer_::EnumeratePixelsMut","value":"EnumeratePixelsMut {  }","parent":null,"children":[{"krate":0,"index":1329},{"krate":0,"index":1330},{"krate":0,"index":1331},{"krate":0,"index":1332}],"decl_id":null,"docs":" Enumerate the pixels of an image.\n","sig":null,"attributes":[{"value":"/ Enumerate the pixels of an image.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\buffer.rs","byte_start":307832,"byte_end":307869,"line_start":430,"line_end":430,"column_start":1,"column_end":38}}]},{"kind":"Struct","id":{"krate":0,"index":1346},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\buffer.rs","byte_start":309043,"byte_end":309059,"line_start":484,"line_end":484,"column_start":12,"column_end":28},"name":"EnumerateRowsMut","qualname":"::buffer_::EnumerateRowsMut","value":"EnumerateRowsMut {  }","parent":null,"children":[{"krate":0,"index":1349},{"krate":0,"index":1350},{"krate":0,"index":1351}],"decl_id":null,"docs":" Enumerate the rows of an image.\n","sig":null,"attributes":[{"value":"/ Enumerate the rows of an image.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\buffer.rs","byte_start":308996,"byte_end":309031,"line_start":483,"line_end":483,"column_start":1,"column_end":36}}]},{"kind":"Struct","id":{"krate":0,"index":2628},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\buffer.rs","byte_start":312609,"byte_end":312620,"line_start":609,"line_end":609,"column_start":12,"column_end":23},"name":"ImageBuffer","qualname":"::buffer_::ImageBuffer","value":"ImageBuffer {  }","parent":null,"children":[{"krate":0,"index":2631},{"krate":0,"index":2632},{"krate":0,"index":2633},{"krate":0,"index":2634}],"decl_id":null,"docs":" Generic image buffer","sig":null,"attributes":[{"value":"/ Generic image buffer","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\buffer.rs","byte_start":310231,"byte_end":310255,"line_start":540,"line_end":540,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\buffer.rs","byte_start":310256,"byte_end":310259,"line_start":541,"line_end":541,"column_start":1,"column_end":4}},{"value":"/ This is an image parameterised by its Pixel types, represented by a width and height and a","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\buffer.rs","byte_start":310260,"byte_end":310354,"line_start":542,"line_end":542,"column_start":1,"column_end":95}},{"value":"/ container of channel data. It provides direct access to its pixels and implements the","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\buffer.rs","byte_start":310355,"byte_end":310444,"line_start":543,"line_end":543,"column_start":1,"column_end":90}},{"value":"/ [`GenericImageView`] and [`GenericImage`] traits. In many ways, this is the standard buffer","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\buffer.rs","byte_start":310445,"byte_end":310540,"line_start":544,"line_end":544,"column_start":1,"column_end":96}},{"value":"/ implementing those traits. Using this concrete type instead of a generic type parameter has","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\buffer.rs","byte_start":310541,"byte_end":310636,"line_start":545,"line_end":545,"column_start":1,"column_end":96}},{"value":"/ been shown to improve performance.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\buffer.rs","byte_start":310637,"byte_end":310675,"line_start":546,"line_end":546,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\buffer.rs","byte_start":310676,"byte_end":310679,"line_start":547,"line_end":547,"column_start":1,"column_end":4}},{"value":"/ The crate defines a few type aliases with regularly used pixel types for your convenience, such","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\buffer.rs","byte_start":310680,"byte_end":310779,"line_start":548,"line_end":548,"column_start":1,"column_end":100}},{"value":"/ as `RgbImage`, `GrayImage` etc.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\buffer.rs","byte_start":310780,"byte_end":310815,"line_start":549,"line_end":549,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\buffer.rs","byte_start":310816,"byte_end":310819,"line_start":550,"line_end":550,"column_start":1,"column_end":4}},{"value":"/ [`GenericImage`]: trait.GenericImage.html","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\buffer.rs","byte_start":310820,"byte_end":310865,"line_start":551,"line_end":551,"column_start":1,"column_end":46}},{"value":"/ [`GenericImageView`]: trait.GenericImageView.html","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\buffer.rs","byte_start":310866,"byte_end":310919,"line_start":552,"line_end":552,"column_start":1,"column_end":54}},{"value":"/ [`RgbImage`]: type.RgbImage.html","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\buffer.rs","byte_start":310920,"byte_end":310956,"line_start":553,"line_end":553,"column_start":1,"column_end":37}},{"value":"/ [`GrayImage`]: type.GrayImage.html","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\buffer.rs","byte_start":310957,"byte_end":310995,"line_start":554,"line_end":554,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\buffer.rs","byte_start":310996,"byte_end":310999,"line_start":555,"line_end":555,"column_start":1,"column_end":4}},{"value":"/ To convert between images of different Pixel types use [`DynamicImage`].","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\buffer.rs","byte_start":311000,"byte_end":311076,"line_start":556,"line_end":556,"column_start":1,"column_end":77}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\buffer.rs","byte_start":311077,"byte_end":311080,"line_start":557,"line_end":557,"column_start":1,"column_end":4}},{"value":"/ You can retrieve a complete description of the buffer's layout and contents through","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\buffer.rs","byte_start":311081,"byte_end":311168,"line_start":558,"line_end":558,"column_start":1,"column_end":88}},{"value":"/ [`as_flat_samples`] and [`as_flat_samples_mut`]. This can be handy to also use the contents in","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\buffer.rs","byte_start":311169,"byte_end":311267,"line_start":559,"line_end":559,"column_start":1,"column_end":99}},{"value":"/ a foreign language, map it as a GPU host buffer or other similar tasks.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\buffer.rs","byte_start":311268,"byte_end":311343,"line_start":560,"line_end":560,"column_start":1,"column_end":76}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\buffer.rs","byte_start":311344,"byte_end":311347,"line_start":561,"line_end":561,"column_start":1,"column_end":4}},{"value":"/ [`DynamicImage`]: enum.DynamicImage.html","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\buffer.rs","byte_start":311348,"byte_end":311392,"line_start":562,"line_end":562,"column_start":1,"column_end":45}},{"value":"/ [`as_flat_samples`]: #method.as_flat_samples","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\buffer.rs","byte_start":311393,"byte_end":311441,"line_start":563,"line_end":563,"column_start":1,"column_end":49}},{"value":"/ [`as_flat_samples_mut`]: #method.as_flat_samples_mut","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\buffer.rs","byte_start":311442,"byte_end":311498,"line_start":564,"line_end":564,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\buffer.rs","byte_start":311499,"byte_end":311502,"line_start":565,"line_end":565,"column_start":1,"column_end":4}},{"value":"/ ## Examples","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\buffer.rs","byte_start":311503,"byte_end":311518,"line_start":566,"line_end":566,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\buffer.rs","byte_start":311519,"byte_end":311522,"line_start":567,"line_end":567,"column_start":1,"column_end":4}},{"value":"/ Create a simple canvas and paint a small cross.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\buffer.rs","byte_start":311523,"byte_end":311574,"line_start":568,"line_end":568,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\buffer.rs","byte_start":311575,"byte_end":311578,"line_start":569,"line_end":569,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\buffer.rs","byte_start":311579,"byte_end":311586,"line_start":570,"line_end":570,"column_start":1,"column_end":8}},{"value":"/ use image::{RgbImage, Rgb};","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\buffer.rs","byte_start":311587,"byte_end":311618,"line_start":571,"line_end":571,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\buffer.rs","byte_start":311619,"byte_end":311622,"line_start":572,"line_end":572,"column_start":1,"column_end":4}},{"value":"/ let mut img = RgbImage::new(32, 32);","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\buffer.rs","byte_start":311623,"byte_end":311663,"line_start":573,"line_end":573,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\buffer.rs","byte_start":311664,"byte_end":311667,"line_start":574,"line_end":574,"column_start":1,"column_end":4}},{"value":"/ for x in 15..=17 {","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\buffer.rs","byte_start":311668,"byte_end":311690,"line_start":575,"line_end":575,"column_start":1,"column_end":23}},{"value":"/     for y in 8..24 {","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\buffer.rs","byte_start":311691,"byte_end":311715,"line_start":576,"line_end":576,"column_start":1,"column_end":25}},{"value":"/         img.put_pixel(x, y, Rgb([255, 0, 0]));","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\buffer.rs","byte_start":311716,"byte_end":311766,"line_start":577,"line_end":577,"column_start":1,"column_end":51}},{"value":"/         img.put_pixel(y, x, Rgb([255, 0, 0]));","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\buffer.rs","byte_start":311767,"byte_end":311817,"line_start":578,"line_end":578,"column_start":1,"column_end":51}},{"value":"/     }","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\buffer.rs","byte_start":311818,"byte_end":311827,"line_start":579,"line_end":579,"column_start":1,"column_end":10}},{"value":"/ }","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\buffer.rs","byte_start":311828,"byte_end":311833,"line_start":580,"line_end":580,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\buffer.rs","byte_start":311834,"byte_end":311841,"line_start":581,"line_end":581,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\buffer.rs","byte_start":311842,"byte_end":311845,"line_start":582,"line_end":582,"column_start":1,"column_end":4}},{"value":"/ Overlays an image on top of a larger background raster.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\buffer.rs","byte_start":311846,"byte_end":311905,"line_start":583,"line_end":583,"column_start":1,"column_end":60}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\buffer.rs","byte_start":311906,"byte_end":311909,"line_start":584,"line_end":584,"column_start":1,"column_end":4}},{"value":"/ ```no_run","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\buffer.rs","byte_start":311910,"byte_end":311923,"line_start":585,"line_end":585,"column_start":1,"column_end":14}},{"value":"/ use image::{GenericImage, GenericImageView, ImageBuffer, open};","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\buffer.rs","byte_start":311924,"byte_end":311991,"line_start":586,"line_end":586,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\buffer.rs","byte_start":311992,"byte_end":311995,"line_start":587,"line_end":587,"column_start":1,"column_end":4}},{"value":"/ let on_top = open(\"path/to/some.png\").unwrap().into_rgb();","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\buffer.rs","byte_start":311996,"byte_end":312058,"line_start":588,"line_end":588,"column_start":1,"column_end":63}},{"value":"/ let mut img = ImageBuffer::from_fn(512, 512, |x, y| {","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\buffer.rs","byte_start":312059,"byte_end":312116,"line_start":589,"line_end":589,"column_start":1,"column_end":58}},{"value":"/     if (x + y) % 2 == 0 {","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\buffer.rs","byte_start":312117,"byte_end":312146,"line_start":590,"line_end":590,"column_start":1,"column_end":30}},{"value":"/         image::Rgb([0, 0, 0])","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\buffer.rs","byte_start":312147,"byte_end":312180,"line_start":591,"line_end":591,"column_start":1,"column_end":34}},{"value":"/     } else {","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\buffer.rs","byte_start":312181,"byte_end":312197,"line_start":592,"line_end":592,"column_start":1,"column_end":17}},{"value":"/         image::Rgb([255, 255, 255])","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\buffer.rs","byte_start":312198,"byte_end":312237,"line_start":593,"line_end":593,"column_start":1,"column_end":40}},{"value":"/     }","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\buffer.rs","byte_start":312238,"byte_end":312247,"line_start":594,"line_end":594,"column_start":1,"column_end":10}},{"value":"/ });","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\buffer.rs","byte_start":312248,"byte_end":312255,"line_start":595,"line_end":595,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\buffer.rs","byte_start":312256,"byte_end":312259,"line_start":596,"line_end":596,"column_start":1,"column_end":4}},{"value":"/ image::imageops::overlay(&mut img, &on_top, 128, 128);","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\buffer.rs","byte_start":312260,"byte_end":312318,"line_start":597,"line_end":597,"column_start":1,"column_end":59}},{"value":"/ ```","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\buffer.rs","byte_start":312319,"byte_end":312326,"line_start":598,"line_end":598,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\buffer.rs","byte_start":312327,"byte_end":312330,"line_start":599,"line_end":599,"column_start":1,"column_end":4}},{"value":"/ Convert an RgbaImage to a GrayImage.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\buffer.rs","byte_start":312331,"byte_end":312371,"line_start":600,"line_end":600,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\buffer.rs","byte_start":312372,"byte_end":312375,"line_start":601,"line_end":601,"column_start":1,"column_end":4}},{"value":"/ ```no_run","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\buffer.rs","byte_start":312376,"byte_end":312389,"line_start":602,"line_end":602,"column_start":1,"column_end":14}},{"value":"/ use image::{open, DynamicImage};","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\buffer.rs","byte_start":312390,"byte_end":312426,"line_start":603,"line_end":603,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\buffer.rs","byte_start":312427,"byte_end":312430,"line_start":604,"line_end":604,"column_start":1,"column_end":4}},{"value":"/ let rgba = open(\"path/to/some.png\").unwrap().into_rgba();","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\buffer.rs","byte_start":312431,"byte_end":312492,"line_start":605,"line_end":605,"column_start":1,"column_end":62}},{"value":"/ let gray = DynamicImage::ImageRgba8(rgba).into_luma();","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\buffer.rs","byte_start":312493,"byte_end":312551,"line_start":606,"line_end":606,"column_start":1,"column_end":59}},{"value":"/ ```","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\buffer.rs","byte_start":312552,"byte_end":312559,"line_start":607,"line_end":607,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":1368},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\buffer.rs","byte_start":313378,"byte_end":313386,"line_start":631,"line_end":631,"column_start":12,"column_end":20},"name":"from_raw","qualname":"<ImageBuffer<P, Container>>::from_raw","value":"pub fn from_raw(u32, u32, Container) -> Option<ImageBuffer<P, Container>>","parent":null,"children":[],"decl_id":null,"docs":" Contructs a buffer from a generic container\n (for example a `Vec` or a slice)","sig":null,"attributes":[{"value":"/ Contructs a buffer from a generic container","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\buffer.rs","byte_start":313093,"byte_end":313140,"line_start":626,"line_end":626,"column_start":5,"column_end":52}},{"value":"/ (for example a `Vec` or a slice)","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\buffer.rs","byte_start":313145,"byte_end":313181,"line_start":627,"line_end":627,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\buffer.rs","byte_start":313186,"byte_end":313189,"line_start":628,"line_end":628,"column_start":5,"column_end":8}},{"value":"/ Returns `None` if the container is not big enough (including when the image dimensions","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\buffer.rs","byte_start":313194,"byte_end":313284,"line_start":629,"line_end":629,"column_start":5,"column_end":95}},{"value":"/ necessitate an allocation of more bytes than supported by the container).","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\buffer.rs","byte_start":313289,"byte_end":313366,"line_start":630,"line_end":630,"column_start":5,"column_end":82}}]},{"kind":"Method","id":{"krate":0,"index":1369},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\buffer.rs","byte_start":313792,"byte_end":313800,"line_start":645,"line_end":645,"column_start":12,"column_end":20},"name":"into_raw","qualname":"<ImageBuffer<P, Container>>::into_raw","value":"pub fn into_raw(Self) -> Container","parent":null,"children":[],"decl_id":null,"docs":" Returns the underlying raw buffer\n","sig":null,"attributes":[{"value":"/ Returns the underlying raw buffer","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\buffer.rs","byte_start":313743,"byte_end":313780,"line_start":644,"line_end":644,"column_start":5,"column_end":42}}]},{"kind":"Method","id":{"krate":0,"index":1370},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\buffer.rs","byte_start":313900,"byte_end":313906,"line_start":650,"line_end":650,"column_start":12,"column_end":18},"name":"as_raw","qualname":"<ImageBuffer<P, Container>>::as_raw","value":"pub fn as_raw(&Self) -> &Container","parent":null,"children":[],"decl_id":null,"docs":" Returns the underlying raw buffer\n","sig":null,"attributes":[{"value":"/ Returns the underlying raw buffer","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\buffer.rs","byte_start":313851,"byte_end":313888,"line_start":649,"line_end":649,"column_start":5,"column_end":42}}]},{"kind":"Method","id":{"krate":0,"index":1371},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\buffer.rs","byte_start":314011,"byte_end":314021,"line_start":655,"line_end":655,"column_start":12,"column_end":22},"name":"dimensions","qualname":"<ImageBuffer<P, Container>>::dimensions","value":"pub fn dimensions(&Self) -> (u32, u32)","parent":null,"children":[],"decl_id":null,"docs":" The width and height of this image.\n","sig":null,"attributes":[{"value":"/ The width and height of this image.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\buffer.rs","byte_start":313960,"byte_end":313999,"line_start":654,"line_end":654,"column_start":5,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":1372},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\buffer.rs","byte_start":314130,"byte_end":314135,"line_start":660,"line_end":660,"column_start":12,"column_end":17},"name":"width","qualname":"<ImageBuffer<P, Container>>::width","value":"pub fn width(&Self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" The width of this image.\n","sig":null,"attributes":[{"value":"/ The width of this image.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\buffer.rs","byte_start":314090,"byte_end":314118,"line_start":659,"line_end":659,"column_start":5,"column_end":33}}]},{"kind":"Method","id":{"krate":0,"index":1373},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\buffer.rs","byte_start":314223,"byte_end":314229,"line_start":665,"line_end":665,"column_start":12,"column_end":18},"name":"height","qualname":"<ImageBuffer<P, Container>>::height","value":"pub fn height(&Self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" The height of this image.\n","sig":null,"attributes":[{"value":"/ The height of this image.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\buffer.rs","byte_start":314182,"byte_end":314211,"line_start":664,"line_end":664,"column_start":5,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":1375},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\buffer.rs","byte_start":314614,"byte_end":314620,"line_start":677,"line_end":677,"column_start":12,"column_end":18},"name":"pixels","qualname":"<ImageBuffer<P, Container>>::pixels","value":"pub fn pixels(&Self) -> Pixels<, P>","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator over the pixels of this image.\n The iteration order is x = 0 to width then y = 0 to height\n","sig":null,"attributes":[{"value":"/ Returns an iterator over the pixels of this image.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\buffer.rs","byte_start":314481,"byte_end":314535,"line_start":675,"line_end":675,"column_start":5,"column_end":59}},{"value":"/ The iteration order is x = 0 to width then y = 0 to height","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\buffer.rs","byte_start":314540,"byte_end":314602,"line_start":676,"line_end":676,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":1376},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\buffer.rs","byte_start":315120,"byte_end":315124,"line_start":688,"line_end":688,"column_start":12,"column_end":16},"name":"rows","qualname":"<ImageBuffer<P, Container>>::rows","value":"pub fn rows(&Self) -> Rows<, P>","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator over the rows of this image.","sig":null,"attributes":[{"value":"/ Returns an iterator over the rows of this image.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\buffer.rs","byte_start":314773,"byte_end":314825,"line_start":683,"line_end":683,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\buffer.rs","byte_start":314830,"byte_end":314833,"line_start":684,"line_end":684,"column_start":5,"column_end":8}},{"value":"/ Only non-empty rows can be iterated in this manner. In particular the iterator will not","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\buffer.rs","byte_start":314838,"byte_end":314929,"line_start":685,"line_end":685,"column_start":5,"column_end":96}},{"value":"/ yield any item when the width of the image is `0` or a pixel type without any channels is","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\buffer.rs","byte_start":314934,"byte_end":315027,"line_start":686,"line_end":686,"column_start":5,"column_end":98}},{"value":"/ used. This ensures that its length can always be represented by `usize`.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\buffer.rs","byte_start":315032,"byte_end":315108,"line_start":687,"line_end":687,"column_start":5,"column_end":81}}]},{"kind":"Method","id":{"krate":0,"index":1377},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\buffer.rs","byte_start":315475,"byte_end":315491,"line_start":697,"line_end":697,"column_start":12,"column_end":28},"name":"enumerate_pixels","qualname":"<ImageBuffer<P, Container>>::enumerate_pixels","value":"pub fn enumerate_pixels(&Self) -> EnumeratePixels<, P>","parent":null,"children":[],"decl_id":null,"docs":" Enumerates over the pixels of the image.\n The iterator yields the coordinates of each pixel\n along with a reference to them.\n The iteration order is x = 0 to width then y = 0 to height\n Starting from the top left.\n","sig":null,"attributes":[{"value":"/ Enumerates over the pixels of the image.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\buffer.rs","byte_start":315218,"byte_end":315262,"line_start":692,"line_end":692,"column_start":5,"column_end":49}},{"value":"/ The iterator yields the coordinates of each pixel","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\buffer.rs","byte_start":315267,"byte_end":315320,"line_start":693,"line_end":693,"column_start":5,"column_end":58}},{"value":"/ along with a reference to them.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\buffer.rs","byte_start":315325,"byte_end":315360,"line_start":694,"line_end":694,"column_start":5,"column_end":40}},{"value":"/ The iteration order is x = 0 to width then y = 0 to height","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\buffer.rs","byte_start":315365,"byte_end":315427,"line_start":695,"line_end":695,"column_start":5,"column_end":67}},{"value":"/ Starting from the top left.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\buffer.rs","byte_start":315432,"byte_end":315463,"line_start":696,"line_end":696,"column_start":5,"column_end":36}}]},{"kind":"Method","id":{"krate":0,"index":1378},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\buffer.rs","byte_start":315823,"byte_end":315837,"line_start":709,"line_end":709,"column_start":12,"column_end":26},"name":"enumerate_rows","qualname":"<ImageBuffer<P, Container>>::enumerate_rows","value":"pub fn enumerate_rows(&Self) -> EnumerateRows<, P>","parent":null,"children":[],"decl_id":null,"docs":" Enumerates over the rows of the image.\n The iterator yields the y-coordinate of each row\n along with a reference to them.\n","sig":null,"attributes":[{"value":"/ Enumerates over the rows of the image.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\buffer.rs","byte_start":315672,"byte_end":315714,"line_start":706,"line_end":706,"column_start":5,"column_end":47}},{"value":"/ The iterator yields the y-coordinate of each row","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\buffer.rs","byte_start":315719,"byte_end":315771,"line_start":707,"line_end":707,"column_start":5,"column_end":57}},{"value":"/ along with a reference to them.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\buffer.rs","byte_start":315776,"byte_end":315811,"line_start":708,"line_end":708,"column_start":5,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":1379},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\buffer.rs","byte_start":316158,"byte_end":316167,"line_start":722,"line_end":722,"column_start":12,"column_end":21},"name":"get_pixel","qualname":"<ImageBuffer<P, Container>>::get_pixel","value":"pub fn get_pixel(&Self, u32, u32) -> &P","parent":null,"children":[],"decl_id":null,"docs":" Gets a reference to the pixel at location `(x, y)`","sig":null,"attributes":[{"value":"/ Gets a reference to the pixel at location `(x, y)`","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\buffer.rs","byte_start":315992,"byte_end":316046,"line_start":717,"line_end":717,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\buffer.rs","byte_start":316051,"byte_end":316054,"line_start":718,"line_end":718,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\buffer.rs","byte_start":316059,"byte_end":316071,"line_start":719,"line_end":719,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\buffer.rs","byte_start":316076,"byte_end":316079,"line_start":720,"line_end":720,"column_start":5,"column_end":8}},{"value":"/ Panics if `(x, y)` is out of the bounds `(width, height)`.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\buffer.rs","byte_start":316084,"byte_end":316146,"line_start":721,"line_end":721,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":1387},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\buffer.rs","byte_start":317893,"byte_end":317906,"line_start":763,"line_end":763,"column_start":12,"column_end":25},"name":"sample_layout","qualname":"<ImageBuffer<P, Container>>::sample_layout","value":"pub fn sample_layout(&Self) -> SampleLayout","parent":null,"children":[],"decl_id":null,"docs":" Get the format of the buffer when viewed as a matrix of samples.\n","sig":null,"attributes":[{"value":"/ Get the format of the buffer when viewed as a matrix of samples.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\buffer.rs","byte_start":317813,"byte_end":317881,"line_start":762,"line_end":762,"column_start":5,"column_end":73}}]},{"kind":"Method","id":{"krate":0,"index":1388},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\buffer.rs","byte_start":318520,"byte_end":318537,"line_start":774,"line_end":774,"column_start":12,"column_end":29},"name":"into_flat_samples","qualname":"<ImageBuffer<P, Container>>::into_flat_samples","value":"pub fn into_flat_samples(Self) -> FlatSamples<Container> where\nContainer: AsRef<[P::Subpixel]>","parent":null,"children":[],"decl_id":null,"docs":" Return the raw sample buffer with its stride an dimension information.","sig":null,"attributes":[{"value":"/ Return the raw sample buffer with its stride an dimension information.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\buffer.rs","byte_start":318109,"byte_end":318183,"line_start":768,"line_end":768,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\buffer.rs","byte_start":318188,"byte_end":318191,"line_start":769,"line_end":769,"column_start":5,"column_end":8}},{"value":"/ The returned buffer is guaranteed to be well formed in all cases. It is layed out by","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\buffer.rs","byte_start":318196,"byte_end":318284,"line_start":770,"line_end":770,"column_start":5,"column_end":93}},{"value":"/ colors, width then height, meaning `channel_stride <= width_stride <= height_stride`. All","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\buffer.rs","byte_start":318289,"byte_end":318382,"line_start":771,"line_end":771,"column_start":5,"column_end":98}},{"value":"/ strides are in numbers of elements but those are mostly `u8` in which case the strides are","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\buffer.rs","byte_start":318387,"byte_end":318481,"line_start":772,"line_end":772,"column_start":5,"column_end":99}},{"value":"/ also byte strides.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\buffer.rs","byte_start":318486,"byte_end":318508,"line_start":773,"line_end":773,"column_start":5,"column_end":27}}]},{"kind":"Method","id":{"krate":0,"index":1389},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\buffer.rs","byte_start":319020,"byte_end":319035,"line_start":789,"line_end":789,"column_start":12,"column_end":27},"name":"as_flat_samples","qualname":"<ImageBuffer<P, Container>>::as_flat_samples","value":"pub fn as_flat_samples(&Self) -> FlatSamples<&[P::Subpixel]> where\nContainer: AsRef<[P::Subpixel]>","parent":null,"children":[],"decl_id":null,"docs":" Return a view on the raw sample buffer.","sig":null,"attributes":[{"value":"/ Return a view on the raw sample buffer.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\buffer.rs","byte_start":318878,"byte_end":318921,"line_start":786,"line_end":786,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\buffer.rs","byte_start":318926,"byte_end":318929,"line_start":787,"line_end":787,"column_start":5,"column_end":8}},{"value":"/ See [`into_flat_samples`](#method.into_flat_samples) for more details.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\buffer.rs","byte_start":318934,"byte_end":319008,"line_start":788,"line_end":788,"column_start":5,"column_end":79}}]},{"kind":"Method","id":{"krate":0,"index":1390},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\buffer.rs","byte_start":319468,"byte_end":319487,"line_start":803,"line_end":803,"column_start":12,"column_end":31},"name":"as_flat_samples_mut","qualname":"<ImageBuffer<P, Container>>::as_flat_samples_mut","value":"pub fn as_flat_samples_mut(&mut Self) -> FlatSamples<&mut [P::Subpixel]> where\nContainer: AsMut<[P::Subpixel]>","parent":null,"children":[],"decl_id":null,"docs":" Return a mutable view on the raw sample buffer.","sig":null,"attributes":[{"value":"/ Return a mutable view on the raw sample buffer.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\buffer.rs","byte_start":319318,"byte_end":319369,"line_start":800,"line_end":800,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\buffer.rs","byte_start":319374,"byte_end":319377,"line_start":801,"line_end":801,"column_start":5,"column_end":8}},{"value":"/ See [`into_flat_samples`](#method.into_flat_samples) for more details.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\buffer.rs","byte_start":319382,"byte_end":319456,"line_start":802,"line_end":802,"column_start":5,"column_end":79}}]},{"kind":"Method","id":{"krate":0,"index":1395},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\buffer.rs","byte_start":320234,"byte_end":320244,"line_start":828,"line_end":828,"column_start":12,"column_end":22},"name":"pixels_mut","qualname":"<ImageBuffer<P, Container>>::pixels_mut","value":"pub fn pixels_mut(&mut Self) -> PixelsMut<, P>","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator over the mutable pixels of this image.\n","sig":null,"attributes":[{"value":"/ Returns an iterator over the mutable pixels of this image.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\buffer.rs","byte_start":320160,"byte_end":320222,"line_start":827,"line_end":827,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":1396},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\buffer.rs","byte_start":320770,"byte_end":320778,"line_start":839,"line_end":839,"column_start":12,"column_end":20},"name":"rows_mut","qualname":"<ImageBuffer<P, Container>>::rows_mut","value":"pub fn rows_mut(&mut Self) -> RowsMut<, P>","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator over the mutable rows of this image.","sig":null,"attributes":[{"value":"/ Returns an iterator over the mutable rows of this image.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\buffer.rs","byte_start":320415,"byte_end":320475,"line_start":834,"line_end":834,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\buffer.rs","byte_start":320480,"byte_end":320483,"line_start":835,"line_end":835,"column_start":5,"column_end":8}},{"value":"/ Only non-empty rows can be iterated in this manner. In particular the iterator will not","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\buffer.rs","byte_start":320488,"byte_end":320579,"line_start":836,"line_end":836,"column_start":5,"column_end":96}},{"value":"/ yield any item when the width of the image is `0` or a pixel type without any channels is","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\buffer.rs","byte_start":320584,"byte_end":320677,"line_start":837,"line_end":837,"column_start":5,"column_end":98}},{"value":"/ used. This ensures that its length can always be represented by `usize`.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\buffer.rs","byte_start":320682,"byte_end":320758,"line_start":838,"line_end":838,"column_start":5,"column_end":81}}]},{"kind":"Method","id":{"krate":0,"index":1397},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\buffer.rs","byte_start":321048,"byte_end":321068,"line_start":846,"line_end":846,"column_start":12,"column_end":32},"name":"enumerate_pixels_mut","qualname":"<ImageBuffer<P, Container>>::enumerate_pixels_mut","value":"pub fn enumerate_pixels_mut(&mut Self) -> EnumeratePixelsMut<, P>","parent":null,"children":[],"decl_id":null,"docs":" Enumerates over the pixels of the image.\n The iterator yields the coordinates of each pixel\n along with a mutable reference to them.\n","sig":null,"attributes":[{"value":"/ Enumerates over the pixels of the image.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\buffer.rs","byte_start":320886,"byte_end":320930,"line_start":843,"line_end":843,"column_start":5,"column_end":49}},{"value":"/ The iterator yields the coordinates of each pixel","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\buffer.rs","byte_start":320935,"byte_end":320988,"line_start":844,"line_end":844,"column_start":5,"column_end":58}},{"value":"/ along with a mutable reference to them.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\buffer.rs","byte_start":320993,"byte_end":321036,"line_start":845,"line_end":845,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":1398},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\buffer.rs","byte_start":321442,"byte_end":321460,"line_start":859,"line_end":859,"column_start":12,"column_end":30},"name":"enumerate_rows_mut","qualname":"<ImageBuffer<P, Container>>::enumerate_rows_mut","value":"pub fn enumerate_rows_mut(&mut Self) -> EnumerateRowsMut<, P>","parent":null,"children":[],"decl_id":null,"docs":" Enumerates over the rows of the image.\n The iterator yields the y-coordinate of each row\n along with a mutable reference to them.\n","sig":null,"attributes":[{"value":"/ Enumerates over the rows of the image.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\buffer.rs","byte_start":321283,"byte_end":321325,"line_start":856,"line_end":856,"column_start":5,"column_end":47}},{"value":"/ The iterator yields the y-coordinate of each row","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\buffer.rs","byte_start":321330,"byte_end":321382,"line_start":857,"line_end":857,"column_start":5,"column_end":57}},{"value":"/ along with a mutable reference to them.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\buffer.rs","byte_start":321387,"byte_end":321430,"line_start":858,"line_end":858,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":1399},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\buffer.rs","byte_start":321823,"byte_end":321836,"line_start":873,"line_end":873,"column_start":12,"column_end":25},"name":"get_pixel_mut","qualname":"<ImageBuffer<P, Container>>::get_pixel_mut","value":"pub fn get_pixel_mut(&mut Self, u32, u32) -> &mut P","parent":null,"children":[],"decl_id":null,"docs":" Gets a reference to the mutable pixel at location `(x, y)`","sig":null,"attributes":[{"value":"/ Gets a reference to the mutable pixel at location `(x, y)`","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\buffer.rs","byte_start":321649,"byte_end":321711,"line_start":868,"line_end":868,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\buffer.rs","byte_start":321716,"byte_end":321719,"line_start":869,"line_end":869,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\buffer.rs","byte_start":321724,"byte_end":321736,"line_start":870,"line_end":870,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\buffer.rs","byte_start":321741,"byte_end":321744,"line_start":871,"line_end":871,"column_start":5,"column_end":8}},{"value":"/ Panics if `(x, y)` is out of the bounds `(width, height)`.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\buffer.rs","byte_start":321749,"byte_end":321811,"line_start":872,"line_end":872,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":1400},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\buffer.rs","byte_start":322285,"byte_end":322294,"line_start":885,"line_end":885,"column_start":12,"column_end":21},"name":"put_pixel","qualname":"<ImageBuffer<P, Container>>::put_pixel","value":"pub fn put_pixel(&mut Self, u32, u32, P)","parent":null,"children":[],"decl_id":null,"docs":" Puts a pixel at location `(x, y)`","sig":null,"attributes":[{"value":"/ Puts a pixel at location `(x, y)`","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\buffer.rs","byte_start":322136,"byte_end":322173,"line_start":880,"line_end":880,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\buffer.rs","byte_start":322178,"byte_end":322181,"line_start":881,"line_end":881,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\buffer.rs","byte_start":322186,"byte_end":322198,"line_start":882,"line_end":882,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\buffer.rs","byte_start":322203,"byte_end":322206,"line_start":883,"line_end":883,"column_start":5,"column_end":8}},{"value":"/ Panics if `(x, y)` is out of the bounds `(width, height)`.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\buffer.rs","byte_start":322211,"byte_end":322273,"line_start":884,"line_end":884,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":1404},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\buffer.rs","byte_start":322739,"byte_end":322743,"line_start":900,"line_end":900,"column_start":12,"column_end":16},"name":"save","qualname":"<ImageBuffer<P, Container>>::save","value":"pub fn save<Q>(&Self, Q) -> ImageResult<()> where Q: AsRef<Path>","parent":null,"children":[],"decl_id":null,"docs":" Saves the buffer to a file at the path specified.","sig":null,"attributes":[{"value":"/ Saves the buffer to a file at the path specified.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\buffer.rs","byte_start":322548,"byte_end":322601,"line_start":896,"line_end":896,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\buffer.rs","byte_start":322606,"byte_end":322609,"line_start":897,"line_end":897,"column_start":5,"column_end":8}},{"value":"/ The image format is derived from the file extension.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\buffer.rs","byte_start":322614,"byte_end":322670,"line_start":898,"line_end":898,"column_start":5,"column_end":61}},{"value":"/ Currently only jpeg and png files are supported.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\buffer.rs","byte_start":322675,"byte_end":322727,"line_start":899,"line_end":899,"column_start":5,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":1409},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\buffer.rs","byte_start":323418,"byte_end":323434,"line_start":926,"line_end":926,"column_start":12,"column_end":28},"name":"save_with_format","qualname":"<ImageBuffer<P, Container>>::save_with_format","value":"pub fn save_with_format<Q>(&Self, Q, ImageFormat) -> ImageResult<()> where\nQ: AsRef<Path>","parent":null,"children":[],"decl_id":null,"docs":" Saves the buffer to a file at the specified path in\n the specified format.","sig":null,"attributes":[{"value":"/ Saves the buffer to a file at the specified path in","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\buffer.rs","byte_start":323211,"byte_end":323266,"line_start":921,"line_end":921,"column_start":5,"column_end":60}},{"value":"/ the specified format.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\buffer.rs","byte_start":323271,"byte_end":323296,"line_start":922,"line_end":922,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\buffer.rs","byte_start":323301,"byte_end":323304,"line_start":923,"line_end":923,"column_start":5,"column_end":8}},{"value":"/ See [`save_buffer_with_format`](fn.save_buffer_with_format.html) for","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\buffer.rs","byte_start":323309,"byte_end":323381,"line_start":924,"line_end":924,"column_start":5,"column_end":77}},{"value":"/ supported types.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\buffer.rs","byte_start":323386,"byte_end":323406,"line_start":925,"line_end":925,"column_start":5,"column_end":25}}]},{"kind":"Method","id":{"krate":0,"index":1461},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\buffer.rs","byte_start":330271,"byte_end":330274,"line_start":1154,"line_end":1154,"column_start":12,"column_end":15},"name":"new","qualname":"<ImageBuffer<P, Vec<P::Subpixel>>>::new","value":"pub fn new(u32, u32) -> ImageBuffer<P, Vec<P::Subpixel>>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new image buffer based on a `Vec<P::Subpixel>`.","sig":null,"attributes":[{"value":"/ Creates a new image buffer based on a `Vec<P::Subpixel>`.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\buffer.rs","byte_start":330081,"byte_end":330142,"line_start":1149,"line_end":1149,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\buffer.rs","byte_start":330147,"byte_end":330150,"line_start":1150,"line_end":1150,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\buffer.rs","byte_start":330155,"byte_end":330167,"line_start":1151,"line_end":1151,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\buffer.rs","byte_start":330172,"byte_end":330175,"line_start":1152,"line_end":1152,"column_start":5,"column_end":8}},{"value":"/ Panics when the resulting image is larger the the maximum size of a vector.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\buffer.rs","byte_start":330180,"byte_end":330259,"line_start":1153,"line_end":1153,"column_start":5,"column_end":84}}]},{"kind":"Method","id":{"krate":0,"index":1462},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\buffer.rs","byte_start":330812,"byte_end":330822,"line_start":1170,"line_end":1170,"column_start":12,"column_end":22},"name":"from_pixel","qualname":"<ImageBuffer<P, Vec<P::Subpixel>>>::from_pixel","value":"pub fn from_pixel(u32, u32, P) -> ImageBuffer<P, Vec<P::Subpixel>>","parent":null,"children":[],"decl_id":null,"docs":" Constructs a new ImageBuffer by copying a pixel","sig":null,"attributes":[{"value":"/ Constructs a new ImageBuffer by copying a pixel","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\buffer.rs","byte_start":330632,"byte_end":330683,"line_start":1165,"line_end":1165,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\buffer.rs","byte_start":330688,"byte_end":330691,"line_start":1166,"line_end":1166,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\buffer.rs","byte_start":330696,"byte_end":330708,"line_start":1167,"line_end":1167,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\buffer.rs","byte_start":330713,"byte_end":330716,"line_start":1168,"line_end":1168,"column_start":5,"column_end":8}},{"value":"/ Panics when the resulting image is larger the the maximum size of a vector.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\buffer.rs","byte_start":330721,"byte_end":330800,"line_start":1169,"line_end":1169,"column_start":5,"column_end":84}}]},{"kind":"Method","id":{"krate":0,"index":1463},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\buffer.rs","byte_start":331337,"byte_end":331344,"line_start":1185,"line_end":1185,"column_start":12,"column_end":19},"name":"from_fn","qualname":"<ImageBuffer<P, Vec<P::Subpixel>>>::from_fn","value":"pub fn from_fn<F>(u32, u32, F) -> ImageBuffer<P, Vec<P::Subpixel>> where\nF: FnMut(u32, u32) -> P","parent":null,"children":[],"decl_id":null,"docs":" Constructs a new ImageBuffer by repeated application of the supplied function.","sig":null,"attributes":[{"value":"/ Constructs a new ImageBuffer by repeated application of the supplied function.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\buffer.rs","byte_start":331043,"byte_end":331125,"line_start":1178,"line_end":1178,"column_start":5,"column_end":87}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\buffer.rs","byte_start":331130,"byte_end":331133,"line_start":1179,"line_end":1179,"column_start":5,"column_end":8}},{"value":"/ The arguments to the function are the pixel's x and y coordinates.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\buffer.rs","byte_start":331138,"byte_end":331208,"line_start":1180,"line_end":1180,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\buffer.rs","byte_start":331213,"byte_end":331216,"line_start":1181,"line_end":1181,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\buffer.rs","byte_start":331221,"byte_end":331233,"line_start":1182,"line_end":1182,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\buffer.rs","byte_start":331238,"byte_end":331241,"line_start":1183,"line_end":1183,"column_start":5,"column_end":8}},{"value":"/ Panics when the resulting image is larger the the maximum size of a vector.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\buffer.rs","byte_start":331246,"byte_end":331325,"line_start":1184,"line_end":1184,"column_start":5,"column_end":84}}]},{"kind":"Method","id":{"krate":0,"index":1465},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\buffer.rs","byte_start":331755,"byte_end":331763,"line_start":1198,"line_end":1198,"column_start":12,"column_end":20},"name":"from_vec","qualname":"<ImageBuffer<P, Vec<P::Subpixel>>>::from_vec","value":"pub fn from_vec(u32, u32, Vec<P::Subpixel>)\n-> Option<ImageBuffer<P, Vec<P::Subpixel>>>","parent":null,"children":[],"decl_id":null,"docs":" Creates an image buffer out of an existing buffer.\n Returns None if the buffer is not big enough.\n","sig":null,"attributes":[{"value":"/ Creates an image buffer out of an existing buffer.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\buffer.rs","byte_start":331635,"byte_end":331689,"line_start":1196,"line_end":1196,"column_start":5,"column_end":59}},{"value":"/ Returns None if the buffer is not big enough.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\buffer.rs","byte_start":331694,"byte_end":331743,"line_start":1197,"line_end":1197,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":1466},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\buffer.rs","byte_start":332050,"byte_end":332058,"line_start":1208,"line_end":1208,"column_start":12,"column_end":20},"name":"into_vec","qualname":"<ImageBuffer<P, Vec<P::Subpixel>>>::into_vec","value":"pub fn into_vec(Self) -> Vec<P::Subpixel>","parent":null,"children":[],"decl_id":null,"docs":" Consumes the image buffer and returns the underlying data\n as an owned buffer\n","sig":null,"attributes":[{"value":"/ Consumes the image buffer and returns the underlying data","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\buffer.rs","byte_start":331950,"byte_end":332011,"line_start":1206,"line_end":1206,"column_start":5,"column_end":66}},{"value":"/ as an owned buffer","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\buffer.rs","byte_start":332016,"byte_end":332038,"line_start":1207,"line_end":1207,"column_start":5,"column_end":27}}]},{"kind":"Trait","id":{"krate":0,"index":1467},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\buffer.rs","byte_start":332186,"byte_end":332199,"line_start":1214,"line_end":1214,"column_start":11,"column_end":24},"name":"ConvertBuffer","qualname":"::buffer_::ConvertBuffer","value":"ConvertBuffer<T>","parent":null,"children":[{"krate":0,"index":1469}],"decl_id":null,"docs":" Provides color conversions for whole image buffers.\n","sig":null,"attributes":[{"value":"/ Provides color conversions for whole image buffers.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\buffer.rs","byte_start":332120,"byte_end":332175,"line_start":1213,"line_end":1213,"column_start":1,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":1469},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\buffer.rs","byte_start":332386,"byte_end":332393,"line_start":1219,"line_end":1219,"column_start":8,"column_end":15},"name":"convert","qualname":"::buffer_::ConvertBuffer::convert","value":"pub fn convert(&Self) -> T","parent":{"krate":0,"index":1467},"children":[],"decl_id":null,"docs":" Converts `self` to a buffer of type T","sig":null,"attributes":[{"value":"/ Converts `self` to a buffer of type T","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\buffer.rs","byte_start":332209,"byte_end":332250,"line_start":1215,"line_end":1215,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\buffer.rs","byte_start":332255,"byte_end":332258,"line_start":1216,"line_end":1216,"column_start":5,"column_end":8}},{"value":"/ A generic implementation is provided to convert any image buffer to a image buffer","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\buffer.rs","byte_start":332263,"byte_end":332349,"line_start":1217,"line_end":1217,"column_start":5,"column_end":91}},{"value":"/ based on a `Vec<T>`.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\buffer.rs","byte_start":332354,"byte_end":332378,"line_start":1218,"line_end":1218,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":1471},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\buffer.rs","byte_start":332661,"byte_end":332675,"line_start":1227,"line_end":1227,"column_start":12,"column_end":26},"name":"expand_palette","qualname":"<GrayImage>::expand_palette","value":"pub fn expand_palette(Self, &[(u8, u8, u8)], Option<u8>) -> RgbaImage","parent":null,"children":[],"decl_id":null,"docs":" Expands a color palette by re-using the existing buffer.\n Assumes 8 bit per pixel. Uses an optionally transparent index to\n adjust it's alpha value accordingly.\n","sig":null,"attributes":[{"value":"/ Expands a color palette by re-using the existing buffer.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\buffer.rs","byte_start":332471,"byte_end":332531,"line_start":1224,"line_end":1224,"column_start":5,"column_end":65}},{"value":"/ Assumes 8 bit per pixel. Uses an optionally transparent index to","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\buffer.rs","byte_start":332536,"byte_end":332604,"line_start":1225,"line_end":1225,"column_start":5,"column_end":73}},{"value":"/ adjust it's alpha value accordingly.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\buffer.rs","byte_start":332609,"byte_end":332649,"line_start":1226,"line_end":1226,"column_start":5,"column_end":45}}]},{"kind":"Type","id":{"krate":0,"index":1480},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\buffer.rs","byte_start":334810,"byte_end":334818,"line_start":1292,"line_end":1292,"column_start":10,"column_end":18},"name":"RgbImage","qualname":"::buffer_::RgbImage","value":"ImageBuffer<Rgb<u8>, Vec<u8>>","parent":null,"children":[],"decl_id":null,"docs":" Sendable Rgb image buffer\n","sig":null,"attributes":[{"value":"/ Sendable Rgb image buffer","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\buffer.rs","byte_start":334771,"byte_end":334800,"line_start":1291,"line_end":1291,"column_start":1,"column_end":30}}]},{"kind":"Type","id":{"krate":0,"index":1481},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\buffer.rs","byte_start":334907,"byte_end":334916,"line_start":1294,"line_end":1294,"column_start":10,"column_end":19},"name":"RgbaImage","qualname":"::buffer_::RgbaImage","value":"ImageBuffer<Rgba<u8>, Vec<u8>>","parent":null,"children":[],"decl_id":null,"docs":" Sendable Rgb + alpha channel image buffer\n","sig":null,"attributes":[{"value":"/ Sendable Rgb + alpha channel image buffer","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\buffer.rs","byte_start":334852,"byte_end":334897,"line_start":1293,"line_end":1293,"column_start":1,"column_end":46}}]},{"kind":"Type","id":{"krate":0,"index":1482},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\buffer.rs","byte_start":334996,"byte_end":335005,"line_start":1296,"line_end":1296,"column_start":10,"column_end":19},"name":"GrayImage","qualname":"::buffer_::GrayImage","value":"ImageBuffer<Luma<u8>, Vec<u8>>","parent":null,"children":[],"decl_id":null,"docs":" Sendable grayscale image buffer\n","sig":null,"attributes":[{"value":"/ Sendable grayscale image buffer","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\buffer.rs","byte_start":334951,"byte_end":334986,"line_start":1295,"line_end":1295,"column_start":1,"column_end":36}}]},{"kind":"Type","id":{"krate":0,"index":1483},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\buffer.rs","byte_start":335101,"byte_end":335115,"line_start":1298,"line_end":1298,"column_start":10,"column_end":24},"name":"GrayAlphaImage","qualname":"::buffer_::GrayAlphaImage","value":"ImageBuffer<LumaA<u8>, Vec<u8>>","parent":null,"children":[],"decl_id":null,"docs":" Sendable grayscale + alpha channel image buffer\n","sig":null,"attributes":[{"value":"/ Sendable grayscale + alpha channel image buffer","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\buffer.rs","byte_start":335040,"byte_end":335091,"line_start":1297,"line_end":1297,"column_start":1,"column_end":52}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2660},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\color.rs","byte_start":343885,"byte_end":343887,"line_start":11,"line_end":11,"column_start":5,"column_end":7},"name":"L8","qualname":"::color::ColorType::L8","value":"ColorType::L8","parent":{"krate":0,"index":2659},"children":[],"decl_id":null,"docs":" Pixel is 8-bit luminance\n","sig":null,"attributes":[{"value":"/ Pixel is 8-bit luminance","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\color.rs","byte_start":343852,"byte_end":343880,"line_start":10,"line_end":10,"column_start":5,"column_end":33}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2662},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\color.rs","byte_start":343948,"byte_end":343951,"line_start":13,"line_end":13,"column_start":5,"column_end":8},"name":"La8","qualname":"::color::ColorType::La8","value":"ColorType::La8","parent":{"krate":0,"index":2659},"children":[],"decl_id":null,"docs":" Pixel is 8-bit luminance with an alpha channel\n","sig":null,"attributes":[{"value":"/ Pixel is 8-bit luminance with an alpha channel","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\color.rs","byte_start":343893,"byte_end":343943,"line_start":12,"line_end":12,"column_start":5,"column_end":55}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2664},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\color.rs","byte_start":344006,"byte_end":344010,"line_start":15,"line_end":15,"column_start":5,"column_end":9},"name":"Rgb8","qualname":"::color::ColorType::Rgb8","value":"ColorType::Rgb8","parent":{"krate":0,"index":2659},"children":[],"decl_id":null,"docs":" Pixel contains 8-bit R, G and B channels\n","sig":null,"attributes":[{"value":"/ Pixel contains 8-bit R, G and B channels","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\color.rs","byte_start":343957,"byte_end":344001,"line_start":14,"line_end":14,"column_start":5,"column_end":49}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2666},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\color.rs","byte_start":344065,"byte_end":344070,"line_start":17,"line_end":17,"column_start":5,"column_end":10},"name":"Rgba8","qualname":"::color::ColorType::Rgba8","value":"ColorType::Rgba8","parent":{"krate":0,"index":2659},"children":[],"decl_id":null,"docs":" Pixel is 8-bit RGB with an alpha channel\n","sig":null,"attributes":[{"value":"/ Pixel is 8-bit RGB with an alpha channel","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\color.rs","byte_start":344016,"byte_end":344060,"line_start":16,"line_end":16,"column_start":5,"column_end":49}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2668},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\color.rs","byte_start":344111,"byte_end":344114,"line_start":20,"line_end":20,"column_start":5,"column_end":8},"name":"L16","qualname":"::color::ColorType::L16","value":"ColorType::L16","parent":{"krate":0,"index":2659},"children":[],"decl_id":null,"docs":" Pixel is 16-bit luminance\n","sig":null,"attributes":[{"value":"/ Pixel is 16-bit luminance","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\color.rs","byte_start":344077,"byte_end":344106,"line_start":19,"line_end":19,"column_start":5,"column_end":34}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2670},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\color.rs","byte_start":344176,"byte_end":344180,"line_start":22,"line_end":22,"column_start":5,"column_end":9},"name":"La16","qualname":"::color::ColorType::La16","value":"ColorType::La16","parent":{"krate":0,"index":2659},"children":[],"decl_id":null,"docs":" Pixel is 16-bit luminance with an alpha channel\n","sig":null,"attributes":[{"value":"/ Pixel is 16-bit luminance with an alpha channel","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\color.rs","byte_start":344120,"byte_end":344171,"line_start":21,"line_end":21,"column_start":5,"column_end":56}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2672},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\color.rs","byte_start":344214,"byte_end":344219,"line_start":24,"line_end":24,"column_start":5,"column_end":10},"name":"Rgb16","qualname":"::color::ColorType::Rgb16","value":"ColorType::Rgb16","parent":{"krate":0,"index":2659},"children":[],"decl_id":null,"docs":" Pixel is 16-bit RGB\n","sig":null,"attributes":[{"value":"/ Pixel is 16-bit RGB","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\color.rs","byte_start":344186,"byte_end":344209,"line_start":23,"line_end":23,"column_start":5,"column_end":28}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2674},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\color.rs","byte_start":344254,"byte_end":344260,"line_start":26,"line_end":26,"column_start":5,"column_end":11},"name":"Rgba16","qualname":"::color::ColorType::Rgba16","value":"ColorType::Rgba16","parent":{"krate":0,"index":2659},"children":[],"decl_id":null,"docs":" Pixel is 16-bit RGBA\n","sig":null,"attributes":[{"value":"/ Pixel is 16-bit RGBA","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\color.rs","byte_start":344225,"byte_end":344249,"line_start":25,"line_end":25,"column_start":5,"column_end":29}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2676},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\color.rs","byte_start":344316,"byte_end":344320,"line_start":29,"line_end":29,"column_start":5,"column_end":9},"name":"Bgr8","qualname":"::color::ColorType::Bgr8","value":"ColorType::Bgr8","parent":{"krate":0,"index":2659},"children":[],"decl_id":null,"docs":" Pixel contains 8-bit B, G and R channels\n","sig":null,"attributes":[{"value":"/ Pixel contains 8-bit B, G and R channels","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\color.rs","byte_start":344267,"byte_end":344311,"line_start":28,"line_end":28,"column_start":5,"column_end":49}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2678},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\color.rs","byte_start":344375,"byte_end":344380,"line_start":31,"line_end":31,"column_start":5,"column_end":10},"name":"Bgra8","qualname":"::color::ColorType::Bgra8","value":"ColorType::Bgra8","parent":{"krate":0,"index":2659},"children":[],"decl_id":null,"docs":" Pixel is 8-bit BGR with an alpha channel\n","sig":null,"attributes":[{"value":"/ Pixel is 8-bit BGR with an alpha channel","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\color.rs","byte_start":344326,"byte_end":344370,"line_start":30,"line_end":30,"column_start":5,"column_end":49}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2680},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\color.rs","byte_start":344406,"byte_end":344421,"line_start":34,"line_end":34,"column_start":5,"column_end":20},"name":"__NonExhaustive","qualname":"::color::ColorType::__NonExhaustive","value":"ColorType::__NonExhaustive(crate::utils::NonExhaustiveMarker)","parent":{"krate":0,"index":2659},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":2659},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\color.rs","byte_start":343836,"byte_end":343845,"line_start":9,"line_end":9,"column_start":10,"column_end":19},"name":"ColorType","qualname":"::color::ColorType","value":"pub enum ColorType {\n\n    /// Pixel is 8-bit luminance\n    L8,\n\n    /// Pixel is 8-bit luminance with an alpha channel\n    La8,\n\n    /// Pixel contains 8-bit R, G and B channels\n    Rgb8,\n\n    /// Pixel is 8-bit RGB with an alpha channel\n    Rgba8,\n\n    /// Pixel is 16-bit luminance\n    L16,\n\n    /// Pixel is 16-bit luminance with an alpha channel\n    La16,\n\n    /// Pixel is 16-bit RGB\n    Rgb16,\n\n    /// Pixel is 16-bit RGBA\n    Rgba16,\n\n    /// Pixel contains 8-bit B, G and R channels\n    Bgr8,\n\n    /// Pixel is 8-bit BGR with an alpha channel\n    Bgra8,\n\n    #[doc(hidden)]\n    __NonExhaustive(crate::utils::NonExhaustiveMarker),\n}","parent":null,"children":[{"krate":0,"index":2660},{"krate":0,"index":2662},{"krate":0,"index":2664},{"krate":0,"index":2666},{"krate":0,"index":2668},{"krate":0,"index":2670},{"krate":0,"index":2672},{"krate":0,"index":2674},{"krate":0,"index":2676},{"krate":0,"index":2678},{"krate":0,"index":2680}],"decl_id":null,"docs":" An enumeration over supported color types and bit depths\n","sig":null,"attributes":[{"value":"/ An enumeration over supported color types and bit depths","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\color.rs","byte_start":343715,"byte_end":343775,"line_start":7,"line_end":7,"column_start":1,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":1502},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\color.rs","byte_start":344569,"byte_end":344584,"line_start":39,"line_end":39,"column_start":12,"column_end":27},"name":"bytes_per_pixel","qualname":"<ColorType>::bytes_per_pixel","value":"pub fn bytes_per_pixel(Self) -> u8","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of bytes contained in a pixel of `ColorType` ```c```\n","sig":null,"attributes":[{"value":"/ Returns the number of bytes contained in a pixel of `ColorType` ```c```","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\color.rs","byte_start":344482,"byte_end":344557,"line_start":38,"line_end":38,"column_start":5,"column_end":80}}]},{"kind":"Method","id":{"krate":0,"index":1503},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\color.rs","byte_start":345047,"byte_end":345056,"line_start":52,"line_end":52,"column_start":12,"column_end":21},"name":"has_alpha","qualname":"<ColorType>::has_alpha","value":"pub fn has_alpha(Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns if there is an alpha channel.\n","sig":null,"attributes":[{"value":"/ Returns if there is an alpha channel.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\color.rs","byte_start":344994,"byte_end":345035,"line_start":51,"line_end":51,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":1505},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\color.rs","byte_start":345395,"byte_end":345404,"line_start":62,"line_end":62,"column_start":12,"column_end":21},"name":"has_color","qualname":"<ColorType>::has_color","value":"pub fn has_color(Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns false if the color scheme is grayscale, true otherwise.\n","sig":null,"attributes":[{"value":"/ Returns false if the color scheme is grayscale, true otherwise.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\color.rs","byte_start":345316,"byte_end":345383,"line_start":61,"line_end":61,"column_start":5,"column_end":72}}]},{"kind":"Method","id":{"krate":0,"index":1507},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\color.rs","byte_start":345798,"byte_end":345812,"line_start":73,"line_end":73,"column_start":12,"column_end":26},"name":"bits_per_pixel","qualname":"<ColorType>::bits_per_pixel","value":"pub fn bits_per_pixel(Self) -> u16","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of bits contained in a pixel of `ColorType` ```c``` (which will always be\n a multiple of 8).\n","sig":null,"attributes":[{"value":"/ Returns the number of bits contained in a pixel of `ColorType` ```c``` (which will always be","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\color.rs","byte_start":345664,"byte_end":345760,"line_start":71,"line_end":71,"column_start":5,"column_end":101}},{"value":"/ a multiple of 8).","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\color.rs","byte_start":345765,"byte_end":345786,"line_start":72,"line_end":72,"column_start":5,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":1508},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\color.rs","byte_start":345975,"byte_end":345988,"line_start":78,"line_end":78,"column_start":12,"column_end":25},"name":"channel_count","qualname":"<ColorType>::channel_count","value":"pub fn channel_count(Self) -> u8","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of color channels that make up this pixel\n","sig":null,"attributes":[{"value":"/ Returns the number of color channels that make up this pixel","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\color.rs","byte_start":345899,"byte_end":345963,"line_start":77,"line_end":77,"column_start":5,"column_end":69}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2699},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\color.rs","byte_start":346650,"byte_end":346652,"line_start":95,"line_end":95,"column_start":5,"column_end":7},"name":"L1","qualname":"::color::ExtendedColorType::L1","value":"ExtendedColorType::L1","parent":{"krate":0,"index":2698},"children":[],"decl_id":null,"docs":" Pixel is 1-bit luminance\n","sig":null,"attributes":[{"value":"/ Pixel is 1-bit luminance","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\color.rs","byte_start":346617,"byte_end":346645,"line_start":94,"line_end":94,"column_start":5,"column_end":33}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2701},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\color.rs","byte_start":346713,"byte_end":346716,"line_start":97,"line_end":97,"column_start":5,"column_end":8},"name":"La1","qualname":"::color::ExtendedColorType::La1","value":"ExtendedColorType::La1","parent":{"krate":0,"index":2698},"children":[],"decl_id":null,"docs":" Pixel is 1-bit luminance with an alpha channel\n","sig":null,"attributes":[{"value":"/ Pixel is 1-bit luminance with an alpha channel","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\color.rs","byte_start":346658,"byte_end":346708,"line_start":96,"line_end":96,"column_start":5,"column_end":55}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2703},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\color.rs","byte_start":346771,"byte_end":346775,"line_start":99,"line_end":99,"column_start":5,"column_end":9},"name":"Rgb1","qualname":"::color::ExtendedColorType::Rgb1","value":"ExtendedColorType::Rgb1","parent":{"krate":0,"index":2698},"children":[],"decl_id":null,"docs":" Pixel contains 1-bit R, G and B channels\n","sig":null,"attributes":[{"value":"/ Pixel contains 1-bit R, G and B channels","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\color.rs","byte_start":346722,"byte_end":346766,"line_start":98,"line_end":98,"column_start":5,"column_end":49}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2705},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\color.rs","byte_start":346830,"byte_end":346835,"line_start":101,"line_end":101,"column_start":5,"column_end":10},"name":"Rgba1","qualname":"::color::ExtendedColorType::Rgba1","value":"ExtendedColorType::Rgba1","parent":{"krate":0,"index":2698},"children":[],"decl_id":null,"docs":" Pixel is 1-bit RGB with an alpha channel\n","sig":null,"attributes":[{"value":"/ Pixel is 1-bit RGB with an alpha channel","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\color.rs","byte_start":346781,"byte_end":346825,"line_start":100,"line_end":100,"column_start":5,"column_end":49}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2707},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\color.rs","byte_start":346874,"byte_end":346876,"line_start":103,"line_end":103,"column_start":5,"column_end":7},"name":"L2","qualname":"::color::ExtendedColorType::L2","value":"ExtendedColorType::L2","parent":{"krate":0,"index":2698},"children":[],"decl_id":null,"docs":" Pixel is 2-bit luminance\n","sig":null,"attributes":[{"value":"/ Pixel is 2-bit luminance","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\color.rs","byte_start":346841,"byte_end":346869,"line_start":102,"line_end":102,"column_start":5,"column_end":33}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2709},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\color.rs","byte_start":346937,"byte_end":346940,"line_start":105,"line_end":105,"column_start":5,"column_end":8},"name":"La2","qualname":"::color::ExtendedColorType::La2","value":"ExtendedColorType::La2","parent":{"krate":0,"index":2698},"children":[],"decl_id":null,"docs":" Pixel is 2-bit luminance with an alpha channel\n","sig":null,"attributes":[{"value":"/ Pixel is 2-bit luminance with an alpha channel","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\color.rs","byte_start":346882,"byte_end":346932,"line_start":104,"line_end":104,"column_start":5,"column_end":55}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2711},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\color.rs","byte_start":346995,"byte_end":346999,"line_start":107,"line_end":107,"column_start":5,"column_end":9},"name":"Rgb2","qualname":"::color::ExtendedColorType::Rgb2","value":"ExtendedColorType::Rgb2","parent":{"krate":0,"index":2698},"children":[],"decl_id":null,"docs":" Pixel contains 2-bit R, G and B channels\n","sig":null,"attributes":[{"value":"/ Pixel contains 2-bit R, G and B channels","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\color.rs","byte_start":346946,"byte_end":346990,"line_start":106,"line_end":106,"column_start":5,"column_end":49}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2713},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\color.rs","byte_start":347054,"byte_end":347059,"line_start":109,"line_end":109,"column_start":5,"column_end":10},"name":"Rgba2","qualname":"::color::ExtendedColorType::Rgba2","value":"ExtendedColorType::Rgba2","parent":{"krate":0,"index":2698},"children":[],"decl_id":null,"docs":" Pixel is 2-bit RGB with an alpha channel\n","sig":null,"attributes":[{"value":"/ Pixel is 2-bit RGB with an alpha channel","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\color.rs","byte_start":347005,"byte_end":347049,"line_start":108,"line_end":108,"column_start":5,"column_end":49}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2715},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\color.rs","byte_start":347098,"byte_end":347100,"line_start":111,"line_end":111,"column_start":5,"column_end":7},"name":"L4","qualname":"::color::ExtendedColorType::L4","value":"ExtendedColorType::L4","parent":{"krate":0,"index":2698},"children":[],"decl_id":null,"docs":" Pixel is 4-bit luminance\n","sig":null,"attributes":[{"value":"/ Pixel is 4-bit luminance","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\color.rs","byte_start":347065,"byte_end":347093,"line_start":110,"line_end":110,"column_start":5,"column_end":33}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2717},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\color.rs","byte_start":347161,"byte_end":347164,"line_start":113,"line_end":113,"column_start":5,"column_end":8},"name":"La4","qualname":"::color::ExtendedColorType::La4","value":"ExtendedColorType::La4","parent":{"krate":0,"index":2698},"children":[],"decl_id":null,"docs":" Pixel is 4-bit luminance with an alpha channel\n","sig":null,"attributes":[{"value":"/ Pixel is 4-bit luminance with an alpha channel","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\color.rs","byte_start":347106,"byte_end":347156,"line_start":112,"line_end":112,"column_start":5,"column_end":55}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2719},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\color.rs","byte_start":347219,"byte_end":347223,"line_start":115,"line_end":115,"column_start":5,"column_end":9},"name":"Rgb4","qualname":"::color::ExtendedColorType::Rgb4","value":"ExtendedColorType::Rgb4","parent":{"krate":0,"index":2698},"children":[],"decl_id":null,"docs":" Pixel contains 4-bit R, G and B channels\n","sig":null,"attributes":[{"value":"/ Pixel contains 4-bit R, G and B channels","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\color.rs","byte_start":347170,"byte_end":347214,"line_start":114,"line_end":114,"column_start":5,"column_end":49}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2721},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\color.rs","byte_start":347278,"byte_end":347283,"line_start":117,"line_end":117,"column_start":5,"column_end":10},"name":"Rgba4","qualname":"::color::ExtendedColorType::Rgba4","value":"ExtendedColorType::Rgba4","parent":{"krate":0,"index":2698},"children":[],"decl_id":null,"docs":" Pixel is 4-bit RGB with an alpha channel\n","sig":null,"attributes":[{"value":"/ Pixel is 4-bit RGB with an alpha channel","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\color.rs","byte_start":347229,"byte_end":347273,"line_start":116,"line_end":116,"column_start":5,"column_end":49}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2723},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\color.rs","byte_start":347322,"byte_end":347324,"line_start":119,"line_end":119,"column_start":5,"column_end":7},"name":"L8","qualname":"::color::ExtendedColorType::L8","value":"ExtendedColorType::L8","parent":{"krate":0,"index":2698},"children":[],"decl_id":null,"docs":" Pixel is 8-bit luminance\n","sig":null,"attributes":[{"value":"/ Pixel is 8-bit luminance","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\color.rs","byte_start":347289,"byte_end":347317,"line_start":118,"line_end":118,"column_start":5,"column_end":33}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2725},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\color.rs","byte_start":347385,"byte_end":347388,"line_start":121,"line_end":121,"column_start":5,"column_end":8},"name":"La8","qualname":"::color::ExtendedColorType::La8","value":"ExtendedColorType::La8","parent":{"krate":0,"index":2698},"children":[],"decl_id":null,"docs":" Pixel is 8-bit luminance with an alpha channel\n","sig":null,"attributes":[{"value":"/ Pixel is 8-bit luminance with an alpha channel","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\color.rs","byte_start":347330,"byte_end":347380,"line_start":120,"line_end":120,"column_start":5,"column_end":55}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2727},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\color.rs","byte_start":347443,"byte_end":347447,"line_start":123,"line_end":123,"column_start":5,"column_end":9},"name":"Rgb8","qualname":"::color::ExtendedColorType::Rgb8","value":"ExtendedColorType::Rgb8","parent":{"krate":0,"index":2698},"children":[],"decl_id":null,"docs":" Pixel contains 8-bit R, G and B channels\n","sig":null,"attributes":[{"value":"/ Pixel contains 8-bit R, G and B channels","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\color.rs","byte_start":347394,"byte_end":347438,"line_start":122,"line_end":122,"column_start":5,"column_end":49}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2729},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\color.rs","byte_start":347502,"byte_end":347507,"line_start":125,"line_end":125,"column_start":5,"column_end":10},"name":"Rgba8","qualname":"::color::ExtendedColorType::Rgba8","value":"ExtendedColorType::Rgba8","parent":{"krate":0,"index":2698},"children":[],"decl_id":null,"docs":" Pixel is 8-bit RGB with an alpha channel\n","sig":null,"attributes":[{"value":"/ Pixel is 8-bit RGB with an alpha channel","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\color.rs","byte_start":347453,"byte_end":347497,"line_start":124,"line_end":124,"column_start":5,"column_end":49}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2731},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\color.rs","byte_start":347547,"byte_end":347550,"line_start":127,"line_end":127,"column_start":5,"column_end":8},"name":"L16","qualname":"::color::ExtendedColorType::L16","value":"ExtendedColorType::L16","parent":{"krate":0,"index":2698},"children":[],"decl_id":null,"docs":" Pixel is 16-bit luminance\n","sig":null,"attributes":[{"value":"/ Pixel is 16-bit luminance","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\color.rs","byte_start":347513,"byte_end":347542,"line_start":126,"line_end":126,"column_start":5,"column_end":34}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2733},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\color.rs","byte_start":347612,"byte_end":347616,"line_start":129,"line_end":129,"column_start":5,"column_end":9},"name":"La16","qualname":"::color::ExtendedColorType::La16","value":"ExtendedColorType::La16","parent":{"krate":0,"index":2698},"children":[],"decl_id":null,"docs":" Pixel is 16-bit luminance with an alpha channel\n","sig":null,"attributes":[{"value":"/ Pixel is 16-bit luminance with an alpha channel","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\color.rs","byte_start":347556,"byte_end":347607,"line_start":128,"line_end":128,"column_start":5,"column_end":56}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2735},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\color.rs","byte_start":347672,"byte_end":347677,"line_start":131,"line_end":131,"column_start":5,"column_end":10},"name":"Rgb16","qualname":"::color::ExtendedColorType::Rgb16","value":"ExtendedColorType::Rgb16","parent":{"krate":0,"index":2698},"children":[],"decl_id":null,"docs":" Pixel contains 16-bit R, G and B channels\n","sig":null,"attributes":[{"value":"/ Pixel contains 16-bit R, G and B channels","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\color.rs","byte_start":347622,"byte_end":347667,"line_start":130,"line_end":130,"column_start":5,"column_end":50}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2737},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\color.rs","byte_start":347733,"byte_end":347739,"line_start":133,"line_end":133,"column_start":5,"column_end":11},"name":"Rgba16","qualname":"::color::ExtendedColorType::Rgba16","value":"ExtendedColorType::Rgba16","parent":{"krate":0,"index":2698},"children":[],"decl_id":null,"docs":" Pixel is 16-bit RGB with an alpha channel\n","sig":null,"attributes":[{"value":"/ Pixel is 16-bit RGB with an alpha channel","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\color.rs","byte_start":347683,"byte_end":347728,"line_start":132,"line_end":132,"column_start":5,"column_end":50}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2739},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\color.rs","byte_start":347794,"byte_end":347798,"line_start":135,"line_end":135,"column_start":5,"column_end":9},"name":"Bgr8","qualname":"::color::ExtendedColorType::Bgr8","value":"ExtendedColorType::Bgr8","parent":{"krate":0,"index":2698},"children":[],"decl_id":null,"docs":" Pixel contains 8-bit B, G and R channels\n","sig":null,"attributes":[{"value":"/ Pixel contains 8-bit B, G and R channels","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\color.rs","byte_start":347745,"byte_end":347789,"line_start":134,"line_end":134,"column_start":5,"column_end":49}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2741},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\color.rs","byte_start":347853,"byte_end":347858,"line_start":137,"line_end":137,"column_start":5,"column_end":10},"name":"Bgra8","qualname":"::color::ExtendedColorType::Bgra8","value":"ExtendedColorType::Bgra8","parent":{"krate":0,"index":2698},"children":[],"decl_id":null,"docs":" Pixel is 8-bit BGR with an alpha channel\n","sig":null,"attributes":[{"value":"/ Pixel is 8-bit BGR with an alpha channel","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\color.rs","byte_start":347804,"byte_end":347848,"line_start":136,"line_end":136,"column_start":5,"column_end":49}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2743},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\color.rs","byte_start":348087,"byte_end":348094,"line_start":142,"line_end":142,"column_start":5,"column_end":12},"name":"Unknown","qualname":"::color::ExtendedColorType::Unknown","value":"ExtendedColorType::Unknown(u8)","parent":{"krate":0,"index":2698},"children":[],"decl_id":null,"docs":" Pixel is of unknown color type with the specified bits per pixel. This can apply to pixels\n which are associated with an external palette. In that case, the pixel value is an index\n into the palette.\n","sig":null,"attributes":[{"value":"/ Pixel is of unknown color type with the specified bits per pixel. This can apply to pixels","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\color.rs","byte_start":347865,"byte_end":347959,"line_start":139,"line_end":139,"column_start":5,"column_end":99}},{"value":"/ which are associated with an external palette. In that case, the pixel value is an index","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\color.rs","byte_start":347964,"byte_end":348056,"line_start":140,"line_end":140,"column_start":5,"column_end":97}},{"value":"/ into the palette.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\color.rs","byte_start":348061,"byte_end":348082,"line_start":141,"line_end":141,"column_start":5,"column_end":26}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2746},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\color.rs","byte_start":348124,"byte_end":348139,"line_start":145,"line_end":145,"column_start":5,"column_end":20},"name":"__NonExhaustive","qualname":"::color::ExtendedColorType::__NonExhaustive","value":"ExtendedColorType::__NonExhaustive(crate::utils::NonExhaustiveMarker)","parent":{"krate":0,"index":2698},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":2698},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\color.rs","byte_start":346593,"byte_end":346610,"line_start":93,"line_end":93,"column_start":10,"column_end":27},"name":"ExtendedColorType","qualname":"::color::ExtendedColorType","value":"pub enum ExtendedColorType {\n\n    /// Pixel is 1-bit luminance\n    L1,\n\n    /// Pixel is 1-bit luminance with an alpha channel\n    La1,\n\n    /// Pixel contains 1-bit R, G and B channels\n    Rgb1,\n\n    /// Pixel is 1-bit RGB with an alpha channel\n    Rgba1,\n\n    /// Pixel is 2-bit luminance\n    L2,\n\n    /// Pixel is 2-bit luminance with an alpha channel\n    La2,\n\n    /// Pixel contains 2-bit R, G and B channels\n    Rgb2,\n\n    /// Pixel is 2-bit RGB with an alpha channel\n    Rgba2,\n\n    /// Pixel is 4-bit luminance\n    L4,\n\n    /// Pixel is 4-bit luminance with an alpha channel\n    La4,\n\n    /// Pixel contains 4-bit R, G and B channels\n    Rgb4,\n\n    /// Pixel is 4-bit RGB with an alpha channel\n    Rgba4,\n\n    /// Pixel is 8-bit luminance\n    L8,\n\n    /// Pixel is 8-bit luminance with an alpha channel\n    La8,\n\n    /// Pixel contains 8-bit R, G and B channels\n    Rgb8,\n\n    /// Pixel is 8-bit RGB with an alpha channel\n    Rgba8,\n\n    /// Pixel is 16-bit luminance\n    L16,\n\n    /// Pixel is 16-bit luminance with an alpha channel\n    La16,\n\n    /// Pixel contains 16-bit R, G and B channels\n    Rgb16,\n\n    /// Pixel is 16-bit RGB with an alpha channel\n    Rgba16,\n\n    /// Pixel contains 8-bit B, G and R channels\n    Bgr8,\n\n    /// Pixel is 8-bit BGR with an alpha channel\n    Bgra8,\n\n    /// Pixel is of unknown color type with the specified bits per pixel. This can apply to pixels\n    /// which are associated with an external palette. In that case, the pixel value is an index\n    /// into the palette.\n    Unknown(u8),\n\n    #[doc(hidden)]\n    __NonExhaustive(crate::utils::NonExhaustiveMarker),\n}","parent":null,"children":[{"krate":0,"index":2699},{"krate":0,"index":2701},{"krate":0,"index":2703},{"krate":0,"index":2705},{"krate":0,"index":2707},{"krate":0,"index":2709},{"krate":0,"index":2711},{"krate":0,"index":2713},{"krate":0,"index":2715},{"krate":0,"index":2717},{"krate":0,"index":2719},{"krate":0,"index":2721},{"krate":0,"index":2723},{"krate":0,"index":2725},{"krate":0,"index":2727},{"krate":0,"index":2729},{"krate":0,"index":2731},{"krate":0,"index":2733},{"krate":0,"index":2735},{"krate":0,"index":2737},{"krate":0,"index":2739},{"krate":0,"index":2741},{"krate":0,"index":2743},{"krate":0,"index":2746}],"decl_id":null,"docs":" An enumeration of color types encountered in image formats.","sig":null,"attributes":[{"value":"/ An enumeration of color types encountered in image formats.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\color.rs","byte_start":346086,"byte_end":346149,"line_start":84,"line_end":84,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\color.rs","byte_start":346150,"byte_end":346153,"line_start":85,"line_end":85,"column_start":1,"column_end":4}},{"value":"/ This is not exhaustive over all existing image formats but should be granular enough to allow","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\color.rs","byte_start":346154,"byte_end":346251,"line_start":86,"line_end":86,"column_start":1,"column_end":98}},{"value":"/ round tripping of decoding and encoding as much as possible. The variants will be extended as","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\color.rs","byte_start":346252,"byte_end":346349,"line_start":87,"line_end":87,"column_start":1,"column_end":98}},{"value":"/ necessary to enable this.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\color.rs","byte_start":346350,"byte_end":346379,"line_start":88,"line_end":88,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\color.rs","byte_start":346380,"byte_end":346383,"line_start":89,"line_end":89,"column_start":1,"column_end":4}},{"value":"/ Another purpose is to advise users of a rough estimate of the accuracy and effort of the","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\color.rs","byte_start":346384,"byte_end":346476,"line_start":90,"line_end":90,"column_start":1,"column_end":93}},{"value":"/ decoding from and encoding to such an image format.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\color.rs","byte_start":346477,"byte_end":346532,"line_start":91,"line_end":91,"column_start":1,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":1510},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\color.rs","byte_start":348422,"byte_end":348435,"line_start":153,"line_end":153,"column_start":12,"column_end":25},"name":"channel_count","qualname":"<ExtendedColorType>::channel_count","value":"pub fn channel_count(Self) -> u8","parent":null,"children":[],"decl_id":null,"docs":" Get the number of channels for colors of this type.","sig":null,"attributes":[{"value":"/ Get the number of channels for colors of this type.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\color.rs","byte_start":348208,"byte_end":348263,"line_start":149,"line_end":149,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\color.rs","byte_start":348268,"byte_end":348271,"line_start":150,"line_end":150,"column_start":5,"column_end":8}},{"value":"/ Note that the `Unknown` variant returns a value of `1` since pixels can only be treated as","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\color.rs","byte_start":348276,"byte_end":348370,"line_start":151,"line_end":151,"column_start":5,"column_end":99}},{"value":"/ an opaque datum by the library.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\color.rs","byte_start":348375,"byte_end":348410,"line_start":152,"line_end":152,"column_start":5,"column_end":40}}]},{"kind":"Struct","id":{"krate":0,"index":3064},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\color.rs","byte_start":354803,"byte_end":354806,"line_start":373,"line_end":373,"column_start":5,"column_end":8},"name":"Rgb","qualname":"::color::Rgb","value":"","parent":null,"children":[],"decl_id":null,"docs":"RGB colors\n","sig":null,"attributes":[{"value":"repr(C)","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\color.rs","byte_start":350549,"byte_end":350559,"line_start":215,"line_end":215,"column_start":1,"column_end":11}},{"value":"allow(missing_docs)","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\color.rs","byte_start":350560,"byte_end":350582,"line_start":216,"line_end":216,"column_start":1,"column_end":23}}]},{"kind":"Struct","id":{"krate":0,"index":3093},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\color.rs","byte_start":354883,"byte_end":354886,"line_start":374,"line_end":374,"column_start":5,"column_end":8},"name":"Bgr","qualname":"::color::Bgr","value":"","parent":null,"children":[],"decl_id":null,"docs":"BGR colors\n","sig":null,"attributes":[{"value":"repr(C)","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\color.rs","byte_start":350549,"byte_end":350559,"line_start":215,"line_end":215,"column_start":1,"column_end":11}},{"value":"allow(missing_docs)","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\color.rs","byte_start":350560,"byte_end":350582,"line_start":216,"line_end":216,"column_start":1,"column_end":23}}]},{"kind":"Struct","id":{"krate":0,"index":3122},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\color.rs","byte_start":354962,"byte_end":354966,"line_start":375,"line_end":375,"column_start":5,"column_end":9},"name":"Luma","qualname":"::color::Luma","value":"","parent":null,"children":[],"decl_id":null,"docs":"Grayscale colors\n","sig":null,"attributes":[{"value":"repr(C)","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\color.rs","byte_start":350549,"byte_end":350559,"line_start":215,"line_end":215,"column_start":1,"column_end":11}},{"value":"allow(missing_docs)","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\color.rs","byte_start":350560,"byte_end":350582,"line_start":216,"line_end":216,"column_start":1,"column_end":23}}]},{"kind":"Struct","id":{"krate":0,"index":3151},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\color.rs","byte_start":355043,"byte_end":355047,"line_start":376,"line_end":376,"column_start":5,"column_end":9},"name":"Rgba","qualname":"::color::Rgba","value":"","parent":null,"children":[],"decl_id":null,"docs":"RGB colors + alpha channel\n","sig":null,"attributes":[{"value":"repr(C)","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\color.rs","byte_start":350549,"byte_end":350559,"line_start":215,"line_end":215,"column_start":1,"column_end":11}},{"value":"allow(missing_docs)","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\color.rs","byte_start":350560,"byte_end":350582,"line_start":216,"line_end":216,"column_start":1,"column_end":23}}]},{"kind":"Struct","id":{"krate":0,"index":3180},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\color.rs","byte_start":355143,"byte_end":355147,"line_start":377,"line_end":377,"column_start":5,"column_end":9},"name":"Bgra","qualname":"::color::Bgra","value":"","parent":null,"children":[],"decl_id":null,"docs":"BGR colors + alpha channel\n","sig":null,"attributes":[{"value":"repr(C)","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\color.rs","byte_start":350549,"byte_end":350559,"line_start":215,"line_end":215,"column_start":1,"column_end":11}},{"value":"allow(missing_docs)","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\color.rs","byte_start":350560,"byte_end":350582,"line_start":216,"line_end":216,"column_start":1,"column_end":23}}]},{"kind":"Struct","id":{"krate":0,"index":3209},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\color.rs","byte_start":355242,"byte_end":355247,"line_start":378,"line_end":378,"column_start":5,"column_end":10},"name":"LumaA","qualname":"::color::LumaA","value":"","parent":null,"children":[],"decl_id":null,"docs":"Grayscale colors + alpha channel\n","sig":null,"attributes":[{"value":"repr(C)","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\color.rs","byte_start":350549,"byte_end":350559,"line_start":215,"line_end":215,"column_start":1,"column_end":11}},{"value":"allow(missing_docs)","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\color.rs","byte_start":350560,"byte_end":350582,"line_start":216,"line_end":216,"column_start":1,"column_end":23}}]},{"kind":"Trait","id":{"krate":0,"index":1514},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\color.rs","byte_start":355414,"byte_end":355423,"line_start":382,"line_end":382,"column_start":11,"column_end":20},"name":"FromColor","qualname":"::color::FromColor","value":"FromColor<Other>","parent":null,"children":[{"krate":0,"index":1516}],"decl_id":null,"docs":" Provides color conversions for the different pixel types.\n","sig":null,"attributes":[{"value":"/ Provides color conversions for the different pixel types.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\color.rs","byte_start":355342,"byte_end":355403,"line_start":381,"line_end":381,"column_start":1,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":1516},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\color.rs","byte_start":355513,"byte_end":355523,"line_start":384,"line_end":384,"column_start":8,"column_end":18},"name":"from_color","qualname":"::color::FromColor::from_color","value":"pub fn from_color(&mut Self, &Other)","parent":{"krate":0,"index":1514},"children":[],"decl_id":null,"docs":" Changes `self` to represent `Other` in the color space of `Self`\n","sig":null,"attributes":[{"value":"/ Changes `self` to represent `Other` in the color space of `Self`","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\color.rs","byte_start":355437,"byte_end":355505,"line_start":383,"line_end":383,"column_start":5,"column_end":73}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3290},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\dynimage.rs","byte_start":389265,"byte_end":389275,"line_start":45,"line_end":45,"column_start":5,"column_end":15},"name":"ImageLuma8","qualname":"::dynimage::DynamicImage::ImageLuma8","value":"DynamicImage::ImageLuma8(GrayImage)","parent":{"krate":0,"index":3289},"children":[],"decl_id":null,"docs":" Each pixel in this image is 8-bit Luma\n","sig":null,"attributes":[{"value":"/ Each pixel in this image is 8-bit Luma","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\dynimage.rs","byte_start":389218,"byte_end":389260,"line_start":44,"line_end":44,"column_start":5,"column_end":47}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3293},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\dynimage.rs","byte_start":389351,"byte_end":389362,"line_start":48,"line_end":48,"column_start":5,"column_end":16},"name":"ImageLumaA8","qualname":"::dynimage::DynamicImage::ImageLumaA8","value":"DynamicImage::ImageLumaA8(GrayAlphaImage)","parent":{"krate":0,"index":3289},"children":[],"decl_id":null,"docs":" Each pixel in this image is 8-bit Luma with alpha\n","sig":null,"attributes":[{"value":"/ Each pixel in this image is 8-bit Luma with alpha","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\dynimage.rs","byte_start":389293,"byte_end":389346,"line_start":47,"line_end":47,"column_start":5,"column_end":58}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3296},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\dynimage.rs","byte_start":389431,"byte_end":389440,"line_start":51,"line_end":51,"column_start":5,"column_end":14},"name":"ImageRgb8","qualname":"::dynimage::DynamicImage::ImageRgb8","value":"DynamicImage::ImageRgb8(RgbImage)","parent":{"krate":0,"index":3289},"children":[],"decl_id":null,"docs":" Each pixel in this image is 8-bit Rgb\n","sig":null,"attributes":[{"value":"/ Each pixel in this image is 8-bit Rgb","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\dynimage.rs","byte_start":389385,"byte_end":389426,"line_start":50,"line_end":50,"column_start":5,"column_end":46}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3299},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\dynimage.rs","byte_start":389514,"byte_end":389524,"line_start":54,"line_end":54,"column_start":5,"column_end":15},"name":"ImageRgba8","qualname":"::dynimage::DynamicImage::ImageRgba8","value":"DynamicImage::ImageRgba8(RgbaImage)","parent":{"krate":0,"index":3289},"children":[],"decl_id":null,"docs":" Each pixel in this image is 8-bit Rgb with alpha\n","sig":null,"attributes":[{"value":"/ Each pixel in this image is 8-bit Rgb with alpha","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\dynimage.rs","byte_start":389457,"byte_end":389509,"line_start":53,"line_end":53,"column_start":5,"column_end":57}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3302},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\dynimage.rs","byte_start":389588,"byte_end":389597,"line_start":57,"line_end":57,"column_start":5,"column_end":14},"name":"ImageBgr8","qualname":"::dynimage::DynamicImage::ImageBgr8","value":"DynamicImage::ImageBgr8(BgrImage)","parent":{"krate":0,"index":3289},"children":[],"decl_id":null,"docs":" Each pixel in this image is 8-bit Bgr\n","sig":null,"attributes":[{"value":"/ Each pixel in this image is 8-bit Bgr","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\dynimage.rs","byte_start":389542,"byte_end":389583,"line_start":56,"line_end":56,"column_start":5,"column_end":46}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3305},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\dynimage.rs","byte_start":389671,"byte_end":389681,"line_start":60,"line_end":60,"column_start":5,"column_end":15},"name":"ImageBgra8","qualname":"::dynimage::DynamicImage::ImageBgra8","value":"DynamicImage::ImageBgra8(BgraImage)","parent":{"krate":0,"index":3289},"children":[],"decl_id":null,"docs":" Each pixel in this image is 8-bit Bgr with alpha\n","sig":null,"attributes":[{"value":"/ Each pixel in this image is 8-bit Bgr with alpha","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\dynimage.rs","byte_start":389614,"byte_end":389666,"line_start":59,"line_end":59,"column_start":5,"column_end":57}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3308},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\dynimage.rs","byte_start":389747,"byte_end":389758,"line_start":63,"line_end":63,"column_start":5,"column_end":16},"name":"ImageLuma16","qualname":"::dynimage::DynamicImage::ImageLuma16","value":"DynamicImage::ImageLuma16(Gray16Image)","parent":{"krate":0,"index":3289},"children":[],"decl_id":null,"docs":" Each pixel in this image is 16-bit Luma\n","sig":null,"attributes":[{"value":"/ Each pixel in this image is 16-bit Luma","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\dynimage.rs","byte_start":389699,"byte_end":389742,"line_start":62,"line_end":62,"column_start":5,"column_end":48}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3311},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\dynimage.rs","byte_start":389837,"byte_end":389849,"line_start":66,"line_end":66,"column_start":5,"column_end":17},"name":"ImageLumaA16","qualname":"::dynimage::DynamicImage::ImageLumaA16","value":"DynamicImage::ImageLumaA16(GrayAlpha16Image)","parent":{"krate":0,"index":3289},"children":[],"decl_id":null,"docs":" Each pixel in this image is 16-bit Luma with alpha\n","sig":null,"attributes":[{"value":"/ Each pixel in this image is 16-bit Luma with alpha","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\dynimage.rs","byte_start":389778,"byte_end":389832,"line_start":65,"line_end":65,"column_start":5,"column_end":59}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3314},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\dynimage.rs","byte_start":389921,"byte_end":389931,"line_start":69,"line_end":69,"column_start":5,"column_end":15},"name":"ImageRgb16","qualname":"::dynimage::DynamicImage::ImageRgb16","value":"DynamicImage::ImageRgb16(Rgb16Image)","parent":{"krate":0,"index":3289},"children":[],"decl_id":null,"docs":" Each pixel in this image is 16-bit Rgb\n","sig":null,"attributes":[{"value":"/ Each pixel in this image is 16-bit Rgb","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\dynimage.rs","byte_start":389874,"byte_end":389916,"line_start":68,"line_end":68,"column_start":5,"column_end":47}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3317},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\dynimage.rs","byte_start":390008,"byte_end":390019,"line_start":72,"line_end":72,"column_start":5,"column_end":16},"name":"ImageRgba16","qualname":"::dynimage::DynamicImage::ImageRgba16","value":"DynamicImage::ImageRgba16(Rgba16Image)","parent":{"krate":0,"index":3289},"children":[],"decl_id":null,"docs":" Each pixel in this image is 16-bit Rgb with alpha\n","sig":null,"attributes":[{"value":"/ Each pixel in this image is 16-bit Rgb with alpha","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\dynimage.rs","byte_start":389950,"byte_end":390003,"line_start":71,"line_end":71,"column_start":5,"column_end":58}}]},{"kind":"Enum","id":{"krate":0,"index":3289},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\dynimage.rs","byte_start":389199,"byte_end":389211,"line_start":43,"line_end":43,"column_start":10,"column_end":22},"name":"DynamicImage","qualname":"::dynimage::DynamicImage","value":"pub enum DynamicImage {\n\n    /// Each pixel in this image is 8-bit Luma\n    ImageLuma8(GrayImage),\n\n    /// Each pixel in this image is 8-bit Luma with alpha\n    ImageLumaA8(GrayAlphaImage),\n\n    /// Each pixel in this image is 8-bit Rgb\n    ImageRgb8(RgbImage),\n\n    /// Each pixel in this image is 8-bit Rgb with alpha\n    ImageRgba8(RgbaImage),\n\n    /// Each pixel in this image is 8-bit Bgr\n    ImageBgr8(BgrImage),\n\n    /// Each pixel in this image is 8-bit Bgr with alpha\n    ImageBgra8(BgraImage),\n\n    /// Each pixel in this image is 16-bit Luma\n    ImageLuma16(Gray16Image),\n\n    /// Each pixel in this image is 16-bit Luma with alpha\n    ImageLumaA16(GrayAlpha16Image),\n\n    /// Each pixel in this image is 16-bit Rgb\n    ImageRgb16(Rgb16Image),\n\n    /// Each pixel in this image is 16-bit Rgb with alpha\n    ImageRgba16(Rgba16Image),\n}","parent":null,"children":[{"krate":0,"index":3290},{"krate":0,"index":3293},{"krate":0,"index":3296},{"krate":0,"index":3299},{"krate":0,"index":3302},{"krate":0,"index":3305},{"krate":0,"index":3308},{"krate":0,"index":3311},{"krate":0,"index":3314},{"krate":0,"index":3317}],"decl_id":null,"docs":" A Dynamic Image\n","sig":null,"attributes":[{"value":"/ A Dynamic Image","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\dynimage.rs","byte_start":389125,"byte_end":389144,"line_start":41,"line_end":41,"column_start":1,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":1774},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\dynimage.rs","byte_start":394234,"byte_end":394243,"line_start":139,"line_end":139,"column_start":12,"column_end":21},"name":"new_luma8","qualname":"<DynamicImage>::new_luma8","value":"pub fn new_luma8(u32, u32) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Creates a dynamic image backed by a buffer of grey pixels.\n","sig":null,"attributes":[{"value":"/ Creates a dynamic image backed by a buffer of grey pixels.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\dynimage.rs","byte_start":394160,"byte_end":394222,"line_start":138,"line_end":138,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":1775},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\dynimage.rs","byte_start":394446,"byte_end":394457,"line_start":145,"line_end":145,"column_start":12,"column_end":23},"name":"new_luma_a8","qualname":"<DynamicImage>::new_luma_a8","value":"pub fn new_luma_a8(u32, u32) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Creates a dynamic image backed by a buffer of grey\n pixels with transparency.\n","sig":null,"attributes":[{"value":"/ Creates a dynamic image backed by a buffer of grey","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\dynimage.rs","byte_start":394346,"byte_end":394400,"line_start":143,"line_end":143,"column_start":5,"column_end":59}},{"value":"/ pixels with transparency.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\dynimage.rs","byte_start":394405,"byte_end":394434,"line_start":144,"line_end":144,"column_start":5,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":1776},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\dynimage.rs","byte_start":394634,"byte_end":394642,"line_start":150,"line_end":150,"column_start":12,"column_end":20},"name":"new_rgb8","qualname":"<DynamicImage>::new_rgb8","value":"pub fn new_rgb8(u32, u32) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Creates a dynamic image backed by a buffer of RGB pixels.\n","sig":null,"attributes":[{"value":"/ Creates a dynamic image backed by a buffer of RGB pixels.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\dynimage.rs","byte_start":394561,"byte_end":394622,"line_start":149,"line_end":149,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":1777},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\dynimage.rs","byte_start":394818,"byte_end":394827,"line_start":155,"line_end":155,"column_start":12,"column_end":21},"name":"new_rgba8","qualname":"<DynamicImage>::new_rgba8","value":"pub fn new_rgba8(u32, u32) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Creates a dynamic image backed by a buffer of RGBA pixels.\n","sig":null,"attributes":[{"value":"/ Creates a dynamic image backed by a buffer of RGBA pixels.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\dynimage.rs","byte_start":394744,"byte_end":394806,"line_start":154,"line_end":154,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":1778},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\dynimage.rs","byte_start":395004,"byte_end":395013,"line_start":160,"line_end":160,"column_start":12,"column_end":21},"name":"new_bgra8","qualname":"<DynamicImage>::new_bgra8","value":"pub fn new_bgra8(u32, u32) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Creates a dynamic image backed by a buffer of BGRA pixels.\n","sig":null,"attributes":[{"value":"/ Creates a dynamic image backed by a buffer of BGRA pixels.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\dynimage.rs","byte_start":394930,"byte_end":394992,"line_start":159,"line_end":159,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":1779},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\dynimage.rs","byte_start":395189,"byte_end":395197,"line_start":165,"line_end":165,"column_start":12,"column_end":20},"name":"new_bgr8","qualname":"<DynamicImage>::new_bgr8","value":"pub fn new_bgr8(u32, u32) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Creates a dynamic image backed by a buffer of BGR pixels.\n","sig":null,"attributes":[{"value":"/ Creates a dynamic image backed by a buffer of BGR pixels.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\dynimage.rs","byte_start":395116,"byte_end":395177,"line_start":164,"line_end":164,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":1780},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\dynimage.rs","byte_start":395373,"byte_end":395383,"line_start":170,"line_end":170,"column_start":12,"column_end":22},"name":"new_luma16","qualname":"<DynamicImage>::new_luma16","value":"pub fn new_luma16(u32, u32) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Creates a dynamic image backed by a buffer of grey pixels.\n","sig":null,"attributes":[{"value":"/ Creates a dynamic image backed by a buffer of grey pixels.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\dynimage.rs","byte_start":395299,"byte_end":395361,"line_start":169,"line_end":169,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":1781},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\dynimage.rs","byte_start":395587,"byte_end":395599,"line_start":176,"line_end":176,"column_start":12,"column_end":24},"name":"new_luma_a16","qualname":"<DynamicImage>::new_luma_a16","value":"pub fn new_luma_a16(u32, u32) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Creates a dynamic image backed by a buffer of grey\n pixels with transparency.\n","sig":null,"attributes":[{"value":"/ Creates a dynamic image backed by a buffer of grey","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\dynimage.rs","byte_start":395487,"byte_end":395541,"line_start":174,"line_end":174,"column_start":5,"column_end":59}},{"value":"/ pixels with transparency.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\dynimage.rs","byte_start":395546,"byte_end":395575,"line_start":175,"line_end":175,"column_start":5,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":1782},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\dynimage.rs","byte_start":395777,"byte_end":395786,"line_start":181,"line_end":181,"column_start":12,"column_end":21},"name":"new_rgb16","qualname":"<DynamicImage>::new_rgb16","value":"pub fn new_rgb16(u32, u32) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Creates a dynamic image backed by a buffer of RGB pixels.\n","sig":null,"attributes":[{"value":"/ Creates a dynamic image backed by a buffer of RGB pixels.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\dynimage.rs","byte_start":395704,"byte_end":395765,"line_start":180,"line_end":180,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":1783},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\dynimage.rs","byte_start":395963,"byte_end":395973,"line_start":186,"line_end":186,"column_start":12,"column_end":22},"name":"new_rgba16","qualname":"<DynamicImage>::new_rgba16","value":"pub fn new_rgba16(u32, u32) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Creates a dynamic image backed by a buffer of RGBA pixels.\n","sig":null,"attributes":[{"value":"/ Creates a dynamic image backed by a buffer of RGBA pixels.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\dynimage.rs","byte_start":395889,"byte_end":395951,"line_start":185,"line_end":185,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":1784},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\dynimage.rs","byte_start":396139,"byte_end":396151,"line_start":191,"line_end":191,"column_start":12,"column_end":24},"name":"from_decoder","qualname":"<DynamicImage>::from_decoder","value":"pub fn from_decoder<'a,\n                    impl ImageDecoder<'a>: ImageDecoder>(impl ImageDecoder<'a>)\n-> ImageResult<Self>","parent":null,"children":[],"decl_id":null,"docs":" Decodes an encoded image into a dynamic image.\n","sig":null,"attributes":[{"value":"/ Decodes an encoded image into a dynamic image.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\dynimage.rs","byte_start":396077,"byte_end":396127,"line_start":190,"line_end":190,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":1787},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\dynimage.rs","byte_start":396373,"byte_end":396379,"line_start":199,"line_end":199,"column_start":12,"column_end":18},"name":"to_rgb","qualname":"<DynamicImage>::to_rgb","value":"pub fn to_rgb(&Self) -> RgbImage","parent":null,"children":[],"decl_id":null,"docs":" Returns a copy of this image as an RGB image.\n","sig":null,"attributes":[{"value":"/ Returns a copy of this image as an RGB image.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\dynimage.rs","byte_start":396268,"byte_end":396317,"line_start":197,"line_end":197,"column_start":5,"column_end":54}},{"value":"deprecated = \"replaced by `to_rgb8`\"","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\dynimage.rs","byte_start":396322,"byte_end":396361,"line_start":198,"line_end":198,"column_start":5,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":1788},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\dynimage.rs","byte_start":396547,"byte_end":396554,"line_start":206,"line_end":206,"column_start":12,"column_end":19},"name":"to_rgb8","qualname":"<DynamicImage>::to_rgb8","value":"pub fn to_rgb8(&Self) -> RgbImage","parent":null,"children":[],"decl_id":null,"docs":" Returns a copy of this image as an RGB image.\n","sig":null,"attributes":[{"value":"/ Returns a copy of this image as an RGB image.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\dynimage.rs","byte_start":396486,"byte_end":396535,"line_start":205,"line_end":205,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":1789},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\dynimage.rs","byte_start":396722,"byte_end":396730,"line_start":213,"line_end":213,"column_start":12,"column_end":20},"name":"to_rgb16","qualname":"<DynamicImage>::to_rgb16","value":"pub fn to_rgb16(&Self) -> Rgb16Image","parent":null,"children":[],"decl_id":null,"docs":" Returns a copy of this image as an RGB image.\n","sig":null,"attributes":[{"value":"/ Returns a copy of this image as an RGB image.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\dynimage.rs","byte_start":396661,"byte_end":396710,"line_start":212,"line_end":212,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":1790},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\dynimage.rs","byte_start":396946,"byte_end":396953,"line_start":221,"line_end":221,"column_start":12,"column_end":19},"name":"to_rgba","qualname":"<DynamicImage>::to_rgba","value":"pub fn to_rgba(&Self) -> RgbaImage","parent":null,"children":[],"decl_id":null,"docs":" Returns a copy of this image as an RGBA image.\n","sig":null,"attributes":[{"value":"/ Returns a copy of this image as an RGBA image.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\dynimage.rs","byte_start":396839,"byte_end":396889,"line_start":219,"line_end":219,"column_start":5,"column_end":55}},{"value":"deprecated = \"replaced by `to_rgba8`\"","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\dynimage.rs","byte_start":396894,"byte_end":396934,"line_start":220,"line_end":220,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":1791},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\dynimage.rs","byte_start":397123,"byte_end":397131,"line_start":228,"line_end":228,"column_start":12,"column_end":20},"name":"to_rgba8","qualname":"<DynamicImage>::to_rgba8","value":"pub fn to_rgba8(&Self) -> RgbaImage","parent":null,"children":[],"decl_id":null,"docs":" Returns a copy of this image as an RGBA image.\n","sig":null,"attributes":[{"value":"/ Returns a copy of this image as an RGBA image.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\dynimage.rs","byte_start":397061,"byte_end":397111,"line_start":227,"line_end":227,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":1792},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\dynimage.rs","byte_start":397301,"byte_end":397310,"line_start":235,"line_end":235,"column_start":12,"column_end":21},"name":"to_rgba16","qualname":"<DynamicImage>::to_rgba16","value":"pub fn to_rgba16(&Self) -> Rgba16Image","parent":null,"children":[],"decl_id":null,"docs":" Returns a copy of this image as an RGBA image.\n","sig":null,"attributes":[{"value":"/ Returns a copy of this image as an RGBA image.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\dynimage.rs","byte_start":397239,"byte_end":397289,"line_start":234,"line_end":234,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":1793},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\dynimage.rs","byte_start":397525,"byte_end":397531,"line_start":243,"line_end":243,"column_start":12,"column_end":18},"name":"to_bgr","qualname":"<DynamicImage>::to_bgr","value":"pub fn to_bgr(&Self) -> BgrImage","parent":null,"children":[],"decl_id":null,"docs":" Returns a copy of this image as an BGR image.\n","sig":null,"attributes":[{"value":"/ Returns a copy of this image as an BGR image.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\dynimage.rs","byte_start":397420,"byte_end":397469,"line_start":241,"line_end":241,"column_start":5,"column_end":54}},{"value":"deprecated = \"replaced by `to_bgr8`\"","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\dynimage.rs","byte_start":397474,"byte_end":397513,"line_start":242,"line_end":242,"column_start":5,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":1794},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\dynimage.rs","byte_start":397699,"byte_end":397706,"line_start":250,"line_end":250,"column_start":12,"column_end":19},"name":"to_bgr8","qualname":"<DynamicImage>::to_bgr8","value":"pub fn to_bgr8(&Self) -> BgrImage","parent":null,"children":[],"decl_id":null,"docs":" Returns a copy of this image as an BGR image.\n","sig":null,"attributes":[{"value":"/ Returns a copy of this image as an BGR image.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\dynimage.rs","byte_start":397638,"byte_end":397687,"line_start":249,"line_end":249,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":1795},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\dynimage.rs","byte_start":397920,"byte_end":397927,"line_start":258,"line_end":258,"column_start":12,"column_end":19},"name":"to_bgra","qualname":"<DynamicImage>::to_bgra","value":"pub fn to_bgra(&Self) -> BgraImage","parent":null,"children":[],"decl_id":null,"docs":" Returns a copy of this image as an BGRA image.\n","sig":null,"attributes":[{"value":"/ Returns a copy of this image as an BGRA image.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\dynimage.rs","byte_start":397813,"byte_end":397863,"line_start":256,"line_end":256,"column_start":5,"column_end":55}},{"value":"deprecated = \"replaced by `to_bgra8`\"","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\dynimage.rs","byte_start":397868,"byte_end":397908,"line_start":257,"line_end":257,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":1796},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\dynimage.rs","byte_start":398097,"byte_end":398105,"line_start":265,"line_end":265,"column_start":12,"column_end":20},"name":"to_bgra8","qualname":"<DynamicImage>::to_bgra8","value":"pub fn to_bgra8(&Self) -> BgraImage","parent":null,"children":[],"decl_id":null,"docs":" Returns a copy of this image as an BGRA image.\n","sig":null,"attributes":[{"value":"/ Returns a copy of this image as an BGRA image.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\dynimage.rs","byte_start":398035,"byte_end":398085,"line_start":264,"line_end":264,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":1797},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\dynimage.rs","byte_start":398319,"byte_end":398326,"line_start":273,"line_end":273,"column_start":12,"column_end":19},"name":"to_luma","qualname":"<DynamicImage>::to_luma","value":"pub fn to_luma(&Self) -> GrayImage","parent":null,"children":[],"decl_id":null,"docs":" Returns a copy of this image as a Luma image.\n","sig":null,"attributes":[{"value":"/ Returns a copy of this image as a Luma image.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\dynimage.rs","byte_start":398213,"byte_end":398262,"line_start":271,"line_end":271,"column_start":5,"column_end":54}},{"value":"deprecated = \"replaced by `to_luma8`\"","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\dynimage.rs","byte_start":398267,"byte_end":398307,"line_start":272,"line_end":272,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":1798},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\dynimage.rs","byte_start":398495,"byte_end":398503,"line_start":280,"line_end":280,"column_start":12,"column_end":20},"name":"to_luma8","qualname":"<DynamicImage>::to_luma8","value":"pub fn to_luma8(&Self) -> GrayImage","parent":null,"children":[],"decl_id":null,"docs":" Returns a copy of this image as a Luma image.\n","sig":null,"attributes":[{"value":"/ Returns a copy of this image as a Luma image.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\dynimage.rs","byte_start":398434,"byte_end":398483,"line_start":279,"line_end":279,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":1799},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\dynimage.rs","byte_start":398672,"byte_end":398681,"line_start":287,"line_end":287,"column_start":12,"column_end":21},"name":"to_luma16","qualname":"<DynamicImage>::to_luma16","value":"pub fn to_luma16(&Self) -> Gray16Image","parent":null,"children":[],"decl_id":null,"docs":" Returns a copy of this image as a Luma image.\n","sig":null,"attributes":[{"value":"/ Returns a copy of this image as a Luma image.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\dynimage.rs","byte_start":398611,"byte_end":398660,"line_start":286,"line_end":286,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":1800},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\dynimage.rs","byte_start":398904,"byte_end":398917,"line_start":295,"line_end":295,"column_start":12,"column_end":25},"name":"to_luma_alpha","qualname":"<DynamicImage>::to_luma_alpha","value":"pub fn to_luma_alpha(&Self) -> GrayAlphaImage","parent":null,"children":[],"decl_id":null,"docs":" Returns a copy of this image as a LumaA image.\n","sig":null,"attributes":[{"value":"/ Returns a copy of this image as a LumaA image.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\dynimage.rs","byte_start":398791,"byte_end":398841,"line_start":293,"line_end":293,"column_start":5,"column_end":55}},{"value":"deprecated = \"replaced by `to_luma_alpha8`\"","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\dynimage.rs","byte_start":398846,"byte_end":398892,"line_start":294,"line_end":294,"column_start":5,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":1801},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\dynimage.rs","byte_start":399092,"byte_end":399106,"line_start":302,"line_end":302,"column_start":12,"column_end":26},"name":"to_luma_alpha8","qualname":"<DynamicImage>::to_luma_alpha8","value":"pub fn to_luma_alpha8(&Self) -> GrayAlphaImage","parent":null,"children":[],"decl_id":null,"docs":" Returns a copy of this image as a LumaA image.\n","sig":null,"attributes":[{"value":"/ Returns a copy of this image as a LumaA image.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\dynimage.rs","byte_start":399030,"byte_end":399080,"line_start":301,"line_end":301,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":1802},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\dynimage.rs","byte_start":399281,"byte_end":399296,"line_start":309,"line_end":309,"column_start":12,"column_end":27},"name":"to_luma_alpha16","qualname":"<DynamicImage>::to_luma_alpha16","value":"pub fn to_luma_alpha16(&Self) -> GrayAlpha16Image","parent":null,"children":[],"decl_id":null,"docs":" Returns a copy of this image as a LumaA image.\n","sig":null,"attributes":[{"value":"/ Returns a copy of this image as a LumaA image.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\dynimage.rs","byte_start":399219,"byte_end":399269,"line_start":308,"line_end":308,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":1803},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\dynimage.rs","byte_start":399636,"byte_end":399644,"line_start":320,"line_end":320,"column_start":12,"column_end":20},"name":"into_rgb","qualname":"<DynamicImage>::into_rgb","value":"pub fn into_rgb(Self) -> RgbImage","parent":null,"children":[],"decl_id":null,"docs":" Consume the image and returns a RGB image.","sig":null,"attributes":[{"value":"/ Consume the image and returns a RGB image.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\dynimage.rs","byte_start":399411,"byte_end":399457,"line_start":315,"line_end":315,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\dynimage.rs","byte_start":399462,"byte_end":399465,"line_start":316,"line_end":316,"column_start":5,"column_end":8}},{"value":"/ If the image was already the correct format, it is returned as is.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\dynimage.rs","byte_start":399470,"byte_end":399540,"line_start":317,"line_end":317,"column_start":5,"column_end":75}},{"value":"/ Otherwise, a copy is created.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\dynimage.rs","byte_start":399545,"byte_end":399578,"line_start":318,"line_end":318,"column_start":5,"column_end":38}},{"value":"deprecated = \"replaced by `into_rgb8`\"","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\dynimage.rs","byte_start":399583,"byte_end":399624,"line_start":319,"line_end":319,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":1804},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\dynimage.rs","byte_start":399961,"byte_end":399970,"line_start":331,"line_end":331,"column_start":12,"column_end":21},"name":"into_rgb8","qualname":"<DynamicImage>::into_rgb8","value":"pub fn into_rgb8(Self) -> RgbImage","parent":null,"children":[],"decl_id":null,"docs":" Consume the image and returns a RGB image.","sig":null,"attributes":[{"value":"/ Consume the image and returns a RGB image.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\dynimage.rs","byte_start":399782,"byte_end":399828,"line_start":327,"line_end":327,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\dynimage.rs","byte_start":399833,"byte_end":399836,"line_start":328,"line_end":328,"column_start":5,"column_end":8}},{"value":"/ If the image was already the correct format, it is returned as is.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\dynimage.rs","byte_start":399841,"byte_end":399911,"line_start":329,"line_end":329,"column_start":5,"column_end":75}},{"value":"/ Otherwise, a copy is created.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\dynimage.rs","byte_start":399916,"byte_end":399949,"line_start":330,"line_end":330,"column_start":5,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":1805},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\dynimage.rs","byte_start":400287,"byte_end":400297,"line_start":342,"line_end":342,"column_start":12,"column_end":22},"name":"into_rgb16","qualname":"<DynamicImage>::into_rgb16","value":"pub fn into_rgb16(Self) -> Rgb16Image","parent":null,"children":[],"decl_id":null,"docs":" Consume the image and returns a RGB image.","sig":null,"attributes":[{"value":"/ Consume the image and returns a RGB image.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\dynimage.rs","byte_start":400108,"byte_end":400154,"line_start":338,"line_end":338,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\dynimage.rs","byte_start":400159,"byte_end":400162,"line_start":339,"line_end":339,"column_start":5,"column_end":8}},{"value":"/ If the image was already the correct format, it is returned as is.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\dynimage.rs","byte_start":400167,"byte_end":400237,"line_start":340,"line_end":340,"column_start":5,"column_end":75}},{"value":"/ Otherwise, a copy is created.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\dynimage.rs","byte_start":400242,"byte_end":400275,"line_start":341,"line_end":341,"column_start":5,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":1806},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\dynimage.rs","byte_start":400666,"byte_end":400675,"line_start":354,"line_end":354,"column_start":12,"column_end":21},"name":"into_rgba","qualname":"<DynamicImage>::into_rgba","value":"pub fn into_rgba(Self) -> RgbaImage","parent":null,"children":[],"decl_id":null,"docs":" Consume the image and returns a RGBA image.","sig":null,"attributes":[{"value":"/ Consume the image and returns a RGBA image.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\dynimage.rs","byte_start":400439,"byte_end":400486,"line_start":349,"line_end":349,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\dynimage.rs","byte_start":400491,"byte_end":400494,"line_start":350,"line_end":350,"column_start":5,"column_end":8}},{"value":"/ If the image was already the correct format, it is returned as is.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\dynimage.rs","byte_start":400499,"byte_end":400569,"line_start":351,"line_end":351,"column_start":5,"column_end":75}},{"value":"/ Otherwise, a copy is created.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\dynimage.rs","byte_start":400574,"byte_end":400607,"line_start":352,"line_end":352,"column_start":5,"column_end":38}},{"value":"deprecated = \"replaced by `into_rgba8`\"","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\dynimage.rs","byte_start":400612,"byte_end":400654,"line_start":353,"line_end":353,"column_start":5,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":1807},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\dynimage.rs","byte_start":400996,"byte_end":401006,"line_start":365,"line_end":365,"column_start":12,"column_end":22},"name":"into_rgba8","qualname":"<DynamicImage>::into_rgba8","value":"pub fn into_rgba8(Self) -> RgbaImage","parent":null,"children":[],"decl_id":null,"docs":" Consume the image and returns a RGBA image.","sig":null,"attributes":[{"value":"/ Consume the image and returns a RGBA image.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\dynimage.rs","byte_start":400816,"byte_end":400863,"line_start":361,"line_end":361,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\dynimage.rs","byte_start":400868,"byte_end":400871,"line_start":362,"line_end":362,"column_start":5,"column_end":8}},{"value":"/ If the image was already the correct format, it is returned as is.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\dynimage.rs","byte_start":400876,"byte_end":400946,"line_start":363,"line_end":363,"column_start":5,"column_end":75}},{"value":"/ Otherwise, a copy is created.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\dynimage.rs","byte_start":400951,"byte_end":400984,"line_start":364,"line_end":364,"column_start":5,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":1808},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\dynimage.rs","byte_start":401327,"byte_end":401338,"line_start":376,"line_end":376,"column_start":12,"column_end":23},"name":"into_rgba16","qualname":"<DynamicImage>::into_rgba16","value":"pub fn into_rgba16(Self) -> Rgba16Image","parent":null,"children":[],"decl_id":null,"docs":" Consume the image and returns a RGBA image.","sig":null,"attributes":[{"value":"/ Consume the image and returns a RGBA image.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\dynimage.rs","byte_start":401147,"byte_end":401194,"line_start":372,"line_end":372,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\dynimage.rs","byte_start":401199,"byte_end":401202,"line_start":373,"line_end":373,"column_start":5,"column_end":8}},{"value":"/ If the image was already the correct format, it is returned as is.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\dynimage.rs","byte_start":401207,"byte_end":401277,"line_start":374,"line_end":374,"column_start":5,"column_end":75}},{"value":"/ Otherwise, a copy is created.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\dynimage.rs","byte_start":401282,"byte_end":401315,"line_start":375,"line_end":375,"column_start":5,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":1809},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\dynimage.rs","byte_start":401709,"byte_end":401717,"line_start":388,"line_end":388,"column_start":12,"column_end":20},"name":"into_bgr","qualname":"<DynamicImage>::into_bgr","value":"pub fn into_bgr(Self) -> BgrImage","parent":null,"children":[],"decl_id":null,"docs":" Consume the image and returns a BGR image.","sig":null,"attributes":[{"value":"/ Consume the image and returns a BGR image.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\dynimage.rs","byte_start":401483,"byte_end":401529,"line_start":383,"line_end":383,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\dynimage.rs","byte_start":401534,"byte_end":401537,"line_start":384,"line_end":384,"column_start":5,"column_end":8}},{"value":"/ If the image was already the correct format, it is returned as is.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\dynimage.rs","byte_start":401542,"byte_end":401612,"line_start":385,"line_end":385,"column_start":5,"column_end":75}},{"value":"/ Otherwise, a copy is created.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\dynimage.rs","byte_start":401617,"byte_end":401650,"line_start":386,"line_end":386,"column_start":5,"column_end":38}},{"value":"deprecated = \"replaced by `into_bgra8`\"","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\dynimage.rs","byte_start":401655,"byte_end":401697,"line_start":387,"line_end":387,"column_start":5,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":1810},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\dynimage.rs","byte_start":402034,"byte_end":402043,"line_start":399,"line_end":399,"column_start":12,"column_end":21},"name":"into_bgr8","qualname":"<DynamicImage>::into_bgr8","value":"pub fn into_bgr8(Self) -> BgrImage","parent":null,"children":[],"decl_id":null,"docs":" Consume the image and returns a BGR image.","sig":null,"attributes":[{"value":"/ Consume the image and returns a BGR image.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\dynimage.rs","byte_start":401855,"byte_end":401901,"line_start":395,"line_end":395,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\dynimage.rs","byte_start":401906,"byte_end":401909,"line_start":396,"line_end":396,"column_start":5,"column_end":8}},{"value":"/ If the image was already the correct format, it is returned as is.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\dynimage.rs","byte_start":401914,"byte_end":401984,"line_start":397,"line_end":397,"column_start":5,"column_end":75}},{"value":"/ Otherwise, a copy is created.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\dynimage.rs","byte_start":401989,"byte_end":402022,"line_start":398,"line_end":398,"column_start":5,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":1811},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\dynimage.rs","byte_start":402509,"byte_end":402518,"line_start":413,"line_end":413,"column_start":12,"column_end":21},"name":"into_bgra","qualname":"<DynamicImage>::into_bgra","value":"pub fn into_bgra(Self) -> BgraImage","parent":null,"children":[],"decl_id":null,"docs":" Consume the image and returns a BGRA image.","sig":null,"attributes":[{"value":"/ Consume the image and returns a BGRA image.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\dynimage.rs","byte_start":402282,"byte_end":402329,"line_start":408,"line_end":408,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\dynimage.rs","byte_start":402334,"byte_end":402337,"line_start":409,"line_end":409,"column_start":5,"column_end":8}},{"value":"/ If the image was already the correct format, it is returned as is.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\dynimage.rs","byte_start":402342,"byte_end":402412,"line_start":410,"line_end":410,"column_start":5,"column_end":75}},{"value":"/ Otherwise, a copy is created.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\dynimage.rs","byte_start":402417,"byte_end":402450,"line_start":411,"line_end":411,"column_start":5,"column_end":38}},{"value":"deprecated = \"replaced by `into_bgra8`\"","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\dynimage.rs","byte_start":402455,"byte_end":402497,"line_start":412,"line_end":412,"column_start":5,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":1812},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\dynimage.rs","byte_start":402839,"byte_end":402849,"line_start":424,"line_end":424,"column_start":12,"column_end":22},"name":"into_bgra8","qualname":"<DynamicImage>::into_bgra8","value":"pub fn into_bgra8(Self) -> BgraImage","parent":null,"children":[],"decl_id":null,"docs":" Consume the image and returns a BGRA image.","sig":null,"attributes":[{"value":"/ Consume the image and returns a BGRA image.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\dynimage.rs","byte_start":402659,"byte_end":402706,"line_start":420,"line_end":420,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\dynimage.rs","byte_start":402711,"byte_end":402714,"line_start":421,"line_end":421,"column_start":5,"column_end":8}},{"value":"/ If the image was already the correct format, it is returned as is.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\dynimage.rs","byte_start":402719,"byte_end":402789,"line_start":422,"line_end":422,"column_start":5,"column_end":75}},{"value":"/ Otherwise, a copy is created.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\dynimage.rs","byte_start":402794,"byte_end":402827,"line_start":423,"line_end":423,"column_start":5,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":1813},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\dynimage.rs","byte_start":403320,"byte_end":403329,"line_start":438,"line_end":438,"column_start":12,"column_end":21},"name":"into_luma","qualname":"<DynamicImage>::into_luma","value":"pub fn into_luma(Self) -> GrayImage","parent":null,"children":[],"decl_id":null,"docs":" Consume the image and returns a Luma image.","sig":null,"attributes":[{"value":"/ Consume the image and returns a Luma image.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\dynimage.rs","byte_start":403093,"byte_end":403140,"line_start":433,"line_end":433,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\dynimage.rs","byte_start":403145,"byte_end":403148,"line_start":434,"line_end":434,"column_start":5,"column_end":8}},{"value":"/ If the image was already the correct format, it is returned as is.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\dynimage.rs","byte_start":403153,"byte_end":403223,"line_start":435,"line_end":435,"column_start":5,"column_end":75}},{"value":"/ Otherwise, a copy is created.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\dynimage.rs","byte_start":403228,"byte_end":403261,"line_start":436,"line_end":436,"column_start":5,"column_end":38}},{"value":"deprecated = \"replaced by `into_luma8`\"","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\dynimage.rs","byte_start":403266,"byte_end":403308,"line_start":437,"line_end":437,"column_start":5,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":1814},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\dynimage.rs","byte_start":403650,"byte_end":403660,"line_start":449,"line_end":449,"column_start":12,"column_end":22},"name":"into_luma8","qualname":"<DynamicImage>::into_luma8","value":"pub fn into_luma8(Self) -> GrayImage","parent":null,"children":[],"decl_id":null,"docs":" Consume the image and returns a Luma image.","sig":null,"attributes":[{"value":"/ Consume the image and returns a Luma image.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\dynimage.rs","byte_start":403470,"byte_end":403517,"line_start":445,"line_end":445,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\dynimage.rs","byte_start":403522,"byte_end":403525,"line_start":446,"line_end":446,"column_start":5,"column_end":8}},{"value":"/ If the image was already the correct format, it is returned as is.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\dynimage.rs","byte_start":403530,"byte_end":403600,"line_start":447,"line_end":447,"column_start":5,"column_end":75}},{"value":"/ Otherwise, a copy is created.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\dynimage.rs","byte_start":403605,"byte_end":403638,"line_start":448,"line_end":448,"column_start":5,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":1815},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\dynimage.rs","byte_start":403981,"byte_end":403992,"line_start":460,"line_end":460,"column_start":12,"column_end":23},"name":"into_luma16","qualname":"<DynamicImage>::into_luma16","value":"pub fn into_luma16(Self) -> Gray16Image","parent":null,"children":[],"decl_id":null,"docs":" Consume the image and returns a Luma image.","sig":null,"attributes":[{"value":"/ Consume the image and returns a Luma image.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\dynimage.rs","byte_start":403801,"byte_end":403848,"line_start":456,"line_end":456,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\dynimage.rs","byte_start":403853,"byte_end":403856,"line_start":457,"line_end":457,"column_start":5,"column_end":8}},{"value":"/ If the image was already the correct format, it is returned as is.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\dynimage.rs","byte_start":403861,"byte_end":403931,"line_start":458,"line_end":458,"column_start":5,"column_end":75}},{"value":"/ Otherwise, a copy is created.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\dynimage.rs","byte_start":403936,"byte_end":403969,"line_start":459,"line_end":459,"column_start":5,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":1816},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\dynimage.rs","byte_start":404371,"byte_end":404386,"line_start":472,"line_end":472,"column_start":12,"column_end":27},"name":"into_luma_alpha","qualname":"<DynamicImage>::into_luma_alpha","value":"pub fn into_luma_alpha(Self) -> GrayAlphaImage","parent":null,"children":[],"decl_id":null,"docs":" Consume the image and returns a LumaA image.","sig":null,"attributes":[{"value":"/ Consume the image and returns a LumaA image.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\dynimage.rs","byte_start":404137,"byte_end":404185,"line_start":467,"line_end":467,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\dynimage.rs","byte_start":404190,"byte_end":404193,"line_start":468,"line_end":468,"column_start":5,"column_end":8}},{"value":"/ If the image was already the correct format, it is returned as is.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\dynimage.rs","byte_start":404198,"byte_end":404268,"line_start":469,"line_end":469,"column_start":5,"column_end":75}},{"value":"/ Otherwise, a copy is created.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\dynimage.rs","byte_start":404273,"byte_end":404306,"line_start":470,"line_end":470,"column_start":5,"column_end":38}},{"value":"deprecated = \"replaced by `into_luma_alpha8`\"","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\dynimage.rs","byte_start":404311,"byte_end":404359,"line_start":471,"line_end":471,"column_start":5,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":1817},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\dynimage.rs","byte_start":404720,"byte_end":404736,"line_start":483,"line_end":483,"column_start":12,"column_end":28},"name":"into_luma_alpha8","qualname":"<DynamicImage>::into_luma_alpha8","value":"pub fn into_luma_alpha8(Self) -> GrayAlphaImage","parent":null,"children":[],"decl_id":null,"docs":" Consume the image and returns a LumaA image.","sig":null,"attributes":[{"value":"/ Consume the image and returns a LumaA image.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\dynimage.rs","byte_start":404539,"byte_end":404587,"line_start":479,"line_end":479,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\dynimage.rs","byte_start":404592,"byte_end":404595,"line_start":480,"line_end":480,"column_start":5,"column_end":8}},{"value":"/ If the image was already the correct format, it is returned as is.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\dynimage.rs","byte_start":404600,"byte_end":404670,"line_start":481,"line_end":481,"column_start":5,"column_end":75}},{"value":"/ Otherwise, a copy is created.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\dynimage.rs","byte_start":404675,"byte_end":404708,"line_start":482,"line_end":482,"column_start":5,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":1818},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\dynimage.rs","byte_start":405070,"byte_end":405087,"line_start":494,"line_end":494,"column_start":12,"column_end":29},"name":"into_luma_alpha16","qualname":"<DynamicImage>::into_luma_alpha16","value":"pub fn into_luma_alpha16(Self) -> GrayAlpha16Image","parent":null,"children":[],"decl_id":null,"docs":" Consume the image and returns a LumaA image.","sig":null,"attributes":[{"value":"/ Consume the image and returns a LumaA image.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\dynimage.rs","byte_start":404889,"byte_end":404937,"line_start":490,"line_end":490,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\dynimage.rs","byte_start":404942,"byte_end":404945,"line_start":491,"line_end":491,"column_start":5,"column_end":8}},{"value":"/ If the image was already the correct format, it is returned as is.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\dynimage.rs","byte_start":404950,"byte_end":405020,"line_start":492,"line_end":492,"column_start":5,"column_end":75}},{"value":"/ Otherwise, a copy is created.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\dynimage.rs","byte_start":405025,"byte_end":405058,"line_start":493,"line_end":493,"column_start":5,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":1819},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\dynimage.rs","byte_start":405474,"byte_end":405478,"line_start":505,"line_end":505,"column_start":12,"column_end":16},"name":"crop","qualname":"<DynamicImage>::crop","value":"pub fn crop(&mut Self, u32, u32, u32, u32) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Return a cut-out of this image delimited by the bounding rectangle.","sig":null,"attributes":[{"value":"/ Return a cut-out of this image delimited by the bounding rectangle.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\dynimage.rs","byte_start":405244,"byte_end":405315,"line_start":501,"line_end":501,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\dynimage.rs","byte_start":405320,"byte_end":405323,"line_start":502,"line_end":502,"column_start":5,"column_end":8}},{"value":"/ Note: this method does *not* modify the object,","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\dynimage.rs","byte_start":405328,"byte_end":405379,"line_start":503,"line_end":503,"column_start":5,"column_end":56}},{"value":"/ and its signature will be replaced with `crop_imm()`'s in the 0.24 release","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\dynimage.rs","byte_start":405384,"byte_end":405462,"line_start":504,"line_end":504,"column_start":5,"column_end":83}}]},{"kind":"Method","id":{"krate":0,"index":1820},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\dynimage.rs","byte_start":405735,"byte_end":405743,"line_start":510,"line_end":510,"column_start":12,"column_end":20},"name":"crop_imm","qualname":"<DynamicImage>::crop_imm","value":"pub fn crop_imm(&Self, u32, u32, u32, u32) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Return a cut-out of this image delimited by the bounding rectangle.\n","sig":null,"attributes":[{"value":"/ Return a cut-out of this image delimited by the bounding rectangle.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\dynimage.rs","byte_start":405652,"byte_end":405723,"line_start":509,"line_end":509,"column_start":5,"column_end":76}}]},{"kind":"Method","id":{"krate":0,"index":1821},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\dynimage.rs","byte_start":405968,"byte_end":405975,"line_start":515,"line_end":515,"column_start":12,"column_end":19},"name":"as_rgb8","qualname":"<DynamicImage>::as_rgb8","value":"pub fn as_rgb8(&Self) -> Option<&RgbImage>","parent":null,"children":[],"decl_id":null,"docs":" Return a reference to an 8bit RGB image\n","sig":null,"attributes":[{"value":"/ Return a reference to an 8bit RGB image","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\dynimage.rs","byte_start":405913,"byte_end":405956,"line_start":514,"line_end":514,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":1822},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\dynimage.rs","byte_start":406190,"byte_end":406201,"line_start":523,"line_end":523,"column_start":12,"column_end":23},"name":"as_mut_rgb8","qualname":"<DynamicImage>::as_mut_rgb8","value":"pub fn as_mut_rgb8(&mut Self) -> Option<&mut RgbImage>","parent":null,"children":[],"decl_id":null,"docs":" Return a mutable reference to an 8bit RGB image\n","sig":null,"attributes":[{"value":"/ Return a mutable reference to an 8bit RGB image","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\dynimage.rs","byte_start":406127,"byte_end":406178,"line_start":522,"line_end":522,"column_start":5,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":1823},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\dynimage.rs","byte_start":406420,"byte_end":406427,"line_start":531,"line_end":531,"column_start":12,"column_end":19},"name":"as_bgr8","qualname":"<DynamicImage>::as_bgr8","value":"pub fn as_bgr8(&Self) -> Option<&BgrImage>","parent":null,"children":[],"decl_id":null,"docs":" Return a reference to an 8bit BGR image\n","sig":null,"attributes":[{"value":"/ Return a reference to an 8bit BGR image","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\dynimage.rs","byte_start":406365,"byte_end":406408,"line_start":530,"line_end":530,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":1824},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\dynimage.rs","byte_start":406642,"byte_end":406653,"line_start":539,"line_end":539,"column_start":12,"column_end":23},"name":"as_mut_bgr8","qualname":"<DynamicImage>::as_mut_bgr8","value":"pub fn as_mut_bgr8(&mut Self) -> Option<&mut BgrImage>","parent":null,"children":[],"decl_id":null,"docs":" Return a mutable reference to an 8bit BGR image\n","sig":null,"attributes":[{"value":"/ Return a mutable reference to an 8bit BGR image","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\dynimage.rs","byte_start":406579,"byte_end":406630,"line_start":538,"line_end":538,"column_start":5,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":1825},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\dynimage.rs","byte_start":406873,"byte_end":406881,"line_start":547,"line_end":547,"column_start":12,"column_end":20},"name":"as_rgba8","qualname":"<DynamicImage>::as_rgba8","value":"pub fn as_rgba8(&Self) -> Option<&RgbaImage>","parent":null,"children":[],"decl_id":null,"docs":" Return a reference to an 8bit RGBA image\n","sig":null,"attributes":[{"value":"/ Return a reference to an 8bit RGBA image","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\dynimage.rs","byte_start":406817,"byte_end":406861,"line_start":546,"line_end":546,"column_start":5,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":1826},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\dynimage.rs","byte_start":407099,"byte_end":407111,"line_start":555,"line_end":555,"column_start":12,"column_end":24},"name":"as_mut_rgba8","qualname":"<DynamicImage>::as_mut_rgba8","value":"pub fn as_mut_rgba8(&mut Self) -> Option<&mut RgbaImage>","parent":null,"children":[],"decl_id":null,"docs":" Return a mutable reference to an 8bit RGBA image\n","sig":null,"attributes":[{"value":"/ Return a mutable reference to an 8bit RGBA image","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\dynimage.rs","byte_start":407035,"byte_end":407087,"line_start":554,"line_end":554,"column_start":5,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":1827},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\dynimage.rs","byte_start":407333,"byte_end":407341,"line_start":563,"line_end":563,"column_start":12,"column_end":20},"name":"as_bgra8","qualname":"<DynamicImage>::as_bgra8","value":"pub fn as_bgra8(&Self) -> Option<&BgraImage>","parent":null,"children":[],"decl_id":null,"docs":" Return a reference to an 8bit BGRA image\n","sig":null,"attributes":[{"value":"/ Return a reference to an 8bit BGRA image","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\dynimage.rs","byte_start":407277,"byte_end":407321,"line_start":562,"line_end":562,"column_start":5,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":1828},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\dynimage.rs","byte_start":407559,"byte_end":407571,"line_start":571,"line_end":571,"column_start":12,"column_end":24},"name":"as_mut_bgra8","qualname":"<DynamicImage>::as_mut_bgra8","value":"pub fn as_mut_bgra8(&mut Self) -> Option<&mut BgraImage>","parent":null,"children":[],"decl_id":null,"docs":" Return a mutable reference to an 8bit RGBA image\n","sig":null,"attributes":[{"value":"/ Return a mutable reference to an 8bit RGBA image","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\dynimage.rs","byte_start":407495,"byte_end":407547,"line_start":570,"line_end":570,"column_start":5,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":1829},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\dynimage.rs","byte_start":407798,"byte_end":407806,"line_start":579,"line_end":579,"column_start":12,"column_end":20},"name":"as_luma8","qualname":"<DynamicImage>::as_luma8","value":"pub fn as_luma8(&Self) -> Option<&GrayImage>","parent":null,"children":[],"decl_id":null,"docs":" Return a reference to an 8bit Grayscale image\n","sig":null,"attributes":[{"value":"/ Return a reference to an 8bit Grayscale image","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\dynimage.rs","byte_start":407737,"byte_end":407786,"line_start":578,"line_end":578,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":1830},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\dynimage.rs","byte_start":408029,"byte_end":408041,"line_start":587,"line_end":587,"column_start":12,"column_end":24},"name":"as_mut_luma8","qualname":"<DynamicImage>::as_mut_luma8","value":"pub fn as_mut_luma8(&mut Self) -> Option<&mut GrayImage>","parent":null,"children":[],"decl_id":null,"docs":" Return a mutable reference to an 8bit Grayscale image\n","sig":null,"attributes":[{"value":"/ Return a mutable reference to an 8bit Grayscale image","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\dynimage.rs","byte_start":407960,"byte_end":408017,"line_start":586,"line_end":586,"column_start":5,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":1831},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\dynimage.rs","byte_start":408290,"byte_end":408304,"line_start":595,"line_end":595,"column_start":12,"column_end":26},"name":"as_luma_alpha8","qualname":"<DynamicImage>::as_luma_alpha8","value":"pub fn as_luma_alpha8(&Self) -> Option<&GrayAlphaImage>","parent":null,"children":[],"decl_id":null,"docs":" Return a reference to an 8bit Grayscale image with an alpha channel\n","sig":null,"attributes":[{"value":"/ Return a reference to an 8bit Grayscale image with an alpha channel","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\dynimage.rs","byte_start":408207,"byte_end":408278,"line_start":594,"line_end":594,"column_start":5,"column_end":76}}]},{"kind":"Method","id":{"krate":0,"index":1832},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\dynimage.rs","byte_start":408555,"byte_end":408573,"line_start":603,"line_end":603,"column_start":12,"column_end":30},"name":"as_mut_luma_alpha8","qualname":"<DynamicImage>::as_mut_luma_alpha8","value":"pub fn as_mut_luma_alpha8(&mut Self) -> Option<&mut GrayAlphaImage>","parent":null,"children":[],"decl_id":null,"docs":" Return a mutable reference to an 8bit Grayscale image with an alpha channel\n","sig":null,"attributes":[{"value":"/ Return a mutable reference to an 8bit Grayscale image with an alpha channel","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\dynimage.rs","byte_start":408464,"byte_end":408543,"line_start":602,"line_end":602,"column_start":5,"column_end":84}}]},{"kind":"Method","id":{"krate":0,"index":1833},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\dynimage.rs","byte_start":408801,"byte_end":408809,"line_start":611,"line_end":611,"column_start":12,"column_end":20},"name":"as_rgb16","qualname":"<DynamicImage>::as_rgb16","value":"pub fn as_rgb16(&Self) -> Option<&Rgb16Image>","parent":null,"children":[],"decl_id":null,"docs":" Return a reference to an 16bit RGB image\n","sig":null,"attributes":[{"value":"/ Return a reference to an 16bit RGB image","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\dynimage.rs","byte_start":408745,"byte_end":408789,"line_start":610,"line_end":610,"column_start":5,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":1834},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\dynimage.rs","byte_start":409028,"byte_end":409040,"line_start":619,"line_end":619,"column_start":12,"column_end":24},"name":"as_mut_rgb16","qualname":"<DynamicImage>::as_mut_rgb16","value":"pub fn as_mut_rgb16(&mut Self) -> Option<&mut Rgb16Image>","parent":null,"children":[],"decl_id":null,"docs":" Return a mutable reference to an 16bit RGB image\n","sig":null,"attributes":[{"value":"/ Return a mutable reference to an 16bit RGB image","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\dynimage.rs","byte_start":408964,"byte_end":409016,"line_start":618,"line_end":618,"column_start":5,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":1835},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\dynimage.rs","byte_start":409264,"byte_end":409273,"line_start":627,"line_end":627,"column_start":12,"column_end":21},"name":"as_rgba16","qualname":"<DynamicImage>::as_rgba16","value":"pub fn as_rgba16(&Self) -> Option<&Rgba16Image>","parent":null,"children":[],"decl_id":null,"docs":" Return a reference to an 16bit RGBA image\n","sig":null,"attributes":[{"value":"/ Return a reference to an 16bit RGBA image","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\dynimage.rs","byte_start":409207,"byte_end":409252,"line_start":626,"line_end":626,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":1836},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\dynimage.rs","byte_start":409495,"byte_end":409508,"line_start":635,"line_end":635,"column_start":12,"column_end":25},"name":"as_mut_rgba16","qualname":"<DynamicImage>::as_mut_rgba16","value":"pub fn as_mut_rgba16(&mut Self) -> Option<&mut Rgba16Image>","parent":null,"children":[],"decl_id":null,"docs":" Return a mutable reference to an 16bit RGBA image\n","sig":null,"attributes":[{"value":"/ Return a mutable reference to an 16bit RGBA image","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\dynimage.rs","byte_start":409430,"byte_end":409483,"line_start":634,"line_end":634,"column_start":5,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":1837},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\dynimage.rs","byte_start":409739,"byte_end":409748,"line_start":643,"line_end":643,"column_start":12,"column_end":21},"name":"as_luma16","qualname":"<DynamicImage>::as_luma16","value":"pub fn as_luma16(&Self) -> Option<&Gray16Image>","parent":null,"children":[],"decl_id":null,"docs":" Return a reference to an 16bit Grayscale image\n","sig":null,"attributes":[{"value":"/ Return a reference to an 16bit Grayscale image","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\dynimage.rs","byte_start":409677,"byte_end":409727,"line_start":642,"line_end":642,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":1838},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\dynimage.rs","byte_start":409975,"byte_end":409988,"line_start":651,"line_end":651,"column_start":12,"column_end":25},"name":"as_mut_luma16","qualname":"<DynamicImage>::as_mut_luma16","value":"pub fn as_mut_luma16(&mut Self) -> Option<&mut Gray16Image>","parent":null,"children":[],"decl_id":null,"docs":" Return a mutable reference to an 16bit Grayscale image\n","sig":null,"attributes":[{"value":"/ Return a mutable reference to an 16bit Grayscale image","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\dynimage.rs","byte_start":409905,"byte_end":409963,"line_start":650,"line_end":650,"column_start":5,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":1839},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\dynimage.rs","byte_start":410241,"byte_end":410256,"line_start":659,"line_end":659,"column_start":12,"column_end":27},"name":"as_luma_alpha16","qualname":"<DynamicImage>::as_luma_alpha16","value":"pub fn as_luma_alpha16(&Self) -> Option<&GrayAlpha16Image>","parent":null,"children":[],"decl_id":null,"docs":" Return a reference to an 16bit Grayscale image with an alpha channel\n","sig":null,"attributes":[{"value":"/ Return a reference to an 16bit Grayscale image with an alpha channel","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\dynimage.rs","byte_start":410157,"byte_end":410229,"line_start":658,"line_end":658,"column_start":5,"column_end":77}}]},{"kind":"Method","id":{"krate":0,"index":1840},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\dynimage.rs","byte_start":410511,"byte_end":410530,"line_start":667,"line_end":667,"column_start":12,"column_end":31},"name":"as_mut_luma_alpha16","qualname":"<DynamicImage>::as_mut_luma_alpha16","value":"pub fn as_mut_luma_alpha16(&mut Self) -> Option<&mut GrayAlpha16Image>","parent":null,"children":[],"decl_id":null,"docs":" Return a mutable reference to an 16bit Grayscale image with an alpha channel\n","sig":null,"attributes":[{"value":"/ Return a mutable reference to an 16bit Grayscale image with an alpha channel","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\dynimage.rs","byte_start":410419,"byte_end":410499,"line_start":666,"line_end":666,"column_start":5,"column_end":85}}]},{"kind":"Method","id":{"krate":0,"index":1841},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\dynimage.rs","byte_start":410789,"byte_end":410807,"line_start":675,"line_end":675,"column_start":12,"column_end":30},"name":"as_flat_samples_u8","qualname":"<DynamicImage>::as_flat_samples_u8","value":"pub fn as_flat_samples_u8(&Self) -> Option<FlatSamples<&[u8]>>","parent":null,"children":[],"decl_id":null,"docs":" Return a view on the raw sample buffer for 8 bit per channel images.\n","sig":null,"attributes":[{"value":"/ Return a view on the raw sample buffer for 8 bit per channel images.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\dynimage.rs","byte_start":410705,"byte_end":410777,"line_start":674,"line_end":674,"column_start":5,"column_end":77}}]},{"kind":"Method","id":{"krate":0,"index":1842},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\dynimage.rs","byte_start":411441,"byte_end":411460,"line_start":688,"line_end":688,"column_start":12,"column_end":31},"name":"as_flat_samples_u16","qualname":"<DynamicImage>::as_flat_samples_u16","value":"pub fn as_flat_samples_u16(&Self) -> Option<FlatSamples<&[u16]>>","parent":null,"children":[],"decl_id":null,"docs":" Return a view on the raw sample buffer for 16 bit per channel images.\n","sig":null,"attributes":[{"value":"/ Return a view on the raw sample buffer for 16 bit per channel images.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\dynimage.rs","byte_start":411356,"byte_end":411429,"line_start":687,"line_end":687,"column_start":5,"column_end":78}}]},{"kind":"Method","id":{"krate":0,"index":1843},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\dynimage.rs","byte_start":411940,"byte_end":411948,"line_start":699,"line_end":699,"column_start":12,"column_end":20},"name":"as_bytes","qualname":"<DynamicImage>::as_bytes","value":"pub fn as_bytes(&Self) -> &[u8]","parent":null,"children":[],"decl_id":null,"docs":" Return this image's pixels as a native endian byte slice.\n","sig":null,"attributes":[{"value":"/ Return this image's pixels as a native endian byte slice.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\dynimage.rs","byte_start":411867,"byte_end":411928,"line_start":698,"line_end":698,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":1844},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\dynimage.rs","byte_start":412183,"byte_end":412193,"line_start":706,"line_end":706,"column_start":12,"column_end":22},"name":"into_bytes","qualname":"<DynamicImage>::into_bytes","value":"pub fn into_bytes(Self) -> Vec<u8>","parent":null,"children":[],"decl_id":null,"docs":" Return this image's pixels as a byte vector. If the `ImageBuffer`\n container is `Vec<u8>`, this operation is free. Otherwise, a copy\n is returned.\n","sig":null,"attributes":[{"value":"/ Return this image's pixels as a byte vector. If the `ImageBuffer`","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\dynimage.rs","byte_start":412007,"byte_end":412076,"line_start":703,"line_end":703,"column_start":5,"column_end":74}},{"value":"/ container is `Vec<u8>`, this operation is free. Otherwise, a copy","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\dynimage.rs","byte_start":412081,"byte_end":412150,"line_start":704,"line_end":704,"column_start":5,"column_end":74}},{"value":"/ is returned.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\dynimage.rs","byte_start":412155,"byte_end":412171,"line_start":705,"line_end":705,"column_start":5,"column_end":21}}]},{"kind":"Method","id":{"krate":0,"index":1845},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\dynimage.rs","byte_start":412325,"byte_end":412333,"line_start":711,"line_end":711,"column_start":12,"column_end":20},"name":"to_bytes","qualname":"<DynamicImage>::to_bytes","value":"pub fn to_bytes(&Self) -> Vec<u8>","parent":null,"children":[],"decl_id":null,"docs":" Return a copy of this image's pixels as a byte vector.\n","sig":null,"attributes":[{"value":"/ Return a copy of this image's pixels as a byte vector.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\dynimage.rs","byte_start":412255,"byte_end":412313,"line_start":710,"line_end":710,"column_start":5,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":1846},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\dynimage.rs","byte_start":412441,"byte_end":412446,"line_start":716,"line_end":716,"column_start":12,"column_end":17},"name":"color","qualname":"<DynamicImage>::color","value":"pub fn color(&Self) -> color::ColorType","parent":null,"children":[],"decl_id":null,"docs":" Return this image's color type.\n","sig":null,"attributes":[{"value":"/ Return this image's color type.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\dynimage.rs","byte_start":412394,"byte_end":412429,"line_start":715,"line_end":715,"column_start":5,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":1847},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\dynimage.rs","byte_start":413250,"byte_end":413259,"line_start":732,"line_end":732,"column_start":12,"column_end":21},"name":"grayscale","qualname":"<DynamicImage>::grayscale","value":"pub fn grayscale(&Self) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Return a grayscale version of this image.\n","sig":null,"attributes":[{"value":"/ Return a grayscale version of this image.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\dynimage.rs","byte_start":413193,"byte_end":413238,"line_start":731,"line_end":731,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":1848},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\dynimage.rs","byte_start":414365,"byte_end":414371,"line_start":749,"line_end":749,"column_start":12,"column_end":18},"name":"invert","qualname":"<DynamicImage>::invert","value":"pub fn invert(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":" Invert the colors of this image.\n This method operates inplace.\n","sig":null,"attributes":[{"value":"/ Invert the colors of this image.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\dynimage.rs","byte_start":414279,"byte_end":414315,"line_start":747,"line_end":747,"column_start":5,"column_end":41}},{"value":"/ This method operates inplace.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\dynimage.rs","byte_start":414320,"byte_end":414353,"line_start":748,"line_end":748,"column_start":5,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":1849},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\dynimage.rs","byte_start":414735,"byte_end":414741,"line_start":757,"line_end":757,"column_start":12,"column_end":18},"name":"resize","qualname":"<DynamicImage>::resize","value":"pub fn resize(&Self, u32, u32, imageops::FilterType) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Resize this image using the specified filter algorithm.\n Returns a new image. The image's aspect ratio is preserved.\n The image is scaled to the maximum possible size that fits\n within the bounds specified by ```nwidth``` and ```nheight```.\n","sig":null,"attributes":[{"value":"/ Resize this image using the specified filter algorithm.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\dynimage.rs","byte_start":414458,"byte_end":414517,"line_start":753,"line_end":753,"column_start":5,"column_end":64}},{"value":"/ Returns a new image. The image's aspect ratio is preserved.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\dynimage.rs","byte_start":414522,"byte_end":414585,"line_start":754,"line_end":754,"column_start":5,"column_end":68}},{"value":"/ The image is scaled to the maximum possible size that fits","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\dynimage.rs","byte_start":414590,"byte_end":414652,"line_start":755,"line_end":755,"column_start":5,"column_end":67}},{"value":"/ within the bounds specified by ```nwidth``` and ```nheight```.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\dynimage.rs","byte_start":414657,"byte_end":414723,"line_start":756,"line_end":756,"column_start":5,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":1850},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\dynimage.rs","byte_start":415205,"byte_end":415217,"line_start":767,"line_end":767,"column_start":12,"column_end":24},"name":"resize_exact","qualname":"<DynamicImage>::resize_exact","value":"pub fn resize_exact(&Self, u32, u32, imageops::FilterType) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Resize this image using the specified filter algorithm.\n Returns a new image. Does not preserve aspect ratio.\n ```nwidth``` and ```nheight``` are the new image's dimensions\n","sig":null,"attributes":[{"value":"/ Resize this image using the specified filter algorithm.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\dynimage.rs","byte_start":415003,"byte_end":415062,"line_start":764,"line_end":764,"column_start":5,"column_end":64}},{"value":"/ Returns a new image. Does not preserve aspect ratio.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\dynimage.rs","byte_start":415067,"byte_end":415123,"line_start":765,"line_end":765,"column_start":5,"column_end":61}},{"value":"/ ```nwidth``` and ```nheight``` are the new image's dimensions","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\dynimage.rs","byte_start":415128,"byte_end":415193,"line_start":766,"line_end":766,"column_start":5,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":1851},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\dynimage.rs","byte_start":415908,"byte_end":415917,"line_start":784,"line_end":784,"column_start":12,"column_end":21},"name":"thumbnail","qualname":"<DynamicImage>::thumbnail","value":"pub fn thumbnail(&Self, u32, u32) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Scale this image down to fit within a specific size.\n Returns a new image. The image's aspect ratio is preserved.\n The image is scaled to the maximum possible size that fits\n within the bounds specified by ```nwidth``` and ```nheight```.","sig":null,"attributes":[{"value":"/ Scale this image down to fit within a specific size.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\dynimage.rs","byte_start":415433,"byte_end":415489,"line_start":776,"line_end":776,"column_start":5,"column_end":61}},{"value":"/ Returns a new image. The image's aspect ratio is preserved.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\dynimage.rs","byte_start":415494,"byte_end":415557,"line_start":777,"line_end":777,"column_start":5,"column_end":68}},{"value":"/ The image is scaled to the maximum possible size that fits","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\dynimage.rs","byte_start":415562,"byte_end":415624,"line_start":778,"line_end":778,"column_start":5,"column_end":67}},{"value":"/ within the bounds specified by ```nwidth``` and ```nheight```.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\dynimage.rs","byte_start":415629,"byte_end":415695,"line_start":779,"line_end":779,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\dynimage.rs","byte_start":415700,"byte_end":415703,"line_start":780,"line_end":780,"column_start":5,"column_end":8}},{"value":"/ This method uses a fast integer algorithm where each source","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\dynimage.rs","byte_start":415708,"byte_end":415771,"line_start":781,"line_end":781,"column_start":5,"column_end":68}},{"value":"/ pixel contributes to exactly one target pixel.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\dynimage.rs","byte_start":415776,"byte_end":415826,"line_start":782,"line_end":782,"column_start":5,"column_end":55}},{"value":"/ May give aliasing artifacts if new size is close to old size.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\dynimage.rs","byte_start":415831,"byte_end":415896,"line_start":783,"line_end":783,"column_start":5,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":1852},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\dynimage.rs","byte_start":416525,"byte_end":416540,"line_start":796,"line_end":796,"column_start":12,"column_end":27},"name":"thumbnail_exact","qualname":"<DynamicImage>::thumbnail_exact","value":"pub fn thumbnail_exact(&Self, u32, u32) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Scale this image down to a specific size.\n Returns a new image. Does not preserve aspect ratio.\n ```nwidth``` and ```nheight``` are the new image's dimensions.\n This method uses a fast integer algorithm where each source\n pixel contributes to exactly one target pixel.\n May give aliasing artifacts if new size is close to old size.\n","sig":null,"attributes":[{"value":"/ Scale this image down to a specific size.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\dynimage.rs","byte_start":416143,"byte_end":416188,"line_start":790,"line_end":790,"column_start":5,"column_end":50}},{"value":"/ Returns a new image. Does not preserve aspect ratio.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\dynimage.rs","byte_start":416193,"byte_end":416249,"line_start":791,"line_end":791,"column_start":5,"column_end":61}},{"value":"/ ```nwidth``` and ```nheight``` are the new image's dimensions.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\dynimage.rs","byte_start":416254,"byte_end":416320,"line_start":792,"line_end":792,"column_start":5,"column_end":71}},{"value":"/ This method uses a fast integer algorithm where each source","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\dynimage.rs","byte_start":416325,"byte_end":416388,"line_start":793,"line_end":793,"column_start":5,"column_end":68}},{"value":"/ pixel contributes to exactly one target pixel.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\dynimage.rs","byte_start":416393,"byte_end":416443,"line_start":794,"line_end":794,"column_start":5,"column_end":55}},{"value":"/ May give aliasing artifacts if new size is close to old size.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\dynimage.rs","byte_start":416448,"byte_end":416513,"line_start":795,"line_end":795,"column_start":5,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":1853},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\dynimage.rs","byte_start":417060,"byte_end":417074,"line_start":806,"line_end":806,"column_start":12,"column_end":26},"name":"resize_to_fill","qualname":"<DynamicImage>::resize_to_fill","value":"pub fn resize_to_fill(&Self, u32, u32, imageops::FilterType) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Resize this image using the specified filter algorithm.\n Returns a new image. The image's aspect ratio is preserved.\n The image is scaled to the maximum possible size that fits\n within the larger (relative to aspect ratio) of the bounds\n specified by ```nwidth``` and ```nheight```, then cropped to\n fit within the other bound.\n","sig":null,"attributes":[{"value":"/ Resize this image using the specified filter algorithm.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\dynimage.rs","byte_start":416682,"byte_end":416741,"line_start":800,"line_end":800,"column_start":5,"column_end":64}},{"value":"/ Returns a new image. The image's aspect ratio is preserved.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\dynimage.rs","byte_start":416746,"byte_end":416809,"line_start":801,"line_end":801,"column_start":5,"column_end":68}},{"value":"/ The image is scaled to the maximum possible size that fits","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\dynimage.rs","byte_start":416814,"byte_end":416876,"line_start":802,"line_end":802,"column_start":5,"column_end":67}},{"value":"/ within the larger (relative to aspect ratio) of the bounds","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\dynimage.rs","byte_start":416881,"byte_end":416943,"line_start":803,"line_end":803,"column_start":5,"column_end":67}},{"value":"/ specified by ```nwidth``` and ```nheight```, then cropped to","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\dynimage.rs","byte_start":416948,"byte_end":417012,"line_start":804,"line_end":804,"column_start":5,"column_end":69}},{"value":"/ fit within the other bound.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\dynimage.rs","byte_start":417017,"byte_end":417048,"line_start":805,"line_end":805,"column_start":5,"column_end":36}}]},{"kind":"Method","id":{"krate":0,"index":1854},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\dynimage.rs","byte_start":417894,"byte_end":417898,"line_start":829,"line_end":829,"column_start":12,"column_end":16},"name":"blur","qualname":"<DynamicImage>::blur","value":"pub fn blur(&Self, f32) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Performs a Gaussian blur on this image.\n ```sigma``` is a measure of how much to blur by.\n","sig":null,"attributes":[{"value":"/ Performs a Gaussian blur on this image.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\dynimage.rs","byte_start":417782,"byte_end":417825,"line_start":827,"line_end":827,"column_start":5,"column_end":48}},{"value":"/ ```sigma``` is a measure of how much to blur by.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\dynimage.rs","byte_start":417830,"byte_end":417882,"line_start":828,"line_end":828,"column_start":5,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":1855},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\dynimage.rs","byte_start":418276,"byte_end":418285,"line_start":838,"line_end":838,"column_start":12,"column_end":21},"name":"unsharpen","qualname":"<DynamicImage>::unsharpen","value":"pub fn unsharpen(&Self, f32, i32) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Performs an unsharpen mask on this image.\n ```sigma``` is the amount to blur the image by.\n ```threshold``` is a control of how much to sharpen.","sig":null,"attributes":[{"value":"/ Performs an unsharpen mask on this image.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\dynimage.rs","byte_start":418010,"byte_end":418055,"line_start":833,"line_end":833,"column_start":5,"column_end":50}},{"value":"/ ```sigma``` is the amount to blur the image by.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\dynimage.rs","byte_start":418060,"byte_end":418111,"line_start":834,"line_end":834,"column_start":5,"column_end":56}},{"value":"/ ```threshold``` is a control of how much to sharpen.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\dynimage.rs","byte_start":418116,"byte_end":418172,"line_start":835,"line_end":835,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\dynimage.rs","byte_start":418177,"byte_end":418180,"line_start":836,"line_end":836,"column_start":5,"column_end":8}},{"value":"/ See <https://en.wikipedia.org/wiki/Unsharp_masking#Digital_unsharp_masking>","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\dynimage.rs","byte_start":418185,"byte_end":418264,"line_start":837,"line_end":837,"column_start":5,"column_end":84}}]},{"kind":"Method","id":{"krate":0,"index":1856},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\dynimage.rs","byte_start":418494,"byte_end":418503,"line_start":843,"line_end":843,"column_start":12,"column_end":21},"name":"filter3x3","qualname":"<DynamicImage>::filter3x3","value":"pub fn filter3x3(&Self, &[f32]) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Filters this image with the specified 3x3 kernel.\n","sig":null,"attributes":[{"value":"/ Filters this image with the specified 3x3 kernel.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\dynimage.rs","byte_start":418429,"byte_end":418482,"line_start":842,"line_end":842,"column_start":5,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":1857},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\dynimage.rs","byte_start":418913,"byte_end":418928,"line_start":854,"line_end":854,"column_start":12,"column_end":27},"name":"adjust_contrast","qualname":"<DynamicImage>::adjust_contrast","value":"pub fn adjust_contrast(&Self, f32) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Adjust the contrast of this image.\n ```contrast``` is the amount to adjust the contrast by.\n Negative values decrease the contrast and positive values increase the contrast.\n","sig":null,"attributes":[{"value":"/ Adjust the contrast of this image.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\dynimage.rs","byte_start":418710,"byte_end":418748,"line_start":851,"line_end":851,"column_start":5,"column_end":43}},{"value":"/ ```contrast``` is the amount to adjust the contrast by.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\dynimage.rs","byte_start":418753,"byte_end":418812,"line_start":852,"line_end":852,"column_start":5,"column_end":64}},{"value":"/ Negative values decrease the contrast and positive values increase the contrast.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\dynimage.rs","byte_start":418817,"byte_end":418901,"line_start":853,"line_end":853,"column_start":5,"column_end":89}}]},{"kind":"Method","id":{"krate":0,"index":1858},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\dynimage.rs","byte_start":419228,"byte_end":419236,"line_start":861,"line_end":861,"column_start":12,"column_end":20},"name":"brighten","qualname":"<DynamicImage>::brighten","value":"pub fn brighten(&Self, i32) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Brighten the pixels of this image.\n ```value``` is the amount to brighten each pixel by.\n Negative values decrease the brightness and positive values increase it.\n","sig":null,"attributes":[{"value":"/ Brighten the pixels of this image.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\dynimage.rs","byte_start":419036,"byte_end":419074,"line_start":858,"line_end":858,"column_start":5,"column_end":43}},{"value":"/ ```value``` is the amount to brighten each pixel by.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\dynimage.rs","byte_start":419079,"byte_end":419135,"line_start":859,"line_end":859,"column_start":5,"column_end":61}},{"value":"/ Negative values decrease the brightness and positive values increase it.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\dynimage.rs","byte_start":419140,"byte_end":419216,"line_start":860,"line_end":860,"column_start":5,"column_end":81}}]},{"kind":"Method","id":{"krate":0,"index":1859},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\dynimage.rs","byte_start":419584,"byte_end":419593,"line_start":869,"line_end":869,"column_start":12,"column_end":21},"name":"huerotate","qualname":"<DynamicImage>::huerotate","value":"pub fn huerotate(&Self, i32) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Hue rotate the supplied image.\n `value` is the degrees to rotate each pixel by.\n 0 and 360 do nothing, the rest rotates by the given degree value.\n just like the css webkit filter hue-rotate(180)\n","sig":null,"attributes":[{"value":"/ Hue rotate the supplied image.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\dynimage.rs","byte_start":419352,"byte_end":419386,"line_start":865,"line_end":865,"column_start":5,"column_end":39}},{"value":"/ `value` is the degrees to rotate each pixel by.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\dynimage.rs","byte_start":419391,"byte_end":419442,"line_start":866,"line_end":866,"column_start":5,"column_end":56}},{"value":"/ 0 and 360 do nothing, the rest rotates by the given degree value.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\dynimage.rs","byte_start":419447,"byte_end":419516,"line_start":867,"line_end":867,"column_start":5,"column_end":74}},{"value":"/ just like the css webkit filter hue-rotate(180)","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\dynimage.rs","byte_start":419521,"byte_end":419572,"line_start":868,"line_end":868,"column_start":5,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":1860},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\dynimage.rs","byte_start":419752,"byte_end":419757,"line_start":874,"line_end":874,"column_start":12,"column_end":17},"name":"flipv","qualname":"<DynamicImage>::flipv","value":"pub fn flipv(&Self) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Flip this image vertically\n","sig":null,"attributes":[{"value":"/ Flip this image vertically","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\dynimage.rs","byte_start":419710,"byte_end":419740,"line_start":873,"line_end":873,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":1861},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\dynimage.rs","byte_start":419903,"byte_end":419908,"line_start":879,"line_end":879,"column_start":12,"column_end":17},"name":"fliph","qualname":"<DynamicImage>::fliph","value":"pub fn fliph(&Self) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Flip this image horizontally\n","sig":null,"attributes":[{"value":"/ Flip this image horizontally","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\dynimage.rs","byte_start":419859,"byte_end":419891,"line_start":878,"line_end":878,"column_start":5,"column_end":37}}]},{"kind":"Method","id":{"krate":0,"index":1862},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\dynimage.rs","byte_start":420067,"byte_end":420075,"line_start":884,"line_end":884,"column_start":12,"column_end":20},"name":"rotate90","qualname":"<DynamicImage>::rotate90","value":"pub fn rotate90(&Self) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Rotate this image 90 degrees clockwise.\n","sig":null,"attributes":[{"value":"/ Rotate this image 90 degrees clockwise.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\dynimage.rs","byte_start":420012,"byte_end":420055,"line_start":883,"line_end":883,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":1863},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\dynimage.rs","byte_start":420228,"byte_end":420237,"line_start":889,"line_end":889,"column_start":12,"column_end":21},"name":"rotate180","qualname":"<DynamicImage>::rotate180","value":"pub fn rotate180(&Self) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Rotate this image 180 degrees clockwise.\n","sig":null,"attributes":[{"value":"/ Rotate this image 180 degrees clockwise.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\dynimage.rs","byte_start":420172,"byte_end":420216,"line_start":888,"line_end":888,"column_start":5,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":1864},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\dynimage.rs","byte_start":420391,"byte_end":420400,"line_start":894,"line_end":894,"column_start":12,"column_end":21},"name":"rotate270","qualname":"<DynamicImage>::rotate270","value":"pub fn rotate270(&Self) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Rotate this image 270 degrees clockwise.\n","sig":null,"attributes":[{"value":"/ Rotate this image 270 degrees clockwise.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\dynimage.rs","byte_start":420335,"byte_end":420379,"line_start":893,"line_end":893,"column_start":5,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":1865},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\dynimage.rs","byte_start":420555,"byte_end":420563,"line_start":899,"line_end":899,"column_start":12,"column_end":20},"name":"write_to","qualname":"<DynamicImage>::write_to","value":"pub fn write_to<W: Write, F: Into<ImageOutputFormat>>(&Self, &mut W, F)\n-> ImageResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Encode this image and write it to ```w```\n","sig":null,"attributes":[{"value":"/ Encode this image and write it to ```w```","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\dynimage.rs","byte_start":420498,"byte_end":420543,"line_start":898,"line_end":898,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":1868},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\dynimage.rs","byte_start":424843,"byte_end":424847,"line_start":1015,"line_end":1015,"column_start":12,"column_end":16},"name":"save","qualname":"<DynamicImage>::save","value":"pub fn save<Q>(&Self, Q) -> ImageResult<()> where Q: AsRef<Path>","parent":null,"children":[],"decl_id":null,"docs":" Saves the buffer to a file at the path specified.","sig":null,"attributes":[{"value":"/ Saves the buffer to a file at the path specified.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\dynimage.rs","byte_start":424709,"byte_end":424762,"line_start":1012,"line_end":1012,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\dynimage.rs","byte_start":424767,"byte_end":424770,"line_start":1013,"line_end":1013,"column_start":5,"column_end":8}},{"value":"/ The image format is derived from the file extension.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\dynimage.rs","byte_start":424775,"byte_end":424831,"line_start":1014,"line_end":1014,"column_start":5,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":1870},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\dynimage.rs","byte_start":425219,"byte_end":425235,"line_start":1029,"line_end":1029,"column_start":12,"column_end":28},"name":"save_with_format","qualname":"<DynamicImage>::save_with_format","value":"pub fn save_with_format<Q>(&Self, Q, ImageFormat) -> ImageResult<()> where\nQ: AsRef<Path>","parent":null,"children":[],"decl_id":null,"docs":" Saves the buffer to a file at the specified path in\n the specified format.","sig":null,"attributes":[{"value":"/ Saves the buffer to a file at the specified path in","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\dynimage.rs","byte_start":425012,"byte_end":425067,"line_start":1024,"line_end":1024,"column_start":5,"column_end":60}},{"value":"/ the specified format.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\dynimage.rs","byte_start":425072,"byte_end":425097,"line_start":1025,"line_end":1025,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\dynimage.rs","byte_start":425102,"byte_end":425105,"line_start":1026,"line_end":1026,"column_start":5,"column_end":8}},{"value":"/ See [`save_buffer_with_format`](fn.save_buffer_with_format.html) for","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\dynimage.rs","byte_start":425110,"byte_end":425182,"line_start":1027,"line_end":1027,"column_start":5,"column_end":77}},{"value":"/ supported types.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\dynimage.rs","byte_start":425187,"byte_end":425207,"line_start":1028,"line_end":1028,"column_start":5,"column_end":25}}]},{"kind":"Function","id":{"krate":0,"index":1893},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\dynimage.rs","byte_start":433242,"byte_end":433246,"line_start":1228,"line_end":1228,"column_start":8,"column_end":12},"name":"open","qualname":"::dynimage::open","value":"pub fn open<P>(P) -> ImageResult<DynamicImage> where P: AsRef<Path>","parent":null,"children":[],"decl_id":null,"docs":" Open the image located at the path specified.\n The image's format is determined from the path's file extension.","sig":null,"attributes":[{"value":"/ Open the image located at the path specified.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\dynimage.rs","byte_start":432940,"byte_end":432989,"line_start":1221,"line_end":1221,"column_start":1,"column_end":50}},{"value":"/ The image's format is determined from the path's file extension.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\dynimage.rs","byte_start":432990,"byte_end":433058,"line_start":1222,"line_end":1222,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\dynimage.rs","byte_start":433059,"byte_end":433062,"line_start":1223,"line_end":1223,"column_start":1,"column_end":4}},{"value":"/ Try [`io::Reader`] for more advanced uses, including guessing the format based on the file's","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\dynimage.rs","byte_start":433063,"byte_end":433159,"line_start":1224,"line_end":1224,"column_start":1,"column_end":97}},{"value":"/ content before its path.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\dynimage.rs","byte_start":433160,"byte_end":433188,"line_start":1225,"line_end":1225,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\dynimage.rs","byte_start":433189,"byte_end":433192,"line_start":1226,"line_end":1226,"column_start":1,"column_end":4}},{"value":"/ [`io::Reader`]: io/struct.Reader.html","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\dynimage.rs","byte_start":433193,"byte_end":433234,"line_start":1227,"line_end":1227,"column_start":1,"column_end":42}}]},{"kind":"Function","id":{"krate":0,"index":1895},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\dynimage.rs","byte_start":433801,"byte_end":433817,"line_start":1243,"line_end":1243,"column_start":8,"column_end":24},"name":"image_dimensions","qualname":"::dynimage::image_dimensions","value":"pub fn image_dimensions<P>(P) -> ImageResult<(u32, u32)> where P: AsRef<Path>","parent":null,"children":[],"decl_id":null,"docs":" Read the dimensions of the image located at the specified path.\n This is faster than fully loading the image and then getting its dimensions.","sig":null,"attributes":[{"value":"/ Read the dimensions of the image located at the specified path.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\dynimage.rs","byte_start":433436,"byte_end":433503,"line_start":1236,"line_end":1236,"column_start":1,"column_end":68}},{"value":"/ This is faster than fully loading the image and then getting its dimensions.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\dynimage.rs","byte_start":433504,"byte_end":433584,"line_start":1237,"line_end":1237,"column_start":1,"column_end":81}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\dynimage.rs","byte_start":433585,"byte_end":433588,"line_start":1238,"line_end":1238,"column_start":1,"column_end":4}},{"value":"/ Try [`io::Reader`] for more advanced uses, including guessing the format based on the file's","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\dynimage.rs","byte_start":433589,"byte_end":433685,"line_start":1239,"line_end":1239,"column_start":1,"column_end":97}},{"value":"/ content before its path or manually supplying the format.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\dynimage.rs","byte_start":433686,"byte_end":433747,"line_start":1240,"line_end":1240,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\dynimage.rs","byte_start":433748,"byte_end":433751,"line_start":1241,"line_end":1241,"column_start":1,"column_end":4}},{"value":"/ [`io::Reader`]: io/struct.Reader.html","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\dynimage.rs","byte_start":433752,"byte_end":433793,"line_start":1242,"line_end":1242,"column_start":1,"column_end":42}}]},{"kind":"Function","id":{"krate":0,"index":1897},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\dynimage.rs","byte_start":434392,"byte_end":434403,"line_start":1258,"line_end":1258,"column_start":8,"column_end":19},"name":"save_buffer","qualname":"::dynimage::save_buffer","value":"pub fn save_buffer<P>(P, &[u8], u32, u32, color::ColorType) -> ImageResult<()>\nwhere P: AsRef<Path>","parent":null,"children":[],"decl_id":null,"docs":" Saves the supplied buffer to a file at the path specified.","sig":null,"attributes":[{"value":"/ Saves the supplied buffer to a file at the path specified.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\dynimage.rs","byte_start":434017,"byte_end":434079,"line_start":1251,"line_end":1251,"column_start":1,"column_end":63}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\dynimage.rs","byte_start":434080,"byte_end":434083,"line_start":1252,"line_end":1252,"column_start":1,"column_end":4}},{"value":"/ The image format is derived from the file extension. The buffer is assumed to have","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\dynimage.rs","byte_start":434084,"byte_end":434170,"line_start":1253,"line_end":1253,"column_start":1,"column_end":87}},{"value":"/ the correct format according to the specified color type.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\dynimage.rs","byte_start":434171,"byte_end":434232,"line_start":1254,"line_end":1254,"column_start":1,"column_end":62}},{"value":"/ This will lead to corrupted files if the buffer contains malformed data. Currently only","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\dynimage.rs","byte_start":434234,"byte_end":434325,"line_start":1256,"line_end":1256,"column_start":1,"column_end":92}},{"value":"/ jpeg, png, ico, pnm, bmp and tiff files are supported.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\dynimage.rs","byte_start":434326,"byte_end":434384,"line_start":1257,"line_end":1257,"column_start":1,"column_end":59}}]},{"kind":"Function","id":{"krate":0,"index":1899},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\dynimage.rs","byte_start":435057,"byte_end":435080,"line_start":1280,"line_end":1280,"column_start":8,"column_end":31},"name":"save_buffer_with_format","qualname":"::dynimage::save_buffer_with_format","value":"pub fn save_buffer_with_format<P>(P, &[u8], u32, u32, color::ColorType,\n                                  ImageFormat) -> ImageResult<()> where\nP: AsRef<Path>","parent":null,"children":[],"decl_id":null,"docs":" Saves the supplied buffer to a file at the path specified\n in the specified format.","sig":null,"attributes":[{"value":"/ Saves the supplied buffer to a file at the path specified","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\dynimage.rs","byte_start":434709,"byte_end":434770,"line_start":1272,"line_end":1272,"column_start":1,"column_end":62}},{"value":"/ in the specified format.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\dynimage.rs","byte_start":434771,"byte_end":434799,"line_start":1273,"line_end":1273,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\dynimage.rs","byte_start":434800,"byte_end":434803,"line_start":1274,"line_end":1274,"column_start":1,"column_end":4}},{"value":"/ The buffer is assumed to have the correct format according","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\dynimage.rs","byte_start":434804,"byte_end":434866,"line_start":1275,"line_end":1275,"column_start":1,"column_end":63}},{"value":"/ to the specified color type.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\dynimage.rs","byte_start":434867,"byte_end":434899,"line_start":1276,"line_end":1276,"column_start":1,"column_end":33}},{"value":"/ This will lead to corrupted files if the buffer contains","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\dynimage.rs","byte_start":434900,"byte_end":434960,"line_start":1277,"line_end":1277,"column_start":1,"column_end":61}},{"value":"/ malformed data. Currently only jpeg, png, ico, bmp and","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\dynimage.rs","byte_start":434961,"byte_end":435019,"line_start":1278,"line_end":1278,"column_start":1,"column_end":59}},{"value":"/ tiff files are supported.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\dynimage.rs","byte_start":435020,"byte_end":435049,"line_start":1279,"line_end":1279,"column_start":1,"column_end":30}}]},{"kind":"Function","id":{"krate":0,"index":1901},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\dynimage.rs","byte_start":435643,"byte_end":435659,"line_start":1303,"line_end":1303,"column_start":8,"column_end":24},"name":"load_from_memory","qualname":"::dynimage::load_from_memory","value":"pub fn load_from_memory(&[u8]) -> ImageResult<DynamicImage>","parent":null,"children":[],"decl_id":null,"docs":" Create a new image from a byte slice","sig":null,"attributes":[{"value":"/ Create a new image from a byte slice","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\dynimage.rs","byte_start":435399,"byte_end":435439,"line_start":1295,"line_end":1295,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\dynimage.rs","byte_start":435440,"byte_end":435443,"line_start":1296,"line_end":1296,"column_start":1,"column_end":4}},{"value":"/ Makes an educated guess about the image format.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\dynimage.rs","byte_start":435444,"byte_end":435495,"line_start":1297,"line_end":1297,"column_start":1,"column_end":52}},{"value":"/ TGA is not supported by this function.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\dynimage.rs","byte_start":435496,"byte_end":435538,"line_start":1298,"line_end":1298,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\dynimage.rs","byte_start":435539,"byte_end":435542,"line_start":1299,"line_end":1299,"column_start":1,"column_end":4}},{"value":"/ Try [`io::Reader`] for more advanced uses.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\dynimage.rs","byte_start":435543,"byte_end":435589,"line_start":1300,"line_end":1300,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\dynimage.rs","byte_start":435590,"byte_end":435593,"line_start":1301,"line_end":1301,"column_start":1,"column_end":4}},{"value":"/ [`io::Reader`]: io/struct.Reader.html","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\dynimage.rs","byte_start":435594,"byte_end":435635,"line_start":1302,"line_end":1302,"column_start":1,"column_end":42}}]},{"kind":"Function","id":{"krate":0,"index":1902},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\dynimage.rs","byte_start":436141,"byte_end":436169,"line_start":1318,"line_end":1318,"column_start":8,"column_end":36},"name":"load_from_memory_with_format","qualname":"::dynimage::load_from_memory_with_format","value":"pub fn load_from_memory_with_format(&[u8], ImageFormat)\n-> ImageResult<DynamicImage>","parent":null,"children":[],"decl_id":null,"docs":" Create a new image from a byte slice","sig":null,"attributes":[{"value":"/ Create a new image from a byte slice","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\dynimage.rs","byte_start":435814,"byte_end":435854,"line_start":1308,"line_end":1308,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\dynimage.rs","byte_start":435855,"byte_end":435858,"line_start":1309,"line_end":1309,"column_start":1,"column_end":4}},{"value":"/ This is just a simple wrapper that constructs an `std::io::Cursor` around the buffer and then","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\dynimage.rs","byte_start":435859,"byte_end":435956,"line_start":1310,"line_end":1310,"column_start":1,"column_end":98}},{"value":"/ calls `load` with that reader.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\dynimage.rs","byte_start":435957,"byte_end":435991,"line_start":1311,"line_end":1311,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\dynimage.rs","byte_start":435992,"byte_end":435995,"line_start":1312,"line_end":1312,"column_start":1,"column_end":4}},{"value":"/ Try [`io::Reader`] for more advanced uses.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\dynimage.rs","byte_start":435996,"byte_end":436042,"line_start":1313,"line_end":1313,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\dynimage.rs","byte_start":436043,"byte_end":436046,"line_start":1314,"line_end":1314,"column_start":1,"column_end":4}},{"value":"/ [`load`]: fn.load.html","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\dynimage.rs","byte_start":436047,"byte_end":436073,"line_start":1315,"line_end":1315,"column_start":1,"column_end":27}},{"value":"/ [`io::Reader`]: io/struct.Reader.html","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\dynimage.rs","byte_start":436074,"byte_end":436115,"line_start":1316,"line_end":1316,"column_start":1,"column_end":42}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\dynimage.rs","byte_start":436116,"byte_end":436133,"line_start":1317,"line_end":1317,"column_start":1,"column_end":18}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3335},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\image.rs","byte_start":437998,"byte_end":438001,"line_start":26,"line_end":26,"column_start":5,"column_end":8},"name":"Png","qualname":"::image::ImageFormat::Png","value":"ImageFormat::Png","parent":{"krate":0,"index":3334},"children":[],"decl_id":null,"docs":" An Image in PNG Format\n","sig":null,"attributes":[{"value":"/ An Image in PNG Format","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\image.rs","byte_start":437967,"byte_end":437993,"line_start":25,"line_end":25,"column_start":5,"column_end":31}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3337},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\image.rs","byte_start":438040,"byte_end":438044,"line_start":29,"line_end":29,"column_start":5,"column_end":9},"name":"Jpeg","qualname":"::image::ImageFormat::Jpeg","value":"ImageFormat::Jpeg","parent":{"krate":0,"index":3334},"children":[],"decl_id":null,"docs":" An Image in JPEG Format\n","sig":null,"attributes":[{"value":"/ An Image in JPEG Format","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\image.rs","byte_start":438008,"byte_end":438035,"line_start":28,"line_end":28,"column_start":5,"column_end":32}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3339},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\image.rs","byte_start":438082,"byte_end":438085,"line_start":32,"line_end":32,"column_start":5,"column_end":8},"name":"Gif","qualname":"::image::ImageFormat::Gif","value":"ImageFormat::Gif","parent":{"krate":0,"index":3334},"children":[],"decl_id":null,"docs":" An Image in GIF Format\n","sig":null,"attributes":[{"value":"/ An Image in GIF Format","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\image.rs","byte_start":438051,"byte_end":438077,"line_start":31,"line_end":31,"column_start":5,"column_end":31}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3341},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\image.rs","byte_start":438124,"byte_end":438128,"line_start":35,"line_end":35,"column_start":5,"column_end":9},"name":"WebP","qualname":"::image::ImageFormat::WebP","value":"ImageFormat::WebP","parent":{"krate":0,"index":3334},"children":[],"decl_id":null,"docs":" An Image in WEBP Format\n","sig":null,"attributes":[{"value":"/ An Image in WEBP Format","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\image.rs","byte_start":438092,"byte_end":438119,"line_start":34,"line_end":34,"column_start":5,"column_end":32}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3343},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\image.rs","byte_start":438174,"byte_end":438177,"line_start":38,"line_end":38,"column_start":5,"column_end":8},"name":"Pnm","qualname":"::image::ImageFormat::Pnm","value":"ImageFormat::Pnm","parent":{"krate":0,"index":3334},"children":[],"decl_id":null,"docs":" An Image in general PNM Format\n","sig":null,"attributes":[{"value":"/ An Image in general PNM Format","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\image.rs","byte_start":438135,"byte_end":438169,"line_start":37,"line_end":37,"column_start":5,"column_end":39}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3345},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\image.rs","byte_start":438216,"byte_end":438220,"line_start":41,"line_end":41,"column_start":5,"column_end":9},"name":"Tiff","qualname":"::image::ImageFormat::Tiff","value":"ImageFormat::Tiff","parent":{"krate":0,"index":3334},"children":[],"decl_id":null,"docs":" An Image in TIFF Format\n","sig":null,"attributes":[{"value":"/ An Image in TIFF Format","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\image.rs","byte_start":438184,"byte_end":438211,"line_start":40,"line_end":40,"column_start":5,"column_end":32}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3347},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\image.rs","byte_start":438258,"byte_end":438261,"line_start":44,"line_end":44,"column_start":5,"column_end":8},"name":"Tga","qualname":"::image::ImageFormat::Tga","value":"ImageFormat::Tga","parent":{"krate":0,"index":3334},"children":[],"decl_id":null,"docs":" An Image in TGA Format\n","sig":null,"attributes":[{"value":"/ An Image in TGA Format","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\image.rs","byte_start":438227,"byte_end":438253,"line_start":43,"line_end":43,"column_start":5,"column_end":31}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3349},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\image.rs","byte_start":438299,"byte_end":438302,"line_start":47,"line_end":47,"column_start":5,"column_end":8},"name":"Dds","qualname":"::image::ImageFormat::Dds","value":"ImageFormat::Dds","parent":{"krate":0,"index":3334},"children":[],"decl_id":null,"docs":" An Image in DDS Format\n","sig":null,"attributes":[{"value":"/ An Image in DDS Format","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\image.rs","byte_start":438268,"byte_end":438294,"line_start":46,"line_end":46,"column_start":5,"column_end":31}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3351},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\image.rs","byte_start":438340,"byte_end":438343,"line_start":50,"line_end":50,"column_start":5,"column_end":8},"name":"Bmp","qualname":"::image::ImageFormat::Bmp","value":"ImageFormat::Bmp","parent":{"krate":0,"index":3334},"children":[],"decl_id":null,"docs":" An Image in BMP Format\n","sig":null,"attributes":[{"value":"/ An Image in BMP Format","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\image.rs","byte_start":438309,"byte_end":438335,"line_start":49,"line_end":49,"column_start":5,"column_end":31}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3353},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\image.rs","byte_start":438381,"byte_end":438384,"line_start":53,"line_end":53,"column_start":5,"column_end":8},"name":"Ico","qualname":"::image::ImageFormat::Ico","value":"ImageFormat::Ico","parent":{"krate":0,"index":3334},"children":[],"decl_id":null,"docs":" An Image in ICO Format\n","sig":null,"attributes":[{"value":"/ An Image in ICO Format","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\image.rs","byte_start":438350,"byte_end":438376,"line_start":52,"line_end":52,"column_start":5,"column_end":31}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3355},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\image.rs","byte_start":438431,"byte_end":438434,"line_start":56,"line_end":56,"column_start":5,"column_end":8},"name":"Hdr","qualname":"::image::ImageFormat::Hdr","value":"ImageFormat::Hdr","parent":{"krate":0,"index":3334},"children":[],"decl_id":null,"docs":" An Image in Radiance HDR Format\n","sig":null,"attributes":[{"value":"/ An Image in Radiance HDR Format","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\image.rs","byte_start":438391,"byte_end":438426,"line_start":55,"line_end":55,"column_start":5,"column_end":40}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3357},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\image.rs","byte_start":438477,"byte_end":438485,"line_start":59,"line_end":59,"column_start":5,"column_end":13},"name":"Farbfeld","qualname":"::image::ImageFormat::Farbfeld","value":"ImageFormat::Farbfeld","parent":{"krate":0,"index":3334},"children":[],"decl_id":null,"docs":" An Image in farbfeld Format\n","sig":null,"attributes":[{"value":"/ An Image in farbfeld Format","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\image.rs","byte_start":438441,"byte_end":438472,"line_start":58,"line_end":58,"column_start":5,"column_end":36}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3359},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\image.rs","byte_start":438525,"byte_end":438529,"line_start":62,"line_end":62,"column_start":5,"column_end":9},"name":"Avif","qualname":"::image::ImageFormat::Avif","value":"ImageFormat::Avif","parent":{"krate":0,"index":3334},"children":[],"decl_id":null,"docs":" An Image in AVIF format.\n","sig":null,"attributes":[{"value":"/ An Image in AVIF format.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\image.rs","byte_start":438492,"byte_end":438520,"line_start":61,"line_end":61,"column_start":5,"column_end":33}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3361},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\image.rs","byte_start":438555,"byte_end":438570,"line_start":65,"line_end":65,"column_start":5,"column_end":20},"name":"__NonExhaustive","qualname":"::image::ImageFormat::__NonExhaustive","value":"ImageFormat::__NonExhaustive(crate::utils::NonExhaustiveMarker)","parent":{"krate":0,"index":3334},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":3334},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\image.rs","byte_start":437949,"byte_end":437960,"line_start":24,"line_end":24,"column_start":10,"column_end":21},"name":"ImageFormat","qualname":"::image::ImageFormat","value":"pub enum ImageFormat {\n\n    /// An Image in PNG Format\n    Png,\n\n    /// An Image in JPEG Format\n    Jpeg,\n\n    /// An Image in GIF Format\n    Gif,\n\n    /// An Image in WEBP Format\n    WebP,\n\n    /// An Image in general PNM Format\n    Pnm,\n\n    /// An Image in TIFF Format\n    Tiff,\n\n    /// An Image in TGA Format\n    Tga,\n\n    /// An Image in DDS Format\n    Dds,\n\n    /// An Image in BMP Format\n    Bmp,\n\n    /// An Image in ICO Format\n    Ico,\n\n    /// An Image in Radiance HDR Format\n    Hdr,\n\n    /// An Image in farbfeld Format\n    Farbfeld,\n\n    /// An Image in AVIF format.\n    Avif,\n\n    #[doc(hidden)]\n    __NonExhaustive(crate::utils::NonExhaustiveMarker),\n}","parent":null,"children":[{"krate":0,"index":3335},{"krate":0,"index":3337},{"krate":0,"index":3339},{"krate":0,"index":3341},{"krate":0,"index":3343},{"krate":0,"index":3345},{"krate":0,"index":3347},{"krate":0,"index":3349},{"krate":0,"index":3351},{"krate":0,"index":3353},{"krate":0,"index":3355},{"krate":0,"index":3357},{"krate":0,"index":3359},{"krate":0,"index":3361}],"decl_id":null,"docs":" An enumeration of supported image formats.\n Not all formats support both encoding and decoding.\n","sig":null,"attributes":[{"value":"/ An enumeration of supported image formats.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\image.rs","byte_start":437786,"byte_end":437832,"line_start":21,"line_end":21,"column_start":1,"column_end":47}},{"value":"/ Not all formats support both encoding and decoding.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\image.rs","byte_start":437833,"byte_end":437888,"line_start":22,"line_end":22,"column_start":1,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":1929},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\image.rs","byte_start":438932,"byte_end":438946,"line_start":80,"line_end":80,"column_start":12,"column_end":26},"name":"from_extension","qualname":"<ImageFormat>::from_extension","value":"pub fn from_extension<S>(S) -> Option<Self> where S: AsRef<OsStr>","parent":null,"children":[],"decl_id":null,"docs":" Return the image format specified by a path's file extension.","sig":null,"attributes":[{"value":"/ Return the image format specified by a path's file extension.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\image.rs","byte_start":438633,"byte_end":438698,"line_start":69,"line_end":69,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\image.rs","byte_start":438703,"byte_end":438706,"line_start":70,"line_end":70,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\image.rs","byte_start":438711,"byte_end":438724,"line_start":71,"line_end":71,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\image.rs","byte_start":438729,"byte_end":438732,"line_start":72,"line_end":72,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\image.rs","byte_start":438737,"byte_end":438744,"line_start":73,"line_end":73,"column_start":5,"column_end":12}},{"value":"/ use image::ImageFormat;","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\image.rs","byte_start":438749,"byte_end":438776,"line_start":74,"line_end":74,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\image.rs","byte_start":438781,"byte_end":438784,"line_start":75,"line_end":75,"column_start":5,"column_end":8}},{"value":"/ let format = ImageFormat::from_extension(\"jpg\");","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\image.rs","byte_start":438789,"byte_end":438841,"line_start":76,"line_end":76,"column_start":5,"column_end":57}},{"value":"/ assert_eq!(format, Some(ImageFormat::Jpeg));","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\image.rs","byte_start":438846,"byte_end":438894,"line_start":77,"line_end":77,"column_start":5,"column_end":53}},{"value":"/ ```","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\image.rs","byte_start":438899,"byte_end":438906,"line_start":78,"line_end":78,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\image.rs","byte_start":438911,"byte_end":438920,"line_start":79,"line_end":79,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1932},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\image.rs","byte_start":440285,"byte_end":440294,"line_start":119,"line_end":119,"column_start":12,"column_end":21},"name":"from_path","qualname":"<ImageFormat>::from_path","value":"pub fn from_path<P>(P) -> ImageResult<Self> where P: AsRef<Path>","parent":null,"children":[],"decl_id":null,"docs":" Return the image format specified by the path's file extension.","sig":null,"attributes":[{"value":"/ Return the image format specified by the path's file extension.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\image.rs","byte_start":439924,"byte_end":439991,"line_start":106,"line_end":106,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\image.rs","byte_start":439996,"byte_end":439999,"line_start":107,"line_end":107,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\image.rs","byte_start":440004,"byte_end":440017,"line_start":108,"line_end":108,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\image.rs","byte_start":440022,"byte_end":440025,"line_start":109,"line_end":109,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\image.rs","byte_start":440030,"byte_end":440037,"line_start":110,"line_end":110,"column_start":5,"column_end":12}},{"value":"/ use image::ImageFormat;","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\image.rs","byte_start":440042,"byte_end":440069,"line_start":111,"line_end":111,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\image.rs","byte_start":440074,"byte_end":440077,"line_start":112,"line_end":112,"column_start":5,"column_end":8}},{"value":"/ let format = ImageFormat::from_path(\"images/ferris.png\")?;","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\image.rs","byte_start":440082,"byte_end":440144,"line_start":113,"line_end":113,"column_start":5,"column_end":67}},{"value":"/ assert_eq!(format, ImageFormat::Png);","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\image.rs","byte_start":440149,"byte_end":440190,"line_start":114,"line_end":114,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\image.rs","byte_start":440195,"byte_end":440198,"line_start":115,"line_end":115,"column_start":5,"column_end":8}},{"value":"/ # Ok::<(), image::error::ImageError>(())","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\image.rs","byte_start":440203,"byte_end":440247,"line_start":116,"line_end":116,"column_start":5,"column_end":49}},{"value":"/ ```","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\image.rs","byte_start":440252,"byte_end":440259,"line_start":117,"line_end":117,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\image.rs","byte_start":440264,"byte_end":440273,"line_start":118,"line_end":118,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1937},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\image.rs","byte_start":441062,"byte_end":441070,"line_start":139,"line_end":139,"column_start":12,"column_end":20},"name":"can_read","qualname":"<ImageFormat>::can_read","value":"pub fn can_read(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Return if the ImageFormat can be decoded by the lib.\n","sig":null,"attributes":[{"value":"/ Return if the ImageFormat can be decoded by the lib.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\image.rs","byte_start":440980,"byte_end":441036,"line_start":137,"line_end":137,"column_start":5,"column_end":61}},{"value":"inline","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\image.rs","byte_start":441041,"byte_end":441050,"line_start":138,"line_end":138,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1938},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\image.rs","byte_start":441890,"byte_end":441899,"line_start":161,"line_end":161,"column_start":12,"column_end":21},"name":"can_write","qualname":"<ImageFormat>::can_write","value":"pub fn can_write(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Return if the ImageFormat can be encoded by the lib.\n","sig":null,"attributes":[{"value":"/ Return if the ImageFormat can be encoded by the lib.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\image.rs","byte_start":441808,"byte_end":441864,"line_start":159,"line_end":159,"column_start":5,"column_end":61}},{"value":"inline","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\image.rs","byte_start":441869,"byte_end":441878,"line_start":160,"line_end":160,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1939},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\image.rs","byte_start":443253,"byte_end":443267,"line_start":190,"line_end":190,"column_start":12,"column_end":26},"name":"extensions_str","qualname":"<ImageFormat>::extensions_str","value":"pub fn extensions_str(Self) -> &'static [&'static str]","parent":null,"children":[],"decl_id":null,"docs":" Return a list of applicable extensions for this format.","sig":null,"attributes":[{"value":"/ Return a list of applicable extensions for this format.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\image.rs","byte_start":442663,"byte_end":442722,"line_start":181,"line_end":181,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\image.rs","byte_start":442727,"byte_end":442730,"line_start":182,"line_end":182,"column_start":5,"column_end":8}},{"value":"/ All currently recognized image formats specify at least on extension but for future","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\image.rs","byte_start":442735,"byte_end":442822,"line_start":183,"line_end":183,"column_start":5,"column_end":92}},{"value":"/ compatibility you should not rely on this fact. The list may be empty if the format has no","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\image.rs","byte_start":442827,"byte_end":442921,"line_start":184,"line_end":184,"column_start":5,"column_end":99}},{"value":"/ recognized file representation, for example in case it is used as a purely transient memory","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\image.rs","byte_start":442926,"byte_end":443021,"line_start":185,"line_end":185,"column_start":5,"column_end":100}},{"value":"/ format.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\image.rs","byte_start":443026,"byte_end":443037,"line_start":186,"line_end":186,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\image.rs","byte_start":443042,"byte_end":443045,"line_start":187,"line_end":187,"column_start":5,"column_end":8}},{"value":"/ The method name `extensions` remains reserved for introducing another method in the future","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\image.rs","byte_start":443050,"byte_end":443144,"line_start":188,"line_end":188,"column_start":5,"column_end":99}},{"value":"/ that yields a slice of `OsStr` which is blocked by several features of const evaluation.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\image.rs","byte_start":443149,"byte_end":443241,"line_start":189,"line_end":189,"column_start":5,"column_end":97}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3380},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\image.rs","byte_start":444293,"byte_end":444296,"line_start":216,"line_end":216,"column_start":5,"column_end":8},"name":"Png","qualname":"::image::ImageOutputFormat::Png","value":"ImageOutputFormat::Png","parent":{"krate":0,"index":3379},"children":[],"decl_id":null,"docs":" An Image in PNG Format\n","sig":null,"attributes":[{"value":"cfg(feature = \"png\")","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\image.rs","byte_start":444234,"byte_end":444257,"line_start":214,"line_end":214,"column_start":5,"column_end":28}},{"value":"/ An Image in PNG Format","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\image.rs","byte_start":444262,"byte_end":444288,"line_start":215,"line_end":215,"column_start":5,"column_end":31}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3382},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\image.rs","byte_start":444387,"byte_end":444391,"line_start":220,"line_end":220,"column_start":5,"column_end":9},"name":"Jpeg","qualname":"::image::ImageOutputFormat::Jpeg","value":"ImageOutputFormat::Jpeg(u8)","parent":{"krate":0,"index":3379},"children":[],"decl_id":null,"docs":" An Image in JPEG Format with specified quality\n","sig":null,"attributes":[{"value":"cfg(feature = \"jpeg\")","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\image.rs","byte_start":444303,"byte_end":444327,"line_start":218,"line_end":218,"column_start":5,"column_end":29}},{"value":"/ An Image in JPEG Format with specified quality","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\image.rs","byte_start":444332,"byte_end":444382,"line_start":219,"line_end":219,"column_start":5,"column_end":55}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3385},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\image.rs","byte_start":445172,"byte_end":445183,"line_start":253,"line_end":253,"column_start":5,"column_end":16},"name":"Unsupported","qualname":"::image::ImageOutputFormat::Unsupported","value":"ImageOutputFormat::Unsupported(String)","parent":{"krate":0,"index":3379},"children":[],"decl_id":null,"docs":" A value for signalling an error: An unsupported format was requested\n","sig":null,"attributes":[{"value":"/ A value for signalling an error: An unsupported format was requested","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\image.rs","byte_start":444927,"byte_end":444999,"line_start":250,"line_end":250,"column_start":5,"column_end":77}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3388},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\image.rs","byte_start":445217,"byte_end":445232,"line_start":256,"line_end":256,"column_start":5,"column_end":20},"name":"__NonExhaustive","qualname":"::image::ImageOutputFormat::__NonExhaustive","value":"ImageOutputFormat::__NonExhaustive(crate::utils::NonExhaustiveMarker)","parent":{"krate":0,"index":3379},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":3379},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\image.rs","byte_start":444210,"byte_end":444227,"line_start":213,"line_end":213,"column_start":10,"column_end":27},"name":"ImageOutputFormat","qualname":"::image::ImageOutputFormat","value":"pub enum ImageOutputFormat {\n\n    #[cfg(feature = \"png\")]\n    /// An Image in PNG Format\n    Png,\n\n    #[cfg(feature = \"jpeg\")]\n    /// An Image in JPEG Format with specified quality\n    Jpeg(u8),\n\n    /// A value for signalling an error: An unsupported format was requested\n    Unsupported(String),\n\n    #[doc(hidden)]\n    __NonExhaustive(crate::utils::NonExhaustiveMarker),\n}","parent":null,"children":[{"krate":0,"index":3380},{"krate":0,"index":3382},{"krate":0,"index":3385},{"krate":0,"index":3388}],"decl_id":null,"docs":" An enumeration of supported image formats for encoding.\n","sig":null,"attributes":[{"value":"/ An enumeration of supported image formats for encoding.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\image.rs","byte_start":444102,"byte_end":444161,"line_start":211,"line_end":211,"column_start":1,"column_end":60}}]},{"kind":"Struct","id":{"krate":0,"index":3402},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\image.rs","byte_start":454543,"byte_end":454551,"line_start":477,"line_end":477,"column_start":12,"column_end":20},"name":"Progress","qualname":"::image::Progress","value":"Progress {  }","parent":null,"children":[{"krate":0,"index":3403},{"krate":0,"index":3404}],"decl_id":null,"docs":" Represents the progress of an image operation.","sig":null,"attributes":[{"value":"/ Represents the progress of an image operation.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\image.rs","byte_start":454139,"byte_end":454189,"line_start":471,"line_end":471,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\image.rs","byte_start":454190,"byte_end":454193,"line_start":472,"line_end":472,"column_start":1,"column_end":4}},{"value":"/ Note that this is not necessarily accurate and no change to the values passed to the progress","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\image.rs","byte_start":454194,"byte_end":454291,"line_start":473,"line_end":473,"column_start":1,"column_end":98}},{"value":"/ function during decoding will be considered breaking. A decoder could in theory report the","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\image.rs","byte_start":454292,"byte_end":454386,"line_start":474,"line_end":474,"column_start":1,"column_end":95}},{"value":"/ progress `(0, 0)` if progress is unknown, without violating the interface contract of the type.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\image.rs","byte_start":454387,"byte_end":454486,"line_start":475,"line_end":475,"column_start":1,"column_end":100}}]},{"kind":"Method","id":{"krate":0,"index":1965},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\image.rs","byte_start":454659,"byte_end":454666,"line_start":484,"line_end":484,"column_start":12,"column_end":19},"name":"current","qualname":"<Progress>::current","value":"pub fn current(Self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" A measure of completed decoding.\n","sig":null,"attributes":[{"value":"/ A measure of completed decoding.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\image.rs","byte_start":454611,"byte_end":454647,"line_start":483,"line_end":483,"column_start":5,"column_end":41}}]},{"kind":"Method","id":{"krate":0,"index":1966},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\image.rs","byte_start":454839,"byte_end":454844,"line_start":491,"line_end":491,"column_start":12,"column_end":17},"name":"total","qualname":"<Progress>::total","value":"pub fn total(Self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" A measure of all necessary decoding work.","sig":null,"attributes":[{"value":"/ A measure of all necessary decoding work.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\image.rs","byte_start":454714,"byte_end":454759,"line_start":488,"line_end":488,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\image.rs","byte_start":454764,"byte_end":454767,"line_start":489,"line_end":489,"column_start":5,"column_end":8}},{"value":"/ This is in general greater or equal than `current`.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\image.rs","byte_start":454772,"byte_end":454827,"line_start":490,"line_end":490,"column_start":5,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":1967},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\image.rs","byte_start":454954,"byte_end":454963,"line_start":496,"line_end":496,"column_start":12,"column_end":21},"name":"remaining","qualname":"<Progress>::remaining","value":"pub fn remaining(Self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Calculate a measure for remaining decoding work.\n","sig":null,"attributes":[{"value":"/ Calculate a measure for remaining decoding work.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\image.rs","byte_start":454890,"byte_end":454942,"line_start":495,"line_end":495,"column_start":5,"column_end":57}}]},{"kind":"Trait","id":{"krate":0,"index":1968},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\image.rs","byte_start":455092,"byte_end":455104,"line_start":502,"line_end":502,"column_start":11,"column_end":23},"name":"ImageDecoder","qualname":"::image::ImageDecoder","value":"ImageDecoder<'a>: Sized","parent":null,"children":[{"krate":0,"index":1970},{"krate":0,"index":1971},{"krate":0,"index":1972},{"krate":0,"index":1973},{"krate":0,"index":1974},{"krate":0,"index":1975},{"krate":0,"index":1976},{"krate":0,"index":1977},{"krate":0,"index":1979}],"decl_id":null,"docs":" The trait that all decoders implement\n","sig":null,"attributes":[{"value":"/ The trait that all decoders implement","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\image.rs","byte_start":455040,"byte_end":455081,"line_start":501,"line_end":501,"column_start":1,"column_end":42}}]},{"kind":"Type","id":{"krate":0,"index":1970},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\image.rs","byte_start":455181,"byte_end":455187,"line_start":504,"line_end":504,"column_start":10,"column_end":16},"name":"Reader","qualname":"::image::ImageDecoder::Reader","value":"type Reader: Read + 'a;","parent":{"krate":0,"index":1968},"children":[],"decl_id":null,"docs":" The type of reader produced by `into_reader`.\n","sig":null,"attributes":[{"value":"/ The type of reader produced by `into_reader`.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\image.rs","byte_start":455122,"byte_end":455171,"line_start":503,"line_end":503,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":1971},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\image.rs","byte_start":455277,"byte_end":455287,"line_start":507,"line_end":507,"column_start":8,"column_end":18},"name":"dimensions","qualname":"::image::ImageDecoder::dimensions","value":"pub fn dimensions(&Self) -> (u32, u32)","parent":{"krate":0,"index":1968},"children":[],"decl_id":null,"docs":" Returns a tuple containing the width and height of the image\n","sig":null,"attributes":[{"value":"/ Returns a tuple containing the width and height of the image","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\image.rs","byte_start":455205,"byte_end":455269,"line_start":506,"line_end":506,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":1972},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\image.rs","byte_start":455392,"byte_end":455402,"line_start":510,"line_end":510,"column_start":8,"column_end":18},"name":"color_type","qualname":"::image::ImageDecoder::color_type","value":"pub fn color_type(&Self) -> ColorType","parent":{"krate":0,"index":1968},"children":[],"decl_id":null,"docs":" Returns the color type of the image data produced by this decoder\n","sig":null,"attributes":[{"value":"/ Returns the color type of the image data produced by this decoder","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\image.rs","byte_start":455315,"byte_end":455384,"line_start":509,"line_end":509,"column_start":5,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":1973},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\image.rs","byte_start":455496,"byte_end":455515,"line_start":513,"line_end":513,"column_start":8,"column_end":27},"name":"original_color_type","qualname":"::image::ImageDecoder::original_color_type","value":"pub fn original_color_type(&Self) -> ExtendedColorType","parent":{"krate":0,"index":1968},"children":[],"decl_id":null,"docs":" Retuns the color type of the image file before decoding\n","sig":null,"attributes":[{"value":"/ Retuns the color type of the image file before decoding","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\image.rs","byte_start":455429,"byte_end":455488,"line_start":512,"line_end":512,"column_start":5,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":1974},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\image.rs","byte_start":455856,"byte_end":455867,"line_start":520,"line_end":520,"column_start":8,"column_end":19},"name":"into_reader","qualname":"::image::ImageDecoder::into_reader","value":"pub fn into_reader(Self) -> ImageResult<Self::Reader>","parent":{"krate":0,"index":1968},"children":[],"decl_id":null,"docs":" Returns a reader that can be used to obtain the bytes of the image. For the best\n performance, always try to read at least `scanline_bytes` from the reader at a time. Reading\n fewer bytes will cause the reader to perform internal buffering.\n","sig":null,"attributes":[{"value":"/ Returns a reader that can be used to obtain the bytes of the image. For the best","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\image.rs","byte_start":455590,"byte_end":455674,"line_start":517,"line_end":517,"column_start":5,"column_end":89}},{"value":"/ performance, always try to read at least `scanline_bytes` from the reader at a time. Reading","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\image.rs","byte_start":455679,"byte_end":455775,"line_start":518,"line_end":518,"column_start":5,"column_end":101}},{"value":"/ fewer bytes will cause the reader to perform internal buffering.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\image.rs","byte_start":455780,"byte_end":455848,"line_start":519,"line_end":519,"column_start":5,"column_end":73}}]},{"kind":"Method","id":{"krate":0,"index":1975},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\image.rs","byte_start":456254,"byte_end":456265,"line_start":528,"line_end":528,"column_start":8,"column_end":19},"name":"total_bytes","qualname":"::image::ImageDecoder::total_bytes","value":"pub fn total_bytes(&Self) -> u64","parent":{"krate":0,"index":1968},"children":[],"decl_id":null,"docs":" Returns the total number of bytes in the decoded image.","sig":null,"attributes":[{"value":"/ Returns the total number of bytes in the decoded image.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\image.rs","byte_start":455909,"byte_end":455968,"line_start":522,"line_end":522,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\image.rs","byte_start":455973,"byte_end":455976,"line_start":523,"line_end":523,"column_start":5,"column_end":8}},{"value":"/ This is the size of the buffer that must be passed to `read_image` or","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\image.rs","byte_start":455981,"byte_end":456054,"line_start":524,"line_end":524,"column_start":5,"column_end":78}},{"value":"/ `read_image_with_progress`. The returned value may exceed usize::MAX, in","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\image.rs","byte_start":456059,"byte_end":456135,"line_start":525,"line_end":525,"column_start":5,"column_end":81}},{"value":"/ which case it isn't actually possible to construct a buffer to decode all the image data","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\image.rs","byte_start":456140,"byte_end":456232,"line_start":526,"line_end":526,"column_start":5,"column_end":97}},{"value":"/ into.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\image.rs","byte_start":456237,"byte_end":456246,"line_start":527,"line_end":527,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1976},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\image.rs","byte_start":456602,"byte_end":456616,"line_start":535,"line_end":535,"column_start":8,"column_end":22},"name":"scanline_bytes","qualname":"::image::ImageDecoder::scanline_bytes","value":"pub fn scanline_bytes(&Self) -> u64","parent":{"krate":0,"index":1968},"children":[],"decl_id":null,"docs":" Returns the minimum number of bytes that can be efficiently read from this decoder. This may\n be as few as 1 or as many as `total_bytes()`.\n","sig":null,"attributes":[{"value":"/ Returns the minimum number of bytes that can be efficiently read from this decoder. This may","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\image.rs","byte_start":456444,"byte_end":456540,"line_start":533,"line_end":533,"column_start":5,"column_end":101}},{"value":"/ be as few as 1 or as many as `total_bytes()`.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\image.rs","byte_start":456545,"byte_end":456594,"line_start":534,"line_end":534,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":1977},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\image.rs","byte_start":457505,"byte_end":457515,"line_start":559,"line_end":559,"column_start":8,"column_end":18},"name":"read_image","qualname":"::image::ImageDecoder::read_image","value":"pub fn read_image(Self, &mut [u8]) -> ImageResult<()>","parent":{"krate":0,"index":1968},"children":[],"decl_id":null,"docs":" Returns all the bytes in the image.","sig":null,"attributes":[{"value":"/ Returns all the bytes in the image.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\image.rs","byte_start":456671,"byte_end":456710,"line_start":539,"line_end":539,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\image.rs","byte_start":456715,"byte_end":456718,"line_start":540,"line_end":540,"column_start":5,"column_end":8}},{"value":"/ This function takes a slice of bytes and writes the pixel data of the image into it.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\image.rs","byte_start":456723,"byte_end":456811,"line_start":541,"line_end":541,"column_start":5,"column_end":93}},{"value":"/ Although not required, for certain color types callers may want to pass buffers which are","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\image.rs","byte_start":456816,"byte_end":456909,"line_start":542,"line_end":542,"column_start":5,"column_end":98}},{"value":"/ aligned to 2 or 4 byte boundaries to the slice can be cast to a [u16] or [u32]. To accommodate","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\image.rs","byte_start":456914,"byte_end":457012,"line_start":543,"line_end":543,"column_start":5,"column_end":103}},{"value":"/ such casts, the returned contents will always be in native endian.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\image.rs","byte_start":457017,"byte_end":457087,"line_start":544,"line_end":544,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\image.rs","byte_start":457092,"byte_end":457095,"line_start":545,"line_end":545,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\image.rs","byte_start":457100,"byte_end":457112,"line_start":546,"line_end":546,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\image.rs","byte_start":457117,"byte_end":457120,"line_start":547,"line_end":547,"column_start":5,"column_end":8}},{"value":"/ This function panics if buf.len() != self.total_bytes().","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\image.rs","byte_start":457125,"byte_end":457185,"line_start":548,"line_end":548,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\image.rs","byte_start":457190,"byte_end":457193,"line_start":549,"line_end":549,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\image.rs","byte_start":457198,"byte_end":457212,"line_start":550,"line_end":550,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\image.rs","byte_start":457217,"byte_end":457220,"line_start":551,"line_end":551,"column_start":5,"column_end":8}},{"value":"/ ```no_build","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\image.rs","byte_start":457225,"byte_end":457240,"line_start":552,"line_end":552,"column_start":5,"column_end":20}},{"value":"/ use zerocopy::{AsBytes, FromBytes};","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\image.rs","byte_start":457245,"byte_end":457284,"line_start":553,"line_end":553,"column_start":5,"column_end":44}},{"value":"/ fn read_16bit_image(decoder: impl ImageDecoder) -> Vec<16> {","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\image.rs","byte_start":457289,"byte_end":457353,"line_start":554,"line_end":554,"column_start":5,"column_end":69}},{"value":"/     let mut buf: Vec<u16> = vec![0; decoder.total_bytes()/2];","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\image.rs","byte_start":457358,"byte_end":457423,"line_start":555,"line_end":555,"column_start":5,"column_end":70}},{"value":"/     decoder.read_image(buf.as_bytes());","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\image.rs","byte_start":457428,"byte_end":457471,"line_start":556,"line_end":556,"column_start":5,"column_end":48}},{"value":"/     buf","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\image.rs","byte_start":457476,"byte_end":457487,"line_start":557,"line_end":557,"column_start":5,"column_end":16}},{"value":"/ }","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\image.rs","byte_start":457492,"byte_end":457497,"line_start":558,"line_end":558,"column_start":5,"column_end":10}}]},{"kind":"Method","id":{"krate":0,"index":1979},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\image.rs","byte_start":457743,"byte_end":457767,"line_start":565,"line_end":565,"column_start":8,"column_end":32},"name":"read_image_with_progress","qualname":"::image::ImageDecoder::read_image_with_progress","value":"pub fn read_image_with_progress<F: Fn(Progress) -> ()>(Self, &mut [u8], F)\n-> ImageResult<()>","parent":{"krate":0,"index":1968},"children":[],"decl_id":null,"docs":" Same as `read_image` but periodically calls the provided callback to give updates on loading\n progress.\n","sig":null,"attributes":[{"value":"/ Same as `read_image` but periodically calls the provided callback to give updates on loading","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\image.rs","byte_start":457621,"byte_end":457717,"line_start":563,"line_end":563,"column_start":5,"column_end":101}},{"value":"/ progress.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\image.rs","byte_start":457722,"byte_end":457735,"line_start":564,"line_end":564,"column_start":5,"column_end":18}}]},{"kind":"Trait","id":{"krate":0,"index":1981},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\image.rs","byte_start":458790,"byte_end":458805,"line_start":599,"line_end":599,"column_start":11,"column_end":26},"name":"ImageDecoderExt","qualname":"::image::ImageDecoderExt","value":"ImageDecoderExt<'a>: ImageDecoder + Sized","parent":null,"children":[{"krate":0,"index":1983},{"krate":0,"index":1985}],"decl_id":null,"docs":" Specialized image decoding not be supported by all formats\n","sig":null,"attributes":[{"value":"/ Specialized image decoding not be supported by all formats","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\image.rs","byte_start":458717,"byte_end":458779,"line_start":598,"line_end":598,"column_start":1,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":1983},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\image.rs","byte_start":458960,"byte_end":458969,"line_start":601,"line_end":601,"column_start":8,"column_end":17},"name":"read_rect","qualname":"::image::ImageDecoderExt::read_rect","value":"pub fn read_rect(&mut Self, u32, u32, u32, u32, &mut [u8]) -> ImageResult<()>","parent":{"krate":0,"index":1981},"children":[],"decl_id":null,"docs":" Decode a rectangular section of the image; see [`read_rect_with_progress()`](#fn.read_rect_with_progress).\n","sig":null,"attributes":[{"value":"/ Decode a rectangular section of the image; see [`read_rect_with_progress()`](#fn.read_rect_with_progress).","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\image.rs","byte_start":458842,"byte_end":458952,"line_start":600,"line_end":600,"column_start":5,"column_end":115}}]},{"kind":"Method","id":{"krate":0,"index":1985},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\image.rs","byte_start":459911,"byte_end":459934,"line_start":624,"line_end":624,"column_start":8,"column_end":31},"name":"read_rect_with_progress","qualname":"::image::ImageDecoderExt::read_rect_with_progress","value":"pub fn read_rect_with_progress<F: Fn(Progress) ->\n                               ()>(&mut Self, u32, u32, u32, u32, &mut [u8],\n                                   F) -> ImageResult<()>","parent":{"krate":0,"index":1981},"children":[],"decl_id":null,"docs":" Decode a rectangular section of the image, periodically reporting progress.","sig":null,"attributes":[{"value":"/ Decode a rectangular section of the image, periodically reporting progress.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\image.rs","byte_start":459195,"byte_end":459274,"line_start":612,"line_end":612,"column_start":5,"column_end":84}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\image.rs","byte_start":459279,"byte_end":459282,"line_start":613,"line_end":613,"column_start":5,"column_end":8}},{"value":"/ The output buffer will be filled with fields specified by","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\image.rs","byte_start":459287,"byte_end":459348,"line_start":614,"line_end":614,"column_start":5,"column_end":66}},{"value":"/ [`ImageDecoder::color_type()`](trait.ImageDecoder.html#fn.color_type),","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\image.rs","byte_start":459353,"byte_end":459427,"line_start":615,"line_end":615,"column_start":5,"column_end":79}},{"value":"/ in that order, each field represented in native-endian.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\image.rs","byte_start":459432,"byte_end":459491,"line_start":616,"line_end":616,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\image.rs","byte_start":459496,"byte_end":459499,"line_start":617,"line_end":617,"column_start":5,"column_end":8}},{"value":"/ The progress callback will be called at least once at the start and the end of decoding,","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\image.rs","byte_start":459504,"byte_end":459596,"line_start":618,"line_end":618,"column_start":5,"column_end":97}},{"value":"/ implementations are encouraged to call this more often,","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\image.rs","byte_start":459601,"byte_end":459660,"line_start":619,"line_end":619,"column_start":5,"column_end":64}},{"value":"/ with a frequency meaningful for display to the end-user.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\image.rs","byte_start":459665,"byte_end":459725,"line_start":620,"line_end":620,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\image.rs","byte_start":459730,"byte_end":459733,"line_start":621,"line_end":621,"column_start":5,"column_end":8}},{"value":"/ This function will panic if the output buffer isn't at least","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\image.rs","byte_start":459738,"byte_end":459802,"line_start":622,"line_end":622,"column_start":5,"column_end":69}},{"value":"/ `color_type().bytes_per_pixel() * color_type().channel_count() * width * height` bytes long.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\image.rs","byte_start":459807,"byte_end":459903,"line_start":623,"line_end":623,"column_start":5,"column_end":101}}]},{"kind":"Trait","id":{"krate":0,"index":1987},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\image.rs","byte_start":460165,"byte_end":460181,"line_start":636,"line_end":636,"column_start":11,"column_end":27},"name":"AnimationDecoder","qualname":"::image::AnimationDecoder","value":"AnimationDecoder<'a>","parent":null,"children":[{"krate":0,"index":1989}],"decl_id":null,"docs":" AnimationDecoder trait\n","sig":null,"attributes":[{"value":"/ AnimationDecoder trait","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\image.rs","byte_start":460128,"byte_end":460154,"line_start":635,"line_end":635,"column_start":1,"column_end":27}}]},{"kind":"Method","id":{"krate":0,"index":1989},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\image.rs","byte_start":460253,"byte_end":460264,"line_start":638,"line_end":638,"column_start":8,"column_end":19},"name":"into_frames","qualname":"::image::AnimationDecoder::into_frames","value":"pub fn into_frames(Self) -> Frames","parent":{"krate":0,"index":1987},"children":[],"decl_id":null,"docs":" Consume the decoder producing a series of frames.\n","sig":null,"attributes":[{"value":"/ Consume the decoder producing a series of frames.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\image.rs","byte_start":460192,"byte_end":460245,"line_start":637,"line_end":637,"column_start":5,"column_end":58}}]},{"kind":"Trait","id":{"krate":0,"index":1990},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\image.rs","byte_start":460336,"byte_end":460348,"line_start":642,"line_end":642,"column_start":11,"column_end":23},"name":"ImageEncoder","qualname":"::image::ImageEncoder","value":"ImageEncoder","parent":null,"children":[{"krate":0,"index":1991}],"decl_id":null,"docs":" The trait all encoders implement\n","sig":null,"attributes":[{"value":"/ The trait all encoders implement","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\image.rs","byte_start":460289,"byte_end":460325,"line_start":641,"line_end":641,"column_start":1,"column_end":37}}]},{"kind":"Method","id":{"krate":0,"index":1991},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\image.rs","byte_start":460897,"byte_end":460908,"line_start":653,"line_end":653,"column_start":8,"column_end":19},"name":"write_image","qualname":"::image::ImageEncoder::write_image","value":"pub fn write_image(Self, &[u8], u32, u32, ColorType) -> ImageResult<()>","parent":{"krate":0,"index":1990},"children":[],"decl_id":null,"docs":" Writes all the bytes in an image to the encoder.","sig":null,"attributes":[{"value":"/ Writes all the bytes in an image to the encoder.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\image.rs","byte_start":460355,"byte_end":460407,"line_start":643,"line_end":643,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\image.rs","byte_start":460412,"byte_end":460415,"line_start":644,"line_end":644,"column_start":5,"column_end":8}},{"value":"/ This function takes a slice of bytes of the pixel data of the image","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\image.rs","byte_start":460420,"byte_end":460491,"line_start":645,"line_end":645,"column_start":5,"column_end":76}},{"value":"/ and encodes them. Unlike particular format encoders inherent impl encode","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\image.rs","byte_start":460496,"byte_end":460572,"line_start":646,"line_end":646,"column_start":5,"column_end":81}},{"value":"/ methods where endianness is not specified, here image data bytes should","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\image.rs","byte_start":460577,"byte_end":460652,"line_start":647,"line_end":647,"column_start":5,"column_end":80}},{"value":"/ always be in native endian. The implementor will reorder the endianess","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\image.rs","byte_start":460657,"byte_end":460731,"line_start":648,"line_end":648,"column_start":5,"column_end":79}},{"value":"/ as necessary for the target encoding format.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\image.rs","byte_start":460736,"byte_end":460784,"line_start":649,"line_end":649,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\image.rs","byte_start":460789,"byte_end":460792,"line_start":650,"line_end":650,"column_start":5,"column_end":8}},{"value":"/ See also `ImageDecoder::read_image` which reads byte buffers into","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\image.rs","byte_start":460797,"byte_end":460866,"line_start":651,"line_end":651,"column_start":5,"column_end":74}},{"value":"/ native endian.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\image.rs","byte_start":460871,"byte_end":460889,"line_start":652,"line_end":652,"column_start":5,"column_end":23}}]},{"kind":"Struct","id":{"krate":0,"index":3417},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\image.rs","byte_start":461102,"byte_end":461108,"line_start":664,"line_end":664,"column_start":12,"column_end":18},"name":"Pixels","qualname":"::image::Pixels","value":"Pixels {  }","parent":null,"children":[{"krate":0,"index":3420},{"krate":0,"index":3421},{"krate":0,"index":3422},{"krate":0,"index":3423},{"krate":0,"index":3424}],"decl_id":null,"docs":" Immutable pixel iterator\n","sig":null,"attributes":[{"value":"/ Immutable pixel iterator","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\image.rs","byte_start":461045,"byte_end":461073,"line_start":662,"line_end":662,"column_start":1,"column_end":29}}]},{"kind":"Trait","id":{"krate":0,"index":2000},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\image.rs","byte_start":461849,"byte_end":461865,"line_start":701,"line_end":701,"column_start":11,"column_end":27},"name":"GenericImageView","qualname":"::image::GenericImageView","value":"GenericImageView","parent":null,"children":[{"krate":0,"index":2001},{"krate":0,"index":2002},{"krate":0,"index":2003},{"krate":0,"index":2004},{"krate":0,"index":2005},{"krate":0,"index":2006},{"krate":0,"index":2007},{"krate":0,"index":2008},{"krate":0,"index":2009},{"krate":0,"index":2010},{"krate":0,"index":2011},{"krate":0,"index":2012}],"decl_id":null,"docs":" Trait to inspect an image.\n","sig":null,"attributes":[{"value":"/ Trait to inspect an image.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\image.rs","byte_start":461808,"byte_end":461838,"line_start":700,"line_end":700,"column_start":1,"column_end":31}}]},{"kind":"Type","id":{"krate":0,"index":2001},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\image.rs","byte_start":461904,"byte_end":461909,"line_start":703,"line_end":703,"column_start":10,"column_end":15},"name":"Pixel","qualname":"::image::GenericImageView::Pixel","value":"type Pixel: Pixel;","parent":{"krate":0,"index":2000},"children":[],"decl_id":null,"docs":" The type of pixel.\n","sig":null,"attributes":[{"value":"/ The type of pixel.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\image.rs","byte_start":461872,"byte_end":461894,"line_start":702,"line_end":702,"column_start":5,"column_end":27}}]},{"kind":"Type","id":{"krate":0,"index":2002},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\image.rs","byte_start":462143,"byte_end":462157,"line_start":708,"line_end":708,"column_start":10,"column_end":24},"name":"InnerImageView","qualname":"::image::GenericImageView::InnerImageView","value":"type InnerImageView: GenericImageView<Pixel = Self::Pixel>;","parent":{"krate":0,"index":2000},"children":[],"decl_id":null,"docs":" Underlying image type. This is mainly used by SubImages in order to\n always have a reference to the original image. This allows for less\n indirections and it eases the use of nested SubImages.\n","sig":null,"attributes":[{"value":"/ Underlying image type. This is mainly used by SubImages in order to","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\image.rs","byte_start":461923,"byte_end":461994,"line_start":705,"line_end":705,"column_start":5,"column_end":76}},{"value":"/ always have a reference to the original image. This allows for less","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\image.rs","byte_start":461999,"byte_end":462070,"line_start":706,"line_end":706,"column_start":5,"column_end":76}},{"value":"/ indirections and it eases the use of nested SubImages.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\image.rs","byte_start":462075,"byte_end":462133,"line_start":707,"line_end":707,"column_start":5,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":2003},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\image.rs","byte_start":462250,"byte_end":462260,"line_start":711,"line_end":711,"column_start":8,"column_end":18},"name":"dimensions","qualname":"::image::GenericImageView::dimensions","value":"pub fn dimensions(&Self) -> (u32, u32)","parent":{"krate":0,"index":2000},"children":[],"decl_id":null,"docs":" The width and height of this image.\n","sig":null,"attributes":[{"value":"/ The width and height of this image.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\image.rs","byte_start":462203,"byte_end":462242,"line_start":710,"line_end":710,"column_start":5,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":2004},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\image.rs","byte_start":462324,"byte_end":462329,"line_start":714,"line_end":714,"column_start":8,"column_end":13},"name":"width","qualname":"::image::GenericImageView::width","value":"pub fn width(&Self) -> u32","parent":{"krate":0,"index":2000},"children":[],"decl_id":null,"docs":" The width of this image.\n","sig":null,"attributes":[{"value":"/ The width of this image.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\image.rs","byte_start":462288,"byte_end":462316,"line_start":713,"line_end":713,"column_start":5,"column_end":33}}]},{"kind":"Method","id":{"krate":0,"index":2005},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\image.rs","byte_start":462444,"byte_end":462450,"line_start":720,"line_end":720,"column_start":8,"column_end":14},"name":"height","qualname":"::image::GenericImageView::height","value":"pub fn height(&Self) -> u32","parent":{"krate":0,"index":2000},"children":[],"decl_id":null,"docs":" The height of this image.\n","sig":null,"attributes":[{"value":"/ The height of this image.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\image.rs","byte_start":462407,"byte_end":462436,"line_start":719,"line_end":719,"column_start":5,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":2006},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\image.rs","byte_start":462577,"byte_end":462583,"line_start":726,"line_end":726,"column_start":8,"column_end":14},"name":"bounds","qualname":"::image::GenericImageView::bounds","value":"pub fn bounds(&Self) -> (u32, u32, u32, u32)","parent":{"krate":0,"index":2000},"children":[],"decl_id":null,"docs":" The bounding rectangle of this image.\n","sig":null,"attributes":[{"value":"/ The bounding rectangle of this image.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\image.rs","byte_start":462528,"byte_end":462569,"line_start":725,"line_end":725,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":2007},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\image.rs","byte_start":462700,"byte_end":462709,"line_start":729,"line_end":729,"column_start":8,"column_end":17},"name":"in_bounds","qualname":"::image::GenericImageView::in_bounds","value":"pub fn in_bounds(&Self, u32, u32) -> bool","parent":{"krate":0,"index":2000},"children":[],"decl_id":null,"docs":" Returns true if this x, y coordinate is contained inside the image.\n","sig":null,"attributes":[{"value":"/ Returns true if this x, y coordinate is contained inside the image.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\image.rs","byte_start":462621,"byte_end":462692,"line_start":728,"line_end":728,"column_start":5,"column_end":76}}]},{"kind":"Method","id":{"krate":0,"index":2008},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\image.rs","byte_start":463056,"byte_end":463065,"line_start":741,"line_end":741,"column_start":8,"column_end":17},"name":"get_pixel","qualname":"::image::GenericImageView::get_pixel","value":"pub fn get_pixel(&Self, u32, u32) -> Self::Pixel","parent":{"krate":0,"index":2000},"children":[],"decl_id":null,"docs":" Returns the pixel located at (x, y). Indexed from top left.","sig":null,"attributes":[{"value":"/ Returns the pixel located at (x, y). Indexed from top left.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\image.rs","byte_start":462857,"byte_end":462920,"line_start":734,"line_end":734,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\image.rs","byte_start":462925,"byte_end":462928,"line_start":735,"line_end":735,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\image.rs","byte_start":462933,"byte_end":462945,"line_start":736,"line_end":736,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\image.rs","byte_start":462950,"byte_end":462953,"line_start":737,"line_end":737,"column_start":5,"column_end":8}},{"value":"/ Panics if `(x, y)` is out of bounds.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\image.rs","byte_start":462958,"byte_end":462998,"line_start":738,"line_end":738,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\image.rs","byte_start":463003,"byte_end":463006,"line_start":739,"line_end":739,"column_start":5,"column_end":8}},{"value":"/ TODO: change this signature to &P","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\image.rs","byte_start":463011,"byte_end":463048,"line_start":740,"line_end":740,"column_start":5,"column_end":42}}]},{"kind":"Method","id":{"krate":0,"index":2009},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\image.rs","byte_start":463410,"byte_end":463426,"line_start":751,"line_end":751,"column_start":15,"column_end":31},"name":"unsafe_get_pixel","qualname":"::image::GenericImageView::unsafe_get_pixel","value":"pub unsafe fn unsafe_get_pixel(&Self, u32, u32) -> Self::Pixel","parent":{"krate":0,"index":2000},"children":[],"decl_id":null,"docs":" Returns the pixel located at (x, y). Indexed from top left.","sig":null,"attributes":[{"value":"/ Returns the pixel located at (x, y). Indexed from top left.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\image.rs","byte_start":463110,"byte_end":463173,"line_start":743,"line_end":743,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\image.rs","byte_start":463178,"byte_end":463181,"line_start":744,"line_end":744,"column_start":5,"column_end":8}},{"value":"/ This function can be implemented in a way that ignores bounds checking.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\image.rs","byte_start":463186,"byte_end":463261,"line_start":745,"line_end":745,"column_start":5,"column_end":80}},{"value":"/ # Safety","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\image.rs","byte_start":463266,"byte_end":463278,"line_start":746,"line_end":746,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\image.rs","byte_start":463283,"byte_end":463286,"line_start":747,"line_end":747,"column_start":5,"column_end":8}},{"value":"/ The coordinates must be [`in_bounds`] of the image.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\image.rs","byte_start":463291,"byte_end":463346,"line_start":748,"line_end":748,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\image.rs","byte_start":463351,"byte_end":463354,"line_start":749,"line_end":749,"column_start":5,"column_end":8}},{"value":"/ [`in_bounds`]: #method.in_bounds","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\image.rs","byte_start":463359,"byte_end":463395,"line_start":750,"line_end":750,"column_start":5,"column_end":41}}]},{"kind":"Method","id":{"krate":0,"index":2010},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\image.rs","byte_start":463658,"byte_end":463664,"line_start":758,"line_end":758,"column_start":8,"column_end":14},"name":"pixels","qualname":"::image::GenericImageView::pixels","value":"pub fn pixels(&Self) -> Pixels<, Self>","parent":{"krate":0,"index":2000},"children":[],"decl_id":null,"docs":" Returns an Iterator over the pixels of this image.\n The iterator yields the coordinates of each pixel\n along with their value\n","sig":null,"attributes":[{"value":"/ Returns an Iterator over the pixels of this image.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\image.rs","byte_start":463507,"byte_end":463561,"line_start":755,"line_end":755,"column_start":5,"column_end":59}},{"value":"/ The iterator yields the coordinates of each pixel","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\image.rs","byte_start":463566,"byte_end":463619,"line_start":756,"line_end":756,"column_start":5,"column_end":58}},{"value":"/ along with their value","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\image.rs","byte_start":463624,"byte_end":463650,"line_start":757,"line_end":757,"column_start":5,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":2011},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\image.rs","byte_start":463934,"byte_end":463939,"line_start":771,"line_end":771,"column_start":8,"column_end":13},"name":"inner","qualname":"::image::GenericImageView::inner","value":"pub fn inner(&Self) -> &Self::InnerImageView","parent":{"krate":0,"index":2000},"children":[],"decl_id":null,"docs":" Returns a reference to the underlying image.\n","sig":null,"attributes":[{"value":"/ Returns a reference to the underlying image.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\image.rs","byte_start":463878,"byte_end":463926,"line_start":770,"line_end":770,"column_start":5,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":2012},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\image.rs","byte_start":464213,"byte_end":464217,"line_start":776,"line_end":776,"column_start":8,"column_end":12},"name":"view","qualname":"::image::GenericImageView::view","value":"pub fn view(&Self, u32, u32, u32, u32) -> SubImage<&Self::InnerImageView>","parent":{"krate":0,"index":2000},"children":[],"decl_id":null,"docs":" Returns an subimage that is an immutable view into this image.\n You can use [`GenericImage::sub_image`] if you need a mutable view instead.\n The coordinates set the position of the top left corner of the view.\n","sig":null,"attributes":[{"value":"/ Returns an subimage that is an immutable view into this image.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\image.rs","byte_start":463978,"byte_end":464044,"line_start":773,"line_end":773,"column_start":5,"column_end":71}},{"value":"/ You can use [`GenericImage::sub_image`] if you need a mutable view instead.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\image.rs","byte_start":464049,"byte_end":464128,"line_start":774,"line_end":774,"column_start":5,"column_end":84}},{"value":"/ The coordinates set the position of the top left corner of the view.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\image.rs","byte_start":464133,"byte_end":464205,"line_start":775,"line_end":775,"column_start":5,"column_end":77}}]},{"kind":"Trait","id":{"krate":0,"index":2013},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\image.rs","byte_start":464416,"byte_end":464428,"line_start":782,"line_end":782,"column_start":11,"column_end":23},"name":"GenericImage","qualname":"::image::GenericImage","value":"GenericImage: GenericImageView","parent":null,"children":[{"krate":0,"index":2014},{"krate":0,"index":2015},{"krate":0,"index":2016},{"krate":0,"index":2017},{"krate":0,"index":2018},{"krate":0,"index":2019},{"krate":0,"index":2021},{"krate":0,"index":2023},{"krate":0,"index":2024}],"decl_id":null,"docs":" A trait for manipulating images.\n","sig":null,"attributes":[{"value":"/ A trait for manipulating images.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\image.rs","byte_start":464369,"byte_end":464405,"line_start":781,"line_end":781,"column_start":1,"column_end":37}}]},{"kind":"Type","id":{"krate":0,"index":2014},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\image.rs","byte_start":464673,"byte_end":464683,"line_start":786,"line_end":786,"column_start":10,"column_end":20},"name":"InnerImage","qualname":"::image::GenericImage::InnerImage","value":"type InnerImage: GenericImage<Pixel = Self::Pixel>;","parent":{"krate":0,"index":2013},"children":[],"decl_id":null,"docs":" Underlying image type. This is mainly used by SubImages in order to\n always have a reference to the original image. This allows for less\n indirections and it eases the use of nested SubImages.\n","sig":null,"attributes":[{"value":"/ Underlying image type. This is mainly used by SubImages in order to","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\image.rs","byte_start":464453,"byte_end":464524,"line_start":783,"line_end":783,"column_start":5,"column_end":76}},{"value":"/ always have a reference to the original image. This allows for less","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\image.rs","byte_start":464529,"byte_end":464600,"line_start":784,"line_end":784,"column_start":5,"column_end":76}},{"value":"/ indirections and it eases the use of nested SubImages.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\image.rs","byte_start":464605,"byte_end":464663,"line_start":785,"line_end":785,"column_start":5,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":2015},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\image.rs","byte_start":464897,"byte_end":464910,"line_start":793,"line_end":793,"column_start":8,"column_end":21},"name":"get_pixel_mut","qualname":"::image::GenericImage::get_pixel_mut","value":"pub fn get_pixel_mut(&mut Self, u32, u32) -> &mut Self::Pixel","parent":{"krate":0,"index":2013},"children":[],"decl_id":null,"docs":" Gets a reference to the mutable pixel at location `(x, y)`. Indexed from top left.","sig":null,"attributes":[{"value":"/ Gets a reference to the mutable pixel at location `(x, y)`. Indexed from top left.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\image.rs","byte_start":464725,"byte_end":464811,"line_start":788,"line_end":788,"column_start":5,"column_end":91}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\image.rs","byte_start":464816,"byte_end":464819,"line_start":789,"line_end":789,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\image.rs","byte_start":464824,"byte_end":464836,"line_start":790,"line_end":790,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\image.rs","byte_start":464841,"byte_end":464844,"line_start":791,"line_end":791,"column_start":5,"column_end":8}},{"value":"/ Panics if `(x, y)` is out of bounds.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\image.rs","byte_start":464849,"byte_end":464889,"line_start":792,"line_end":792,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":2016},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\image.rs","byte_start":465108,"byte_end":465117,"line_start":800,"line_end":800,"column_start":8,"column_end":17},"name":"put_pixel","qualname":"::image::GenericImage::put_pixel","value":"pub fn put_pixel(&mut Self, u32, u32, Self::Pixel)","parent":{"krate":0,"index":2013},"children":[],"decl_id":null,"docs":" Put a pixel at location (x, y). Indexed from top left.","sig":null,"attributes":[{"value":"/ Put a pixel at location (x, y). Indexed from top left.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\image.rs","byte_start":464964,"byte_end":465022,"line_start":795,"line_end":795,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\image.rs","byte_start":465027,"byte_end":465030,"line_start":796,"line_end":796,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\image.rs","byte_start":465035,"byte_end":465047,"line_start":797,"line_end":797,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\image.rs","byte_start":465052,"byte_end":465055,"line_start":798,"line_end":798,"column_start":5,"column_end":8}},{"value":"/ Panics if `(x, y)` is out of bounds.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\image.rs","byte_start":465060,"byte_end":465100,"line_start":799,"line_end":799,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":2017},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\image.rs","byte_start":465495,"byte_end":465511,"line_start":810,"line_end":810,"column_start":15,"column_end":31},"name":"unsafe_put_pixel","qualname":"::image::GenericImage::unsafe_put_pixel","value":"pub unsafe fn unsafe_put_pixel(&mut Self, u32, u32, Self::Pixel)","parent":{"krate":0,"index":2013},"children":[],"decl_id":null,"docs":" Puts a pixel at location (x, y). Indexed from top left.","sig":null,"attributes":[{"value":"/ Puts a pixel at location (x, y). Indexed from top left.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\image.rs","byte_start":465171,"byte_end":465230,"line_start":802,"line_end":802,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\image.rs","byte_start":465235,"byte_end":465238,"line_start":803,"line_end":803,"column_start":5,"column_end":8}},{"value":"/ This function can be implemented in a way that ignores bounds checking.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\image.rs","byte_start":465243,"byte_end":465318,"line_start":804,"line_end":804,"column_start":5,"column_end":80}},{"value":"/ # Safety","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\image.rs","byte_start":465323,"byte_end":465335,"line_start":805,"line_end":805,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\image.rs","byte_start":465340,"byte_end":465343,"line_start":806,"line_end":806,"column_start":5,"column_end":8}},{"value":"/ The coordinates must be [`in_bounds`] of the image.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\image.rs","byte_start":465348,"byte_end":465403,"line_start":807,"line_end":807,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\image.rs","byte_start":465408,"byte_end":465411,"line_start":808,"line_end":808,"column_start":5,"column_end":8}},{"value":"/ [`in_bounds`]: traits.GenericImageView.html#method.in_bounds","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\image.rs","byte_start":465416,"byte_end":465480,"line_start":809,"line_end":809,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":2018},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\image.rs","byte_start":465778,"byte_end":465789,"line_start":817,"line_end":817,"column_start":8,"column_end":19},"name":"blend_pixel","qualname":"::image::GenericImage::blend_pixel","value":"pub fn blend_pixel(&mut Self, u32, u32, Self::Pixel)","parent":{"krate":0,"index":2013},"children":[],"decl_id":null,"docs":" Put a pixel at location (x, y), taking into account alpha channels","sig":null,"attributes":[{"value":"/ Put a pixel at location (x, y), taking into account alpha channels","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\image.rs","byte_start":465609,"byte_end":465679,"line_start":814,"line_end":814,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\image.rs","byte_start":465684,"byte_end":465687,"line_start":815,"line_end":815,"column_start":5,"column_end":8}},{"value":"/ DEPRECATED: This method will be removed. Blend the pixel directly instead.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\image.rs","byte_start":465692,"byte_end":465770,"line_start":816,"line_end":816,"column_start":5,"column_end":83}}]},{"kind":"Method","id":{"krate":0,"index":2019},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\image.rs","byte_start":466551,"byte_end":466560,"line_start":834,"line_end":834,"column_start":8,"column_end":17},"name":"copy_from","qualname":"::image::GenericImage::copy_from","value":"pub fn copy_from<O>(&mut Self, &O, u32, u32) -> ImageResult<()> where\nO: GenericImageView<Pixel = Self::Pixel>","parent":{"krate":0,"index":2013},"children":[],"decl_id":null,"docs":" Copies all of the pixels from another image into this image.","sig":null,"attributes":[{"value":"/ Copies all of the pixels from another image into this image.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\image.rs","byte_start":465843,"byte_end":465907,"line_start":819,"line_end":819,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\image.rs","byte_start":465912,"byte_end":465915,"line_start":820,"line_end":820,"column_start":5,"column_end":8}},{"value":"/ The other image is copied with the top-left corner of the","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\image.rs","byte_start":465920,"byte_end":465981,"line_start":821,"line_end":821,"column_start":5,"column_end":66}},{"value":"/ other image placed at (x, y).","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\image.rs","byte_start":465986,"byte_end":466019,"line_start":822,"line_end":822,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\image.rs","byte_start":466024,"byte_end":466027,"line_start":823,"line_end":823,"column_start":5,"column_end":8}},{"value":"/ In order to copy only a piece of the other image, use [`GenericImageView::view`].","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\image.rs","byte_start":466032,"byte_end":466117,"line_start":824,"line_end":824,"column_start":5,"column_end":90}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\image.rs","byte_start":466122,"byte_end":466125,"line_start":825,"line_end":825,"column_start":5,"column_end":8}},{"value":"/ You can use [`FlatSamples`] to source pixels from an arbitrary regular raster of channel","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\image.rs","byte_start":466130,"byte_end":466222,"line_start":826,"line_end":826,"column_start":5,"column_end":97}},{"value":"/ values, for example from a foreign interface or a fixed image.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\image.rs","byte_start":466227,"byte_end":466293,"line_start":827,"line_end":827,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\image.rs","byte_start":466298,"byte_end":466301,"line_start":828,"line_end":828,"column_start":5,"column_end":8}},{"value":"/ # Returns","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\image.rs","byte_start":466306,"byte_end":466319,"line_start":829,"line_end":829,"column_start":5,"column_end":18}},{"value":"/ Returns an error if the image is too large to be copied at the given position","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\image.rs","byte_start":466324,"byte_end":466405,"line_start":830,"line_end":830,"column_start":5,"column_end":86}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\image.rs","byte_start":466410,"byte_end":466413,"line_start":831,"line_end":831,"column_start":5,"column_end":8}},{"value":"/ [`GenericImageView::view`]: trait.GenericImageView.html#method.view","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\image.rs","byte_start":466418,"byte_end":466489,"line_start":832,"line_end":832,"column_start":5,"column_end":76}},{"value":"/ [`FlatSamples`]: flat/struct.FlatSamples.html","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\image.rs","byte_start":466494,"byte_end":466543,"line_start":833,"line_end":833,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":2021},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\image.rs","byte_start":467607,"byte_end":467618,"line_start":862,"line_end":862,"column_start":8,"column_end":19},"name":"copy_within","qualname":"::image::GenericImage::copy_within","value":"pub fn copy_within(&mut Self, Rect, u32, u32) -> bool","parent":{"krate":0,"index":2013},"children":[],"decl_id":null,"docs":" Copies all of the pixels from one part of this image to another part of this image.","sig":null,"attributes":[{"value":"/ Copies all of the pixels from one part of this image to another part of this image.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\image.rs","byte_start":467259,"byte_end":467346,"line_start":855,"line_end":855,"column_start":5,"column_end":92}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\image.rs","byte_start":467351,"byte_end":467354,"line_start":856,"line_end":856,"column_start":5,"column_end":8}},{"value":"/ The destination rectangle of the copy is specified with the top-left corner placed at (x, y).","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\image.rs","byte_start":467359,"byte_end":467456,"line_start":857,"line_end":857,"column_start":5,"column_end":102}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\image.rs","byte_start":467461,"byte_end":467464,"line_start":858,"line_end":858,"column_start":5,"column_end":8}},{"value":"/ # Returns","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\image.rs","byte_start":467469,"byte_end":467482,"line_start":859,"line_end":859,"column_start":5,"column_end":18}},{"value":"/ `true` if the copy was successful, `false` if the image could not","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\image.rs","byte_start":467487,"byte_end":467556,"line_start":860,"line_end":860,"column_start":5,"column_end":74}},{"value":"/ be copied due to size constraints.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\image.rs","byte_start":467561,"byte_end":467599,"line_start":861,"line_end":861,"column_start":5,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":2023},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\image.rs","byte_start":469276,"byte_end":469285,"line_start":898,"line_end":898,"column_start":8,"column_end":17},"name":"inner_mut","qualname":"::image::GenericImage::inner_mut","value":"pub fn inner_mut(&mut Self) -> &mut Self::InnerImage","parent":{"krate":0,"index":2013},"children":[],"decl_id":null,"docs":" Returns a mutable reference to the underlying image.\n","sig":null,"attributes":[{"value":"/ Returns a mutable reference to the underlying image.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\image.rs","byte_start":469212,"byte_end":469268,"line_start":897,"line_end":897,"column_start":5,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":2024},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\image.rs","byte_start":469561,"byte_end":469570,"line_start":903,"line_end":903,"column_start":8,"column_end":17},"name":"sub_image","qualname":"::image::GenericImage::sub_image","value":"pub fn sub_image(&mut Self, u32, u32, u32, u32)\n-> SubImage<&mut Self::InnerImage>","parent":{"krate":0,"index":2013},"children":[],"decl_id":null,"docs":" Returns a mutable subimage that is a view into this image.\n If you want an immutable subimage instead, use [`GenericImageView::view`]\n The coordinates set the position of the top left corner of the SubImage.\n","sig":null,"attributes":[{"value":"/ Returns a mutable subimage that is a view into this image.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\image.rs","byte_start":469328,"byte_end":469390,"line_start":900,"line_end":900,"column_start":5,"column_end":67}},{"value":"/ If you want an immutable subimage instead, use [`GenericImageView::view`]","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\image.rs","byte_start":469395,"byte_end":469472,"line_start":901,"line_end":901,"column_start":5,"column_end":82}},{"value":"/ The coordinates set the position of the top left corner of the SubImage.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\image.rs","byte_start":469477,"byte_end":469553,"line_start":902,"line_end":902,"column_start":5,"column_end":81}}]},{"kind":"Struct","id":{"krate":0,"index":2025},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\image.rs","byte_start":470061,"byte_end":470069,"line_start":920,"line_end":920,"column_start":12,"column_end":20},"name":"SubImage","qualname":"::image::SubImage","value":"SubImage {  }","parent":null,"children":[{"krate":0,"index":2027},{"krate":0,"index":2028},{"krate":0,"index":2029},{"krate":0,"index":2030},{"krate":0,"index":2031}],"decl_id":null,"docs":" A View into another image","sig":null,"attributes":[{"value":"/ A View into another image","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\image.rs","byte_start":469777,"byte_end":469806,"line_start":914,"line_end":914,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\image.rs","byte_start":469807,"byte_end":469810,"line_start":915,"line_end":915,"column_start":1,"column_end":4}},{"value":"/ Instances of this struct can be created using:","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\image.rs","byte_start":469811,"byte_end":469861,"line_start":916,"line_end":916,"column_start":1,"column_end":51}},{"value":"/   - [`GenericImage::sub_image`] to create a mutable view,","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\image.rs","byte_start":469862,"byte_end":469923,"line_start":917,"line_end":917,"column_start":1,"column_end":62}},{"value":"/   - [`GenericImageView::view`] to create an immutable view,","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\image.rs","byte_start":469924,"byte_end":469987,"line_start":918,"line_end":918,"column_start":1,"column_end":64}},{"value":"/   - [`SubImage::new`] to instantiate the struct directly.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\image.rs","byte_start":469988,"byte_end":470049,"line_start":919,"line_end":919,"column_start":1,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":2038},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\image.rs","byte_start":470538,"byte_end":470541,"line_start":937,"line_end":937,"column_start":12,"column_end":15},"name":"new","qualname":"<SubImage<I>>::new","value":"pub fn new(I, u32, u32, u32, u32) -> SubImage<I>","parent":null,"children":[],"decl_id":null,"docs":" Construct a new subimage\n The coordinates set the position of the top left corner of the SubImage.\n","sig":null,"attributes":[{"value":"/ Construct a new subimage","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\image.rs","byte_start":470417,"byte_end":470445,"line_start":935,"line_end":935,"column_start":5,"column_end":33}},{"value":"/ The coordinates set the position of the top left corner of the SubImage.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\image.rs","byte_start":470450,"byte_end":470526,"line_start":936,"line_end":936,"column_start":5,"column_end":81}}]},{"kind":"Method","id":{"krate":0,"index":2039},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\image.rs","byte_start":470830,"byte_end":470843,"line_start":948,"line_end":948,"column_start":12,"column_end":25},"name":"change_bounds","qualname":"<SubImage<I>>::change_bounds","value":"pub fn change_bounds(&mut Self, u32, u32, u32, u32)","parent":null,"children":[],"decl_id":null,"docs":" Change the coordinates of this subimage.\n","sig":null,"attributes":[{"value":"/ Change the coordinates of this subimage.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\image.rs","byte_start":470774,"byte_end":470818,"line_start":947,"line_end":947,"column_start":5,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":2040},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\image.rs","byte_start":471077,"byte_end":471085,"line_start":956,"line_end":956,"column_start":12,"column_end":20},"name":"to_image","qualname":"<SubImage<I>>::to_image","value":"pub fn to_image(&Self) -> ImageBuffer<DerefPixel<I>, Vec<DerefSubpixel<I>>>\nwhere I: Deref, I::Target: GenericImage + 'static","parent":null,"children":[],"decl_id":null,"docs":" Convert this subimage to an ImageBuffer\n","sig":null,"attributes":[{"value":"/ Convert this subimage to an ImageBuffer","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\image.rs","byte_start":471022,"byte_end":471065,"line_start":955,"line_end":955,"column_start":5,"column_end":48}}]},{"kind":"Trait","id":{"krate":0,"index":2073},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\traits.rs","byte_start":484542,"byte_end":484557,"line_start":12,"line_end":12,"column_start":11,"column_end":26},"name":"EncodableLayout","qualname":"::traits::EncodableLayout","value":"EncodableLayout: seals::EncodableLayout","parent":null,"children":[{"krate":0,"index":2074}],"decl_id":null,"docs":" Types which are safe to treat as an immutable byte slice in a pixel layout\n for image encoding.\n","sig":null,"attributes":[{"value":"/ Types which are safe to treat as an immutable byte slice in a pixel layout","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\traits.rs","byte_start":484429,"byte_end":484507,"line_start":10,"line_end":10,"column_start":1,"column_end":79}},{"value":"/ for image encoding.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\traits.rs","byte_start":484508,"byte_end":484531,"line_start":11,"line_end":11,"column_start":1,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":2074},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\traits.rs","byte_start":484628,"byte_end":484636,"line_start":14,"line_end":14,"column_start":8,"column_end":16},"name":"as_bytes","qualname":"::traits::EncodableLayout::as_bytes","value":"pub fn as_bytes(&Self) -> &[u8]","parent":{"krate":0,"index":2073},"children":[],"decl_id":null,"docs":" Get the bytes of this value.\n","sig":null,"attributes":[{"value":"/ Get the bytes of this value.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\traits.rs","byte_start":484588,"byte_end":484620,"line_start":13,"line_end":13,"column_start":5,"column_end":37}}]},{"kind":"Trait","id":{"krate":0,"index":2079},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\traits.rs","byte_start":484924,"byte_end":484933,"line_start":30,"line_end":30,"column_start":11,"column_end":20},"name":"Primitive","qualname":"::traits::Primitive","value":"Primitive: Copy + NumCast + Num + PartialOrd<Self> + Clone + Bounded","parent":null,"children":[],"decl_id":null,"docs":" Primitive trait from old stdlib\n","sig":null,"attributes":[{"value":"/ Primitive trait from old stdlib","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\traits.rs","byte_start":484878,"byte_end":484913,"line_start":29,"line_end":29,"column_start":1,"column_end":36}}]},{"kind":"Trait","id":{"krate":0,"index":2092},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\traits.rs","byte_start":485455,"byte_end":485466,"line_start":47,"line_end":47,"column_start":11,"column_end":22},"name":"Enlargeable","qualname":"::traits::Enlargeable","value":"Enlargeable: Sized + Bounded + NumCast","parent":null,"children":[{"krate":0,"index":2093},{"krate":0,"index":2094}],"decl_id":null,"docs":" An Enlargable::Larger value should be enough to calculate\n the sum (average) of a few hundred or thousand Enlargeable values.\n","sig":null,"attributes":[{"value":"/ An Enlargable::Larger value should be enough to calculate","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\traits.rs","byte_start":485312,"byte_end":485373,"line_start":45,"line_end":45,"column_start":1,"column_end":62}},{"value":"/ the sum (average) of a few hundred or thousand Enlargeable values.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\traits.rs","byte_start":485374,"byte_end":485444,"line_start":46,"line_end":46,"column_start":1,"column_end":71}}]},{"kind":"Type","id":{"krate":0,"index":2093},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\traits.rs","byte_start":485505,"byte_end":485511,"line_start":48,"line_end":48,"column_start":10,"column_end":16},"name":"Larger","qualname":"::traits::Enlargeable::Larger","value":"type Larger: Primitive + AddAssign + 'static;","parent":{"krate":0,"index":2092},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2094},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\traits.rs","byte_start":485554,"byte_end":485564,"line_start":50,"line_end":50,"column_start":8,"column_end":18},"name":"clamp_from","qualname":"::traits::Enlargeable::clamp_from","value":"pub fn clamp_from(Self::Larger) -> Self","parent":{"krate":0,"index":2092},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":2101},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\traits.rs","byte_start":486036,"byte_end":486040,"line_start":71,"line_end":71,"column_start":11,"column_end":15},"name":"Lerp","qualname":"::traits::Lerp","value":"Lerp: Bounded + NumCast","parent":null,"children":[{"krate":0,"index":2102},{"krate":0,"index":2103}],"decl_id":null,"docs":" Linear interpolation without involving floating numbers.\n","sig":null,"attributes":[{"value":"/ Linear interpolation without involving floating numbers.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\traits.rs","byte_start":485965,"byte_end":486025,"line_start":70,"line_end":70,"column_start":1,"column_end":61}}]},{"kind":"Type","id":{"krate":0,"index":2102},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\traits.rs","byte_start":486071,"byte_end":486076,"line_start":72,"line_end":72,"column_start":10,"column_end":15},"name":"Ratio","qualname":"::traits::Lerp::Ratio","value":"type Ratio: Primitive;","parent":{"krate":0,"index":2101},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2103},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\traits.rs","byte_start":486097,"byte_end":486101,"line_start":74,"line_end":74,"column_start":8,"column_end":12},"name":"lerp","qualname":"::traits::Lerp::lerp","value":"pub fn lerp(Self, Self, Self::Ratio) -> Self","parent":{"krate":0,"index":2101},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":2110},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\traits.rs","byte_start":486827,"byte_end":486832,"line_start":105,"line_end":105,"column_start":11,"column_end":16},"name":"Pixel","qualname":"::traits::Pixel","value":"Pixel: Copy + Clone","parent":null,"children":[{"krate":0,"index":2111},{"krate":0,"index":2112},{"krate":0,"index":2113},{"krate":0,"index":2114},{"krate":0,"index":2115},{"krate":0,"index":2116},{"krate":0,"index":2117},{"krate":0,"index":2118},{"krate":0,"index":2119},{"krate":0,"index":2120},{"krate":0,"index":2121},{"krate":0,"index":2122},{"krate":0,"index":2123},{"krate":0,"index":2124},{"krate":0,"index":2125},{"krate":0,"index":2126},{"krate":0,"index":2127},{"krate":0,"index":2128},{"krate":0,"index":2129},{"krate":0,"index":2130},{"krate":0,"index":2132},{"krate":0,"index":2134},{"krate":0,"index":2137},{"krate":0,"index":2140},{"krate":0,"index":2143},{"krate":0,"index":2146},{"krate":0,"index":2148},{"krate":0,"index":2150},{"krate":0,"index":2151}],"decl_id":null,"docs":" A generalized pixel.","sig":null,"attributes":[{"value":"/ A generalized pixel.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\traits.rs","byte_start":486702,"byte_end":486726,"line_start":102,"line_end":102,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\traits.rs","byte_start":486727,"byte_end":486730,"line_start":103,"line_end":103,"column_start":1,"column_end":4}},{"value":"/ A pixel object is usually not used standalone but as a view into an image buffer.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\traits.rs","byte_start":486731,"byte_end":486816,"line_start":104,"line_end":104,"column_start":1,"column_end":86}}]},{"kind":"Type","id":{"krate":0,"index":2111},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\traits.rs","byte_start":486896,"byte_end":486904,"line_start":107,"line_end":107,"column_start":10,"column_end":18},"name":"Subpixel","qualname":"::traits::Pixel::Subpixel","value":"type Subpixel: Primitive;","parent":{"krate":0,"index":2110},"children":[],"decl_id":null,"docs":" The underlying subpixel type.\n","sig":null,"attributes":[{"value":"/ The underlying subpixel type.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\traits.rs","byte_start":486853,"byte_end":486886,"line_start":106,"line_end":106,"column_start":5,"column_end":38}}]},{"kind":"Const","id":{"krate":0,"index":2112},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\traits.rs","byte_start":486979,"byte_end":486992,"line_start":110,"line_end":110,"column_start":11,"column_end":24},"name":"CHANNEL_COUNT","qualname":"::traits::Pixel::CHANNEL_COUNT","value":"u8","parent":{"krate":0,"index":2110},"children":[],"decl_id":null,"docs":" The number of channels of this pixel type.\n","sig":null,"attributes":[{"value":"/ The number of channels of this pixel type.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\traits.rs","byte_start":486922,"byte_end":486968,"line_start":109,"line_end":109,"column_start":5,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":2113},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\traits.rs","byte_start":487135,"byte_end":487148,"line_start":113,"line_end":113,"column_start":8,"column_end":21},"name":"channel_count","qualname":"::traits::Pixel::channel_count","value":"pub fn channel_count() -> u8","parent":{"krate":0,"index":2110},"children":[],"decl_id":null,"docs":" Returns the number of channels of this pixel type.\n","sig":null,"attributes":[{"value":"/ Returns the number of channels of this pixel type.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\traits.rs","byte_start":487002,"byte_end":487056,"line_start":111,"line_end":111,"column_start":5,"column_end":59}},{"value":"deprecated(note = \"please use CHANNEL_COUNT associated constant\")","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\traits.rs","byte_start":487061,"byte_end":487127,"line_start":112,"line_end":112,"column_start":5,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":2114},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\traits.rs","byte_start":487244,"byte_end":487252,"line_start":118,"line_end":118,"column_start":8,"column_end":16},"name":"channels","qualname":"::traits::Pixel::channels","value":"pub fn channels(&Self) -> &[Self::Subpixel]","parent":{"krate":0,"index":2110},"children":[],"decl_id":null,"docs":" Returns the components as a slice.\n","sig":null,"attributes":[{"value":"/ Returns the components as a slice.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\traits.rs","byte_start":487198,"byte_end":487236,"line_start":117,"line_end":117,"column_start":5,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":2115},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\traits.rs","byte_start":487340,"byte_end":487352,"line_start":121,"line_end":121,"column_start":8,"column_end":20},"name":"channels_mut","qualname":"::traits::Pixel::channels_mut","value":"pub fn channels_mut(&mut Self) -> &mut [Self::Subpixel]","parent":{"krate":0,"index":2110},"children":[],"decl_id":null,"docs":" Returns the components as a mutable slice\n","sig":null,"attributes":[{"value":"/ Returns the components as a mutable slice","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\traits.rs","byte_start":487287,"byte_end":487332,"line_start":120,"line_end":120,"column_start":5,"column_end":50}}]},{"kind":"Const","id":{"krate":0,"index":2116},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\traits.rs","byte_start":487518,"byte_end":487529,"line_start":125,"line_end":125,"column_start":11,"column_end":22},"name":"COLOR_MODEL","qualname":"::traits::Pixel::COLOR_MODEL","value":"&'static str","parent":{"krate":0,"index":2110},"children":[],"decl_id":null,"docs":" A string that can help to interpret the meaning each channel\n See [gimp babl](http://gegl.org/babl/).\n","sig":null,"attributes":[{"value":"/ A string that can help to interpret the meaning each channel","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\traits.rs","byte_start":487395,"byte_end":487459,"line_start":123,"line_end":123,"column_start":5,"column_end":69}},{"value":"/ See [gimp babl](http://gegl.org/babl/).","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\traits.rs","byte_start":487464,"byte_end":487507,"line_start":124,"line_end":124,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":2117},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\traits.rs","byte_start":487746,"byte_end":487757,"line_start":129,"line_end":129,"column_start":8,"column_end":19},"name":"color_model","qualname":"::traits::Pixel::color_model","value":"pub fn color_model() -> &'static str","parent":{"krate":0,"index":2110},"children":[],"decl_id":null,"docs":" Returns a string that can help to interpret the meaning each channel\n See [gimp babl](http://gegl.org/babl/).\n","sig":null,"attributes":[{"value":"/ Returns a string that can help to interpret the meaning each channel","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\traits.rs","byte_start":487549,"byte_end":487621,"line_start":126,"line_end":126,"column_start":5,"column_end":77}},{"value":"/ See [gimp babl](http://gegl.org/babl/).","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\traits.rs","byte_start":487626,"byte_end":487669,"line_start":127,"line_end":127,"column_start":5,"column_end":48}},{"value":"deprecated(note = \"please use COLOR_MODEL associated constant\")","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\traits.rs","byte_start":487674,"byte_end":487738,"line_start":128,"line_end":128,"column_start":5,"column_end":69}}]},{"kind":"Const","id":{"krate":0,"index":2118},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\traits.rs","byte_start":487861,"byte_end":487871,"line_start":134,"line_end":134,"column_start":11,"column_end":21},"name":"COLOR_TYPE","qualname":"::traits::Pixel::COLOR_TYPE","value":"ColorType","parent":{"krate":0,"index":2110},"children":[],"decl_id":null,"docs":" ColorType for this pixel format\n","sig":null,"attributes":[{"value":"/ ColorType for this pixel format","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\traits.rs","byte_start":487815,"byte_end":487850,"line_start":133,"line_end":133,"column_start":5,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":2119},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\traits.rs","byte_start":488011,"byte_end":488021,"line_start":137,"line_end":137,"column_start":8,"column_end":18},"name":"color_type","qualname":"::traits::Pixel::color_type","value":"pub fn color_type() -> ColorType","parent":{"krate":0,"index":2110},"children":[],"decl_id":null,"docs":" Returns the ColorType for this pixel format\n","sig":null,"attributes":[{"value":"/ Returns the ColorType for this pixel format","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\traits.rs","byte_start":487888,"byte_end":487935,"line_start":135,"line_end":135,"column_start":5,"column_end":52}},{"value":"deprecated(note = \"please use COLOR_TYPE associated constant\")","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\traits.rs","byte_start":487940,"byte_end":488003,"line_start":136,"line_end":136,"column_start":5,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":2120},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\traits.rs","byte_start":488259,"byte_end":488268,"line_start":145,"line_end":145,"column_start":8,"column_end":17},"name":"channels4","qualname":"::traits::Pixel::channels4","value":"pub fn channels4(&Self)\n-> (Self::Subpixel, Self::Subpixel, Self::Subpixel, Self::Subpixel)","parent":{"krate":0,"index":2110},"children":[],"decl_id":null,"docs":" Returns the channels of this pixel as a 4 tuple. If the pixel\n has less than 4 channels the remainder is filled with the maximum value","sig":null,"attributes":[{"value":"/ Returns the channels of this pixel as a 4 tuple. If the pixel","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\traits.rs","byte_start":488075,"byte_end":488140,"line_start":141,"line_end":141,"column_start":5,"column_end":70}},{"value":"/ has less than 4 channels the remainder is filled with the maximum value","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\traits.rs","byte_start":488145,"byte_end":488220,"line_start":142,"line_end":142,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\traits.rs","byte_start":488225,"byte_end":488228,"line_start":143,"line_end":143,"column_start":5,"column_end":8}},{"value":"/ TODO deprecate","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\traits.rs","byte_start":488233,"byte_end":488251,"line_start":144,"line_end":144,"column_start":5,"column_end":23}}]},{"kind":"Method","id":{"krate":0,"index":2121},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\traits.rs","byte_start":488571,"byte_end":488584,"line_start":158,"line_end":158,"column_start":8,"column_end":21},"name":"from_channels","qualname":"::traits::Pixel::from_channels","value":"pub fn from_channels(Self::Subpixel, Self::Subpixel, Self::Subpixel,\n                     Self::Subpixel) -> Self","parent":{"krate":0,"index":2110},"children":[],"decl_id":null,"docs":" Construct a pixel from the 4 channels a, b, c and d.\n If the pixel does not contain 4 channels the extra are ignored.","sig":null,"attributes":[{"value":"/ Construct a pixel from the 4 channels a, b, c and d.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\traits.rs","byte_start":488404,"byte_end":488460,"line_start":154,"line_end":154,"column_start":5,"column_end":61}},{"value":"/ If the pixel does not contain 4 channels the extra are ignored.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\traits.rs","byte_start":488465,"byte_end":488532,"line_start":155,"line_end":155,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\traits.rs","byte_start":488537,"byte_end":488540,"line_start":156,"line_end":156,"column_start":5,"column_end":8}},{"value":"/ TODO deprecate","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\traits.rs","byte_start":488545,"byte_end":488563,"line_start":157,"line_end":157,"column_start":5,"column_end":23}}]},{"kind":"Method","id":{"krate":0,"index":2122},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\traits.rs","byte_start":488938,"byte_end":488948,"line_start":169,"line_end":169,"column_start":8,"column_end":18},"name":"from_slice","qualname":"::traits::Pixel::from_slice","value":"pub fn from_slice(&[Self::Subpixel]) -> &Self","parent":{"krate":0,"index":2110},"children":[],"decl_id":null,"docs":" Returns a view into a slice.","sig":null,"attributes":[{"value":"/ Returns a view into a slice.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\traits.rs","byte_start":488714,"byte_end":488746,"line_start":165,"line_end":165,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\traits.rs","byte_start":488751,"byte_end":488754,"line_start":166,"line_end":166,"column_start":5,"column_end":8}},{"value":"/ Note: The slice length is not checked on creation. Thus the caller has to ensure","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\traits.rs","byte_start":488759,"byte_end":488843,"line_start":167,"line_end":167,"column_start":5,"column_end":89}},{"value":"/ that the slice is long enough to prevent panics if the pixel is used later on.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\traits.rs","byte_start":488848,"byte_end":488930,"line_start":168,"line_end":168,"column_start":5,"column_end":87}}]},{"kind":"Method","id":{"krate":0,"index":2123},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\traits.rs","byte_start":489228,"byte_end":489242,"line_start":175,"line_end":175,"column_start":8,"column_end":22},"name":"from_slice_mut","qualname":"::traits::Pixel::from_slice_mut","value":"pub fn from_slice_mut(&mut [Self::Subpixel]) -> &mut Self","parent":{"krate":0,"index":2110},"children":[],"decl_id":null,"docs":" Returns mutable view into a mutable slice.","sig":null,"attributes":[{"value":"/ Returns mutable view into a mutable slice.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\traits.rs","byte_start":488990,"byte_end":489036,"line_start":171,"line_end":171,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\traits.rs","byte_start":489041,"byte_end":489044,"line_start":172,"line_end":172,"column_start":5,"column_end":8}},{"value":"/ Note: The slice length is not checked on creation. Thus the caller has to ensure","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\traits.rs","byte_start":489049,"byte_end":489133,"line_start":173,"line_end":173,"column_start":5,"column_end":89}},{"value":"/ that the slice is long enough to prevent panics if the pixel is used later on.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\traits.rs","byte_start":489138,"byte_end":489220,"line_start":174,"line_end":174,"column_start":5,"column_end":87}}]},{"kind":"Method","id":{"krate":0,"index":2124},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\traits.rs","byte_start":489329,"byte_end":489335,"line_start":178,"line_end":178,"column_start":8,"column_end":14},"name":"to_rgb","qualname":"::traits::Pixel::to_rgb","value":"pub fn to_rgb(&Self) -> Rgb<Self::Subpixel>","parent":{"krate":0,"index":2110},"children":[],"decl_id":null,"docs":" Convert this pixel to RGB\n","sig":null,"attributes":[{"value":"/ Convert this pixel to RGB","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\traits.rs","byte_start":489292,"byte_end":489321,"line_start":177,"line_end":177,"column_start":5,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":2125},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\traits.rs","byte_start":489431,"byte_end":489438,"line_start":181,"line_end":181,"column_start":8,"column_end":15},"name":"to_rgba","qualname":"::traits::Pixel::to_rgba","value":"pub fn to_rgba(&Self) -> Rgba<Self::Subpixel>","parent":{"krate":0,"index":2110},"children":[],"decl_id":null,"docs":" Convert this pixel to RGB with an alpha channel\n","sig":null,"attributes":[{"value":"/ Convert this pixel to RGB with an alpha channel","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\traits.rs","byte_start":489372,"byte_end":489423,"line_start":180,"line_end":180,"column_start":5,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":2126},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\traits.rs","byte_start":489514,"byte_end":489521,"line_start":184,"line_end":184,"column_start":8,"column_end":15},"name":"to_luma","qualname":"::traits::Pixel::to_luma","value":"pub fn to_luma(&Self) -> Luma<Self::Subpixel>","parent":{"krate":0,"index":2110},"children":[],"decl_id":null,"docs":" Convert this pixel to luma\n","sig":null,"attributes":[{"value":"/ Convert this pixel to luma","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\traits.rs","byte_start":489476,"byte_end":489506,"line_start":183,"line_end":183,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":2127},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\traits.rs","byte_start":489619,"byte_end":489632,"line_start":187,"line_end":187,"column_start":8,"column_end":21},"name":"to_luma_alpha","qualname":"::traits::Pixel::to_luma_alpha","value":"pub fn to_luma_alpha(&Self) -> LumaA<Self::Subpixel>","parent":{"krate":0,"index":2110},"children":[],"decl_id":null,"docs":" Convert this pixel to luma with an alpha channel\n","sig":null,"attributes":[{"value":"/ Convert this pixel to luma with an alpha channel","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\traits.rs","byte_start":489559,"byte_end":489611,"line_start":186,"line_end":186,"column_start":5,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":2128},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\traits.rs","byte_start":489708,"byte_end":489714,"line_start":190,"line_end":190,"column_start":8,"column_end":14},"name":"to_bgr","qualname":"::traits::Pixel::to_bgr","value":"pub fn to_bgr(&Self) -> Bgr<Self::Subpixel>","parent":{"krate":0,"index":2110},"children":[],"decl_id":null,"docs":" Convert this pixel to BGR\n","sig":null,"attributes":[{"value":"/ Convert this pixel to BGR","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\traits.rs","byte_start":489671,"byte_end":489700,"line_start":189,"line_end":189,"column_start":5,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":2129},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\traits.rs","byte_start":489810,"byte_end":489817,"line_start":193,"line_end":193,"column_start":8,"column_end":15},"name":"to_bgra","qualname":"::traits::Pixel::to_bgra","value":"pub fn to_bgra(&Self) -> Bgra<Self::Subpixel>","parent":{"krate":0,"index":2110},"children":[],"decl_id":null,"docs":" Convert this pixel to BGR with an alpha channel\n","sig":null,"attributes":[{"value":"/ Convert this pixel to BGR with an alpha channel","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\traits.rs","byte_start":489751,"byte_end":489802,"line_start":192,"line_end":192,"column_start":5,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":2130},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\traits.rs","byte_start":489924,"byte_end":489927,"line_start":196,"line_end":196,"column_start":8,"column_end":11},"name":"map","qualname":"::traits::Pixel::map","value":"pub fn map<F>(&Self, F) -> Self where F: FnMut(Self::Subpixel) ->\nSelf::Subpixel","parent":{"krate":0,"index":2110},"children":[],"decl_id":null,"docs":" Apply the function ```f``` to each channel of this pixel.\n","sig":null,"attributes":[{"value":"/ Apply the function ```f``` to each channel of this pixel.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\traits.rs","byte_start":489855,"byte_end":489916,"line_start":195,"line_end":195,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":2132},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\traits.rs","byte_start":490088,"byte_end":490093,"line_start":201,"line_end":201,"column_start":8,"column_end":13},"name":"apply","qualname":"::traits::Pixel::apply","value":"pub fn apply<F>(&mut Self, F) where F: FnMut(Self::Subpixel) -> Self::Subpixel","parent":{"krate":0,"index":2110},"children":[],"decl_id":null,"docs":" Apply the function ```f``` to each channel of this pixel.\n","sig":null,"attributes":[{"value":"/ Apply the function ```f``` to each channel of this pixel.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\traits.rs","byte_start":490019,"byte_end":490080,"line_start":200,"line_end":200,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":2134},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\traits.rs","byte_start":490318,"byte_end":490332,"line_start":207,"line_end":207,"column_start":8,"column_end":22},"name":"map_with_alpha","qualname":"::traits::Pixel::map_with_alpha","value":"pub fn map_with_alpha<F, G>(&Self, F, G) -> Self where\nF: FnMut(Self::Subpixel) -> Self::Subpixel, G: FnMut(Self::Subpixel) ->\nSelf::Subpixel","parent":{"krate":0,"index":2110},"children":[],"decl_id":null,"docs":" Apply the function ```f``` to each channel except the alpha channel.\n Apply the function ```g``` to the alpha channel.\n","sig":null,"attributes":[{"value":"/ Apply the function ```f``` to each channel except the alpha channel.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\traits.rs","byte_start":490181,"byte_end":490253,"line_start":205,"line_end":205,"column_start":5,"column_end":77}},{"value":"/ Apply the function ```g``` to the alpha channel.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\traits.rs","byte_start":490258,"byte_end":490310,"line_start":206,"line_end":206,"column_start":5,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":2137},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\traits.rs","byte_start":490638,"byte_end":490654,"line_start":214,"line_end":214,"column_start":8,"column_end":24},"name":"apply_with_alpha","qualname":"::traits::Pixel::apply_with_alpha","value":"pub fn apply_with_alpha<F, G>(&mut Self, F, G) where F: FnMut(Self::Subpixel)\n-> Self::Subpixel, G: FnMut(Self::Subpixel) -> Self::Subpixel","parent":{"krate":0,"index":2110},"children":[],"decl_id":null,"docs":" Apply the function ```f``` to each channel except the alpha channel.\n Apply the function ```g``` to the alpha channel. Works in-place.\n","sig":null,"attributes":[{"value":"/ Apply the function ```f``` to each channel except the alpha channel.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\traits.rs","byte_start":490485,"byte_end":490557,"line_start":212,"line_end":212,"column_start":5,"column_end":77}},{"value":"/ Apply the function ```g``` to the alpha channel. Works in-place.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\traits.rs","byte_start":490562,"byte_end":490630,"line_start":213,"line_end":213,"column_start":5,"column_end":73}}]},{"kind":"Method","id":{"krate":0,"index":2140},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\traits.rs","byte_start":490883,"byte_end":490900,"line_start":220,"line_end":220,"column_start":8,"column_end":25},"name":"map_without_alpha","qualname":"::traits::Pixel::map_without_alpha","value":"pub fn map_without_alpha<F>(&Self, F) -> Self where F: FnMut(Self::Subpixel)\n-> Self::Subpixel","parent":{"krate":0,"index":2110},"children":[],"decl_id":null,"docs":" Apply the function ```f``` to each channel except the alpha channel.\n","sig":null,"attributes":[{"value":"/ Apply the function ```f``` to each channel except the alpha channel.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\traits.rs","byte_start":490803,"byte_end":490875,"line_start":219,"line_end":219,"column_start":5,"column_end":77}}]},{"kind":"Method","id":{"krate":0,"index":2143},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\traits.rs","byte_start":491192,"byte_end":491211,"line_start":231,"line_end":231,"column_start":8,"column_end":27},"name":"apply_without_alpha","qualname":"::traits::Pixel::apply_without_alpha","value":"pub fn apply_without_alpha<F>(&mut Self, F) where F: FnMut(Self::Subpixel) ->\nSelf::Subpixel","parent":{"krate":0,"index":2110},"children":[],"decl_id":null,"docs":" Apply the function ```f``` to each channel except the alpha channel.\n Works in place.\n","sig":null,"attributes":[{"value":"/ Apply the function ```f``` to each channel except the alpha channel.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\traits.rs","byte_start":491088,"byte_end":491160,"line_start":229,"line_end":229,"column_start":5,"column_end":77}},{"value":"/ Works in place.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\traits.rs","byte_start":491165,"byte_end":491184,"line_start":230,"line_end":230,"column_start":5,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":2146},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\traits.rs","byte_start":491454,"byte_end":491458,"line_start":240,"line_end":240,"column_start":8,"column_end":12},"name":"map2","qualname":"::traits::Pixel::map2","value":"pub fn map2<F>(&Self, &Self, F) -> Self where\nF: FnMut(Self::Subpixel, Self::Subpixel) -> Self::Subpixel","parent":{"krate":0,"index":2110},"children":[],"decl_id":null,"docs":" Apply the function ```f``` to each channel of this pixel and\n ```other``` pairwise.\n","sig":null,"attributes":[{"value":"/ Apply the function ```f``` to each channel of this pixel and","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\traits.rs","byte_start":491352,"byte_end":491416,"line_start":238,"line_end":238,"column_start":5,"column_end":69}},{"value":"/ ```other``` pairwise.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\traits.rs","byte_start":491421,"byte_end":491446,"line_start":239,"line_end":239,"column_start":5,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":2148},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\traits.rs","byte_start":491698,"byte_end":491704,"line_start":246,"line_end":246,"column_start":8,"column_end":14},"name":"apply2","qualname":"::traits::Pixel::apply2","value":"pub fn apply2<F>(&mut Self, &Self, F) where\nF: FnMut(Self::Subpixel, Self::Subpixel) -> Self::Subpixel","parent":{"krate":0,"index":2110},"children":[],"decl_id":null,"docs":" Apply the function ```f``` to each channel of this pixel and\n ```other``` pairwise. Works in-place.\n","sig":null,"attributes":[{"value":"/ Apply the function ```f``` to each channel of this pixel and","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\traits.rs","byte_start":491580,"byte_end":491644,"line_start":244,"line_end":244,"column_start":5,"column_end":69}},{"value":"/ ```other``` pairwise. Works in-place.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\traits.rs","byte_start":491649,"byte_end":491690,"line_start":245,"line_end":245,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":2150},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\traits.rs","byte_start":491851,"byte_end":491857,"line_start":251,"line_end":251,"column_start":8,"column_end":14},"name":"invert","qualname":"::traits::Pixel::invert","value":"pub fn invert(&mut Self)","parent":{"krate":0,"index":2110},"children":[],"decl_id":null,"docs":" Invert this pixel\n","sig":null,"attributes":[{"value":"/ Invert this pixel","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\traits.rs","byte_start":491822,"byte_end":491843,"line_start":250,"line_end":250,"column_start":5,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":2151},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\traits.rs","byte_start":491968,"byte_end":491973,"line_start":254,"line_end":254,"column_start":8,"column_end":13},"name":"blend","qualname":"::traits::Pixel::blend","value":"pub fn blend(&mut Self, &Self)","parent":{"krate":0,"index":2110},"children":[],"decl_id":null,"docs":" Blend the color of a given pixel into ourself, taking into account alpha channels\n","sig":null,"attributes":[{"value":"/ Blend the color of a given pixel into ourself, taking into account alpha channels","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\traits.rs","byte_start":491875,"byte_end":491960,"line_start":253,"line_end":253,"column_start":5,"column_end":90}}]},{"kind":"Trait","id":{"krate":0,"index":2153},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\traits.rs","byte_start":492082,"byte_end":492097,"line_start":259,"line_end":259,"column_start":15,"column_end":30},"name":"EncodableLayout","qualname":"::traits::seals::EncodableLayout","value":"EncodableLayout","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3429},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\utils\\mod.rs","byte_start":496411,"byte_end":496430,"line_start":115,"line_end":115,"column_start":12,"column_end":31},"name":"NonExhaustiveMarker","qualname":"::utils::NonExhaustiveMarker","value":"NonExhaustiveMarker {  }","parent":null,"children":[{"krate":0,"index":3430}],"decl_id":null,"docs":" A marker struct for __NonExhaustive enums.","sig":null,"attributes":[{"value":"/ A marker struct for __NonExhaustive enums.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\utils\\mod.rs","byte_start":495688,"byte_end":495734,"line_start":104,"line_end":104,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\utils\\mod.rs","byte_start":495735,"byte_end":495738,"line_start":105,"line_end":105,"column_start":1,"column_end":4}},{"value":"/ This is an empty type that can not be constructed. When an enum contains a tuple variant that","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\utils\\mod.rs","byte_start":495739,"byte_end":495836,"line_start":106,"line_end":106,"column_start":1,"column_end":98}},{"value":"/ includes this type the optimizer can statically determined tha the branch is never taken while","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\utils\\mod.rs","byte_start":495837,"byte_end":495935,"line_start":107,"line_end":107,"column_start":1,"column_end":99}},{"value":"/ at the same time the matching of the branch is required.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\utils\\mod.rs","byte_start":495936,"byte_end":495996,"line_start":108,"line_end":108,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\utils\\mod.rs","byte_start":495997,"byte_end":496000,"line_start":109,"line_end":109,"column_start":1,"column_end":4}},{"value":"/ The effect is thus very similar to the actual `#[non_exhaustive]` attribute with no runtime","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\utils\\mod.rs","byte_start":496001,"byte_end":496096,"line_start":110,"line_end":110,"column_start":1,"column_end":96}},{"value":"/ costs. Also note that we use a dirty trick to not only hide this type from the doc but make it","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\utils\\mod.rs","byte_start":496097,"byte_end":496195,"line_start":111,"line_end":111,"column_start":1,"column_end":99}},{"value":"/ inaccessible. The visibility in this module is pub but the module itself is not and the","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\utils\\mod.rs","byte_start":496196,"byte_end":496287,"line_start":112,"line_end":112,"column_start":1,"column_end":92}},{"value":"/ top-level crate never exports the type.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\utils\\mod.rs","byte_start":496288,"byte_end":496331,"line_start":113,"line_end":113,"column_start":1,"column_end":44}}]}],"impls":[{"id":0,"kind":"Inherent","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\error.rs","byte_start":19981,"byte_end":19997,"line_start":194,"line_end":194,"column_start":6,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":64},{"krate":0,"index":65},{"krate":0,"index":66}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Inherent","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\error.rs","byte_start":20695,"byte_end":20708,"line_start":217,"line_end":217,"column_start":6,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":68},{"krate":0,"index":70},{"krate":0,"index":71}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Inherent","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\error.rs","byte_start":21484,"byte_end":21497,"line_start":245,"line_end":245,"column_start":6,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":73},{"krate":0,"index":75},{"krate":0,"index":76}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Inherent","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\error.rs","byte_start":22274,"byte_end":22288,"line_start":273,"line_end":273,"column_start":6,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":78},{"krate":0,"index":79}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Inherent","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\error.rs","byte_start":22667,"byte_end":22677,"line_start":288,"line_end":288,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":81},{"krate":0,"index":82}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Direct","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\error.rs","byte_start":23034,"byte_end":23044,"line_start":302,"line_end":302,"column_start":26,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":84}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Direct","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\error.rs","byte_start":23160,"byte_end":23175,"line_start":308,"line_end":308,"column_start":28,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":86}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Direct","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\error.rs","byte_start":23304,"byte_end":23319,"line_start":314,"line_end":314,"column_start":36,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":88}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Direct","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\error.rs","byte_start":23569,"byte_end":23585,"line_start":323,"line_end":323,"column_start":32,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":90}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Direct","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\error.rs","byte_start":23888,"byte_end":23898,"line_start":335,"line_end":335,"column_start":23,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":94}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Direct","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\error.rs","byte_start":24359,"byte_end":24369,"line_start":348,"line_end":348,"column_start":16,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":96}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Direct","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\error.rs","byte_start":24822,"byte_end":24838,"line_start":361,"line_end":361,"column_start":23,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":98}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Direct","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\error.rs","byte_start":26460,"byte_end":26476,"line_start":404,"line_end":404,"column_start":16,"column_end":32},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Direct","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\error.rs","byte_start":26504,"byte_end":26518,"line_start":406,"line_end":406,"column_start":23,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":101}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Direct","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\error.rs","byte_start":27553,"byte_end":27567,"line_start":438,"line_end":438,"column_start":16,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":103}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Direct","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\error.rs","byte_start":27772,"byte_end":27785,"line_start":447,"line_end":447,"column_start":23,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":105}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Direct","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\error.rs","byte_start":28246,"byte_end":28259,"line_start":465,"line_end":465,"column_start":16,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":107}],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Direct","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\error.rs","byte_start":28464,"byte_end":28477,"line_start":474,"line_end":474,"column_start":23,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":109}],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Direct","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\error.rs","byte_start":28924,"byte_end":28937,"line_start":486,"line_end":486,"column_start":16,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":111}],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Direct","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\error.rs","byte_start":29142,"byte_end":29152,"line_start":495,"line_end":495,"column_start":23,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":113}],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Direct","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\error.rs","byte_start":29535,"byte_end":29545,"line_start":505,"line_end":505,"column_start":16,"column_end":26},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Direct","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\error.rs","byte_start":29573,"byte_end":29588,"line_start":507,"line_end":507,"column_start":23,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":116}],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Inherent","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\math\\nq.rs","byte_start":34429,"byte_end":34437,"line_start":86,"line_end":86,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":133},{"krate":0,"index":134},{"krate":0,"index":135},{"krate":0,"index":136},{"krate":0,"index":137}],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Direct","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\math\\nq.rs","byte_start":35007,"byte_end":35015,"line_start":105,"line_end":105,"column_start":38,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":140}],"docs":"","sig":null,"attributes":[]},{"id":24,"kind":"Direct","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\math\\nq.rs","byte_start":35164,"byte_end":35172,"line_start":112,"line_end":112,"column_start":38,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":142}],"docs":"","sig":null,"attributes":[]},{"id":25,"kind":"Direct","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\imageops\\colorops.rs","byte_start":75047,"byte_end":75054,"line_start":362,"line_end":362,"column_start":19,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":297},{"krate":0,"index":298},{"krate":0,"index":299},{"krate":0,"index":300},{"krate":0,"index":301}],"docs":"","sig":null,"attributes":[]},{"id":26,"kind":"Direct","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\imageops\\colorops.rs","byte_start":75833,"byte_end":75841,"line_start":398,"line_end":398,"column_start":23,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":303},{"krate":0,"index":304},{"krate":0,"index":305},{"krate":0,"index":307},{"krate":0,"index":308}],"docs":"","sig":null,"attributes":[]},{"id":27,"kind":"Direct","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\imageops\\colorops.rs","byte_start":76380,"byte_end":76388,"line_start":422,"line_end":422,"column_start":32,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":310},{"krate":0,"index":311},{"krate":0,"index":312},{"krate":0,"index":314},{"krate":0,"index":315}],"docs":"","sig":null,"attributes":[]},{"id":28,"kind":"Direct","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\imageops\\sample.rs","byte_start":83879,"byte_end":83891,"line_start":112,"line_end":112,"column_start":22,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":349},{"krate":0,"index":350},{"krate":0,"index":351}],"docs":"","sig":null,"attributes":[]},{"id":29,"kind":"Inherent","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\imageops\\sample.rs","byte_start":92172,"byte_end":92184,"line_start":379,"line_end":379,"column_start":34,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":378},{"krate":0,"index":379},{"krate":0,"index":380}],"docs":"","sig":null,"attributes":[]},{"id":30,"kind":"Inherent","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\io\\reader.rs","byte_start":112167,"byte_end":112173,"line_start":68,"line_end":68,"column_start":15,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":474},{"krate":0,"index":475},{"krate":0,"index":476},{"krate":0,"index":477},{"krate":0,"index":478},{"krate":0,"index":479}],"docs":"","sig":null,"attributes":[]},{"id":31,"kind":"Inherent","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\io\\reader.rs","byte_start":113555,"byte_end":113561,"line_start":115,"line_end":115,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":481},{"krate":0,"index":483}],"docs":"","sig":null,"attributes":[]},{"id":32,"kind":"Inherent","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\io\\reader.rs","byte_start":114347,"byte_end":114353,"line_start":137,"line_end":137,"column_start":25,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":486},{"krate":0,"index":487},{"krate":0,"index":489},{"krate":0,"index":490},{"krate":0,"index":491}],"docs":"","sig":null,"attributes":[]},{"id":33,"kind":"Inherent","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":132633,"byte_end":132645,"line_start":124,"line_end":124,"column_start":6,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":556},{"krate":0,"index":557},{"krate":0,"index":558},{"krate":0,"index":559},{"krate":0,"index":560},{"krate":0,"index":561},{"krate":0,"index":563},{"krate":0,"index":565},{"krate":0,"index":568},{"krate":0,"index":569},{"krate":0,"index":570},{"krate":0,"index":571},{"krate":0,"index":572},{"krate":0,"index":576},{"krate":0,"index":577}],"docs":"","sig":null,"attributes":[]},{"id":34,"kind":"Inherent","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":145240,"byte_end":145243,"line_start":437,"line_end":437,"column_start":6,"column_end":9},"value":"","parent":null,"children":[{"krate":0,"index":579},{"krate":0,"index":580},{"krate":0,"index":581}],"docs":"","sig":null,"attributes":[]},{"id":35,"kind":"Inherent","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":145501,"byte_end":145512,"line_start":452,"line_end":452,"column_start":14,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":584},{"krate":0,"index":585},{"krate":0,"index":586},{"krate":0,"index":587},{"krate":0,"index":589},{"krate":0,"index":591},{"krate":0,"index":593},{"krate":0,"index":596},{"krate":0,"index":598},{"krate":0,"index":600},{"krate":0,"index":602},{"krate":0,"index":604},{"krate":0,"index":606},{"krate":0,"index":608},{"krate":0,"index":610},{"krate":0,"index":612},{"krate":0,"index":615},{"krate":0,"index":616},{"krate":0,"index":617},{"krate":0,"index":618},{"krate":0,"index":619},{"krate":0,"index":620},{"krate":0,"index":621},{"krate":0,"index":622},{"krate":0,"index":623}],"docs":"","sig":null,"attributes":[]},{"id":36,"kind":"Inherent","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":162667,"byte_end":162678,"line_start":873,"line_end":873,"column_start":22,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":627}],"docs":"","sig":null,"attributes":[]},{"id":37,"kind":"Inherent","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":168530,"byte_end":168534,"line_start":1028,"line_end":1028,"column_start":24,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":632},{"krate":0,"index":633},{"krate":0,"index":634},{"krate":0,"index":635},{"krate":0,"index":636},{"krate":0,"index":637},{"krate":0,"index":638},{"krate":0,"index":639},{"krate":0,"index":640},{"krate":0,"index":641}],"docs":"","sig":null,"attributes":[]},{"id":38,"kind":"Inherent","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":174119,"byte_end":174126,"line_start":1161,"line_end":1161,"column_start":24,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":645},{"krate":0,"index":646},{"krate":0,"index":647},{"krate":0,"index":648},{"krate":0,"index":649},{"krate":0,"index":650},{"krate":0,"index":651},{"krate":0,"index":652},{"krate":0,"index":653}],"docs":"","sig":null,"attributes":[]},{"id":39,"kind":"Direct","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":178502,"byte_end":178513,"line_start":1275,"line_end":1275,"column_start":40,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":658},{"krate":0,"index":659}],"docs":"","sig":null,"attributes":[]},{"id":40,"kind":"Direct","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":179122,"byte_end":179133,"line_start":1294,"line_end":1294,"column_start":43,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":663}],"docs":"","sig":null,"attributes":[]},{"id":41,"kind":"Direct","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":179737,"byte_end":179741,"line_start":1312,"line_end":1312,"column_start":45,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":668},{"krate":0,"index":669},{"krate":0,"index":670},{"krate":0,"index":671},{"krate":0,"index":672},{"krate":0,"index":673},{"krate":0,"index":676}],"docs":"","sig":null,"attributes":[]},{"id":42,"kind":"Direct","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":180988,"byte_end":180995,"line_start":1357,"line_end":1357,"column_start":45,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":680},{"krate":0,"index":681},{"krate":0,"index":682},{"krate":0,"index":683},{"krate":0,"index":684},{"krate":0,"index":685},{"krate":0,"index":688}],"docs":"","sig":null,"attributes":[]},{"id":43,"kind":"Direct","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":182262,"byte_end":182269,"line_start":1402,"line_end":1402,"column_start":41,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":692},{"krate":0,"index":693},{"krate":0,"index":694},{"krate":0,"index":695},{"krate":0,"index":696}],"docs":"","sig":null,"attributes":[]},{"id":44,"kind":"Direct","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":183164,"byte_end":183174,"line_start":1431,"line_end":1431,"column_start":22,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":698}],"docs":"","sig":null,"attributes":[]},{"id":45,"kind":"Direct","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":183326,"byte_end":183349,"line_start":1435,"line_end":1435,"column_start":31,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":700}],"docs":"","sig":null,"attributes":[]},{"id":46,"kind":"Direct","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":183557,"byte_end":183580,"line_start":1440,"line_end":1440,"column_start":31,"column_end":54},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":47,"kind":"Direct","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":184154,"byte_end":184159,"line_start":1454,"line_end":1454,"column_start":23,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":703}],"docs":"","sig":null,"attributes":[]},{"id":48,"kind":"Direct","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":185094,"byte_end":185099,"line_start":1478,"line_end":1478,"column_start":23,"column_end":28},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":49,"kind":"Direct","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":185124,"byte_end":185134,"line_start":1480,"line_end":1480,"column_start":21,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":706}],"docs":"","sig":null,"attributes":[]},{"id":50,"kind":"Inherent","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\codecs\\jpeg\\decoder.rs","byte_start":191850,"byte_end":191861,"line_start":18,"line_end":18,"column_start":15,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":739},{"krate":0,"index":741}],"docs":"","sig":null,"attributes":[]},{"id":51,"kind":"Direct","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\codecs\\jpeg\\decoder.rs","byte_start":193650,"byte_end":193660,"line_start":69,"line_end":69,"column_start":18,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":749},{"krate":0,"index":750}],"docs":"","sig":null,"attributes":[]},{"id":52,"kind":"Direct","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\codecs\\jpeg\\decoder.rs","byte_start":194073,"byte_end":194084,"line_start":83,"line_end":83,"column_start":45,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":754},{"krate":0,"index":755},{"krate":0,"index":756},{"krate":0,"index":757},{"krate":0,"index":758}],"docs":"","sig":null,"attributes":[]},{"id":53,"kind":"Inherent","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\codecs\\jpeg\\decoder.rs","byte_start":195830,"byte_end":195839,"line_start":143,"line_end":143,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":761}],"docs":"","sig":null,"attributes":[]},{"id":54,"kind":"Inherent","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\codecs\\jpeg\\decoder.rs","byte_start":196097,"byte_end":196107,"line_start":154,"line_end":154,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":764}],"docs":"","sig":null,"attributes":[]},{"id":55,"kind":"Inherent","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\codecs\\jpeg\\encoder.rs","byte_start":222330,"byte_end":222339,"line_start":169,"line_end":169,"column_start":25,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":835},{"krate":0,"index":836},{"krate":0,"index":837},{"krate":0,"index":838},{"krate":0,"index":840},{"krate":0,"index":844},{"krate":0,"index":845}],"docs":"","sig":null,"attributes":[]},{"id":56,"kind":"Inherent","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\codecs\\jpeg\\encoder.rs","byte_start":225818,"byte_end":225830,"line_start":301,"line_end":301,"column_start":6,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":847}],"docs":"","sig":null,"attributes":[]},{"id":57,"kind":"Direct","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\codecs\\jpeg\\encoder.rs","byte_start":226168,"byte_end":226180,"line_start":313,"line_end":313,"column_start":18,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":849}],"docs":"","sig":null,"attributes":[]},{"id":58,"kind":"Inherent","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\codecs\\jpeg\\encoder.rs","byte_start":227035,"byte_end":227046,"line_start":349,"line_end":349,"column_start":20,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":872},{"krate":0,"index":873},{"krate":0,"index":876},{"krate":0,"index":877},{"krate":0,"index":878},{"krate":0,"index":882},{"krate":0,"index":886}],"docs":"","sig":null,"attributes":[]},{"id":59,"kind":"Direct","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\codecs\\jpeg\\encoder.rs","byte_start":238382,"byte_end":238393,"line_start":677,"line_end":677,"column_start":37,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":897}],"docs":"","sig":null,"attributes":[]},{"id":60,"kind":"Inherent","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\codecs\\png.rs","byte_start":261260,"byte_end":261269,"line_start":45,"line_end":45,"column_start":15,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":1003}],"docs":"","sig":null,"attributes":[]},{"id":61,"kind":"Direct","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\codecs\\png.rs","byte_start":262027,"byte_end":262036,"line_start":69,"line_end":69,"column_start":24,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":1006},{"krate":0,"index":1007}],"docs":"","sig":null,"attributes":[]},{"id":62,"kind":"Inherent","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\codecs\\png.rs","byte_start":263401,"byte_end":263411,"line_start":120,"line_end":120,"column_start":15,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":1014},{"krate":0,"index":1015},{"krate":0,"index":1016}],"docs":"","sig":null,"attributes":[]},{"id":63,"kind":"Direct","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\codecs\\png.rs","byte_start":268025,"byte_end":268035,"line_start":209,"line_end":209,"column_start":45,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":1021},{"krate":0,"index":1022},{"krate":0,"index":1023},{"krate":0,"index":1024},{"krate":0,"index":1025},{"krate":0,"index":1031}],"docs":"","sig":null,"attributes":[]},{"id":64,"kind":"Inherent","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\codecs\\png.rs","byte_start":270096,"byte_end":270107,"line_start":272,"line_end":272,"column_start":15,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":1042},{"krate":0,"index":1043},{"krate":0,"index":1045}],"docs":"","sig":null,"attributes":[]},{"id":65,"kind":"Direct","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\codecs\\png.rs","byte_start":275658,"byte_end":275669,"line_start":412,"line_end":412,"column_start":49,"column_end":60},"value":"","parent":null,"children":[{"krate":0,"index":1049}],"docs":"","sig":null,"attributes":[]},{"id":66,"kind":"Direct","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\codecs\\png.rs","byte_start":275807,"byte_end":275820,"line_start":416,"line_end":416,"column_start":36,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":1056},{"krate":0,"index":1057}],"docs":"","sig":null,"attributes":[]},{"id":67,"kind":"Inherent","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\codecs\\png.rs","byte_start":278429,"byte_end":278439,"line_start":502,"line_end":502,"column_start":16,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":1067},{"krate":0,"index":1068},{"krate":0,"index":1069}],"docs":"","sig":null,"attributes":[]},{"id":68,"kind":"Direct","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\codecs\\png.rs","byte_start":282274,"byte_end":282284,"line_start":577,"line_end":577,"column_start":33,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":1074}],"docs":"","sig":null,"attributes":[]},{"id":69,"kind":"Inherent","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\codecs\\png.rs","byte_start":283519,"byte_end":283529,"line_start":609,"line_end":609,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":1081}],"docs":"","sig":null,"attributes":[]},{"id":70,"kind":"Direct","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\codecs\\png.rs","byte_start":284546,"byte_end":284561,"line_start":637,"line_end":637,"column_start":18,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":1084}],"docs":"","sig":null,"attributes":[]},{"id":71,"kind":"Direct","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\codecs\\png.rs","byte_start":284647,"byte_end":284657,"line_start":643,"line_end":643,"column_start":18,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":1086}],"docs":"","sig":null,"attributes":[]},{"id":72,"kind":"Inherent","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\animation.rs","byte_start":286290,"byte_end":286296,"line_start":14,"line_end":14,"column_start":10,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":1115},{"krate":0,"index":1116}],"docs":"","sig":null,"attributes":[]},{"id":73,"kind":"Direct","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\animation.rs","byte_start":286886,"byte_end":286892,"line_start":30,"line_end":30,"column_start":23,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":1119},{"krate":0,"index":1120}],"docs":"","sig":null,"attributes":[]},{"id":74,"kind":"Inherent","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\animation.rs","byte_start":287411,"byte_end":287416,"line_start":55,"line_end":55,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":1122},{"krate":0,"index":1123},{"krate":0,"index":1124},{"krate":0,"index":1125},{"krate":0,"index":1126},{"krate":0,"index":1127},{"krate":0,"index":1128},{"krate":0,"index":1129}],"docs":"","sig":null,"attributes":[]},{"id":75,"kind":"Inherent","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\animation.rs","byte_start":288489,"byte_end":288494,"line_start":107,"line_end":107,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":1131},{"krate":0,"index":1132},{"krate":0,"index":1134},{"krate":0,"index":1135},{"krate":0,"index":1136},{"krate":0,"index":1137}],"docs":"","sig":null,"attributes":[]},{"id":76,"kind":"Direct","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\animation.rs","byte_start":294530,"byte_end":294538,"line_start":263,"line_end":263,"column_start":22,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":1144}],"docs":"","sig":null,"attributes":[]},{"id":77,"kind":"Direct","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\buffer.rs","byte_start":297999,"byte_end":298005,"line_start":26,"line_end":26,"column_start":38,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":1190},{"krate":0,"index":1191}],"docs":"","sig":null,"attributes":[]},{"id":78,"kind":"Direct","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\buffer.rs","byte_start":298249,"byte_end":298255,"line_start":38,"line_end":38,"column_start":47,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":1196}],"docs":"","sig":null,"attributes":[]},{"id":79,"kind":"Direct","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\buffer.rs","byte_start":298404,"byte_end":298410,"line_start":47,"line_end":47,"column_start":49,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":1200}],"docs":"","sig":null,"attributes":[]},{"id":80,"kind":"Direct","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\buffer.rs","byte_start":298619,"byte_end":298625,"line_start":57,"line_end":57,"column_start":26,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":1204}],"docs":"","sig":null,"attributes":[]},{"id":81,"kind":"Direct","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\buffer.rs","byte_start":298751,"byte_end":298757,"line_start":63,"line_end":63,"column_start":31,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":1207}],"docs":"","sig":null,"attributes":[]},{"id":82,"kind":"Direct","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\buffer.rs","byte_start":299172,"byte_end":299181,"line_start":83,"line_end":83,"column_start":38,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":1215},{"krate":0,"index":1216}],"docs":"","sig":null,"attributes":[]},{"id":83,"kind":"Direct","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\buffer.rs","byte_start":299437,"byte_end":299446,"line_start":95,"line_end":95,"column_start":47,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":1221}],"docs":"","sig":null,"attributes":[]},{"id":84,"kind":"Direct","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\buffer.rs","byte_start":299595,"byte_end":299604,"line_start":104,"line_end":104,"column_start":49,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":1225}],"docs":"","sig":null,"attributes":[]},{"id":85,"kind":"Direct","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\buffer.rs","byte_start":299852,"byte_end":299861,"line_start":116,"line_end":116,"column_start":31,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":1229}],"docs":"","sig":null,"attributes":[]},{"id":86,"kind":"Inherent","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\buffer.rs","byte_start":300427,"byte_end":300431,"line_start":140,"line_end":140,"column_start":25,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":1237}],"docs":"","sig":null,"attributes":[]},{"id":87,"kind":"Direct","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\buffer.rs","byte_start":301330,"byte_end":301334,"line_start":161,"line_end":161,"column_start":38,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":1241},{"krate":0,"index":1242}],"docs":"","sig":null,"attributes":[]},{"id":88,"kind":"Direct","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\buffer.rs","byte_start":301744,"byte_end":301748,"line_start":177,"line_end":177,"column_start":47,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":1246}],"docs":"","sig":null,"attributes":[]},{"id":89,"kind":"Direct","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\buffer.rs","byte_start":301897,"byte_end":301901,"line_start":186,"line_end":186,"column_start":49,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":1250}],"docs":"","sig":null,"attributes":[]},{"id":90,"kind":"Direct","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\buffer.rs","byte_start":302268,"byte_end":302272,"line_start":200,"line_end":200,"column_start":26,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":1253}],"docs":"","sig":null,"attributes":[]},{"id":91,"kind":"Direct","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\buffer.rs","byte_start":302396,"byte_end":302400,"line_start":206,"line_end":206,"column_start":31,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":1256}],"docs":"","sig":null,"attributes":[]},{"id":92,"kind":"Inherent","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\buffer.rs","byte_start":302987,"byte_end":302994,"line_start":230,"line_end":230,"column_start":25,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":1264}],"docs":"","sig":null,"attributes":[]},{"id":93,"kind":"Direct","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\buffer.rs","byte_start":303915,"byte_end":303922,"line_start":251,"line_end":251,"column_start":38,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":1268},{"krate":0,"index":1269}],"docs":"","sig":null,"attributes":[]},{"id":94,"kind":"Direct","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\buffer.rs","byte_start":304345,"byte_end":304352,"line_start":267,"line_end":267,"column_start":47,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":1273}],"docs":"","sig":null,"attributes":[]},{"id":95,"kind":"Direct","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\buffer.rs","byte_start":304501,"byte_end":304508,"line_start":276,"line_end":276,"column_start":49,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":1277}],"docs":"","sig":null,"attributes":[]},{"id":96,"kind":"Direct","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\buffer.rs","byte_start":304890,"byte_end":304897,"line_start":290,"line_end":290,"column_start":31,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":1280}],"docs":"","sig":null,"attributes":[]},{"id":97,"kind":"Direct","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\buffer.rs","byte_start":305353,"byte_end":305368,"line_start":313,"line_end":313,"column_start":38,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":1291},{"krate":0,"index":1292}],"docs":"","sig":null,"attributes":[]},{"id":98,"kind":"Direct","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\buffer.rs","byte_start":305771,"byte_end":305786,"line_start":331,"line_end":331,"column_start":47,"column_end":62},"value":"","parent":null,"children":[{"krate":0,"index":1297}],"docs":"","sig":null,"attributes":[]},{"id":99,"kind":"Direct","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\buffer.rs","byte_start":305912,"byte_end":305927,"line_start":340,"line_end":340,"column_start":26,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":1300}],"docs":"","sig":null,"attributes":[]},{"id":100,"kind":"Direct","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\buffer.rs","byte_start":306103,"byte_end":306118,"line_start":349,"line_end":349,"column_start":31,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":1303}],"docs":"","sig":null,"attributes":[]},{"id":101,"kind":"Direct","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\buffer.rs","byte_start":306657,"byte_end":306670,"line_start":374,"line_end":374,"column_start":38,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":1313},{"krate":0,"index":1314}],"docs":"","sig":null,"attributes":[]},{"id":102,"kind":"Direct","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\buffer.rs","byte_start":307208,"byte_end":307221,"line_start":398,"line_end":398,"column_start":47,"column_end":60},"value":"","parent":null,"children":[{"krate":0,"index":1319}],"docs":"","sig":null,"attributes":[]},{"id":103,"kind":"Direct","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\buffer.rs","byte_start":307345,"byte_end":307358,"line_start":407,"line_end":407,"column_start":26,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":1322}],"docs":"","sig":null,"attributes":[]},{"id":104,"kind":"Direct","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\buffer.rs","byte_start":307528,"byte_end":307541,"line_start":416,"line_end":416,"column_start":31,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":1325}],"docs":"","sig":null,"attributes":[]},{"id":105,"kind":"Direct","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\buffer.rs","byte_start":308069,"byte_end":308087,"line_start":441,"line_end":441,"column_start":38,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":1336},{"krate":0,"index":1337}],"docs":"","sig":null,"attributes":[]},{"id":106,"kind":"Direct","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\buffer.rs","byte_start":308498,"byte_end":308516,"line_start":459,"line_end":459,"column_start":47,"column_end":65},"value":"","parent":null,"children":[{"krate":0,"index":1342}],"docs":"","sig":null,"attributes":[]},{"id":107,"kind":"Direct","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\buffer.rs","byte_start":308647,"byte_end":308665,"line_start":468,"line_end":468,"column_start":31,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":1345}],"docs":"","sig":null,"attributes":[]},{"id":108,"kind":"Direct","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\buffer.rs","byte_start":309213,"byte_end":309229,"line_start":493,"line_end":493,"column_start":38,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":1355},{"krate":0,"index":1356}],"docs":"","sig":null,"attributes":[]},{"id":109,"kind":"Direct","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\buffer.rs","byte_start":309776,"byte_end":309792,"line_start":517,"line_end":517,"column_start":47,"column_end":63},"value":"","parent":null,"children":[{"krate":0,"index":1361}],"docs":"","sig":null,"attributes":[]},{"id":110,"kind":"Direct","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\buffer.rs","byte_start":309921,"byte_end":309937,"line_start":526,"line_end":526,"column_start":31,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":1364}],"docs":"","sig":null,"attributes":[]},{"id":111,"kind":"Inherent","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\buffer.rs","byte_start":312959,"byte_end":312970,"line_start":620,"line_end":620,"column_start":20,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":1368},{"krate":0,"index":1369},{"krate":0,"index":1370},{"krate":0,"index":1371},{"krate":0,"index":1372},{"krate":0,"index":1373},{"krate":0,"index":1374},{"krate":0,"index":1375},{"krate":0,"index":1376},{"krate":0,"index":1377},{"krate":0,"index":1378},{"krate":0,"index":1379},{"krate":0,"index":1380},{"krate":0,"index":1382},{"krate":0,"index":1385},{"krate":0,"index":1386},{"krate":0,"index":1387},{"krate":0,"index":1388},{"krate":0,"index":1389},{"krate":0,"index":1390}],"docs":"","sig":null,"attributes":[]},{"id":112,"kind":"Inherent","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\buffer.rs","byte_start":319795,"byte_end":319806,"line_start":815,"line_end":815,"column_start":20,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":1394},{"krate":0,"index":1395},{"krate":0,"index":1396},{"krate":0,"index":1397},{"krate":0,"index":1398},{"krate":0,"index":1399},{"krate":0,"index":1400}],"docs":"","sig":null,"attributes":[]},{"id":113,"kind":"Inherent","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\buffer.rs","byte_start":322404,"byte_end":322415,"line_start":890,"line_end":890,"column_start":20,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":1404}],"docs":"","sig":null,"attributes":[]},{"id":114,"kind":"Inherent","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\buffer.rs","byte_start":323067,"byte_end":323078,"line_start":915,"line_end":915,"column_start":20,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":1409}],"docs":"","sig":null,"attributes":[]},{"id":115,"kind":"Direct","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\buffer.rs","byte_start":323823,"byte_end":323834,"line_start":942,"line_end":942,"column_start":32,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":1414}],"docs":"","sig":null,"attributes":[]},{"id":116,"kind":"Direct","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\buffer.rs","byte_start":324103,"byte_end":324114,"line_start":957,"line_end":957,"column_start":30,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":1418},{"krate":0,"index":1419}],"docs":"","sig":null,"attributes":[]},{"id":117,"kind":"Direct","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\buffer.rs","byte_start":324378,"byte_end":324389,"line_start":970,"line_end":970,"column_start":33,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":1423}],"docs":"","sig":null,"attributes":[]},{"id":118,"kind":"Direct","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\buffer.rs","byte_start":324655,"byte_end":324666,"line_start":981,"line_end":981,"column_start":42,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":1427},{"krate":0,"index":1428}],"docs":"","sig":null,"attributes":[]},{"id":119,"kind":"Direct","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\buffer.rs","byte_start":324937,"byte_end":324948,"line_start":994,"line_end":994,"column_start":45,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":1432}],"docs":"","sig":null,"attributes":[]},{"id":120,"kind":"Direct","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\buffer.rs","byte_start":325209,"byte_end":325220,"line_start":1005,"line_end":1005,"column_start":30,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":1436}],"docs":"","sig":null,"attributes":[]},{"id":121,"kind":"Direct","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\buffer.rs","byte_start":325579,"byte_end":325590,"line_start":1020,"line_end":1020,"column_start":41,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":1440},{"krate":0,"index":1441},{"krate":0,"index":1442},{"krate":0,"index":1443},{"krate":0,"index":1444},{"krate":0,"index":1445},{"krate":0,"index":1446}],"docs":"","sig":null,"attributes":[]},{"id":122,"kind":"Direct","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\buffer.rs","byte_start":326414,"byte_end":326425,"line_start":1053,"line_end":1053,"column_start":37,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":1450},{"krate":0,"index":1451},{"krate":0,"index":1452},{"krate":0,"index":1453},{"krate":0,"index":1454},{"krate":0,"index":1455},{"krate":0,"index":1456}],"docs":"","sig":null,"attributes":[]},{"id":123,"kind":"Inherent","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\buffer.rs","byte_start":330010,"byte_end":330021,"line_start":1145,"line_end":1145,"column_start":26,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":1461},{"krate":0,"index":1462},{"krate":0,"index":1463},{"krate":0,"index":1465},{"krate":0,"index":1466}],"docs":"","sig":null,"attributes":[]},{"id":124,"kind":"Inherent","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\buffer.rs","byte_start":332455,"byte_end":332464,"line_start":1223,"line_end":1223,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":1471}],"docs":"","sig":null,"attributes":[]},{"id":125,"kind":"Direct","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\buffer.rs","byte_start":333862,"byte_end":333873,"line_start":1261,"line_end":1261,"column_start":67,"column_end":78},"value":"","parent":null,"children":[{"krate":0,"index":1479}],"docs":"","sig":null,"attributes":[]},{"id":126,"kind":"Inherent","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\color.rs","byte_start":344466,"byte_end":344475,"line_start":37,"line_end":37,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":1502},{"krate":0,"index":1503},{"krate":0,"index":1505},{"krate":0,"index":1507},{"krate":0,"index":1508}],"docs":"","sig":null,"attributes":[]},{"id":127,"kind":"Inherent","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\color.rs","byte_start":348184,"byte_end":348201,"line_start":148,"line_end":148,"column_start":6,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":1510}],"docs":"","sig":null,"attributes":[]},{"id":128,"kind":"Direct","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\color.rs","byte_start":349489,"byte_end":349506,"line_start":182,"line_end":182,"column_start":26,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":1512}],"docs":"","sig":null,"attributes":[]},{"id":129,"kind":"Direct","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\color.rs","byte_start":355606,"byte_end":355607,"line_start":388,"line_end":388,"column_start":32,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":1519}],"docs":"","sig":null,"attributes":[]},{"id":130,"kind":"Direct","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\color.rs","byte_start":356045,"byte_end":356046,"line_start":402,"line_end":402,"column_start":29,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":1526}],"docs":"","sig":null,"attributes":[]},{"id":131,"kind":"Direct","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\color.rs","byte_start":357302,"byte_end":357306,"line_start":446,"line_end":446,"column_start":53,"column_end":57},"value":"","parent":null,"children":[{"krate":0,"index":1537}],"docs":"","sig":null,"attributes":[]},{"id":132,"kind":"Direct","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\color.rs","byte_start":357535,"byte_end":357539,"line_start":454,"line_end":454,"column_start":53,"column_end":57},"value":"","parent":null,"children":[{"krate":0,"index":1540}],"docs":"","sig":null,"attributes":[]},{"id":133,"kind":"Direct","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\color.rs","byte_start":357767,"byte_end":357771,"line_start":462,"line_end":462,"column_start":52,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":1543}],"docs":"","sig":null,"attributes":[]},{"id":134,"kind":"Direct","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\color.rs","byte_start":357996,"byte_end":358000,"line_start":470,"line_end":470,"column_start":52,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":1546}],"docs":"","sig":null,"attributes":[]},{"id":135,"kind":"Direct","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\color.rs","byte_start":358227,"byte_end":358231,"line_start":478,"line_end":478,"column_start":54,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":1549}],"docs":"","sig":null,"attributes":[]},{"id":136,"kind":"Direct","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\color.rs","byte_start":358379,"byte_end":358383,"line_start":485,"line_end":485,"column_start":31,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":1551}],"docs":"","sig":null,"attributes":[]},{"id":137,"kind":"Direct","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\color.rs","byte_start":358627,"byte_end":358631,"line_start":494,"line_end":494,"column_start":30,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":1553}],"docs":"","sig":null,"attributes":[]},{"id":138,"kind":"Direct","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\color.rs","byte_start":358875,"byte_end":358879,"line_start":503,"line_end":503,"column_start":31,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":1555}],"docs":"","sig":null,"attributes":[]},{"id":139,"kind":"Direct","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\color.rs","byte_start":359065,"byte_end":359069,"line_start":510,"line_end":510,"column_start":30,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":1557}],"docs":"","sig":null,"attributes":[]},{"id":140,"kind":"Direct","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\color.rs","byte_start":359255,"byte_end":359259,"line_start":517,"line_end":517,"column_start":32,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":1559}],"docs":"","sig":null,"attributes":[]},{"id":141,"kind":"Direct","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\color.rs","byte_start":359447,"byte_end":359451,"line_start":524,"line_end":524,"column_start":31,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":1561}],"docs":"","sig":null,"attributes":[]},{"id":142,"kind":"Direct","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\color.rs","byte_start":359664,"byte_end":359668,"line_start":532,"line_end":532,"column_start":29,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":1563}],"docs":"","sig":null,"attributes":[]},{"id":143,"kind":"Direct","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\color.rs","byte_start":359890,"byte_end":359894,"line_start":540,"line_end":540,"column_start":30,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":1565}],"docs":"","sig":null,"attributes":[]},{"id":144,"kind":"Direct","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\color.rs","byte_start":360118,"byte_end":360122,"line_start":548,"line_end":548,"column_start":29,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":1567}],"docs":"","sig":null,"attributes":[]},{"id":145,"kind":"Direct","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\color.rs","byte_start":360344,"byte_end":360348,"line_start":556,"line_end":556,"column_start":30,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":1569}],"docs":"","sig":null,"attributes":[]},{"id":146,"kind":"Direct","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\color.rs","byte_start":360623,"byte_end":360628,"line_start":567,"line_end":567,"column_start":53,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":1572}],"docs":"","sig":null,"attributes":[]},{"id":147,"kind":"Direct","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\color.rs","byte_start":360890,"byte_end":360895,"line_start":576,"line_end":576,"column_start":53,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":1575}],"docs":"","sig":null,"attributes":[]},{"id":148,"kind":"Direct","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\color.rs","byte_start":361156,"byte_end":361161,"line_start":585,"line_end":585,"column_start":52,"column_end":57},"value":"","parent":null,"children":[{"krate":0,"index":1578}],"docs":"","sig":null,"attributes":[]},{"id":149,"kind":"Direct","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\color.rs","byte_start":361426,"byte_end":361431,"line_start":594,"line_end":594,"column_start":52,"column_end":57},"value":"","parent":null,"children":[{"krate":0,"index":1581}],"docs":"","sig":null,"attributes":[]},{"id":150,"kind":"Direct","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\color.rs","byte_start":361697,"byte_end":361702,"line_start":603,"line_end":603,"column_start":53,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":1584}],"docs":"","sig":null,"attributes":[]},{"id":151,"kind":"Direct","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\color.rs","byte_start":361915,"byte_end":361920,"line_start":611,"line_end":611,"column_start":32,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":1586}],"docs":"","sig":null,"attributes":[]},{"id":152,"kind":"Direct","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\color.rs","byte_start":362220,"byte_end":362225,"line_start":621,"line_end":621,"column_start":31,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":1588}],"docs":"","sig":null,"attributes":[]},{"id":153,"kind":"Direct","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\color.rs","byte_start":362520,"byte_end":362525,"line_start":631,"line_end":631,"column_start":30,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":1590}],"docs":"","sig":null,"attributes":[]},{"id":154,"kind":"Direct","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\color.rs","byte_start":362777,"byte_end":362782,"line_start":640,"line_end":640,"column_start":29,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":1592}],"docs":"","sig":null,"attributes":[]},{"id":155,"kind":"Direct","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\color.rs","byte_start":363046,"byte_end":363051,"line_start":649,"line_end":649,"column_start":30,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":1594}],"docs":"","sig":null,"attributes":[]},{"id":156,"kind":"Direct","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\color.rs","byte_start":363324,"byte_end":363329,"line_start":658,"line_end":658,"column_start":29,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":1596}],"docs":"","sig":null,"attributes":[]},{"id":157,"kind":"Direct","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\color.rs","byte_start":363593,"byte_end":363598,"line_start":667,"line_end":667,"column_start":30,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":1598}],"docs":"","sig":null,"attributes":[]},{"id":158,"kind":"Direct","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\color.rs","byte_start":363920,"byte_end":363924,"line_start":679,"line_end":679,"column_start":52,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":1601}],"docs":"","sig":null,"attributes":[]},{"id":159,"kind":"Direct","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\color.rs","byte_start":364225,"byte_end":364229,"line_start":690,"line_end":690,"column_start":52,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":1604}],"docs":"","sig":null,"attributes":[]},{"id":160,"kind":"Direct","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\color.rs","byte_start":364531,"byte_end":364535,"line_start":701,"line_end":701,"column_start":53,"column_end":57},"value":"","parent":null,"children":[{"krate":0,"index":1607}],"docs":"","sig":null,"attributes":[]},{"id":161,"kind":"Direct","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\color.rs","byte_start":364836,"byte_end":364840,"line_start":712,"line_end":712,"column_start":54,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":1610}],"docs":"","sig":null,"attributes":[]},{"id":162,"kind":"Direct","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\color.rs","byte_start":365141,"byte_end":365145,"line_start":723,"line_end":723,"column_start":53,"column_end":57},"value":"","parent":null,"children":[{"krate":0,"index":1613}],"docs":"","sig":null,"attributes":[]},{"id":163,"kind":"Direct","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\color.rs","byte_start":365422,"byte_end":365426,"line_start":734,"line_end":734,"column_start":31,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":1615}],"docs":"","sig":null,"attributes":[]},{"id":164,"kind":"Direct","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\color.rs","byte_start":365788,"byte_end":365792,"line_start":745,"line_end":745,"column_start":30,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":1617}],"docs":"","sig":null,"attributes":[]},{"id":165,"kind":"Direct","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\color.rs","byte_start":366142,"byte_end":366146,"line_start":756,"line_end":756,"column_start":31,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":1619}],"docs":"","sig":null,"attributes":[]},{"id":166,"kind":"Direct","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\color.rs","byte_start":366501,"byte_end":366505,"line_start":769,"line_end":769,"column_start":29,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":1621}],"docs":"","sig":null,"attributes":[]},{"id":167,"kind":"Direct","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\color.rs","byte_start":366837,"byte_end":366841,"line_start":780,"line_end":780,"column_start":30,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":1623}],"docs":"","sig":null,"attributes":[]},{"id":168,"kind":"Direct","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\color.rs","byte_start":367160,"byte_end":367164,"line_start":792,"line_end":792,"column_start":29,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":1625}],"docs":"","sig":null,"attributes":[]},{"id":169,"kind":"Direct","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\color.rs","byte_start":367496,"byte_end":367500,"line_start":803,"line_end":803,"column_start":30,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":1627}],"docs":"","sig":null,"attributes":[]},{"id":170,"kind":"Direct","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\color.rs","byte_start":367891,"byte_end":367895,"line_start":816,"line_end":816,"column_start":52,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":1630}],"docs":"","sig":null,"attributes":[]},{"id":171,"kind":"Direct","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\color.rs","byte_start":368196,"byte_end":368200,"line_start":827,"line_end":827,"column_start":52,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":1633}],"docs":"","sig":null,"attributes":[]},{"id":172,"kind":"Direct","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\color.rs","byte_start":368502,"byte_end":368506,"line_start":838,"line_end":838,"column_start":53,"column_end":57},"value":"","parent":null,"children":[{"krate":0,"index":1636}],"docs":"","sig":null,"attributes":[]},{"id":173,"kind":"Direct","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\color.rs","byte_start":368807,"byte_end":368811,"line_start":849,"line_end":849,"column_start":54,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":1639}],"docs":"","sig":null,"attributes":[]},{"id":174,"kind":"Direct","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\color.rs","byte_start":369112,"byte_end":369116,"line_start":860,"line_end":860,"column_start":53,"column_end":57},"value":"","parent":null,"children":[{"krate":0,"index":1642}],"docs":"","sig":null,"attributes":[]},{"id":175,"kind":"Direct","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\color.rs","byte_start":369440,"byte_end":369443,"line_start":874,"line_end":874,"column_start":53,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":1645}],"docs":"","sig":null,"attributes":[]},{"id":176,"kind":"Direct","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\color.rs","byte_start":369712,"byte_end":369715,"line_start":884,"line_end":884,"column_start":53,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":1648}],"docs":"","sig":null,"attributes":[]},{"id":177,"kind":"Direct","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\color.rs","byte_start":369983,"byte_end":369986,"line_start":894,"line_end":894,"column_start":52,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":1651}],"docs":"","sig":null,"attributes":[]},{"id":178,"kind":"Direct","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\color.rs","byte_start":370251,"byte_end":370254,"line_start":904,"line_end":904,"column_start":54,"column_end":57},"value":"","parent":null,"children":[{"krate":0,"index":1654}],"docs":"","sig":null,"attributes":[]},{"id":179,"kind":"Direct","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\color.rs","byte_start":370518,"byte_end":370521,"line_start":914,"line_end":914,"column_start":53,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":1657}],"docs":"","sig":null,"attributes":[]},{"id":180,"kind":"Direct","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\color.rs","byte_start":370759,"byte_end":370762,"line_start":924,"line_end":924,"column_start":30,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":1659}],"docs":"","sig":null,"attributes":[]},{"id":181,"kind":"Direct","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\color.rs","byte_start":370987,"byte_end":370990,"line_start":932,"line_end":932,"column_start":29,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":1661}],"docs":"","sig":null,"attributes":[]},{"id":182,"kind":"Direct","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\color.rs","byte_start":371215,"byte_end":371218,"line_start":940,"line_end":940,"column_start":31,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":1663}],"docs":"","sig":null,"attributes":[]},{"id":183,"kind":"Direct","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\color.rs","byte_start":371501,"byte_end":371504,"line_start":951,"line_end":951,"column_start":30,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":1665}],"docs":"","sig":null,"attributes":[]},{"id":184,"kind":"Direct","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\color.rs","byte_start":371801,"byte_end":371804,"line_start":961,"line_end":961,"column_start":30,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":1667}],"docs":"","sig":null,"attributes":[]},{"id":185,"kind":"Direct","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\color.rs","byte_start":372083,"byte_end":372086,"line_start":972,"line_end":972,"column_start":29,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":1669}],"docs":"","sig":null,"attributes":[]},{"id":186,"kind":"Direct","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\color.rs","byte_start":372378,"byte_end":372381,"line_start":982,"line_end":982,"column_start":30,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":1671}],"docs":"","sig":null,"attributes":[]},{"id":187,"kind":"Direct","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\color.rs","byte_start":372727,"byte_end":372730,"line_start":995,"line_end":995,"column_start":53,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":1674}],"docs":"","sig":null,"attributes":[]},{"id":188,"kind":"Direct","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\color.rs","byte_start":372998,"byte_end":373001,"line_start":1005,"line_end":1005,"column_start":52,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":1677}],"docs":"","sig":null,"attributes":[]},{"id":189,"kind":"Direct","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\color.rs","byte_start":373266,"byte_end":373269,"line_start":1016,"line_end":1016,"column_start":53,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":1680}],"docs":"","sig":null,"attributes":[]},{"id":190,"kind":"Direct","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\color.rs","byte_start":373539,"byte_end":373542,"line_start":1026,"line_end":1026,"column_start":54,"column_end":57},"value":"","parent":null,"children":[{"krate":0,"index":1683}],"docs":"","sig":null,"attributes":[]},{"id":191,"kind":"Direct","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\color.rs","byte_start":373806,"byte_end":373809,"line_start":1036,"line_end":1036,"column_start":53,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":1686}],"docs":"","sig":null,"attributes":[]},{"id":192,"kind":"Direct","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\color.rs","byte_start":375475,"byte_end":375480,"line_start":1090,"line_end":1090,"column_start":30,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":1692}],"docs":"","sig":null,"attributes":[]},{"id":193,"kind":"Direct","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\color.rs","byte_start":376485,"byte_end":376489,"line_start":1123,"line_end":1123,"column_start":30,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":1695}],"docs":"","sig":null,"attributes":[]},{"id":194,"kind":"Direct","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\color.rs","byte_start":376599,"byte_end":376603,"line_start":1129,"line_end":1129,"column_start":30,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":1698}],"docs":"","sig":null,"attributes":[]},{"id":195,"kind":"Direct","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\color.rs","byte_start":378811,"byte_end":378815,"line_start":1187,"line_end":1187,"column_start":30,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":1701}],"docs":"","sig":null,"attributes":[]},{"id":196,"kind":"Direct","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\color.rs","byte_start":381021,"byte_end":381024,"line_start":1243,"line_end":1243,"column_start":30,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":1704}],"docs":"","sig":null,"attributes":[]},{"id":197,"kind":"Direct","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\color.rs","byte_start":381133,"byte_end":381136,"line_start":1249,"line_end":1249,"column_start":30,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":1707}],"docs":"","sig":null,"attributes":[]},{"id":198,"kind":"Direct","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\color.rs","byte_start":381355,"byte_end":381360,"line_start":1262,"line_end":1262,"column_start":31,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":1712}],"docs":"","sig":null,"attributes":[]},{"id":199,"kind":"Direct","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\color.rs","byte_start":381533,"byte_end":381537,"line_start":1271,"line_end":1271,"column_start":31,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":1715}],"docs":"","sig":null,"attributes":[]},{"id":200,"kind":"Direct","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\color.rs","byte_start":381725,"byte_end":381729,"line_start":1282,"line_end":1282,"column_start":31,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":1718}],"docs":"","sig":null,"attributes":[]},{"id":201,"kind":"Direct","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\color.rs","byte_start":381942,"byte_end":381946,"line_start":1293,"line_end":1293,"column_start":31,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":1721}],"docs":"","sig":null,"attributes":[]},{"id":202,"kind":"Direct","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\color.rs","byte_start":382159,"byte_end":382162,"line_start":1304,"line_end":1304,"column_start":31,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":1724}],"docs":"","sig":null,"attributes":[]},{"id":203,"kind":"Direct","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\color.rs","byte_start":382424,"byte_end":382427,"line_start":1318,"line_end":1318,"column_start":31,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":1727}],"docs":"","sig":null,"attributes":[]},{"id":204,"kind":"Inherent","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\dynimage.rs","byte_start":394141,"byte_end":394153,"line_start":137,"line_end":137,"column_start":6,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":1774},{"krate":0,"index":1775},{"krate":0,"index":1776},{"krate":0,"index":1777},{"krate":0,"index":1778},{"krate":0,"index":1779},{"krate":0,"index":1780},{"krate":0,"index":1781},{"krate":0,"index":1782},{"krate":0,"index":1783},{"krate":0,"index":1784},{"krate":0,"index":1787},{"krate":0,"index":1788},{"krate":0,"index":1789},{"krate":0,"index":1790},{"krate":0,"index":1791},{"krate":0,"index":1792},{"krate":0,"index":1793},{"krate":0,"index":1794},{"krate":0,"index":1795},{"krate":0,"index":1796},{"krate":0,"index":1797},{"krate":0,"index":1798},{"krate":0,"index":1799},{"krate":0,"index":1800},{"krate":0,"index":1801},{"krate":0,"index":1802},{"krate":0,"index":1803},{"krate":0,"index":1804},{"krate":0,"index":1805},{"krate":0,"index":1806},{"krate":0,"index":1807},{"krate":0,"index":1808},{"krate":0,"index":1809},{"krate":0,"index":1810},{"krate":0,"index":1811},{"krate":0,"index":1812},{"krate":0,"index":1813},{"krate":0,"index":1814},{"krate":0,"index":1815},{"krate":0,"index":1816},{"krate":0,"index":1817},{"krate":0,"index":1818},{"krate":0,"index":1819},{"krate":0,"index":1820},{"krate":0,"index":1821},{"krate":0,"index":1822},{"krate":0,"index":1823},{"krate":0,"index":1824},{"krate":0,"index":1825},{"krate":0,"index":1826},{"krate":0,"index":1827},{"krate":0,"index":1828},{"krate":0,"index":1829},{"krate":0,"index":1830},{"krate":0,"index":1831},{"krate":0,"index":1832},{"krate":0,"index":1833},{"krate":0,"index":1834},{"krate":0,"index":1835},{"krate":0,"index":1836},{"krate":0,"index":1837},{"krate":0,"index":1838},{"krate":0,"index":1839},{"krate":0,"index":1840},{"krate":0,"index":1841},{"krate":0,"index":1842},{"krate":0,"index":1843},{"krate":0,"index":1844},{"krate":0,"index":1845},{"krate":0,"index":1846},{"krate":0,"index":1847},{"krate":0,"index":1848},{"krate":0,"index":1849},{"krate":0,"index":1850},{"krate":0,"index":1851},{"krate":0,"index":1852},{"krate":0,"index":1853},{"krate":0,"index":1854},{"krate":0,"index":1855},{"krate":0,"index":1856},{"krate":0,"index":1857},{"krate":0,"index":1858},{"krate":0,"index":1859},{"krate":0,"index":1860},{"krate":0,"index":1861},{"krate":0,"index":1862},{"krate":0,"index":1863},{"krate":0,"index":1864},{"krate":0,"index":1865},{"krate":0,"index":1868},{"krate":0,"index":1870}],"docs":"","sig":null,"attributes":[]},{"id":205,"kind":"Direct","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\dynimage.rs","byte_start":425486,"byte_end":425498,"line_start":1040,"line_end":1040,"column_start":27,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":1873},{"krate":0,"index":1874},{"krate":0,"index":1875},{"krate":0,"index":1876},{"krate":0,"index":1877},{"krate":0,"index":1878}],"docs":"","sig":null,"attributes":[]},{"id":206,"kind":"Direct","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\dynimage.rs","byte_start":426031,"byte_end":426043,"line_start":1062,"line_end":1062,"column_start":23,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":1880},{"krate":0,"index":1881},{"krate":0,"index":1882},{"krate":0,"index":1883},{"krate":0,"index":1884}],"docs":"","sig":null,"attributes":[]},{"id":207,"kind":"Inherent","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\image.rs","byte_start":438615,"byte_end":438626,"line_start":68,"line_end":68,"column_start":6,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":1929},{"krate":0,"index":1932},{"krate":0,"index":1937},{"krate":0,"index":1938},{"krate":0,"index":1939}],"docs":"","sig":null,"attributes":[]},{"id":208,"kind":"Direct","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\image.rs","byte_start":445299,"byte_end":445316,"line_start":259,"line_end":259,"column_start":28,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":1941}],"docs":"","sig":null,"attributes":[]},{"id":209,"kind":"Inherent","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\image.rs","byte_start":446711,"byte_end":446726,"line_start":298,"line_end":298,"column_start":6,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":1949},{"krate":0,"index":1950}],"docs":"","sig":null,"attributes":[]},{"id":210,"kind":"Inherent","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\image.rs","byte_start":454596,"byte_end":454604,"line_start":482,"line_end":482,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":1965},{"krate":0,"index":1966},{"krate":0,"index":1967}],"docs":"","sig":null,"attributes":[]},{"id":211,"kind":"Direct","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\image.rs","byte_start":461252,"byte_end":461258,"line_start":672,"line_end":672,"column_start":44,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":1995},{"krate":0,"index":1996}],"docs":"","sig":null,"attributes":[]},{"id":212,"kind":"Direct","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\image.rs","byte_start":461726,"byte_end":461732,"line_start":694,"line_end":694,"column_start":27,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":1999}],"docs":"","sig":null,"attributes":[]},{"id":213,"kind":"Inherent","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\image.rs","byte_start":470399,"byte_end":470407,"line_start":934,"line_end":934,"column_start":9,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":2038},{"krate":0,"index":2039},{"krate":0,"index":2040}],"docs":"","sig":null,"attributes":[]},{"id":214,"kind":"Direct","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\image.rs","byte_start":471625,"byte_end":471633,"line_start":976,"line_end":976,"column_start":30,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":2043},{"krate":0,"index":2044},{"krate":0,"index":2045},{"krate":0,"index":2046},{"krate":0,"index":2047},{"krate":0,"index":2048},{"krate":0,"index":2049}],"docs":"","sig":null,"attributes":[]},{"id":215,"kind":"Direct","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\image.rs","byte_start":472454,"byte_end":472462,"line_start":1008,"line_end":1008,"column_start":26,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":2052},{"krate":0,"index":2053},{"krate":0,"index":2054},{"krate":0,"index":2055},{"krate":0,"index":2056},{"krate":0,"index":2057}],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src/lib.rs","byte_start":5037,"byte_end":5042,"line_start":146,"line_end":146,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":55}},{"kind":"Mod","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src/lib.rs","byte_start":5435,"byte_end":5439,"line_start":165,"line_end":165,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":128}},{"kind":"Mod","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\math\\mod.rs","byte_start":30522,"byte_end":30524,"line_start":2,"line_end":2,"column_start":9,"column_end":11},"ref_id":{"krate":0,"index":129}},{"kind":"Mod","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\math\\mod.rs","byte_start":30534,"byte_end":30539,"line_start":3,"line_end":3,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":143}},{"kind":"Mod","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src/lib.rs","byte_start":5480,"byte_end":5488,"line_start":168,"line_end":168,"column_start":9,"column_end":17},"ref_id":{"krate":0,"index":150}},{"kind":"Mod","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\imageops\\mod.rs","byte_start":40230,"byte_end":40238,"line_start":29,"line_end":29,"column_start":9,"column_end":17},"ref_id":{"krate":0,"index":240}},{"kind":"Mod","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src/lib.rs","byte_start":5514,"byte_end":5516,"line_start":171,"line_end":171,"column_start":9,"column_end":11},"ref_id":{"krate":0,"index":446}},{"kind":"Mod","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src/lib.rs","byte_start":5562,"byte_end":5566,"line_start":174,"line_end":174,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":528}},{"kind":"Mod","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src/lib.rs","byte_start":8108,"byte_end":8112,"line_start":234,"line_end":234,"column_start":13,"column_end":17},"ref_id":{"krate":0,"index":708}},{"kind":"Mod","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src/lib.rs","byte_start":8154,"byte_end":8157,"line_start":236,"line_end":236,"column_start":13,"column_end":16},"ref_id":{"krate":0,"index":952}}],"macro_refs":[],"relations":[{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\error.rs","byte_start":19981,"byte_end":19997,"line_start":194,"line_end":194,"column_start":6,"column_end":22},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":2194},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\error.rs","byte_start":20695,"byte_end":20708,"line_start":217,"line_end":217,"column_start":6,"column_end":19},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":2257},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\error.rs","byte_start":21484,"byte_end":21497,"line_start":245,"line_end":245,"column_start":6,"column_end":19},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":2223},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\error.rs","byte_start":22274,"byte_end":22288,"line_start":273,"line_end":273,"column_start":6,"column_end":20},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":2228},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\error.rs","byte_start":22667,"byte_end":22677,"line_start":288,"line_end":288,"column_start":6,"column_end":16},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":2262},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\error.rs","byte_start":23034,"byte_end":23044,"line_start":302,"line_end":302,"column_start":26,"column_end":36},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":2173},"to":{"krate":2,"index":1963}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\error.rs","byte_start":23160,"byte_end":23175,"line_start":308,"line_end":308,"column_start":28,"column_end":43},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":2288},"to":{"krate":2,"index":1963}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\error.rs","byte_start":23304,"byte_end":23319,"line_start":314,"line_end":314,"column_start":36,"column_end":51},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":2288},"to":{"krate":2,"index":1963}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\error.rs","byte_start":23569,"byte_end":23585,"line_start":323,"line_end":323,"column_start":32,"column_end":48},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":2194},"to":{"krate":2,"index":1963}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\error.rs","byte_start":23888,"byte_end":23898,"line_start":335,"line_end":335,"column_start":23,"column_end":33},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":2173},"to":{"krate":2,"index":6611}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\error.rs","byte_start":24359,"byte_end":24369,"line_start":348,"line_end":348,"column_start":16,"column_end":26},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":2173},"to":{"krate":1,"index":1725}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\error.rs","byte_start":24822,"byte_end":24838,"line_start":361,"line_end":361,"column_start":23,"column_end":39},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":2194},"to":{"krate":2,"index":6611}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\error.rs","byte_start":26460,"byte_end":26476,"line_start":404,"line_end":404,"column_start":16,"column_end":32},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":2194},"to":{"krate":1,"index":1725}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\error.rs","byte_start":26504,"byte_end":26518,"line_start":406,"line_end":406,"column_start":23,"column_end":37},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":2228},"to":{"krate":2,"index":6611}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\error.rs","byte_start":27553,"byte_end":27567,"line_start":438,"line_end":438,"column_start":16,"column_end":30},"kind":{"Impl":{"id":14}},"from":{"krate":0,"index":2228},"to":{"krate":1,"index":1725}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\error.rs","byte_start":27772,"byte_end":27785,"line_start":447,"line_end":447,"column_start":23,"column_end":36},"kind":{"Impl":{"id":15}},"from":{"krate":0,"index":2223},"to":{"krate":2,"index":6611}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\error.rs","byte_start":28246,"byte_end":28259,"line_start":465,"line_end":465,"column_start":16,"column_end":29},"kind":{"Impl":{"id":16}},"from":{"krate":0,"index":2223},"to":{"krate":1,"index":1725}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\error.rs","byte_start":28464,"byte_end":28477,"line_start":474,"line_end":474,"column_start":23,"column_end":36},"kind":{"Impl":{"id":17}},"from":{"krate":0,"index":2257},"to":{"krate":2,"index":6611}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\error.rs","byte_start":28924,"byte_end":28937,"line_start":486,"line_end":486,"column_start":16,"column_end":29},"kind":{"Impl":{"id":18}},"from":{"krate":0,"index":2257},"to":{"krate":1,"index":1725}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\error.rs","byte_start":29142,"byte_end":29152,"line_start":495,"line_end":495,"column_start":23,"column_end":33},"kind":{"Impl":{"id":19}},"from":{"krate":0,"index":2262},"to":{"krate":2,"index":6611}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\error.rs","byte_start":29535,"byte_end":29545,"line_start":505,"line_end":505,"column_start":16,"column_end":26},"kind":{"Impl":{"id":20}},"from":{"krate":0,"index":2262},"to":{"krate":1,"index":1725}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\error.rs","byte_start":29573,"byte_end":29588,"line_start":507,"line_end":507,"column_start":23,"column_end":38},"kind":{"Impl":{"id":21}},"from":{"krate":0,"index":2288},"to":{"krate":2,"index":6611}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\math\\nq.rs","byte_start":34429,"byte_end":34437,"line_start":86,"line_end":86,"column_start":6,"column_end":14},"kind":{"Impl":{"id":22}},"from":{"krate":0,"index":130},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\math\\nq.rs","byte_start":35007,"byte_end":35015,"line_start":105,"line_end":105,"column_start":38,"column_end":46},"kind":{"Impl":{"id":23}},"from":{"krate":0,"index":130},"to":{"krate":2,"index":1963}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\math\\nq.rs","byte_start":35164,"byte_end":35172,"line_start":112,"line_end":112,"column_start":38,"column_end":46},"kind":{"Impl":{"id":24}},"from":{"krate":27,"index":20},"to":{"krate":2,"index":1963}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\imageops\\colorops.rs","byte_start":75047,"byte_end":75054,"line_start":362,"line_end":362,"column_start":19,"column_end":26},"kind":{"Impl":{"id":25}},"from":{"krate":0,"index":2334},"to":{"krate":0,"index":290}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\imageops\\colorops.rs","byte_start":75833,"byte_end":75841,"line_start":398,"line_end":398,"column_start":23,"column_end":31},"kind":{"Impl":{"id":26}},"from":{"krate":0,"index":130},"to":{"krate":0,"index":290}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\imageops\\colorops.rs","byte_start":76380,"byte_end":76388,"line_start":422,"line_end":422,"column_start":32,"column_end":40},"kind":{"Impl":{"id":27}},"from":{"krate":27,"index":20},"to":{"krate":0,"index":290}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\imageops\\sample.rs","byte_start":83879,"byte_end":83891,"line_start":112,"line_end":112,"column_start":22,"column_end":34},"kind":{"Impl":{"id":28}},"from":{"krate":0,"index":345},"to":{"krate":13,"index":124}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\imageops\\sample.rs","byte_start":92172,"byte_end":92184,"line_start":379,"line_end":379,"column_start":34,"column_end":46},"kind":{"Impl":{"id":29}},"from":{"krate":0,"index":369},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\io\\reader.rs","byte_start":112167,"byte_end":112173,"line_start":68,"line_end":68,"column_start":15,"column_end":21},"kind":{"Impl":{"id":30}},"from":{"krate":0,"index":468},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\io\\reader.rs","byte_start":113555,"byte_end":113561,"line_start":115,"line_end":115,"column_start":6,"column_end":12},"kind":{"Impl":{"id":31}},"from":{"krate":0,"index":468},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\io\\reader.rs","byte_start":114347,"byte_end":114353,"line_start":137,"line_end":137,"column_start":25,"column_end":31},"kind":{"Impl":{"id":32}},"from":{"krate":0,"index":468},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":132633,"byte_end":132645,"line_start":124,"line_end":124,"column_start":6,"column_end":18},"kind":{"Impl":{"id":33}},"from":{"krate":0,"index":2369},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":145240,"byte_end":145243,"line_start":437,"line_end":437,"column_start":6,"column_end":9},"kind":{"Impl":{"id":34}},"from":{"krate":0,"index":2391},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":145501,"byte_end":145512,"line_start":452,"line_end":452,"column_start":14,"column_end":25},"kind":{"Impl":{"id":35}},"from":{"krate":0,"index":2358},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":162667,"byte_end":162678,"line_start":873,"line_end":873,"column_start":22,"column_end":33},"kind":{"Impl":{"id":36}},"from":{"krate":0,"index":2358},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":168530,"byte_end":168534,"line_start":1028,"line_end":1028,"column_start":24,"column_end":28},"kind":{"Impl":{"id":37}},"from":{"krate":0,"index":2419},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":174119,"byte_end":174126,"line_start":1161,"line_end":1161,"column_start":24,"column_end":31},"kind":{"Impl":{"id":38}},"from":{"krate":0,"index":2432},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":178502,"byte_end":178513,"line_start":1275,"line_end":1275,"column_start":40,"column_end":51},"kind":{"Impl":{"id":39}},"from":{"krate":0,"index":2358},"to":{"krate":2,"index":2323}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":179122,"byte_end":179133,"line_start":1294,"line_end":1294,"column_start":43,"column_end":54},"kind":{"Impl":{"id":40}},"from":{"krate":0,"index":2358},"to":{"krate":2,"index":2327}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":179737,"byte_end":179741,"line_start":1312,"line_end":1312,"column_start":45,"column_end":49},"kind":{"Impl":{"id":41}},"from":{"krate":0,"index":2419},"to":{"krate":0,"index":2000}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":180988,"byte_end":180995,"line_start":1357,"line_end":1357,"column_start":45,"column_end":52},"kind":{"Impl":{"id":42}},"from":{"krate":0,"index":2432},"to":{"krate":0,"index":2000}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":182262,"byte_end":182269,"line_start":1402,"line_end":1402,"column_start":41,"column_end":48},"kind":{"Impl":{"id":43}},"from":{"krate":0,"index":2432},"to":{"krate":0,"index":2013}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":183164,"byte_end":183174,"line_start":1431,"line_end":1431,"column_start":22,"column_end":32},"kind":{"Impl":{"id":44}},"from":{"krate":0,"index":2173},"to":{"krate":2,"index":1963}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":183326,"byte_end":183349,"line_start":1435,"line_end":1435,"column_start":31,"column_end":54},"kind":{"Impl":{"id":45}},"from":{"krate":0,"index":2494},"to":{"krate":2,"index":6611}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":183557,"byte_end":183580,"line_start":1440,"line_end":1440,"column_start":31,"column_end":54},"kind":{"Impl":{"id":46}},"from":{"krate":0,"index":2494},"to":{"krate":1,"index":1725}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":184154,"byte_end":184159,"line_start":1454,"line_end":1454,"column_start":23,"column_end":28},"kind":{"Impl":{"id":47}},"from":{"krate":0,"index":2445},"to":{"krate":2,"index":6611}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":185094,"byte_end":185099,"line_start":1478,"line_end":1478,"column_start":23,"column_end":28},"kind":{"Impl":{"id":48}},"from":{"krate":0,"index":2445},"to":{"krate":1,"index":1725}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\flat.rs","byte_start":185124,"byte_end":185134,"line_start":1480,"line_end":1480,"column_start":21,"column_end":31},"kind":{"Impl":{"id":49}},"from":{"krate":0,"index":2469},"to":{"krate":2,"index":1807}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\codecs\\jpeg\\decoder.rs","byte_start":191850,"byte_end":191861,"line_start":18,"line_end":18,"column_start":15,"column_end":26},"kind":{"Impl":{"id":50}},"from":{"krate":0,"index":733},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\codecs\\jpeg\\decoder.rs","byte_start":193650,"byte_end":193660,"line_start":69,"line_end":69,"column_start":18,"column_end":28},"kind":{"Impl":{"id":51}},"from":{"krate":0,"index":742},"to":{"krate":1,"index":3120}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\codecs\\jpeg\\decoder.rs","byte_start":194073,"byte_end":194084,"line_start":83,"line_end":83,"column_start":45,"column_end":56},"kind":{"Impl":{"id":52}},"from":{"krate":0,"index":733},"to":{"krate":0,"index":1968}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\codecs\\jpeg\\decoder.rs","byte_start":195830,"byte_end":195839,"line_start":143,"line_end":143,"column_start":6,"column_end":15},"kind":{"Impl":{"id":53}},"from":{"krate":0,"index":2659},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\codecs\\jpeg\\decoder.rs","byte_start":196097,"byte_end":196107,"line_start":154,"line_end":154,"column_start":6,"column_end":16},"kind":{"Impl":{"id":54}},"from":{"krate":0,"index":2173},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\codecs\\jpeg\\encoder.rs","byte_start":222330,"byte_end":222339,"line_start":169,"line_end":169,"column_start":25,"column_end":34},"kind":{"Impl":{"id":55}},"from":{"krate":0,"index":826},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\codecs\\jpeg\\encoder.rs","byte_start":225818,"byte_end":225830,"line_start":301,"line_end":301,"column_start":6,"column_end":18},"kind":{"Impl":{"id":56}},"from":{"krate":0,"index":2534},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\codecs\\jpeg\\encoder.rs","byte_start":226168,"byte_end":226180,"line_start":313,"line_end":313,"column_start":18,"column_end":30},"kind":{"Impl":{"id":57}},"from":{"krate":0,"index":2534},"to":{"krate":2,"index":2033}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\codecs\\jpeg\\encoder.rs","byte_start":227035,"byte_end":227046,"line_start":349,"line_end":349,"column_start":20,"column_end":31},"kind":{"Impl":{"id":58}},"from":{"krate":0,"index":850},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\codecs\\jpeg\\encoder.rs","byte_start":238382,"byte_end":238393,"line_start":677,"line_end":677,"column_start":37,"column_end":48},"kind":{"Impl":{"id":59}},"from":{"krate":0,"index":850},"to":{"krate":0,"index":1990}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\codecs\\png.rs","byte_start":261260,"byte_end":261269,"line_start":45,"line_end":45,"column_start":15,"column_end":24},"kind":{"Impl":{"id":60}},"from":{"krate":0,"index":994},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\codecs\\png.rs","byte_start":262027,"byte_end":262036,"line_start":69,"line_end":69,"column_start":24,"column_end":33},"kind":{"Impl":{"id":61}},"from":{"krate":0,"index":994},"to":{"krate":1,"index":3120}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\codecs\\png.rs","byte_start":263401,"byte_end":263411,"line_start":120,"line_end":120,"column_start":15,"column_end":25},"kind":{"Impl":{"id":62}},"from":{"krate":0,"index":1008},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\codecs\\png.rs","byte_start":268025,"byte_end":268035,"line_start":209,"line_end":209,"column_start":45,"column_end":55},"kind":{"Impl":{"id":63}},"from":{"krate":0,"index":1008},"to":{"krate":0,"index":1968}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\codecs\\png.rs","byte_start":270096,"byte_end":270107,"line_start":272,"line_end":272,"column_start":15,"column_end":26},"kind":{"Impl":{"id":64}},"from":{"krate":0,"index":1032},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\codecs\\png.rs","byte_start":275658,"byte_end":275669,"line_start":412,"line_end":412,"column_start":49,"column_end":60},"kind":{"Impl":{"id":65}},"from":{"krate":0,"index":1032},"to":{"krate":0,"index":1987}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\codecs\\png.rs","byte_start":275807,"byte_end":275820,"line_start":416,"line_end":416,"column_start":36,"column_end":49},"kind":{"Impl":{"id":66}},"from":{"krate":0,"index":1050},"to":{"krate":2,"index":5311}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\codecs\\png.rs","byte_start":278429,"byte_end":278439,"line_start":502,"line_end":502,"column_start":16,"column_end":26},"kind":{"Impl":{"id":67}},"from":{"krate":0,"index":1058},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\codecs\\png.rs","byte_start":282274,"byte_end":282284,"line_start":577,"line_end":577,"column_start":33,"column_end":43},"kind":{"Impl":{"id":68}},"from":{"krate":0,"index":1058},"to":{"krate":0,"index":1990}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\codecs\\png.rs","byte_start":283519,"byte_end":283529,"line_start":609,"line_end":609,"column_start":6,"column_end":16},"kind":{"Impl":{"id":69}},"from":{"krate":0,"index":2173},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\codecs\\png.rs","byte_start":284546,"byte_end":284561,"line_start":637,"line_end":637,"column_start":18,"column_end":33},"kind":{"Impl":{"id":70}},"from":{"krate":0,"index":2549},"to":{"krate":2,"index":2033}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\codecs\\png.rs","byte_start":284647,"byte_end":284657,"line_start":643,"line_end":643,"column_start":18,"column_end":28},"kind":{"Impl":{"id":71}},"from":{"krate":0,"index":2575},"to":{"krate":2,"index":2033}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\animation.rs","byte_start":286290,"byte_end":286296,"line_start":14,"line_end":14,"column_start":10,"column_end":16},"kind":{"Impl":{"id":72}},"from":{"krate":0,"index":1110},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\animation.rs","byte_start":286886,"byte_end":286892,"line_start":30,"line_end":30,"column_start":23,"column_end":29},"kind":{"Impl":{"id":73}},"from":{"krate":0,"index":1110},"to":{"krate":2,"index":5311}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\animation.rs","byte_start":287411,"byte_end":287416,"line_start":55,"line_end":55,"column_start":6,"column_end":11},"kind":{"Impl":{"id":74}},"from":{"krate":0,"index":2601},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\animation.rs","byte_start":288489,"byte_end":288494,"line_start":107,"line_end":107,"column_start":6,"column_end":11},"kind":{"Impl":{"id":75}},"from":{"krate":0,"index":2608},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\animation.rs","byte_start":294530,"byte_end":294538,"line_start":263,"line_end":263,"column_start":22,"column_end":30},"kind":{"Impl":{"id":76}},"from":{"krate":2,"index":34832},"to":{"krate":2,"index":1963}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\buffer.rs","byte_start":297999,"byte_end":298005,"line_start":26,"line_end":26,"column_start":38,"column_end":44},"kind":{"Impl":{"id":77}},"from":{"krate":0,"index":1183},"to":{"krate":2,"index":5311}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\buffer.rs","byte_start":298249,"byte_end":298255,"line_start":38,"line_end":38,"column_start":47,"column_end":53},"kind":{"Impl":{"id":78}},"from":{"krate":0,"index":1183},"to":{"krate":2,"index":5265}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\buffer.rs","byte_start":298404,"byte_end":298410,"line_start":47,"line_end":47,"column_start":49,"column_end":55},"kind":{"Impl":{"id":79}},"from":{"krate":0,"index":1183},"to":{"krate":2,"index":5240}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\buffer.rs","byte_start":298619,"byte_end":298625,"line_start":57,"line_end":57,"column_start":26,"column_end":32},"kind":{"Impl":{"id":80}},"from":{"krate":0,"index":1183},"to":{"krate":2,"index":1742}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\buffer.rs","byte_start":298751,"byte_end":298757,"line_start":63,"line_end":63,"column_start":31,"column_end":37},"kind":{"Impl":{"id":81}},"from":{"krate":0,"index":1183},"to":{"krate":2,"index":6606}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\buffer.rs","byte_start":299172,"byte_end":299181,"line_start":83,"line_end":83,"column_start":38,"column_end":47},"kind":{"Impl":{"id":82}},"from":{"krate":0,"index":1208},"to":{"krate":2,"index":5311}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\buffer.rs","byte_start":299437,"byte_end":299446,"line_start":95,"line_end":95,"column_start":47,"column_end":56},"kind":{"Impl":{"id":83}},"from":{"krate":0,"index":1208},"to":{"krate":2,"index":5265}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\buffer.rs","byte_start":299595,"byte_end":299604,"line_start":104,"line_end":104,"column_start":49,"column_end":58},"kind":{"Impl":{"id":84}},"from":{"krate":0,"index":1208},"to":{"krate":2,"index":5240}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\buffer.rs","byte_start":299852,"byte_end":299861,"line_start":116,"line_end":116,"column_start":31,"column_end":40},"kind":{"Impl":{"id":85}},"from":{"krate":0,"index":1208},"to":{"krate":2,"index":6606}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\buffer.rs","byte_start":300427,"byte_end":300431,"line_start":140,"line_end":140,"column_start":25,"column_end":29},"kind":{"Impl":{"id":86}},"from":{"krate":0,"index":1230},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\buffer.rs","byte_start":301330,"byte_end":301334,"line_start":161,"line_end":161,"column_start":38,"column_end":42},"kind":{"Impl":{"id":87}},"from":{"krate":0,"index":1230},"to":{"krate":2,"index":5311}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\buffer.rs","byte_start":301744,"byte_end":301748,"line_start":177,"line_end":177,"column_start":47,"column_end":51},"kind":{"Impl":{"id":88}},"from":{"krate":0,"index":1230},"to":{"krate":2,"index":5265}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\buffer.rs","byte_start":301897,"byte_end":301901,"line_start":186,"line_end":186,"column_start":49,"column_end":53},"kind":{"Impl":{"id":89}},"from":{"krate":0,"index":1230},"to":{"krate":2,"index":5240}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\buffer.rs","byte_start":302268,"byte_end":302272,"line_start":200,"line_end":200,"column_start":26,"column_end":30},"kind":{"Impl":{"id":90}},"from":{"krate":0,"index":1230},"to":{"krate":2,"index":1742}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\buffer.rs","byte_start":302396,"byte_end":302400,"line_start":206,"line_end":206,"column_start":31,"column_end":35},"kind":{"Impl":{"id":91}},"from":{"krate":0,"index":1230},"to":{"krate":2,"index":6606}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\buffer.rs","byte_start":302987,"byte_end":302994,"line_start":230,"line_end":230,"column_start":25,"column_end":32},"kind":{"Impl":{"id":92}},"from":{"krate":0,"index":1257},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\buffer.rs","byte_start":303915,"byte_end":303922,"line_start":251,"line_end":251,"column_start":38,"column_end":45},"kind":{"Impl":{"id":93}},"from":{"krate":0,"index":1257},"to":{"krate":2,"index":5311}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\buffer.rs","byte_start":304345,"byte_end":304352,"line_start":267,"line_end":267,"column_start":47,"column_end":54},"kind":{"Impl":{"id":94}},"from":{"krate":0,"index":1257},"to":{"krate":2,"index":5265}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\buffer.rs","byte_start":304501,"byte_end":304508,"line_start":276,"line_end":276,"column_start":49,"column_end":56},"kind":{"Impl":{"id":95}},"from":{"krate":0,"index":1257},"to":{"krate":2,"index":5240}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\buffer.rs","byte_start":304890,"byte_end":304897,"line_start":290,"line_end":290,"column_start":31,"column_end":38},"kind":{"Impl":{"id":96}},"from":{"krate":0,"index":1257},"to":{"krate":2,"index":6606}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\buffer.rs","byte_start":305353,"byte_end":305368,"line_start":313,"line_end":313,"column_start":38,"column_end":53},"kind":{"Impl":{"id":97}},"from":{"krate":0,"index":1281},"to":{"krate":2,"index":5311}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\buffer.rs","byte_start":305771,"byte_end":305786,"line_start":331,"line_end":331,"column_start":47,"column_end":62},"kind":{"Impl":{"id":98}},"from":{"krate":0,"index":1281},"to":{"krate":2,"index":5265}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\buffer.rs","byte_start":305912,"byte_end":305927,"line_start":340,"line_end":340,"column_start":26,"column_end":41},"kind":{"Impl":{"id":99}},"from":{"krate":0,"index":1281},"to":{"krate":2,"index":1742}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\buffer.rs","byte_start":306103,"byte_end":306118,"line_start":349,"line_end":349,"column_start":31,"column_end":46},"kind":{"Impl":{"id":100}},"from":{"krate":0,"index":1281},"to":{"krate":2,"index":6606}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\buffer.rs","byte_start":306657,"byte_end":306670,"line_start":374,"line_end":374,"column_start":38,"column_end":51},"kind":{"Impl":{"id":101}},"from":{"krate":0,"index":1304},"to":{"krate":2,"index":5311}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\buffer.rs","byte_start":307208,"byte_end":307221,"line_start":398,"line_end":398,"column_start":47,"column_end":60},"kind":{"Impl":{"id":102}},"from":{"krate":0,"index":1304},"to":{"krate":2,"index":5265}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\buffer.rs","byte_start":307345,"byte_end":307358,"line_start":407,"line_end":407,"column_start":26,"column_end":39},"kind":{"Impl":{"id":103}},"from":{"krate":0,"index":1304},"to":{"krate":2,"index":1742}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\buffer.rs","byte_start":307528,"byte_end":307541,"line_start":416,"line_end":416,"column_start":31,"column_end":44},"kind":{"Impl":{"id":104}},"from":{"krate":0,"index":1304},"to":{"krate":2,"index":6606}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\buffer.rs","byte_start":308069,"byte_end":308087,"line_start":441,"line_end":441,"column_start":38,"column_end":56},"kind":{"Impl":{"id":105}},"from":{"krate":0,"index":1326},"to":{"krate":2,"index":5311}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\buffer.rs","byte_start":308498,"byte_end":308516,"line_start":459,"line_end":459,"column_start":47,"column_end":65},"kind":{"Impl":{"id":106}},"from":{"krate":0,"index":1326},"to":{"krate":2,"index":5265}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\buffer.rs","byte_start":308647,"byte_end":308665,"line_start":468,"line_end":468,"column_start":31,"column_end":49},"kind":{"Impl":{"id":107}},"from":{"krate":0,"index":1326},"to":{"krate":2,"index":6606}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\buffer.rs","byte_start":309213,"byte_end":309229,"line_start":493,"line_end":493,"column_start":38,"column_end":54},"kind":{"Impl":{"id":108}},"from":{"krate":0,"index":1346},"to":{"krate":2,"index":5311}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\buffer.rs","byte_start":309776,"byte_end":309792,"line_start":517,"line_end":517,"column_start":47,"column_end":63},"kind":{"Impl":{"id":109}},"from":{"krate":0,"index":1346},"to":{"krate":2,"index":5265}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\buffer.rs","byte_start":309921,"byte_end":309937,"line_start":526,"line_end":526,"column_start":31,"column_end":47},"kind":{"Impl":{"id":110}},"from":{"krate":0,"index":1346},"to":{"krate":2,"index":6606}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\buffer.rs","byte_start":312959,"byte_end":312970,"line_start":620,"line_end":620,"column_start":20,"column_end":31},"kind":{"Impl":{"id":111}},"from":{"krate":0,"index":2628},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\buffer.rs","byte_start":319795,"byte_end":319806,"line_start":815,"line_end":815,"column_start":20,"column_end":31},"kind":{"Impl":{"id":112}},"from":{"krate":0,"index":2628},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\buffer.rs","byte_start":322404,"byte_end":322415,"line_start":890,"line_end":890,"column_start":20,"column_end":31},"kind":{"Impl":{"id":113}},"from":{"krate":0,"index":2628},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\buffer.rs","byte_start":323067,"byte_end":323078,"line_start":915,"line_end":915,"column_start":20,"column_end":31},"kind":{"Impl":{"id":114}},"from":{"krate":0,"index":2628},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\buffer.rs","byte_start":323823,"byte_end":323834,"line_start":942,"line_end":942,"column_start":32,"column_end":43},"kind":{"Impl":{"id":115}},"from":{"krate":0,"index":2628},"to":{"krate":2,"index":2033}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\buffer.rs","byte_start":324103,"byte_end":324114,"line_start":957,"line_end":957,"column_start":30,"column_end":41},"kind":{"Impl":{"id":116}},"from":{"krate":0,"index":2628},"to":{"krate":2,"index":2242}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\buffer.rs","byte_start":324378,"byte_end":324389,"line_start":970,"line_end":970,"column_start":33,"column_end":44},"kind":{"Impl":{"id":117}},"from":{"krate":0,"index":2628},"to":{"krate":2,"index":2255}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\buffer.rs","byte_start":324655,"byte_end":324666,"line_start":981,"line_end":981,"column_start":42,"column_end":53},"kind":{"Impl":{"id":118}},"from":{"krate":0,"index":2628},"to":{"krate":2,"index":2323}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\buffer.rs","byte_start":324937,"byte_end":324948,"line_start":994,"line_end":994,"column_start":45,"column_end":56},"kind":{"Impl":{"id":119}},"from":{"krate":0,"index":2628},"to":{"krate":2,"index":2327}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\buffer.rs","byte_start":325209,"byte_end":325220,"line_start":1005,"line_end":1005,"column_start":30,"column_end":41},"kind":{"Impl":{"id":120}},"from":{"krate":0,"index":2628},"to":{"krate":2,"index":1742}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\buffer.rs","byte_start":325579,"byte_end":325590,"line_start":1020,"line_end":1020,"column_start":41,"column_end":52},"kind":{"Impl":{"id":121}},"from":{"krate":0,"index":2628},"to":{"krate":0,"index":2000}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\buffer.rs","byte_start":326414,"byte_end":326425,"line_start":1053,"line_end":1053,"column_start":37,"column_end":48},"kind":{"Impl":{"id":122}},"from":{"krate":0,"index":2628},"to":{"krate":0,"index":2013}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\buffer.rs","byte_start":330010,"byte_end":330021,"line_start":1145,"line_end":1145,"column_start":26,"column_end":37},"kind":{"Impl":{"id":123}},"from":{"krate":0,"index":2628},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\buffer.rs","byte_start":332455,"byte_end":332464,"line_start":1223,"line_end":1223,"column_start":6,"column_end":15},"kind":{"Impl":{"id":124}},"from":{"krate":0,"index":1482},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\buffer.rs","byte_start":333862,"byte_end":333873,"line_start":1261,"line_end":1261,"column_start":67,"column_end":78},"kind":{"Impl":{"id":125}},"from":{"krate":0,"index":2628},"to":{"krate":0,"index":1467}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\color.rs","byte_start":344466,"byte_end":344475,"line_start":37,"line_end":37,"column_start":6,"column_end":15},"kind":{"Impl":{"id":126}},"from":{"krate":0,"index":2659},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\color.rs","byte_start":348184,"byte_end":348201,"line_start":148,"line_end":148,"column_start":6,"column_end":23},"kind":{"Impl":{"id":127}},"from":{"krate":0,"index":2698},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\color.rs","byte_start":349489,"byte_end":349506,"line_start":182,"line_end":182,"column_start":26,"column_end":43},"kind":{"Impl":{"id":128}},"from":{"krate":0,"index":2698},"to":{"krate":2,"index":1963}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\color.rs","byte_start":355606,"byte_end":355607,"line_start":388,"line_end":388,"column_start":32,"column_end":33},"kind":{"Impl":{"id":129}},"from":{"krate":0,"index":1518},"to":{"krate":0,"index":1514}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\color.rs","byte_start":356045,"byte_end":356046,"line_start":402,"line_end":402,"column_start":29,"column_end":30},"kind":{"Impl":{"id":130}},"from":{"krate":0,"index":1525},"to":{"krate":0,"index":1520}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\color.rs","byte_start":357302,"byte_end":357306,"line_start":446,"line_end":446,"column_start":53,"column_end":57},"kind":{"Impl":{"id":131}},"from":{"krate":0,"index":3122},"to":{"krate":0,"index":1514}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\color.rs","byte_start":357535,"byte_end":357539,"line_start":454,"line_end":454,"column_start":53,"column_end":57},"kind":{"Impl":{"id":132}},"from":{"krate":0,"index":3122},"to":{"krate":0,"index":1514}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\color.rs","byte_start":357767,"byte_end":357771,"line_start":462,"line_end":462,"column_start":52,"column_end":56},"kind":{"Impl":{"id":133}},"from":{"krate":0,"index":3122},"to":{"krate":0,"index":1514}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\color.rs","byte_start":357996,"byte_end":358000,"line_start":470,"line_end":470,"column_start":52,"column_end":56},"kind":{"Impl":{"id":134}},"from":{"krate":0,"index":3122},"to":{"krate":0,"index":1514}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\color.rs","byte_start":358227,"byte_end":358231,"line_start":478,"line_end":478,"column_start":54,"column_end":58},"kind":{"Impl":{"id":135}},"from":{"krate":0,"index":3122},"to":{"krate":0,"index":1514}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\color.rs","byte_start":358379,"byte_end":358383,"line_start":485,"line_end":485,"column_start":31,"column_end":35},"kind":{"Impl":{"id":136}},"from":{"krate":0,"index":3122},"to":{"krate":0,"index":1514}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\color.rs","byte_start":358627,"byte_end":358631,"line_start":494,"line_end":494,"column_start":30,"column_end":34},"kind":{"Impl":{"id":137}},"from":{"krate":0,"index":3122},"to":{"krate":0,"index":1514}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\color.rs","byte_start":358875,"byte_end":358879,"line_start":503,"line_end":503,"column_start":31,"column_end":35},"kind":{"Impl":{"id":138}},"from":{"krate":0,"index":3122},"to":{"krate":0,"index":1514}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\color.rs","byte_start":359065,"byte_end":359069,"line_start":510,"line_end":510,"column_start":30,"column_end":34},"kind":{"Impl":{"id":139}},"from":{"krate":0,"index":3122},"to":{"krate":0,"index":1514}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\color.rs","byte_start":359255,"byte_end":359259,"line_start":517,"line_end":517,"column_start":32,"column_end":36},"kind":{"Impl":{"id":140}},"from":{"krate":0,"index":3122},"to":{"krate":0,"index":1514}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\color.rs","byte_start":359447,"byte_end":359451,"line_start":524,"line_end":524,"column_start":31,"column_end":35},"kind":{"Impl":{"id":141}},"from":{"krate":0,"index":3122},"to":{"krate":0,"index":1514}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\color.rs","byte_start":359664,"byte_end":359668,"line_start":532,"line_end":532,"column_start":29,"column_end":33},"kind":{"Impl":{"id":142}},"from":{"krate":0,"index":3122},"to":{"krate":0,"index":1514}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\color.rs","byte_start":359890,"byte_end":359894,"line_start":540,"line_end":540,"column_start":30,"column_end":34},"kind":{"Impl":{"id":143}},"from":{"krate":0,"index":3122},"to":{"krate":0,"index":1514}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\color.rs","byte_start":360118,"byte_end":360122,"line_start":548,"line_end":548,"column_start":29,"column_end":33},"kind":{"Impl":{"id":144}},"from":{"krate":0,"index":3122},"to":{"krate":0,"index":1514}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\color.rs","byte_start":360344,"byte_end":360348,"line_start":556,"line_end":556,"column_start":30,"column_end":34},"kind":{"Impl":{"id":145}},"from":{"krate":0,"index":3122},"to":{"krate":0,"index":1514}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\color.rs","byte_start":360623,"byte_end":360628,"line_start":567,"line_end":567,"column_start":53,"column_end":58},"kind":{"Impl":{"id":146}},"from":{"krate":0,"index":3209},"to":{"krate":0,"index":1514}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\color.rs","byte_start":360890,"byte_end":360895,"line_start":576,"line_end":576,"column_start":53,"column_end":58},"kind":{"Impl":{"id":147}},"from":{"krate":0,"index":3209},"to":{"krate":0,"index":1514}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\color.rs","byte_start":361156,"byte_end":361161,"line_start":585,"line_end":585,"column_start":52,"column_end":57},"kind":{"Impl":{"id":148}},"from":{"krate":0,"index":3209},"to":{"krate":0,"index":1514}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\color.rs","byte_start":361426,"byte_end":361431,"line_start":594,"line_end":594,"column_start":52,"column_end":57},"kind":{"Impl":{"id":149}},"from":{"krate":0,"index":3209},"to":{"krate":0,"index":1514}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\color.rs","byte_start":361697,"byte_end":361702,"line_start":603,"line_end":603,"column_start":53,"column_end":58},"kind":{"Impl":{"id":150}},"from":{"krate":0,"index":3209},"to":{"krate":0,"index":1514}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\color.rs","byte_start":361915,"byte_end":361920,"line_start":611,"line_end":611,"column_start":32,"column_end":37},"kind":{"Impl":{"id":151}},"from":{"krate":0,"index":3209},"to":{"krate":0,"index":1514}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\color.rs","byte_start":362220,"byte_end":362225,"line_start":621,"line_end":621,"column_start":31,"column_end":36},"kind":{"Impl":{"id":152}},"from":{"krate":0,"index":3209},"to":{"krate":0,"index":1514}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\color.rs","byte_start":362520,"byte_end":362525,"line_start":631,"line_end":631,"column_start":30,"column_end":35},"kind":{"Impl":{"id":153}},"from":{"krate":0,"index":3209},"to":{"krate":0,"index":1514}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\color.rs","byte_start":362777,"byte_end":362782,"line_start":640,"line_end":640,"column_start":29,"column_end":34},"kind":{"Impl":{"id":154}},"from":{"krate":0,"index":3209},"to":{"krate":0,"index":1514}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\color.rs","byte_start":363046,"byte_end":363051,"line_start":649,"line_end":649,"column_start":30,"column_end":35},"kind":{"Impl":{"id":155}},"from":{"krate":0,"index":3209},"to":{"krate":0,"index":1514}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\color.rs","byte_start":363324,"byte_end":363329,"line_start":658,"line_end":658,"column_start":29,"column_end":34},"kind":{"Impl":{"id":156}},"from":{"krate":0,"index":3209},"to":{"krate":0,"index":1514}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\color.rs","byte_start":363593,"byte_end":363598,"line_start":667,"line_end":667,"column_start":30,"column_end":35},"kind":{"Impl":{"id":157}},"from":{"krate":0,"index":3209},"to":{"krate":0,"index":1514}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\color.rs","byte_start":363920,"byte_end":363924,"line_start":679,"line_end":679,"column_start":52,"column_end":56},"kind":{"Impl":{"id":158}},"from":{"krate":0,"index":3151},"to":{"krate":0,"index":1514}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\color.rs","byte_start":364225,"byte_end":364229,"line_start":690,"line_end":690,"column_start":52,"column_end":56},"kind":{"Impl":{"id":159}},"from":{"krate":0,"index":3151},"to":{"krate":0,"index":1514}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\color.rs","byte_start":364531,"byte_end":364535,"line_start":701,"line_end":701,"column_start":53,"column_end":57},"kind":{"Impl":{"id":160}},"from":{"krate":0,"index":3151},"to":{"krate":0,"index":1514}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\color.rs","byte_start":364836,"byte_end":364840,"line_start":712,"line_end":712,"column_start":54,"column_end":58},"kind":{"Impl":{"id":161}},"from":{"krate":0,"index":3151},"to":{"krate":0,"index":1514}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\color.rs","byte_start":365141,"byte_end":365145,"line_start":723,"line_end":723,"column_start":53,"column_end":57},"kind":{"Impl":{"id":162}},"from":{"krate":0,"index":3151},"to":{"krate":0,"index":1514}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\color.rs","byte_start":365422,"byte_end":365426,"line_start":734,"line_end":734,"column_start":31,"column_end":35},"kind":{"Impl":{"id":163}},"from":{"krate":0,"index":3151},"to":{"krate":0,"index":1514}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\color.rs","byte_start":365788,"byte_end":365792,"line_start":745,"line_end":745,"column_start":30,"column_end":34},"kind":{"Impl":{"id":164}},"from":{"krate":0,"index":3151},"to":{"krate":0,"index":1514}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\color.rs","byte_start":366142,"byte_end":366146,"line_start":756,"line_end":756,"column_start":31,"column_end":35},"kind":{"Impl":{"id":165}},"from":{"krate":0,"index":3151},"to":{"krate":0,"index":1514}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\color.rs","byte_start":366501,"byte_end":366505,"line_start":769,"line_end":769,"column_start":29,"column_end":33},"kind":{"Impl":{"id":166}},"from":{"krate":0,"index":3151},"to":{"krate":0,"index":1514}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\color.rs","byte_start":366837,"byte_end":366841,"line_start":780,"line_end":780,"column_start":30,"column_end":34},"kind":{"Impl":{"id":167}},"from":{"krate":0,"index":3151},"to":{"krate":0,"index":1514}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\color.rs","byte_start":367160,"byte_end":367164,"line_start":792,"line_end":792,"column_start":29,"column_end":33},"kind":{"Impl":{"id":168}},"from":{"krate":0,"index":3151},"to":{"krate":0,"index":1514}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\color.rs","byte_start":367496,"byte_end":367500,"line_start":803,"line_end":803,"column_start":30,"column_end":34},"kind":{"Impl":{"id":169}},"from":{"krate":0,"index":3151},"to":{"krate":0,"index":1514}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\color.rs","byte_start":367891,"byte_end":367895,"line_start":816,"line_end":816,"column_start":52,"column_end":56},"kind":{"Impl":{"id":170}},"from":{"krate":0,"index":3180},"to":{"krate":0,"index":1514}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\color.rs","byte_start":368196,"byte_end":368200,"line_start":827,"line_end":827,"column_start":52,"column_end":56},"kind":{"Impl":{"id":171}},"from":{"krate":0,"index":3180},"to":{"krate":0,"index":1514}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\color.rs","byte_start":368502,"byte_end":368506,"line_start":838,"line_end":838,"column_start":53,"column_end":57},"kind":{"Impl":{"id":172}},"from":{"krate":0,"index":3180},"to":{"krate":0,"index":1514}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\color.rs","byte_start":368807,"byte_end":368811,"line_start":849,"line_end":849,"column_start":54,"column_end":58},"kind":{"Impl":{"id":173}},"from":{"krate":0,"index":3180},"to":{"krate":0,"index":1514}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\color.rs","byte_start":369112,"byte_end":369116,"line_start":860,"line_end":860,"column_start":53,"column_end":57},"kind":{"Impl":{"id":174}},"from":{"krate":0,"index":3180},"to":{"krate":0,"index":1514}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\color.rs","byte_start":369440,"byte_end":369443,"line_start":874,"line_end":874,"column_start":53,"column_end":56},"kind":{"Impl":{"id":175}},"from":{"krate":0,"index":3064},"to":{"krate":0,"index":1514}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\color.rs","byte_start":369712,"byte_end":369715,"line_start":884,"line_end":884,"column_start":53,"column_end":56},"kind":{"Impl":{"id":176}},"from":{"krate":0,"index":3064},"to":{"krate":0,"index":1514}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\color.rs","byte_start":369983,"byte_end":369986,"line_start":894,"line_end":894,"column_start":52,"column_end":55},"kind":{"Impl":{"id":177}},"from":{"krate":0,"index":3064},"to":{"krate":0,"index":1514}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\color.rs","byte_start":370251,"byte_end":370254,"line_start":904,"line_end":904,"column_start":54,"column_end":57},"kind":{"Impl":{"id":178}},"from":{"krate":0,"index":3064},"to":{"krate":0,"index":1514}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\color.rs","byte_start":370518,"byte_end":370521,"line_start":914,"line_end":914,"column_start":53,"column_end":56},"kind":{"Impl":{"id":179}},"from":{"krate":0,"index":3064},"to":{"krate":0,"index":1514}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\color.rs","byte_start":370759,"byte_end":370762,"line_start":924,"line_end":924,"column_start":30,"column_end":33},"kind":{"Impl":{"id":180}},"from":{"krate":0,"index":3064},"to":{"krate":0,"index":1514}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\color.rs","byte_start":370987,"byte_end":370990,"line_start":932,"line_end":932,"column_start":29,"column_end":32},"kind":{"Impl":{"id":181}},"from":{"krate":0,"index":3064},"to":{"krate":0,"index":1514}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\color.rs","byte_start":371215,"byte_end":371218,"line_start":940,"line_end":940,"column_start":31,"column_end":34},"kind":{"Impl":{"id":182}},"from":{"krate":0,"index":3064},"to":{"krate":0,"index":1514}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\color.rs","byte_start":371501,"byte_end":371504,"line_start":951,"line_end":951,"column_start":30,"column_end":33},"kind":{"Impl":{"id":183}},"from":{"krate":0,"index":3064},"to":{"krate":0,"index":1514}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\color.rs","byte_start":371801,"byte_end":371804,"line_start":961,"line_end":961,"column_start":30,"column_end":33},"kind":{"Impl":{"id":184}},"from":{"krate":0,"index":3064},"to":{"krate":0,"index":1514}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\color.rs","byte_start":372083,"byte_end":372086,"line_start":972,"line_end":972,"column_start":29,"column_end":32},"kind":{"Impl":{"id":185}},"from":{"krate":0,"index":3064},"to":{"krate":0,"index":1514}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\color.rs","byte_start":372378,"byte_end":372381,"line_start":982,"line_end":982,"column_start":30,"column_end":33},"kind":{"Impl":{"id":186}},"from":{"krate":0,"index":3064},"to":{"krate":0,"index":1514}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\color.rs","byte_start":372727,"byte_end":372730,"line_start":995,"line_end":995,"column_start":53,"column_end":56},"kind":{"Impl":{"id":187}},"from":{"krate":0,"index":3093},"to":{"krate":0,"index":1514}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\color.rs","byte_start":372998,"byte_end":373001,"line_start":1005,"line_end":1005,"column_start":52,"column_end":55},"kind":{"Impl":{"id":188}},"from":{"krate":0,"index":3093},"to":{"krate":0,"index":1514}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\color.rs","byte_start":373266,"byte_end":373269,"line_start":1016,"line_end":1016,"column_start":53,"column_end":56},"kind":{"Impl":{"id":189}},"from":{"krate":0,"index":3093},"to":{"krate":0,"index":1514}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\color.rs","byte_start":373539,"byte_end":373542,"line_start":1026,"line_end":1026,"column_start":54,"column_end":57},"kind":{"Impl":{"id":190}},"from":{"krate":0,"index":3093},"to":{"krate":0,"index":1514}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\color.rs","byte_start":373806,"byte_end":373809,"line_start":1036,"line_end":1036,"column_start":53,"column_end":56},"kind":{"Impl":{"id":191}},"from":{"krate":0,"index":3093},"to":{"krate":0,"index":1514}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\color.rs","byte_start":375475,"byte_end":375480,"line_start":1090,"line_end":1090,"column_start":30,"column_end":35},"kind":{"Impl":{"id":192}},"from":{"krate":0,"index":3209},"to":{"krate":0,"index":1688}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\color.rs","byte_start":376485,"byte_end":376489,"line_start":1123,"line_end":1123,"column_start":30,"column_end":34},"kind":{"Impl":{"id":193}},"from":{"krate":0,"index":3122},"to":{"krate":0,"index":1688}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\color.rs","byte_start":376599,"byte_end":376603,"line_start":1129,"line_end":1129,"column_start":30,"column_end":34},"kind":{"Impl":{"id":194}},"from":{"krate":0,"index":3151},"to":{"krate":0,"index":1688}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\color.rs","byte_start":378811,"byte_end":378815,"line_start":1187,"line_end":1187,"column_start":30,"column_end":34},"kind":{"Impl":{"id":195}},"from":{"krate":0,"index":3180},"to":{"krate":0,"index":1688}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\color.rs","byte_start":381021,"byte_end":381024,"line_start":1243,"line_end":1243,"column_start":30,"column_end":33},"kind":{"Impl":{"id":196}},"from":{"krate":0,"index":3064},"to":{"krate":0,"index":1688}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\color.rs","byte_start":381133,"byte_end":381136,"line_start":1249,"line_end":1249,"column_start":30,"column_end":33},"kind":{"Impl":{"id":197}},"from":{"krate":0,"index":3093},"to":{"krate":0,"index":1688}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\color.rs","byte_start":381355,"byte_end":381360,"line_start":1262,"line_end":1262,"column_start":31,"column_end":36},"kind":{"Impl":{"id":198}},"from":{"krate":0,"index":3209},"to":{"krate":0,"index":1708}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\color.rs","byte_start":381533,"byte_end":381537,"line_start":1271,"line_end":1271,"column_start":31,"column_end":35},"kind":{"Impl":{"id":199}},"from":{"krate":0,"index":3122},"to":{"krate":0,"index":1708}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\color.rs","byte_start":381725,"byte_end":381729,"line_start":1282,"line_end":1282,"column_start":31,"column_end":35},"kind":{"Impl":{"id":200}},"from":{"krate":0,"index":3151},"to":{"krate":0,"index":1708}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\color.rs","byte_start":381942,"byte_end":381946,"line_start":1293,"line_end":1293,"column_start":31,"column_end":35},"kind":{"Impl":{"id":201}},"from":{"krate":0,"index":3180},"to":{"krate":0,"index":1708}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\color.rs","byte_start":382159,"byte_end":382162,"line_start":1304,"line_end":1304,"column_start":31,"column_end":34},"kind":{"Impl":{"id":202}},"from":{"krate":0,"index":3064},"to":{"krate":0,"index":1708}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\color.rs","byte_start":382424,"byte_end":382427,"line_start":1318,"line_end":1318,"column_start":31,"column_end":34},"kind":{"Impl":{"id":203}},"from":{"krate":0,"index":3093},"to":{"krate":0,"index":1708}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\dynimage.rs","byte_start":394141,"byte_end":394153,"line_start":137,"line_end":137,"column_start":6,"column_end":18},"kind":{"Impl":{"id":204}},"from":{"krate":0,"index":3289},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\dynimage.rs","byte_start":425486,"byte_end":425498,"line_start":1040,"line_end":1040,"column_start":27,"column_end":39},"kind":{"Impl":{"id":205}},"from":{"krate":0,"index":3289},"to":{"krate":0,"index":2000}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\dynimage.rs","byte_start":426031,"byte_end":426043,"line_start":1062,"line_end":1062,"column_start":23,"column_end":35},"kind":{"Impl":{"id":206}},"from":{"krate":0,"index":3289},"to":{"krate":0,"index":2013}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\image.rs","byte_start":438615,"byte_end":438626,"line_start":68,"line_end":68,"column_start":6,"column_end":17},"kind":{"Impl":{"id":207}},"from":{"krate":0,"index":3334},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\image.rs","byte_start":445299,"byte_end":445316,"line_start":259,"line_end":259,"column_start":28,"column_end":45},"kind":{"Impl":{"id":208}},"from":{"krate":0,"index":3379},"to":{"krate":2,"index":1963}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\image.rs","byte_start":446711,"byte_end":446726,"line_start":298,"line_end":298,"column_start":6,"column_end":21},"kind":{"Impl":{"id":209}},"from":{"krate":0,"index":1942},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\image.rs","byte_start":454596,"byte_end":454604,"line_start":482,"line_end":482,"column_start":6,"column_end":14},"kind":{"Impl":{"id":210}},"from":{"krate":0,"index":3402},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\image.rs","byte_start":455110,"byte_end":455115,"line_start":502,"line_end":502,"column_start":29,"column_end":34},"kind":"SuperTrait","from":{"krate":2,"index":2050},"to":{"krate":0,"index":1968}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\image.rs","byte_start":458811,"byte_end":458823,"line_start":599,"line_end":599,"column_start":32,"column_end":44},"kind":"SuperTrait","from":{"krate":0,"index":1968},"to":{"krate":0,"index":1981}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\image.rs","byte_start":458830,"byte_end":458835,"line_start":599,"line_end":599,"column_start":51,"column_end":56},"kind":"SuperTrait","from":{"krate":2,"index":2050},"to":{"krate":0,"index":1981}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\image.rs","byte_start":461252,"byte_end":461258,"line_start":672,"line_end":672,"column_start":44,"column_end":50},"kind":{"Impl":{"id":211}},"from":{"krate":0,"index":3417},"to":{"krate":2,"index":5311}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\image.rs","byte_start":461726,"byte_end":461732,"line_start":694,"line_end":694,"column_start":27,"column_end":33},"kind":{"Impl":{"id":212}},"from":{"krate":0,"index":3417},"to":{"krate":2,"index":1742}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\image.rs","byte_start":464430,"byte_end":464446,"line_start":782,"line_end":782,"column_start":25,"column_end":41},"kind":"SuperTrait","from":{"krate":0,"index":2000},"to":{"krate":0,"index":2013}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\image.rs","byte_start":470399,"byte_end":470407,"line_start":934,"line_end":934,"column_start":9,"column_end":17},"kind":{"Impl":{"id":213}},"from":{"krate":0,"index":2025},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\image.rs","byte_start":471625,"byte_end":471633,"line_start":976,"line_end":976,"column_start":30,"column_end":38},"kind":{"Impl":{"id":214}},"from":{"krate":0,"index":2025},"to":{"krate":0,"index":2000}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\image.rs","byte_start":472454,"byte_end":472462,"line_start":1008,"line_end":1008,"column_start":26,"column_end":34},"kind":{"Impl":{"id":215}},"from":{"krate":0,"index":2025},"to":{"krate":0,"index":2013}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\traits.rs","byte_start":484566,"byte_end":484581,"line_start":12,"line_end":12,"column_start":35,"column_end":50},"kind":"SuperTrait","from":{"krate":0,"index":2153},"to":{"krate":0,"index":2073}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\traits.rs","byte_start":484935,"byte_end":484939,"line_start":30,"line_end":30,"column_start":22,"column_end":26},"kind":"SuperTrait","from":{"krate":2,"index":2055},"to":{"krate":0,"index":2079}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\traits.rs","byte_start":484942,"byte_end":484949,"line_start":30,"line_end":30,"column_start":29,"column_end":36},"kind":"SuperTrait","from":{"krate":13,"index":175},"to":{"krate":0,"index":2079}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\traits.rs","byte_start":484952,"byte_end":484955,"line_start":30,"line_end":30,"column_start":39,"column_end":42},"kind":"SuperTrait","from":{"krate":13,"index":615},"to":{"krate":0,"index":2079}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\traits.rs","byte_start":484958,"byte_end":484968,"line_start":30,"line_end":30,"column_start":45,"column_end":55},"kind":"SuperTrait","from":{"krate":2,"index":1807},"to":{"krate":0,"index":2079}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\traits.rs","byte_start":484977,"byte_end":484982,"line_start":30,"line_end":30,"column_start":64,"column_end":69},"kind":"SuperTrait","from":{"krate":2,"index":1742},"to":{"krate":0,"index":2079}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\traits.rs","byte_start":484985,"byte_end":484992,"line_start":30,"line_end":30,"column_start":72,"column_end":79},"kind":"SuperTrait","from":{"krate":13,"index":92},"to":{"krate":0,"index":2079}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\traits.rs","byte_start":485468,"byte_end":485473,"line_start":47,"line_end":47,"column_start":24,"column_end":29},"kind":"SuperTrait","from":{"krate":2,"index":2050},"to":{"krate":0,"index":2092}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\traits.rs","byte_start":485476,"byte_end":485483,"line_start":47,"line_end":47,"column_start":32,"column_end":39},"kind":"SuperTrait","from":{"krate":13,"index":92},"to":{"krate":0,"index":2092}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\traits.rs","byte_start":485486,"byte_end":485493,"line_start":47,"line_end":47,"column_start":42,"column_end":49},"kind":"SuperTrait","from":{"krate":13,"index":175},"to":{"krate":0,"index":2092}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\traits.rs","byte_start":486042,"byte_end":486049,"line_start":71,"line_end":71,"column_start":17,"column_end":24},"kind":"SuperTrait","from":{"krate":13,"index":92},"to":{"krate":0,"index":2101}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\traits.rs","byte_start":486052,"byte_end":486059,"line_start":71,"line_end":71,"column_start":27,"column_end":34},"kind":"SuperTrait","from":{"krate":13,"index":175},"to":{"krate":0,"index":2101}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\traits.rs","byte_start":486834,"byte_end":486838,"line_start":105,"line_end":105,"column_start":18,"column_end":22},"kind":"SuperTrait","from":{"krate":2,"index":2055},"to":{"krate":0,"index":2110}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.13\\./src\\traits.rs","byte_start":486841,"byte_end":486846,"line_start":105,"line_end":105,"column_start":25,"column_end":30},"kind":"SuperTrait","from":{"krate":2,"index":1742},"to":{"krate":0,"index":2110}}]}