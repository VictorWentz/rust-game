{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.0","compilation":{"directory":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12","program":"C:\\Users\\victo\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\bin\\rls.exe","arguments":["--crate-name","image","--edition=2018","C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src/lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","debuginfo=2","--cfg","feature=\"jpeg\"","--cfg","feature=\"png\"","-C","metadata=369abed91b110aca","-C","extra-filename=-369abed91b110aca","--out-dir","d:\\Pasta_de_arquivos_de_trabalho\\Rust Projects\\rust-game\\Flappy-Dragon\\target\\rls\\debug\\deps","-L","dependency=d:\\Pasta_de_arquivos_de_trabalho\\Rust Projects\\rust-game\\Flappy-Dragon\\target\\rls\\debug\\deps","--extern","bytemuck=d:\\Pasta_de_arquivos_de_trabalho\\Rust Projects\\rust-game\\Flappy-Dragon\\target\\rls\\debug\\deps\\libbytemuck-5ccb6bca01452e02.rmeta","--extern","byteorder=d:\\Pasta_de_arquivos_de_trabalho\\Rust Projects\\rust-game\\Flappy-Dragon\\target\\rls\\debug\\deps\\libbyteorder-fdbbb64da3b67360.rmeta","--extern","color_quant=d:\\Pasta_de_arquivos_de_trabalho\\Rust Projects\\rust-game\\Flappy-Dragon\\target\\rls\\debug\\deps\\libcolor_quant-3ad5beb2b5606236.rmeta","--extern","jpeg=d:\\Pasta_de_arquivos_de_trabalho\\Rust Projects\\rust-game\\Flappy-Dragon\\target\\rls\\debug\\deps\\libjpeg_decoder-96a5ec089e2062fa.rmeta","--extern","num_iter=d:\\Pasta_de_arquivos_de_trabalho\\Rust Projects\\rust-game\\Flappy-Dragon\\target\\rls\\debug\\deps\\libnum_iter-e055fe9fc94579a4.rmeta","--extern","num_rational=d:\\Pasta_de_arquivos_de_trabalho\\Rust Projects\\rust-game\\Flappy-Dragon\\target\\rls\\debug\\deps\\libnum_rational-0aa17b0f0382f287.rmeta","--extern","num_traits=d:\\Pasta_de_arquivos_de_trabalho\\Rust Projects\\rust-game\\Flappy-Dragon\\target\\rls\\debug\\deps\\libnum_traits-809df5da3bb7d5c1.rmeta","--extern","png=d:\\Pasta_de_arquivos_de_trabalho\\Rust Projects\\rust-game\\Flappy-Dragon\\target\\rls\\debug\\deps\\libpng-79c83bc48cdc6f45.rmeta","--cap-lints","allow","--error-format=json","--sysroot","C:\\Users\\victo\\.rustup/toolchains/stable-x86_64-pc-windows-msvc"],"output":"d:\\Pasta_de_arquivos_de_trabalho\\Rust Projects\\rust-game\\Flappy-Dragon\\target\\rls\\debug\\deps\\libimage-369abed91b110aca.rmeta"},"prelude":{"crate_id":{"name":"image","disambiguator":[5501237747393050228,11427695298856619943]},"crate_root":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src","external_crates":[{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src/lib.rs","num":1,"id":{"name":"std","disambiguator":[2134305066550747688,1377703208702874155]}},{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src/lib.rs","num":2,"id":{"name":"core","disambiguator":[1322159461575500717,8297198428669169011]}},{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[2376346800744392852,12342541482992122530]}},{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src/lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[14946502858004023242,6637215598610016319]}},{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src/lib.rs","num":5,"id":{"name":"alloc","disambiguator":[5305136910335682758,6890491777619641650]}},{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[8079093424489733033,9678018066858265018]}},{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[8191054904896780843,65190916132359678]}},{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src/lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[17454577518104061478,8473922882117178851]}},{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src/lib.rs","num":9,"id":{"name":"hashbrown","disambiguator":[14702801963282246562,3385633331338644346]}},{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src/lib.rs","num":10,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[4483555191844012602,617965746000623535]}},{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src/lib.rs","num":11,"id":{"name":"rustc_demangle","disambiguator":[6496369475756502088,8603909216288097824]}},{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src/lib.rs","num":12,"id":{"name":"panic_unwind","disambiguator":[8790568169648576788,8899032378407077408]}},{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\imageops\\mod.rs","num":13,"id":{"name":"num_traits","disambiguator":[9091900297329623376,15503582217541273973]}},{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\codecs\\jpeg\\decoder.rs","num":14,"id":{"name":"jpeg_decoder","disambiguator":[833204063339822527,11560894948955307558]}},{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\codecs\\jpeg\\encoder.rs","num":15,"id":{"name":"num_iter","disambiguator":[9292327585076703189,2637645596313737498]}},{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\codecs\\jpeg\\encoder.rs","num":16,"id":{"name":"num_integer","disambiguator":[17525374555192888459,8216972377990694907]}},{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\codecs\\png.rs","num":17,"id":{"name":"num_rational","disambiguator":[17422301252047100832,2370077633027702190]}},{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\codecs\\png.rs","num":18,"id":{"name":"png","disambiguator":[15645841551493548065,12911397313540139542]}},{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\codecs\\png.rs","num":19,"id":{"name":"bitflags","disambiguator":[3061788739106617431,7195889896823621023]}},{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\codecs\\png.rs","num":20,"id":{"name":"deflate","disambiguator":[4923999348129385242,6294969588135328055]}},{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\codecs\\png.rs","num":21,"id":{"name":"adler32","disambiguator":[16945789833151972653,6749170825551649618]}},{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\codecs\\png.rs","num":22,"id":{"name":"byteorder","disambiguator":[17846375290341452477,13224367376335600430]}},{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\codecs\\png.rs","num":23,"id":{"name":"crc32fast","disambiguator":[11549732565396183001,15708549044543995691]}},{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\codecs\\png.rs","num":24,"id":{"name":"cfg_if","disambiguator":[12397753863589609571,14658349722023367951]}},{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\codecs\\png.rs","num":25,"id":{"name":"miniz_oxide","disambiguator":[8047876116680679060,5179466540489531239]}},{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\dynimage.rs","num":26,"id":{"name":"bytemuck","disambiguator":[8478502438656522490,9386160555657624940]}},{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\math\\nq.rs","num":27,"id":{"name":"color_quant","disambiguator":[17743570596609032761,4287289371212504782]}}],"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src/lib.rs","byte_start":0,"byte_end":12691,"line_start":1,"line_end":392,"column_start":1,"column_end":2}},"imports":[{"kind":"Use","ref_id":{"krate":0,"index":2619},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src/lib.rs","byte_start":3843,"byte_end":3852,"line_start":104,"line_end":104,"column_start":24,"column_end":33},"alias_span":null,"name":"ColorType","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2658},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src/lib.rs","byte_start":3854,"byte_end":3871,"line_start":104,"line_end":104,"column_start":35,"column_end":52},"alias_span":null,"name":"ExtendedColorType","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3082},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src/lib.rs","byte_start":3898,"byte_end":3902,"line_start":106,"line_end":106,"column_start":24,"column_end":28},"alias_span":null,"name":"Luma","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3083},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src/lib.rs","byte_start":3898,"byte_end":3902,"line_start":106,"line_end":106,"column_start":24,"column_end":28},"alias_span":null,"name":"Luma","value":"","parent":{"krate":0,"index":8}},{"kind":"Use","ref_id":{"krate":0,"index":3169},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src/lib.rs","byte_start":3904,"byte_end":3909,"line_start":106,"line_end":106,"column_start":30,"column_end":35},"alias_span":null,"name":"LumaA","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3170},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src/lib.rs","byte_start":3904,"byte_end":3909,"line_start":106,"line_end":106,"column_start":30,"column_end":35},"alias_span":null,"name":"LumaA","value":"","parent":{"krate":0,"index":9}},{"kind":"Use","ref_id":{"krate":0,"index":3024},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src/lib.rs","byte_start":3911,"byte_end":3914,"line_start":106,"line_end":106,"column_start":37,"column_end":40},"alias_span":null,"name":"Rgb","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3025},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src/lib.rs","byte_start":3911,"byte_end":3914,"line_start":106,"line_end":106,"column_start":37,"column_end":40},"alias_span":null,"name":"Rgb","value":"","parent":{"krate":0,"index":10}},{"kind":"Use","ref_id":{"krate":0,"index":3111},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src/lib.rs","byte_start":3916,"byte_end":3920,"line_start":106,"line_end":106,"column_start":42,"column_end":46},"alias_span":null,"name":"Rgba","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3112},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src/lib.rs","byte_start":3916,"byte_end":3920,"line_start":106,"line_end":106,"column_start":42,"column_end":46},"alias_span":null,"name":"Rgba","value":"","parent":{"krate":0,"index":11}},{"kind":"Use","ref_id":{"krate":0,"index":3053},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src/lib.rs","byte_start":3922,"byte_end":3925,"line_start":106,"line_end":106,"column_start":48,"column_end":51},"alias_span":null,"name":"Bgr","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3054},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src/lib.rs","byte_start":3922,"byte_end":3925,"line_start":106,"line_end":106,"column_start":48,"column_end":51},"alias_span":null,"name":"Bgr","value":"","parent":{"krate":0,"index":12}},{"kind":"Use","ref_id":{"krate":0,"index":3140},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src/lib.rs","byte_start":3927,"byte_end":3931,"line_start":106,"line_end":106,"column_start":53,"column_end":57},"alias_span":null,"name":"Bgra","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3141},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src/lib.rs","byte_start":3927,"byte_end":3931,"line_start":106,"line_end":106,"column_start":53,"column_end":57},"alias_span":null,"name":"Bgra","value":"","parent":{"krate":0,"index":13}},{"kind":"Use","ref_id":{"krate":0,"index":2133},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src/lib.rs","byte_start":3958,"byte_end":3968,"line_start":108,"line_end":108,"column_start":24,"column_end":34},"alias_span":null,"name":"ImageError","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":91},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src/lib.rs","byte_start":3970,"byte_end":3981,"line_start":108,"line_end":108,"column_start":36,"column_end":47},"alias_span":null,"name":"ImageResult","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1948},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src/lib.rs","byte_start":4008,"byte_end":4024,"line_start":110,"line_end":110,"column_start":24,"column_end":40},"alias_span":null,"name":"AnimationDecoder","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1974},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src/lib.rs","byte_start":4042,"byte_end":4054,"line_start":111,"line_end":111,"column_start":17,"column_end":29},"alias_span":null,"name":"GenericImage","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1961},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src/lib.rs","byte_start":4072,"byte_end":4088,"line_start":112,"line_end":112,"column_start":17,"column_end":33},"alias_span":null,"name":"GenericImageView","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1929},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src/lib.rs","byte_start":4106,"byte_end":4118,"line_start":113,"line_end":113,"column_start":17,"column_end":29},"alias_span":null,"name":"ImageDecoder","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1942},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src/lib.rs","byte_start":4136,"byte_end":4151,"line_start":114,"line_end":114,"column_start":17,"column_end":32},"alias_span":null,"name":"ImageDecoderExt","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1951},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src/lib.rs","byte_start":4169,"byte_end":4181,"line_start":115,"line_end":115,"column_start":17,"column_end":29},"alias_span":null,"name":"ImageEncoder","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3282},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src/lib.rs","byte_start":4199,"byte_end":4210,"line_start":116,"line_end":116,"column_start":17,"column_end":28},"alias_span":null,"name":"ImageFormat","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3327},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src/lib.rs","byte_start":4228,"byte_end":4245,"line_start":117,"line_end":117,"column_start":17,"column_end":34},"alias_span":null,"name":"ImageOutputFormat","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3350},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src/lib.rs","byte_start":4263,"byte_end":4271,"line_start":118,"line_end":118,"column_start":17,"column_end":25},"alias_span":null,"name":"Progress","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3365},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src/lib.rs","byte_start":4318,"byte_end":4324,"line_start":120,"line_end":120,"column_start":17,"column_end":23},"alias_span":null,"name":"Pixels","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1986},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src/lib.rs","byte_start":4342,"byte_end":4350,"line_start":121,"line_end":121,"column_start":17,"column_end":25},"alias_span":null,"name":"SubImage","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1446},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src/lib.rs","byte_start":4397,"byte_end":4411,"line_start":124,"line_end":124,"column_start":18,"column_end":32},"alias_span":null,"name":"GrayAlphaImage","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1445},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src/lib.rs","byte_start":4430,"byte_end":4439,"line_start":125,"line_end":125,"column_start":18,"column_end":27},"alias_span":null,"name":"GrayImage","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2588},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src/lib.rs","byte_start":4490,"byte_end":4501,"line_start":127,"line_end":127,"column_start":18,"column_end":29},"alias_span":null,"name":"ImageBuffer","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1443},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src/lib.rs","byte_start":4520,"byte_end":4528,"line_start":128,"line_end":128,"column_start":18,"column_end":26},"alias_span":null,"name":"RgbImage","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1444},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src/lib.rs","byte_start":4547,"byte_end":4556,"line_start":129,"line_end":129,"column_start":18,"column_end":27},"alias_span":null,"name":"RgbaImage","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2318},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src/lib.rs","byte_start":4581,"byte_end":4592,"line_start":131,"line_end":131,"column_start":22,"column_end":33},"alias_span":null,"name":"FlatSamples","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2034},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src/lib.rs","byte_start":4629,"byte_end":4644,"line_start":134,"line_end":134,"column_start":25,"column_end":40},"alias_span":null,"name":"EncodableLayout","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2040},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src/lib.rs","byte_start":4646,"byte_end":4655,"line_start":134,"line_end":134,"column_start":42,"column_end":51},"alias_span":null,"name":"Primitive","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2071},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src/lib.rs","byte_start":4657,"byte_end":4662,"line_start":134,"line_end":134,"column_start":53,"column_end":58},"alias_span":null,"name":"Pixel","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":509},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src/lib.rs","byte_start":4732,"byte_end":4744,"line_start":137,"line_end":137,"column_start":37,"column_end":49},"alias_span":null,"name":"guess_format","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":498},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src/lib.rs","byte_start":4746,"byte_end":4750,"line_start":137,"line_end":137,"column_start":51,"column_end":55},"alias_span":null,"name":"load","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1864},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src/lib.rs","byte_start":4779,"byte_end":4795,"line_start":138,"line_end":138,"column_start":27,"column_end":43},"alias_span":null,"name":"load_from_memory","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1865},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src/lib.rs","byte_start":4797,"byte_end":4825,"line_start":138,"line_end":138,"column_start":45,"column_end":73},"alias_span":null,"name":"load_from_memory_with_format","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1856},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src/lib.rs","byte_start":4827,"byte_end":4831,"line_start":138,"line_end":138,"column_start":75,"column_end":79},"alias_span":null,"name":"open","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1860},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src/lib.rs","byte_start":4852,"byte_end":4863,"line_start":139,"line_end":139,"column_start":20,"column_end":31},"alias_span":null,"name":"save_buffer","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1862},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src/lib.rs","byte_start":4865,"byte_end":4888,"line_start":139,"line_end":139,"column_start":33,"column_end":56},"alias_span":null,"name":"save_buffer_with_format","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1858},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src/lib.rs","byte_start":4890,"byte_end":4906,"line_start":139,"line_end":139,"column_start":58,"column_end":74},"alias_span":null,"name":"image_dimensions","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3249},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src/lib.rs","byte_start":4935,"byte_end":4947,"line_start":141,"line_end":141,"column_start":26,"column_end":38},"alias_span":null,"name":"DynamicImage","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2568},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src/lib.rs","byte_start":4977,"byte_end":4982,"line_start":143,"line_end":143,"column_start":28,"column_end":33},"alias_span":null,"name":"Delay","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2561},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src/lib.rs","byte_start":4984,"byte_end":4989,"line_start":143,"line_end":143,"column_start":35,"column_end":40},"alias_span":null,"name":"Frame","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1078},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src/lib.rs","byte_start":4991,"byte_end":4997,"line_start":143,"line_end":143,"column_start":42,"column_end":48},"alias_span":null,"name":"Frames","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1430},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src/lib.rs","byte_start":5220,"byte_end":5233,"line_start":152,"line_end":152,"column_start":9,"column_end":22},"alias_span":null,"name":"ConvertBuffer","value":"","parent":{"krate":0,"index":117}},{"kind":"Use","ref_id":{"krate":0,"index":1248},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src/lib.rs","byte_start":5243,"byte_end":5258,"line_start":153,"line_end":153,"column_start":9,"column_end":24},"alias_span":null,"name":"EnumeratePixels","value":"","parent":{"krate":0,"index":117}},{"kind":"Use","ref_id":{"krate":0,"index":1293},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src/lib.rs","byte_start":5268,"byte_end":5286,"line_start":154,"line_end":154,"column_start":9,"column_end":27},"alias_span":null,"name":"EnumeratePixelsMut","value":"","parent":{"krate":0,"index":117}},{"kind":"Use","ref_id":{"krate":0,"index":1271},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src/lib.rs","byte_start":5296,"byte_end":5309,"line_start":155,"line_end":155,"column_start":9,"column_end":22},"alias_span":null,"name":"EnumerateRows","value":"","parent":{"krate":0,"index":117}},{"kind":"Use","ref_id":{"krate":0,"index":1313},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src/lib.rs","byte_start":5319,"byte_end":5335,"line_start":156,"line_end":156,"column_start":9,"column_end":25},"alias_span":null,"name":"EnumerateRowsMut","value":"","parent":{"krate":0,"index":117}},{"kind":"Use","ref_id":{"krate":0,"index":1150},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src/lib.rs","byte_start":5345,"byte_end":5351,"line_start":157,"line_end":157,"column_start":9,"column_end":15},"alias_span":null,"name":"Pixels","value":"","parent":{"krate":0,"index":117}},{"kind":"Use","ref_id":{"krate":0,"index":1175},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src/lib.rs","byte_start":5361,"byte_end":5370,"line_start":158,"line_end":158,"column_start":9,"column_end":18},"alias_span":null,"name":"PixelsMut","value":"","parent":{"krate":0,"index":117}},{"kind":"Use","ref_id":{"krate":0,"index":1197},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src/lib.rs","byte_start":5380,"byte_end":5384,"line_start":159,"line_end":159,"column_start":9,"column_end":13},"alias_span":null,"name":"Rows","value":"","parent":{"krate":0,"index":117}},{"kind":"Use","ref_id":{"krate":0,"index":1224},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src/lib.rs","byte_start":5394,"byte_end":5401,"line_start":160,"line_end":160,"column_start":9,"column_end":16},"alias_span":null,"name":"RowsMut","value":"","parent":{"krate":0,"index":117}},{"kind":"Use","ref_id":{"krate":0,"index":2274},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\math\\mod.rs","byte_start":30481,"byte_end":30485,"line_start":6,"line_end":6,"column_start":21,"column_end":25},"alias_span":null,"name":"Rect","value":"","parent":{"krate":0,"index":128}},{"kind":"Use","ref_id":{"krate":0,"index":2299},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\imageops\\mod.rs","byte_start":39155,"byte_end":39165,"line_start":9,"line_end":9,"column_start":23,"column_end":33},"alias_span":null,"name":"FilterType","value":"","parent":{"krate":0,"index":150}},{"kind":"Use","ref_id":{"krate":0,"index":2304},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\imageops\\mod.rs","byte_start":39203,"byte_end":39213,"line_start":11,"line_end":11,"column_start":36,"column_end":46},"alias_span":null,"name":"CatmullRom","value":"","parent":{"krate":0,"index":150}},{"kind":"Use","ref_id":{"krate":0,"index":2305},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\imageops\\mod.rs","byte_start":39203,"byte_end":39213,"line_start":11,"line_end":11,"column_start":36,"column_end":46},"alias_span":null,"name":"CatmullRom","value":"","parent":{"krate":0,"index":164}},{"kind":"Use","ref_id":{"krate":0,"index":2306},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\imageops\\mod.rs","byte_start":39215,"byte_end":39223,"line_start":11,"line_end":11,"column_start":48,"column_end":56},"alias_span":null,"name":"Gaussian","value":"","parent":{"krate":0,"index":150}},{"kind":"Use","ref_id":{"krate":0,"index":2307},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\imageops\\mod.rs","byte_start":39215,"byte_end":39223,"line_start":11,"line_end":11,"column_start":48,"column_end":56},"alias_span":null,"name":"Gaussian","value":"","parent":{"krate":0,"index":165}},{"kind":"Use","ref_id":{"krate":0,"index":2308},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\imageops\\mod.rs","byte_start":39225,"byte_end":39233,"line_start":11,"line_end":11,"column_start":58,"column_end":66},"alias_span":null,"name":"Lanczos3","value":"","parent":{"krate":0,"index":150}},{"kind":"Use","ref_id":{"krate":0,"index":2309},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\imageops\\mod.rs","byte_start":39225,"byte_end":39233,"line_start":11,"line_end":11,"column_start":58,"column_end":66},"alias_span":null,"name":"Lanczos3","value":"","parent":{"krate":0,"index":166}},{"kind":"Use","ref_id":{"krate":0,"index":2300},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\imageops\\mod.rs","byte_start":39235,"byte_end":39242,"line_start":11,"line_end":11,"column_start":68,"column_end":75},"alias_span":null,"name":"Nearest","value":"","parent":{"krate":0,"index":150}},{"kind":"Use","ref_id":{"krate":0,"index":2301},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\imageops\\mod.rs","byte_start":39235,"byte_end":39242,"line_start":11,"line_end":11,"column_start":68,"column_end":75},"alias_span":null,"name":"Nearest","value":"","parent":{"krate":0,"index":167}},{"kind":"Use","ref_id":{"krate":0,"index":2302},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\imageops\\mod.rs","byte_start":39244,"byte_end":39252,"line_start":11,"line_end":11,"column_start":77,"column_end":85},"alias_span":null,"name":"Triangle","value":"","parent":{"krate":0,"index":150}},{"kind":"Use","ref_id":{"krate":0,"index":2303},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\imageops\\mod.rs","byte_start":39244,"byte_end":39252,"line_start":11,"line_end":11,"column_start":77,"column_end":85},"alias_span":null,"name":"Triangle","value":"","parent":{"krate":0,"index":168}},{"kind":"Use","ref_id":{"krate":0,"index":224},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\imageops\\mod.rs","byte_start":39311,"byte_end":39326,"line_start":15,"line_end":15,"column_start":5,"column_end":20},"alias_span":null,"name":"flip_horizontal","value":"","parent":{"krate":0,"index":150}},{"kind":"Use","ref_id":{"krate":0,"index":236},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\imageops\\mod.rs","byte_start":39328,"byte_end":39352,"line_start":15,"line_end":15,"column_start":22,"column_end":46},"alias_span":null,"name":"flip_horizontal_in_place","value":"","parent":{"krate":0,"index":150}},{"kind":"Use","ref_id":{"krate":0,"index":226},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\imageops\\mod.rs","byte_start":39354,"byte_end":39367,"line_start":15,"line_end":15,"column_start":48,"column_end":61},"alias_span":null,"name":"flip_vertical","value":"","parent":{"krate":0,"index":150}},{"kind":"Use","ref_id":{"krate":0,"index":238},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\imageops\\mod.rs","byte_start":39369,"byte_end":39391,"line_start":15,"line_end":15,"column_start":63,"column_end":85},"alias_span":null,"name":"flip_vertical_in_place","value":"","parent":{"krate":0,"index":150}},{"kind":"Use","ref_id":{"krate":0,"index":211},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\imageops\\mod.rs","byte_start":39393,"byte_end":39402,"line_start":15,"line_end":15,"column_start":87,"column_end":96},"alias_span":null,"name":"rotate180","value":"","parent":{"krate":0,"index":150}},{"kind":"Use","ref_id":{"krate":0,"index":234},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\imageops\\mod.rs","byte_start":39408,"byte_end":39426,"line_start":16,"line_end":16,"column_start":5,"column_end":23},"alias_span":null,"name":"rotate180_in_place","value":"","parent":{"krate":0,"index":150}},{"kind":"Use","ref_id":{"krate":0,"index":213},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\imageops\\mod.rs","byte_start":39428,"byte_end":39437,"line_start":16,"line_end":16,"column_start":25,"column_end":34},"alias_span":null,"name":"rotate270","value":"","parent":{"krate":0,"index":150}},{"kind":"Use","ref_id":{"krate":0,"index":209},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\imageops\\mod.rs","byte_start":39439,"byte_end":39447,"line_start":16,"line_end":16,"column_start":36,"column_end":44},"alias_span":null,"name":"rotate90","value":"","parent":{"krate":0,"index":150}},{"kind":"Use","ref_id":{"krate":0,"index":218},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\imageops\\mod.rs","byte_start":39449,"byte_end":39461,"line_start":16,"line_end":16,"column_start":46,"column_end":58},"alias_span":null,"name":"rotate180_in","value":"","parent":{"krate":0,"index":150}},{"kind":"Use","ref_id":{"krate":0,"index":215},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\imageops\\mod.rs","byte_start":39463,"byte_end":39474,"line_start":16,"line_end":16,"column_start":60,"column_end":71},"alias_span":null,"name":"rotate90_in","value":"","parent":{"krate":0,"index":150}},{"kind":"Use","ref_id":{"krate":0,"index":221},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\imageops\\mod.rs","byte_start":39476,"byte_end":39488,"line_start":16,"line_end":16,"column_start":73,"column_end":85},"alias_span":null,"name":"rotate270_in","value":"","parent":{"krate":0,"index":150}},{"kind":"Use","ref_id":{"krate":0,"index":228},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\imageops\\mod.rs","byte_start":39490,"byte_end":39508,"line_start":16,"line_end":16,"column_start":87,"column_end":105},"alias_span":null,"name":"flip_horizontal_in","value":"","parent":{"krate":0,"index":150}},{"kind":"Use","ref_id":{"krate":0,"index":231},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\imageops\\mod.rs","byte_start":39510,"byte_end":39526,"line_start":16,"line_end":16,"column_start":107,"column_end":123},"alias_span":null,"name":"flip_vertical_in","value":"","parent":{"krate":0,"index":150}},{"kind":"Use","ref_id":{"krate":0,"index":394},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\imageops\\mod.rs","byte_start":39573,"byte_end":39577,"line_start":20,"line_end":20,"column_start":24,"column_end":28},"alias_span":null,"name":"blur","value":"","parent":{"krate":0,"index":150}},{"kind":"Use","ref_id":{"krate":0,"index":387},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\imageops\\mod.rs","byte_start":39579,"byte_end":39588,"line_start":20,"line_end":20,"column_start":30,"column_end":39},"alias_span":null,"name":"filter3x3","value":"","parent":{"krate":0,"index":150}},{"kind":"Use","ref_id":{"krate":0,"index":392},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\imageops\\mod.rs","byte_start":39590,"byte_end":39596,"line_start":20,"line_end":20,"column_start":41,"column_end":47},"alias_span":null,"name":"resize","value":"","parent":{"krate":0,"index":150}},{"kind":"Use","ref_id":{"krate":0,"index":364},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\imageops\\mod.rs","byte_start":39598,"byte_end":39607,"line_start":20,"line_end":20,"column_start":49,"column_end":58},"alias_span":null,"name":"thumbnail","value":"","parent":{"krate":0,"index":150}},{"kind":"Use","ref_id":{"krate":0,"index":397},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\imageops\\mod.rs","byte_start":39609,"byte_end":39618,"line_start":20,"line_end":20,"column_start":60,"column_end":69},"alias_span":null,"name":"unsharpen","value":"","parent":{"krate":0,"index":150}},{"kind":"Use","ref_id":{"krate":0,"index":268},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\imageops\\mod.rs","byte_start":39668,"byte_end":39676,"line_start":23,"line_end":23,"column_start":26,"column_end":34},"alias_span":null,"name":"brighten","value":"","parent":{"krate":0,"index":150}},{"kind":"Use","ref_id":{"krate":0,"index":263},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\imageops\\mod.rs","byte_start":39678,"byte_end":39686,"line_start":23,"line_end":23,"column_start":36,"column_end":44},"alias_span":null,"name":"contrast","value":"","parent":{"krate":0,"index":150}},{"kind":"Use","ref_id":{"krate":0,"index":309},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\imageops\\mod.rs","byte_start":39688,"byte_end":39694,"line_start":23,"line_end":23,"column_start":46,"column_end":52},"alias_span":null,"name":"dither","value":"","parent":{"krate":0,"index":150}},{"kind":"Use","ref_id":{"krate":0,"index":259},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\imageops\\mod.rs","byte_start":39696,"byte_end":39705,"line_start":23,"line_end":23,"column_start":54,"column_end":63},"alias_span":null,"name":"grayscale","value":"","parent":{"krate":0,"index":150}},{"kind":"Use","ref_id":{"krate":0,"index":274},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\imageops\\mod.rs","byte_start":39707,"byte_end":39716,"line_start":23,"line_end":23,"column_start":65,"column_end":74},"alias_span":null,"name":"huerotate","value":"","parent":{"krate":0,"index":150}},{"kind":"Use","ref_id":{"krate":0,"index":314},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\imageops\\mod.rs","byte_start":39718,"byte_end":39730,"line_start":23,"line_end":23,"column_start":76,"column_end":88},"alias_span":null,"name":"index_colors","value":"","parent":{"krate":0,"index":150}},{"kind":"Use","ref_id":{"krate":0,"index":261},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\imageops\\mod.rs","byte_start":39732,"byte_end":39738,"line_start":23,"line_end":23,"column_start":90,"column_end":96},"alias_span":null,"name":"invert","value":"","parent":{"krate":0,"index":150}},{"kind":"Use","ref_id":{"krate":0,"index":2294},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\imageops\\mod.rs","byte_start":39765,"byte_end":39772,"line_start":24,"line_end":24,"column_start":26,"column_end":33},"alias_span":null,"name":"BiLevel","value":"","parent":{"krate":0,"index":150}},{"kind":"Use","ref_id":{"krate":0,"index":2295},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\imageops\\mod.rs","byte_start":39765,"byte_end":39772,"line_start":24,"line_end":24,"column_start":26,"column_end":33},"alias_span":null,"name":"BiLevel","value":"","parent":{"krate":0,"index":197}},{"kind":"Use","ref_id":{"krate":0,"index":279},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\imageops\\mod.rs","byte_start":39774,"byte_end":39782,"line_start":24,"line_end":24,"column_start":35,"column_end":43},"alias_span":null,"name":"ColorMap","value":"","parent":{"krate":0,"index":150}},{"kind":"Use","ref_id":{"krate":0,"index":450},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\io\\mod.rs","byte_start":103581,"byte_end":103587,"line_start":5,"line_end":5,"column_start":23,"column_end":29},"alias_span":null,"name":"Reader","value":"","parent":{"krate":0,"index":428}},{"kind":"Use","ref_id":{"krate":0,"index":717},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\codecs\\jpeg\\mod.rs","byte_start":184853,"byte_end":184864,"line_start":10,"line_end":10,"column_start":24,"column_end":35},"alias_span":null,"name":"JpegDecoder","value":"","parent":{"krate":0,"index":692}},{"kind":"Use","ref_id":{"krate":0,"index":830},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\codecs\\jpeg\\mod.rs","byte_start":184967,"byte_end":184978,"line_start":12,"line_end":12,"column_start":25,"column_end":36},"alias_span":null,"name":"JpegEncoder","value":"","parent":{"krate":0,"index":692}},{"kind":"Use","ref_id":{"krate":0,"index":2494},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\codecs\\jpeg\\mod.rs","byte_start":184980,"byte_end":184992,"line_start":12,"line_end":12,"column_start":38,"column_end":50},"alias_span":null,"name":"PixelDensity","value":"","parent":{"krate":0,"index":692}},{"kind":"Use","ref_id":{"krate":0,"index":2476},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\codecs\\jpeg\\mod.rs","byte_start":184994,"byte_end":185010,"line_start":12,"line_end":12,"column_start":52,"column_end":68},"alias_span":null,"name":"PixelDensityUnit","value":"","parent":{"krate":0,"index":692}},{"kind":"Use","ref_id":{"krate":0,"index":842},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\codecs\\jpeg\\mod.rs","byte_start":185012,"byte_end":185023,"line_start":12,"line_end":12,"column_start":70,"column_end":81},"alias_span":null,"name":"JPEGEncoder","value":"","parent":{"krate":0,"index":692}},{"kind":"Use","ref_id":{"krate":0,"index":842},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src/lib.rs","byte_start":10371,"byte_end":10382,"line_start":311,"line_end":311,"column_start":9,"column_end":20},"alias_span":null,"name":"JPEGEncoder","value":"","parent":{"krate":0,"index":1055}},{"kind":"Use","ref_id":{"krate":0,"index":717},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src/lib.rs","byte_start":10384,"byte_end":10395,"line_start":311,"line_end":311,"column_start":22,"column_end":33},"alias_span":null,"name":"JpegDecoder","value":"","parent":{"krate":0,"index":1055}},{"kind":"Use","ref_id":{"krate":0,"index":830},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src/lib.rs","byte_start":10397,"byte_end":10408,"line_start":311,"line_end":311,"column_start":35,"column_end":46},"alias_span":null,"name":"JpegEncoder","value":"","parent":{"krate":0,"index":1055}},{"kind":"Use","ref_id":{"krate":0,"index":2494},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src/lib.rs","byte_start":10410,"byte_end":10422,"line_start":311,"line_end":311,"column_start":48,"column_end":60},"alias_span":null,"name":"PixelDensity","value":"","parent":{"krate":0,"index":1055}},{"kind":"Use","ref_id":{"krate":0,"index":2476},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src/lib.rs","byte_start":10424,"byte_end":10440,"line_start":311,"line_end":311,"column_start":62,"column_end":78},"alias_span":null,"name":"PixelDensityUnit","value":"","parent":{"krate":0,"index":1055}},{"kind":"Use","ref_id":{"krate":0,"index":1000},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src/lib.rs","byte_start":10642,"byte_end":10653,"line_start":320,"line_end":320,"column_start":9,"column_end":20},"alias_span":null,"name":"ApngDecoder","value":"","parent":{"krate":0,"index":1062}},{"kind":"Use","ref_id":{"krate":0,"index":2509},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src/lib.rs","byte_start":10655,"byte_end":10670,"line_start":320,"line_end":320,"column_start":22,"column_end":37},"alias_span":null,"name":"CompressionType","value":"","parent":{"krate":0,"index":1062}},{"kind":"Use","ref_id":{"krate":0,"index":2535},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src/lib.rs","byte_start":10672,"byte_end":10682,"line_start":320,"line_end":320,"column_start":39,"column_end":49},"alias_span":null,"name":"FilterType","value":"","parent":{"krate":0,"index":1062}},{"kind":"Use","ref_id":{"krate":0,"index":1031},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src/lib.rs","byte_start":10684,"byte_end":10694,"line_start":320,"line_end":320,"column_start":51,"column_end":61},"alias_span":null,"name":"PNGEncoder","value":"","parent":{"krate":0,"index":1062}},{"kind":"Use","ref_id":{"krate":0,"index":967},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src/lib.rs","byte_start":10696,"byte_end":10705,"line_start":320,"line_end":320,"column_start":63,"column_end":72},"alias_span":null,"name":"PNGReader","value":"","parent":{"krate":0,"index":1062}},{"kind":"Use","ref_id":{"krate":0,"index":976},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src/lib.rs","byte_start":10707,"byte_end":10717,"line_start":320,"line_end":320,"column_start":74,"column_end":84},"alias_span":null,"name":"PngDecoder","value":"","parent":{"krate":0,"index":1062}},{"kind":"Use","ref_id":{"krate":0,"index":1026},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src/lib.rs","byte_start":10719,"byte_end":10729,"line_start":320,"line_end":320,"column_start":86,"column_end":96},"alias_span":null,"name":"PngEncoder","value":"","parent":{"krate":0,"index":1062}},{"kind":"Use","ref_id":{"krate":0,"index":962},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src/lib.rs","byte_start":10739,"byte_end":10748,"line_start":321,"line_end":321,"column_start":9,"column_end":18},"alias_span":null,"name":"PngReader","value":"","parent":{"krate":0,"index":1062}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src/lib.rs","byte_start":0,"byte_end":12691,"line_start":1,"line_end":392,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":5},{"krate":0,"index":6},{"krate":0,"index":7},{"krate":0,"index":8},{"krate":0,"index":3428},{"krate":0,"index":9},{"krate":0,"index":3430},{"krate":0,"index":10},{"krate":0,"index":3432},{"krate":0,"index":11},{"krate":0,"index":3434},{"krate":0,"index":12},{"krate":0,"index":3436},{"krate":0,"index":13},{"krate":0,"index":3438},{"krate":0,"index":14},{"krate":0,"index":15},{"krate":0,"index":16},{"krate":0,"index":17},{"krate":0,"index":18},{"krate":0,"index":19},{"krate":0,"index":20},{"krate":0,"index":21},{"krate":0,"index":22},{"krate":0,"index":23},{"krate":0,"index":24},{"krate":0,"index":25},{"krate":0,"index":26},{"krate":0,"index":27},{"krate":0,"index":28},{"krate":0,"index":29},{"krate":0,"index":30},{"krate":0,"index":31},{"krate":0,"index":32},{"krate":0,"index":33},{"krate":0,"index":34},{"krate":0,"index":35},{"krate":0,"index":36},{"krate":0,"index":37},{"krate":0,"index":38},{"krate":0,"index":39},{"krate":0,"index":40},{"krate":0,"index":41},{"krate":0,"index":42},{"krate":0,"index":43},{"krate":0,"index":44},{"krate":0,"index":45},{"krate":0,"index":46},{"krate":0,"index":47},{"krate":0,"index":48},{"krate":0,"index":49},{"krate":0,"index":50},{"krate":0,"index":51},{"krate":0,"index":52},{"krate":0,"index":53},{"krate":0,"index":54},{"krate":0,"index":55},{"krate":0,"index":117},{"krate":0,"index":128},{"krate":0,"index":150},{"krate":0,"index":428},{"krate":0,"index":512},{"krate":0,"index":691},{"krate":0,"index":1055},{"krate":0,"index":1062},{"krate":0,"index":1072},{"krate":0,"index":1112},{"krate":0,"index":1453},{"krate":0,"index":1691},{"krate":0,"index":1866},{"krate":0,"index":2019},{"krate":0,"index":2117},{"krate":0,"index":3421},{"krate":0,"index":2132}],"decl_id":null,"docs":" # Overview","sig":null,"attributes":[{"value":"/ # Overview","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src/lib.rs","byte_start":0,"byte_end":14,"line_start":1,"line_end":1,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src/lib.rs","byte_start":15,"byte_end":18,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ This crate provides native rust implementations of image encoding and decoding as well as some","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src/lib.rs","byte_start":19,"byte_end":117,"line_start":3,"line_end":3,"column_start":1,"column_end":99}},{"value":"/ basic image manipulation functions. Additional documentation can currently also be found in the","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src/lib.rs","byte_start":118,"byte_end":217,"line_start":4,"line_end":4,"column_start":1,"column_end":100}},{"value":"/ [README.md file which is most easily viewed on","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src/lib.rs","byte_start":218,"byte_end":268,"line_start":5,"line_end":5,"column_start":1,"column_end":51}},{"value":"/ github](https://github.com/image-rs/image/blob/master/README.md).","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src/lib.rs","byte_start":269,"byte_end":338,"line_start":6,"line_end":6,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src/lib.rs","byte_start":339,"byte_end":342,"line_start":7,"line_end":7,"column_start":1,"column_end":4}},{"value":"/ There are two core problems for which this library provides solutions: a unified interface for image","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src/lib.rs","byte_start":343,"byte_end":447,"line_start":8,"line_end":8,"column_start":1,"column_end":105}},{"value":"/ encodings and simple generic buffers for their content. It's possible to use either feature","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src/lib.rs","byte_start":448,"byte_end":543,"line_start":9,"line_end":9,"column_start":1,"column_end":96}},{"value":"/ without the other. The focus is on a small and stable set of common operations that can be","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src/lib.rs","byte_start":544,"byte_end":638,"line_start":10,"line_end":10,"column_start":1,"column_end":95}},{"value":"/ supplemented by other specialized crates. The library also prefers safe solutions with few","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src/lib.rs","byte_start":639,"byte_end":733,"line_start":11,"line_end":11,"column_start":1,"column_end":95}},{"value":"/ dependencies.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src/lib.rs","byte_start":734,"byte_end":751,"line_start":12,"line_end":12,"column_start":1,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src/lib.rs","byte_start":752,"byte_end":755,"line_start":13,"line_end":13,"column_start":1,"column_end":4}},{"value":"/ # High level API","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src/lib.rs","byte_start":756,"byte_end":776,"line_start":14,"line_end":14,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src/lib.rs","byte_start":777,"byte_end":780,"line_start":15,"line_end":15,"column_start":1,"column_end":4}},{"value":"/ Load images using [`io::Reader`]:","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src/lib.rs","byte_start":781,"byte_end":818,"line_start":16,"line_end":16,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src/lib.rs","byte_start":819,"byte_end":822,"line_start":17,"line_end":17,"column_start":1,"column_end":4}},{"value":"/ ```rust,no_run","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src/lib.rs","byte_start":823,"byte_end":841,"line_start":18,"line_end":18,"column_start":1,"column_end":19}},{"value":"/ # use std::io::Cursor;","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src/lib.rs","byte_start":842,"byte_end":868,"line_start":19,"line_end":19,"column_start":1,"column_end":27}},{"value":"/ use image::io::Reader as ImageReader;","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src/lib.rs","byte_start":869,"byte_end":910,"line_start":20,"line_end":20,"column_start":1,"column_end":42}},{"value":"/ # fn main() -> Result<(), image::ImageError> {","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src/lib.rs","byte_start":911,"byte_end":961,"line_start":21,"line_end":21,"column_start":1,"column_end":51}},{"value":"/ # let bytes = vec![0u8];","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src/lib.rs","byte_start":962,"byte_end":990,"line_start":22,"line_end":22,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src/lib.rs","byte_start":991,"byte_end":994,"line_start":23,"line_end":23,"column_start":1,"column_end":4}},{"value":"/ let img = ImageReader::open(\"myimage.png\")?.decode()?;","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src/lib.rs","byte_start":995,"byte_end":1053,"line_start":24,"line_end":24,"column_start":1,"column_end":59}},{"value":"/ let img2 = ImageReader::new(Cursor::new(bytes)).decode()?;","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src/lib.rs","byte_start":1054,"byte_end":1116,"line_start":25,"line_end":25,"column_start":1,"column_end":63}},{"value":"/ # Ok(())","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src/lib.rs","byte_start":1117,"byte_end":1129,"line_start":26,"line_end":26,"column_start":1,"column_end":13}},{"value":"/ # }","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src/lib.rs","byte_start":1130,"byte_end":1137,"line_start":27,"line_end":27,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src/lib.rs","byte_start":1138,"byte_end":1145,"line_start":28,"line_end":28,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src/lib.rs","byte_start":1146,"byte_end":1149,"line_start":29,"line_end":29,"column_start":1,"column_end":4}},{"value":"/ And save them using [`save`] or [`write_to`] methods:","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src/lib.rs","byte_start":1150,"byte_end":1207,"line_start":30,"line_end":30,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src/lib.rs","byte_start":1208,"byte_end":1211,"line_start":31,"line_end":31,"column_start":1,"column_end":4}},{"value":"/ ```rust,no_run","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src/lib.rs","byte_start":1212,"byte_end":1230,"line_start":32,"line_end":32,"column_start":1,"column_end":19}},{"value":"/ # use std::io::Write;","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src/lib.rs","byte_start":1231,"byte_end":1256,"line_start":33,"line_end":33,"column_start":1,"column_end":26}},{"value":"/ # use image::ImageOutputFormat;","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src/lib.rs","byte_start":1257,"byte_end":1292,"line_start":34,"line_end":34,"column_start":1,"column_end":36}},{"value":"/ # use image::DynamicImage;","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src/lib.rs","byte_start":1293,"byte_end":1323,"line_start":35,"line_end":35,"column_start":1,"column_end":31}},{"value":"/ # #[cfg(feature = \"png\")]","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src/lib.rs","byte_start":1324,"byte_end":1353,"line_start":36,"line_end":36,"column_start":1,"column_end":30}},{"value":"/ # fn main() -> Result<(), image::ImageError> {","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src/lib.rs","byte_start":1354,"byte_end":1404,"line_start":37,"line_end":37,"column_start":1,"column_end":51}},{"value":"/ # let img: DynamicImage = unimplemented!();","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src/lib.rs","byte_start":1405,"byte_end":1452,"line_start":38,"line_end":38,"column_start":1,"column_end":48}},{"value":"/ # let img2: DynamicImage = unimplemented!();","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src/lib.rs","byte_start":1453,"byte_end":1501,"line_start":39,"line_end":39,"column_start":1,"column_end":49}},{"value":"/ img.save(\"empty.jpg\")?;","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src/lib.rs","byte_start":1502,"byte_end":1529,"line_start":40,"line_end":40,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src/lib.rs","byte_start":1530,"byte_end":1533,"line_start":41,"line_end":41,"column_start":1,"column_end":4}},{"value":"/ let mut bytes: Vec<u8> = Vec::new();","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src/lib.rs","byte_start":1534,"byte_end":1574,"line_start":42,"line_end":42,"column_start":1,"column_end":41}},{"value":"/ img2.write_to(&mut bytes, image::ImageOutputFormat::Png)?;","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src/lib.rs","byte_start":1575,"byte_end":1637,"line_start":43,"line_end":43,"column_start":1,"column_end":63}},{"value":"/ # Ok(())","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src/lib.rs","byte_start":1638,"byte_end":1650,"line_start":44,"line_end":44,"column_start":1,"column_end":13}},{"value":"/ # }","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src/lib.rs","byte_start":1651,"byte_end":1658,"line_start":45,"line_end":45,"column_start":1,"column_end":8}},{"value":"/ # #[cfg(not(feature = \"png\"))] fn main() {}","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src/lib.rs","byte_start":1659,"byte_end":1706,"line_start":46,"line_end":46,"column_start":1,"column_end":48}},{"value":"/ ```","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src/lib.rs","byte_start":1707,"byte_end":1714,"line_start":47,"line_end":47,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src/lib.rs","byte_start":1715,"byte_end":1718,"line_start":48,"line_end":48,"column_start":1,"column_end":4}},{"value":"/ With default features, the crate includes support for [many common image formats](codecs/index.html#supported-formats).","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src/lib.rs","byte_start":1719,"byte_end":1842,"line_start":49,"line_end":49,"column_start":1,"column_end":124}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src/lib.rs","byte_start":1843,"byte_end":1846,"line_start":50,"line_end":50,"column_start":1,"column_end":4}},{"value":"/ [`save`]: enum.DynamicImage.html#method.save","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src/lib.rs","byte_start":1847,"byte_end":1895,"line_start":51,"line_end":51,"column_start":1,"column_end":49}},{"value":"/ [`write_to`]: enum.DynamicImage.html#method.write_to","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src/lib.rs","byte_start":1896,"byte_end":1952,"line_start":52,"line_end":52,"column_start":1,"column_end":57}},{"value":"/ [`io::Reader`]: io/struct.Reader.html","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src/lib.rs","byte_start":1953,"byte_end":1994,"line_start":53,"line_end":53,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src/lib.rs","byte_start":1995,"byte_end":1998,"line_start":54,"line_end":54,"column_start":1,"column_end":4}},{"value":"/ # Image buffers","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src/lib.rs","byte_start":1999,"byte_end":2018,"line_start":55,"line_end":55,"column_start":1,"column_end":20}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src/lib.rs","byte_start":2019,"byte_end":2022,"line_start":56,"line_end":56,"column_start":1,"column_end":4}},{"value":"/ The two main types for storing images:","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src/lib.rs","byte_start":2023,"byte_end":2065,"line_start":57,"line_end":57,"column_start":1,"column_end":43}},{"value":"/ * [`ImageBuffer`] which holds statically typed image contents.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src/lib.rs","byte_start":2066,"byte_end":2132,"line_start":58,"line_end":58,"column_start":1,"column_end":67}},{"value":"/ * [`DynamicImage`] which is an enum over the supported ImageBuffer formats","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src/lib.rs","byte_start":2133,"byte_end":2211,"line_start":59,"line_end":59,"column_start":1,"column_end":79}},{"value":"/     and supports conversions between them.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src/lib.rs","byte_start":2212,"byte_end":2258,"line_start":60,"line_end":60,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src/lib.rs","byte_start":2259,"byte_end":2262,"line_start":61,"line_end":61,"column_start":1,"column_end":4}},{"value":"/ As well as a few more specialized options:","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src/lib.rs","byte_start":2263,"byte_end":2309,"line_start":62,"line_end":62,"column_start":1,"column_end":47}},{"value":"/ * [`GenericImage`] trait for a mutable image buffer.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src/lib.rs","byte_start":2310,"byte_end":2366,"line_start":63,"line_end":63,"column_start":1,"column_end":57}},{"value":"/ * [`GenericImageView`] trait for read only references to a GenericImage.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src/lib.rs","byte_start":2367,"byte_end":2443,"line_start":64,"line_end":64,"column_start":1,"column_end":77}},{"value":"/ * [`flat`] module containing types for interoperability with generic channel","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src/lib.rs","byte_start":2444,"byte_end":2524,"line_start":65,"line_end":65,"column_start":1,"column_end":81}},{"value":"/     matrices and foreign interfaces.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src/lib.rs","byte_start":2525,"byte_end":2565,"line_start":66,"line_end":66,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src/lib.rs","byte_start":2566,"byte_end":2569,"line_start":67,"line_end":67,"column_start":1,"column_end":4}},{"value":"/ [`GenericImageView`]: trait.GenericImageView.html","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src/lib.rs","byte_start":2570,"byte_end":2623,"line_start":68,"line_end":68,"column_start":1,"column_end":54}},{"value":"/ [`GenericImage`]: trait.GenericImage.html","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src/lib.rs","byte_start":2624,"byte_end":2669,"line_start":69,"line_end":69,"column_start":1,"column_end":46}},{"value":"/ [`ImageBuffer`]: struct.ImageBuffer.html","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src/lib.rs","byte_start":2670,"byte_end":2714,"line_start":70,"line_end":70,"column_start":1,"column_end":45}},{"value":"/ [`DynamicImage`]: enum.DynamicImage.html","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src/lib.rs","byte_start":2715,"byte_end":2759,"line_start":71,"line_end":71,"column_start":1,"column_end":45}},{"value":"/ [`flat`]: flat/index.html","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src/lib.rs","byte_start":2760,"byte_end":2789,"line_start":72,"line_end":72,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src/lib.rs","byte_start":2790,"byte_end":2793,"line_start":73,"line_end":73,"column_start":1,"column_end":4}},{"value":"/ # Low level encoding/decoding API","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src/lib.rs","byte_start":2794,"byte_end":2831,"line_start":74,"line_end":74,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src/lib.rs","byte_start":2832,"byte_end":2835,"line_start":75,"line_end":75,"column_start":1,"column_end":4}},{"value":"/ The [`ImageDecoder`] and [`ImageDecoderExt`] traits are implemented for many image file","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src/lib.rs","byte_start":2836,"byte_end":2927,"line_start":76,"line_end":76,"column_start":1,"column_end":92}},{"value":"/ formats. They decode image data by directly on raw byte slices. Given an ImageDecoder, you can","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src/lib.rs","byte_start":2928,"byte_end":3026,"line_start":77,"line_end":77,"column_start":1,"column_end":99}},{"value":"/ produce a DynamicImage via [`DynamicImage::from_decoder`].","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src/lib.rs","byte_start":3027,"byte_end":3089,"line_start":78,"line_end":78,"column_start":1,"column_end":63}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src/lib.rs","byte_start":3090,"byte_end":3093,"line_start":79,"line_end":79,"column_start":1,"column_end":4}},{"value":"/ [`ImageEncoder`] provides the analogous functionality for encoding image data.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src/lib.rs","byte_start":3094,"byte_end":3176,"line_start":80,"line_end":80,"column_start":1,"column_end":83}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src/lib.rs","byte_start":3177,"byte_end":3180,"line_start":81,"line_end":81,"column_start":1,"column_end":4}},{"value":"/ [`DynamicImage::from_decoder`]: enum.DynamicImage.html#method.from_decoder","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src/lib.rs","byte_start":3181,"byte_end":3259,"line_start":82,"line_end":82,"column_start":1,"column_end":79}},{"value":"/ [`ImageDecoderExt`]: trait.ImageDecoderExt.html","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src/lib.rs","byte_start":3260,"byte_end":3311,"line_start":83,"line_end":83,"column_start":1,"column_end":52}},{"value":"/ [`ImageDecoder`]: trait.ImageDecoder.html","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src/lib.rs","byte_start":3312,"byte_end":3357,"line_start":84,"line_end":84,"column_start":1,"column_end":46}},{"value":"/ [`ImageEncoder`]: trait.ImageEncoder.html","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src/lib.rs","byte_start":3358,"byte_end":3403,"line_start":85,"line_end":85,"column_start":1,"column_end":46}},{"value":"warn(missing_docs)","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src/lib.rs","byte_start":3404,"byte_end":3426,"line_start":86,"line_end":86,"column_start":1,"column_end":23}},{"value":"warn(unused_qualifications)","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src/lib.rs","byte_start":3427,"byte_end":3458,"line_start":87,"line_end":87,"column_start":1,"column_end":32}},{"value":"deny(unreachable_pub)","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src/lib.rs","byte_start":3459,"byte_end":3484,"line_start":88,"line_end":88,"column_start":1,"column_end":26}},{"value":"deny(deprecated)","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src/lib.rs","byte_start":3485,"byte_end":3505,"line_start":89,"line_end":89,"column_start":1,"column_end":21}},{"value":"deny(missing_copy_implementations)","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src/lib.rs","byte_start":3506,"byte_end":3544,"line_start":90,"line_end":90,"column_start":1,"column_end":39}},{"value":"allow(clippy :: many_single_char_names)","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src/lib.rs","byte_start":3642,"byte_end":3683,"line_start":93,"line_end":93,"column_start":1,"column_end":42}}]},{"kind":"Mod","id":{"krate":0,"index":55},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\error.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"error","qualname":"::error","value":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\error.rs","parent":null,"children":[{"krate":0,"index":56},{"krate":0,"index":57},{"krate":0,"index":58},{"krate":0,"index":59},{"krate":0,"index":60},{"krate":0,"index":61},{"krate":0,"index":62},{"krate":0,"index":2133},{"krate":0,"index":2152},{"krate":0,"index":2154},{"krate":0,"index":2157},{"krate":0,"index":2159},{"krate":0,"index":2181},{"krate":0,"index":2179},{"krate":0,"index":2176},{"krate":0,"index":2172},{"krate":0,"index":2173},{"krate":0,"index":2183},{"krate":0,"index":2186},{"krate":0,"index":2188},{"krate":0,"index":2191},{"krate":0,"index":2193},{"krate":0,"index":2215},{"krate":0,"index":2213},{"krate":0,"index":2210},{"krate":0,"index":2206},{"krate":0,"index":2207},{"krate":0,"index":2217},{"krate":0,"index":2220},{"krate":0,"index":2222},{"krate":0,"index":2224},{"krate":0,"index":2226},{"krate":0,"index":2246},{"krate":0,"index":2244},{"krate":0,"index":2241},{"krate":0,"index":2237},{"krate":0,"index":2238},{"krate":0,"index":2234},{"krate":0,"index":2235},{"krate":0,"index":2248},{"krate":0,"index":2272},{"krate":0,"index":2270},{"krate":0,"index":2267},{"krate":0,"index":2263},{"krate":0,"index":2264},{"krate":0,"index":63},{"krate":0,"index":67},{"krate":0,"index":72},{"krate":0,"index":77},{"krate":0,"index":80},{"krate":0,"index":83},{"krate":0,"index":85},{"krate":0,"index":87},{"krate":0,"index":89},{"krate":0,"index":91},{"krate":0,"index":93},{"krate":0,"index":95},{"krate":0,"index":97},{"krate":0,"index":99},{"krate":0,"index":100},{"krate":0,"index":102},{"krate":0,"index":104},{"krate":0,"index":106},{"krate":0,"index":108},{"krate":0,"index":110},{"krate":0,"index":112},{"krate":0,"index":114},{"krate":0,"index":115}],"decl_id":null,"docs":" Contains detailed error representation.","sig":null,"attributes":[{"value":"/ Contains detailed error representation.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\error.rs","byte_start":12693,"byte_end":12736,"line_start":1,"line_end":1,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\error.rs","byte_start":12737,"byte_end":12740,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ See the main [`ImageError`] which contains a variant for each specialized error type. The","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\error.rs","byte_start":12741,"byte_end":12834,"line_start":3,"line_end":3,"column_start":1,"column_end":94}},{"value":"/ subtypes used in each variant are opaque by design. They can be roughly inspected through their","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\error.rs","byte_start":12835,"byte_end":12934,"line_start":4,"line_end":4,"column_start":1,"column_end":100}},{"value":"/ respective `kind` methods which work similar to `std::io::Error::kind`.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\error.rs","byte_start":12935,"byte_end":13010,"line_start":5,"line_end":5,"column_start":1,"column_end":76}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\error.rs","byte_start":13011,"byte_end":13014,"line_start":6,"line_end":6,"column_start":1,"column_end":4}},{"value":"/ The error interface makes it possible to inspect the error of an underlying decoder or encoder,","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\error.rs","byte_start":13015,"byte_end":13114,"line_start":7,"line_end":7,"column_start":1,"column_end":100}},{"value":"/ through the `Error::source` method. Note that this is not part of the stable interface and you","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\error.rs","byte_start":13115,"byte_end":13213,"line_start":8,"line_end":8,"column_start":1,"column_end":99}},{"value":"/ may not rely on a particular error value for a particular operation. This means mainly that","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\error.rs","byte_start":13214,"byte_end":13309,"line_start":9,"line_end":9,"column_start":1,"column_end":96}},{"value":"/ `image` does not promise to remain on a particular version of its underlying decoders but if","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\error.rs","byte_start":13310,"byte_end":13406,"line_start":10,"line_end":10,"column_start":1,"column_end":97}},{"value":"/ you ensure to use the same version of the dependency (or at least of the error type) through","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\error.rs","byte_start":13407,"byte_end":13503,"line_start":11,"line_end":11,"column_start":1,"column_end":97}},{"value":"/ external means then you could inspect the error type in slightly more detail.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\error.rs","byte_start":13504,"byte_end":13585,"line_start":12,"line_end":12,"column_start":1,"column_end":82}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\error.rs","byte_start":13586,"byte_end":13589,"line_start":13,"line_end":13,"column_start":1,"column_end":4}},{"value":"/ [`ImageError`]: enum.ImageError.html","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\error.rs","byte_start":13590,"byte_end":13630,"line_start":14,"line_end":14,"column_start":1,"column_end":41}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2134},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\error.rs","byte_start":14342,"byte_end":14350,"line_start":34,"line_end":34,"column_start":5,"column_end":13},"name":"Decoding","qualname":"::error::ImageError::Decoding","value":"ImageError::Decoding(DecodingError)","parent":{"krate":0,"index":2133},"children":[],"decl_id":null,"docs":" An error was encountered while decoding.","sig":null,"attributes":[{"value":"/ An error was encountered while decoding.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\error.rs","byte_start":14059,"byte_end":14103,"line_start":29,"line_end":29,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\error.rs","byte_start":14108,"byte_end":14111,"line_start":30,"line_end":30,"column_start":5,"column_end":8}},{"value":"/ This means that the input data did not conform to the specification of some image format,","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\error.rs","byte_start":14116,"byte_end":14209,"line_start":31,"line_end":31,"column_start":5,"column_end":98}},{"value":"/ or that no format could be determined, or that it did not match format specific","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\error.rs","byte_start":14214,"byte_end":14297,"line_start":32,"line_end":32,"column_start":5,"column_end":88}},{"value":"/ requirements set by the caller.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\error.rs","byte_start":14302,"byte_end":14337,"line_start":33,"line_end":33,"column_start":5,"column_end":40}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2137},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\error.rs","byte_start":14736,"byte_end":14744,"line_start":42,"line_end":42,"column_start":5,"column_end":13},"name":"Encoding","qualname":"::error::ImageError::Encoding","value":"ImageError::Encoding(EncodingError)","parent":{"krate":0,"index":2133},"children":[],"decl_id":null,"docs":" An error was encountered while encoding.","sig":null,"attributes":[{"value":"/ An error was encountered while encoding.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\error.rs","byte_start":14372,"byte_end":14416,"line_start":36,"line_end":36,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\error.rs","byte_start":14421,"byte_end":14424,"line_start":37,"line_end":37,"column_start":5,"column_end":8}},{"value":"/ The input image can not be encoded with the chosen format, for example because the","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\error.rs","byte_start":14429,"byte_end":14515,"line_start":38,"line_end":38,"column_start":5,"column_end":91}},{"value":"/ specification has no representation for its color space or because a necessary conversion","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\error.rs","byte_start":14520,"byte_end":14613,"line_start":39,"line_end":39,"column_start":5,"column_end":98}},{"value":"/ is ambiguous. In some cases it might also happen that the dimensions can not be used with","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\error.rs","byte_start":14618,"byte_end":14711,"line_start":40,"line_end":40,"column_start":5,"column_end":98}},{"value":"/ the format.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\error.rs","byte_start":14716,"byte_end":14731,"line_start":41,"line_end":41,"column_start":5,"column_end":20}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2140},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\error.rs","byte_start":14984,"byte_end":14993,"line_start":48,"line_end":48,"column_start":5,"column_end":14},"name":"Parameter","qualname":"::error::ImageError::Parameter","value":"ImageError::Parameter(ParameterError)","parent":{"krate":0,"index":2133},"children":[],"decl_id":null,"docs":" An error was encountered in input arguments.","sig":null,"attributes":[{"value":"/ An error was encountered in input arguments.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\error.rs","byte_start":14766,"byte_end":14814,"line_start":44,"line_end":44,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\error.rs","byte_start":14819,"byte_end":14822,"line_start":45,"line_end":45,"column_start":5,"column_end":8}},{"value":"/ This is a catch-all case for strictly internal operations such as scaling, conversions,","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\error.rs","byte_start":14827,"byte_end":14918,"line_start":46,"line_end":46,"column_start":5,"column_end":96}},{"value":"/ etc. that involve no external format specifications.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\error.rs","byte_start":14923,"byte_end":14979,"line_start":47,"line_end":47,"column_start":5,"column_end":61}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2143},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\error.rs","byte_start":15253,"byte_end":15259,"line_start":54,"line_end":54,"column_start":5,"column_end":11},"name":"Limits","qualname":"::error::ImageError::Limits","value":"ImageError::Limits(LimitError)","parent":{"krate":0,"index":2133},"children":[],"decl_id":null,"docs":" Completing the operation would have required more resources than allowed.","sig":null,"attributes":[{"value":"/ Completing the operation would have required more resources than allowed.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\error.rs","byte_start":15016,"byte_end":15093,"line_start":50,"line_end":50,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\error.rs","byte_start":15098,"byte_end":15101,"line_start":51,"line_end":51,"column_start":5,"column_end":8}},{"value":"/ Errors of this type are limits set by the user or environment, *not* inherent in a specific","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\error.rs","byte_start":15106,"byte_end":15201,"line_start":52,"line_end":52,"column_start":5,"column_end":100}},{"value":"/ format or operation that was executed.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\error.rs","byte_start":15206,"byte_end":15248,"line_start":53,"line_end":53,"column_start":5,"column_end":47}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2146},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\error.rs","byte_start":15597,"byte_end":15608,"line_start":62,"line_end":62,"column_start":5,"column_end":16},"name":"Unsupported","qualname":"::error::ImageError::Unsupported","value":"ImageError::Unsupported(UnsupportedError)","parent":{"krate":0,"index":2133},"children":[],"decl_id":null,"docs":" An operation can not be completed by the chosen abstraction.","sig":null,"attributes":[{"value":"/ An operation can not be completed by the chosen abstraction.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\error.rs","byte_start":15278,"byte_end":15342,"line_start":56,"line_end":56,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\error.rs","byte_start":15347,"byte_end":15350,"line_start":57,"line_end":57,"column_start":5,"column_end":8}},{"value":"/ This means that it might be possible for the operation to succeed in general but","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\error.rs","byte_start":15355,"byte_end":15439,"line_start":58,"line_end":58,"column_start":5,"column_end":89}},{"value":"/ * it requires a disabled feature,","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\error.rs","byte_start":15444,"byte_end":15481,"line_start":59,"line_end":59,"column_start":5,"column_end":42}},{"value":"/ * the implementation does not yet exist, or","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\error.rs","byte_start":15486,"byte_end":15533,"line_start":60,"line_end":60,"column_start":5,"column_end":52}},{"value":"/ * no abstraction for a lower level could be found.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\error.rs","byte_start":15538,"byte_end":15592,"line_start":61,"line_end":61,"column_start":5,"column_end":59}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2149},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\error.rs","byte_start":15699,"byte_end":15706,"line_start":65,"line_end":65,"column_start":5,"column_end":12},"name":"IoError","qualname":"::error::ImageError::IoError","value":"ImageError::IoError(io::Error)","parent":{"krate":0,"index":2133},"children":[],"decl_id":null,"docs":" An error occurred while interacting with the environment.\n","sig":null,"attributes":[{"value":"/ An error occurred while interacting with the environment.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\error.rs","byte_start":15633,"byte_end":15694,"line_start":64,"line_end":64,"column_start":5,"column_end":66}}]},{"kind":"Enum","id":{"krate":0,"index":2133},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\error.rs","byte_start":14042,"byte_end":14052,"line_start":28,"line_end":28,"column_start":10,"column_end":20},"name":"ImageError","qualname":"::error::ImageError","value":"pub enum ImageError {\n\n    /// An error was encountered while decoding.\n    ///\n    /// This means that the input data did not conform to the specification of some image format,\n    /// or that no format could be determined, or that it did not match format specific\n    /// requirements set by the caller.\n    Decoding(DecodingError),\n\n    /// An error was encountered while encoding.\n    ///\n    /// The input image can not be encoded with the chosen format, for example because the\n    /// specification has no representation for its color space or because a necessary conversion\n    /// is ambiguous. In some cases it might also happen that the dimensions can not be used with\n    /// the format.\n    Encoding(EncodingError),\n\n    /// An error was encountered in input arguments.\n    ///\n    /// This is a catch-all case for strictly internal operations such as scaling, conversions,\n    /// etc. that involve no external format specifications.\n    Parameter(ParameterError),\n\n    /// Completing the operation would have required more resources than allowed.\n    ///\n    /// Errors of this type are limits set by the user or environment, *not* inherent in a specific\n    /// format or operation that was executed.\n    Limits(LimitError),\n\n    /// An operation can not be completed by the chosen abstraction.\n    ///\n    /// This means that it might be possible for the operation to succeed in general but\n    /// * it requires a disabled feature,\n    /// * the implementation does not yet exist, or\n    /// * no abstraction for a lower level could be found.\n    Unsupported(UnsupportedError),\n\n    /// An error occurred while interacting with the environment.\n    IoError(io::Error),\n}","parent":null,"children":[{"krate":0,"index":2134},{"krate":0,"index":2137},{"krate":0,"index":2140},{"krate":0,"index":2143},{"krate":0,"index":2146},{"krate":0,"index":2149}],"decl_id":null,"docs":" The generic error type for image operations.","sig":null,"attributes":[{"value":"/ The generic error type for image operations.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\error.rs","byte_start":13784,"byte_end":13832,"line_start":23,"line_end":23,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\error.rs","byte_start":13833,"byte_end":13836,"line_start":24,"line_end":24,"column_start":1,"column_end":4}},{"value":"/ This high level enum allows, by variant matching, a rough separation of concerns between","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\error.rs","byte_start":13837,"byte_end":13929,"line_start":25,"line_end":25,"column_start":1,"column_end":93}},{"value":"/ underlying IO, the caller, format specifications, and the `image` implementation.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\error.rs","byte_start":13930,"byte_end":14015,"line_start":26,"line_end":26,"column_start":1,"column_end":86}}]},{"kind":"Struct","id":{"krate":0,"index":2154},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\error.rs","byte_start":15938,"byte_end":15954,"line_start":74,"line_end":74,"column_start":12,"column_end":28},"name":"UnsupportedError","qualname":"::error::UnsupportedError","value":"UnsupportedError {  }","parent":null,"children":[{"krate":0,"index":2155},{"krate":0,"index":2156}],"decl_id":null,"docs":" The implementation for an operation was not provided.","sig":null,"attributes":[{"value":"/ The implementation for an operation was not provided.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\error.rs","byte_start":15722,"byte_end":15779,"line_start":68,"line_end":68,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\error.rs","byte_start":15780,"byte_end":15783,"line_start":69,"line_end":69,"column_start":1,"column_end":4}},{"value":"/ See the variant [`Unsupported`] for more documentation.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\error.rs","byte_start":15784,"byte_end":15843,"line_start":70,"line_end":70,"column_start":1,"column_end":60}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\error.rs","byte_start":15844,"byte_end":15847,"line_start":71,"line_end":71,"column_start":1,"column_end":4}},{"value":"/ [`Unsupported`]: enum.ImageError.html#variant.Unsupported","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\error.rs","byte_start":15848,"byte_end":15909,"line_start":72,"line_end":72,"column_start":1,"column_end":62}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2160},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\error.rs","byte_start":16193,"byte_end":16198,"line_start":83,"line_end":83,"column_start":5,"column_end":10},"name":"Color","qualname":"::error::UnsupportedErrorKind::Color","value":"UnsupportedErrorKind::Color(ExtendedColorType)","parent":{"krate":0,"index":2159},"children":[],"decl_id":null,"docs":" The required color type can not be handled.\n","sig":null,"attributes":[{"value":"/ The required color type can not be handled.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\error.rs","byte_start":16141,"byte_end":16188,"line_start":82,"line_end":82,"column_start":5,"column_end":52}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2163},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\error.rs","byte_start":16265,"byte_end":16271,"line_start":85,"line_end":85,"column_start":5,"column_end":11},"name":"Format","qualname":"::error::UnsupportedErrorKind::Format","value":"UnsupportedErrorKind::Format(ImageFormatHint)","parent":{"krate":0,"index":2159},"children":[],"decl_id":null,"docs":" An image format is not supported.\n","sig":null,"attributes":[{"value":"/ An image format is not supported.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\error.rs","byte_start":16223,"byte_end":16260,"line_start":84,"line_end":84,"column_start":5,"column_end":42}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2166},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\error.rs","byte_start":16415,"byte_end":16429,"line_start":88,"line_end":88,"column_start":5,"column_end":19},"name":"GenericFeature","qualname":"::error::UnsupportedErrorKind::GenericFeature","value":"UnsupportedErrorKind::GenericFeature(String)","parent":{"krate":0,"index":2159},"children":[],"decl_id":null,"docs":" Some feature specified by string.\n This is discouraged and is likely to get deprecated (but not removed).\n","sig":null,"attributes":[{"value":"/ Some feature specified by string.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\error.rs","byte_start":16294,"byte_end":16331,"line_start":86,"line_end":86,"column_start":5,"column_end":42}},{"value":"/ This is discouraged and is likely to get deprecated (but not removed).","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\error.rs","byte_start":16336,"byte_end":16410,"line_start":87,"line_end":87,"column_start":5,"column_end":79}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2169},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\error.rs","byte_start":16462,"byte_end":16477,"line_start":90,"line_end":90,"column_start":5,"column_end":20},"name":"__NonExhaustive","qualname":"::error::UnsupportedErrorKind::__NonExhaustive","value":"UnsupportedErrorKind::__NonExhaustive(NonExhaustiveMarker)","parent":{"krate":0,"index":2159},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":2159},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\error.rs","byte_start":16114,"byte_end":16134,"line_start":81,"line_end":81,"column_start":10,"column_end":30},"name":"UnsupportedErrorKind","qualname":"::error::UnsupportedErrorKind","value":"pub enum UnsupportedErrorKind {\n\n    /// The required color type can not be handled.\n    Color(ExtendedColorType),\n\n    /// An image format is not supported.\n    Format(ImageFormatHint),\n\n    /// Some feature specified by string.\n    /// This is discouraged and is likely to get deprecated (but not removed).\n    GenericFeature(String),\n\n    #[doc(hidden)]\n    __NonExhaustive(NonExhaustiveMarker),\n}","parent":null,"children":[{"krate":0,"index":2160},{"krate":0,"index":2163},{"krate":0,"index":2166},{"krate":0,"index":2169}],"decl_id":null,"docs":" Details what feature is not supported.\n","sig":null,"attributes":[{"value":"/ Details what feature is not supported.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\error.rs","byte_start":16021,"byte_end":16063,"line_start":79,"line_end":79,"column_start":1,"column_end":43}}]},{"kind":"Struct","id":{"krate":0,"index":2183},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\error.rs","byte_start":16796,"byte_end":16809,"line_start":100,"line_end":100,"column_start":12,"column_end":25},"name":"EncodingError","qualname":"::error::EncodingError","value":"EncodingError {  }","parent":null,"children":[{"krate":0,"index":2184},{"krate":0,"index":2185}],"decl_id":null,"docs":" An error was encountered while encoding an image.","sig":null,"attributes":[{"value":"/ An error was encountered while encoding an image.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\error.rs","byte_start":16503,"byte_end":16556,"line_start":93,"line_end":93,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\error.rs","byte_start":16557,"byte_end":16560,"line_start":94,"line_end":94,"column_start":1,"column_end":4}},{"value":"/ This is used as an opaque representation for the [`ImageError::Encoding`] variant. See its","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\error.rs","byte_start":16561,"byte_end":16655,"line_start":95,"line_end":95,"column_start":1,"column_end":95}},{"value":"/ documentation for more information.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\error.rs","byte_start":16656,"byte_end":16695,"line_start":96,"line_end":96,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\error.rs","byte_start":16696,"byte_end":16699,"line_start":97,"line_end":97,"column_start":1,"column_end":4}},{"value":"/ [`ImageError::Encoding`]: enum.ImageError.html#variant.Encoding","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\error.rs","byte_start":16700,"byte_end":16767,"line_start":98,"line_end":98,"column_start":1,"column_end":68}}]},{"kind":"Struct","id":{"krate":0,"index":2188},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\error.rs","byte_start":17191,"byte_end":17205,"line_start":113,"line_end":113,"column_start":12,"column_end":26},"name":"ParameterError","qualname":"::error::ParameterError","value":"ParameterError {  }","parent":null,"children":[{"krate":0,"index":2189},{"krate":0,"index":2190}],"decl_id":null,"docs":" An error was encountered in inputs arguments.","sig":null,"attributes":[{"value":"/ An error was encountered in inputs arguments.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\error.rs","byte_start":16899,"byte_end":16948,"line_start":106,"line_end":106,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\error.rs","byte_start":16949,"byte_end":16952,"line_start":107,"line_end":107,"column_start":1,"column_end":4}},{"value":"/ This is used as an opaque representation for the [`ImageError::Parameter`] variant. See its","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\error.rs","byte_start":16953,"byte_end":17048,"line_start":108,"line_end":108,"column_start":1,"column_end":96}},{"value":"/ documentation for more information.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\error.rs","byte_start":17049,"byte_end":17088,"line_start":109,"line_end":109,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\error.rs","byte_start":17089,"byte_end":17092,"line_start":110,"line_end":110,"column_start":1,"column_end":4}},{"value":"/ [`ImageError::Parameter`]: enum.ImageError.html#variant.Parameter","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\error.rs","byte_start":17093,"byte_end":17162,"line_start":111,"line_end":111,"column_start":1,"column_end":70}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2194},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\error.rs","byte_start":17453,"byte_end":17470,"line_start":122,"line_end":122,"column_start":5,"column_end":22},"name":"DimensionMismatch","qualname":"::error::ParameterErrorKind::DimensionMismatch","value":"ParameterErrorKind::DimensionMismatch","parent":{"krate":0,"index":2193},"children":[],"decl_id":null,"docs":" The dimensions passed are wrong.\n","sig":null,"attributes":[{"value":"/ The dimensions passed are wrong.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\error.rs","byte_start":17412,"byte_end":17448,"line_start":121,"line_end":121,"column_start":5,"column_end":41}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2196},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\error.rs","byte_start":17568,"byte_end":17581,"line_start":124,"line_end":124,"column_start":5,"column_end":18},"name":"FailedAlready","qualname":"::error::ParameterErrorKind::FailedAlready","value":"ParameterErrorKind::FailedAlready","parent":{"krate":0,"index":2193},"children":[],"decl_id":null,"docs":" Repeated an operation for which error that could not be cloned was emitted already.\n","sig":null,"attributes":[{"value":"/ Repeated an operation for which error that could not be cloned was emitted already.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\error.rs","byte_start":17476,"byte_end":17563,"line_start":123,"line_end":123,"column_start":5,"column_end":92}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2198},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\error.rs","byte_start":17709,"byte_end":17716,"line_start":127,"line_end":127,"column_start":5,"column_end":12},"name":"Generic","qualname":"::error::ParameterErrorKind::Generic","value":"ParameterErrorKind::Generic(String)","parent":{"krate":0,"index":2193},"children":[],"decl_id":null,"docs":" A string describing the parameter.\n This is discouraged and is likely to get deprecated (but not removed).\n","sig":null,"attributes":[{"value":"/ A string describing the parameter.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\error.rs","byte_start":17587,"byte_end":17625,"line_start":125,"line_end":125,"column_start":5,"column_end":43}},{"value":"/ This is discouraged and is likely to get deprecated (but not removed).","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\error.rs","byte_start":17630,"byte_end":17704,"line_start":126,"line_end":126,"column_start":5,"column_end":79}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2201},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\error.rs","byte_start":17777,"byte_end":17787,"line_start":129,"line_end":129,"column_start":5,"column_end":15},"name":"NoMoreData","qualname":"::error::ParameterErrorKind::NoMoreData","value":"ParameterErrorKind::NoMoreData","parent":{"krate":0,"index":2193},"children":[],"decl_id":null,"docs":" The end of the image has been reached.\n","sig":null,"attributes":[{"value":"/ The end of the image has been reached.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\error.rs","byte_start":17730,"byte_end":17772,"line_start":128,"line_end":128,"column_start":5,"column_end":47}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2203},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\error.rs","byte_start":17871,"byte_end":17886,"line_start":132,"line_end":132,"column_start":5,"column_end":20},"name":"__NonExhaustive","qualname":"::error::ParameterErrorKind::__NonExhaustive","value":"ParameterErrorKind::__NonExhaustive(NonExhaustiveMarker)","parent":{"krate":0,"index":2193},"children":[],"decl_id":null,"docs":" Do not use this, not part of stability guarantees.\n","sig":null,"attributes":[{"value":"/ Do not use this, not part of stability guarantees.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\error.rs","byte_start":17812,"byte_end":17866,"line_start":131,"line_end":131,"column_start":5,"column_end":59}}]},{"kind":"Enum","id":{"krate":0,"index":2193},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\error.rs","byte_start":17387,"byte_end":17405,"line_start":120,"line_end":120,"column_start":10,"column_end":28},"name":"ParameterErrorKind","qualname":"::error::ParameterErrorKind","value":"pub enum ParameterErrorKind {\n\n    /// The dimensions passed are wrong.\n    DimensionMismatch,\n\n    /// Repeated an operation for which error that could not be cloned was emitted already.\n    FailedAlready,\n\n    /// A string describing the parameter.\n    /// This is discouraged and is likely to get deprecated (but not removed).\n    Generic(String),\n\n    /// The end of the image has been reached.\n    NoMoreData,\n\n    #[doc(hidden)]\n    /// Do not use this, not part of stability guarantees.\n    __NonExhaustive(NonExhaustiveMarker),\n}","parent":null,"children":[{"krate":0,"index":2194},{"krate":0,"index":2196},{"krate":0,"index":2198},{"krate":0,"index":2201},{"krate":0,"index":2203}],"decl_id":null,"docs":" Details how a parameter is malformed.\n","sig":null,"attributes":[{"value":"/ Details how a parameter is malformed.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\error.rs","byte_start":17295,"byte_end":17336,"line_start":118,"line_end":118,"column_start":1,"column_end":42}}]},{"kind":"Struct","id":{"krate":0,"index":2217},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\error.rs","byte_start":18205,"byte_end":18218,"line_start":142,"line_end":142,"column_start":12,"column_end":25},"name":"DecodingError","qualname":"::error::DecodingError","value":"DecodingError {  }","parent":null,"children":[{"krate":0,"index":2218},{"krate":0,"index":2219}],"decl_id":null,"docs":" An error was encountered while decoding an image.","sig":null,"attributes":[{"value":"/ An error was encountered while decoding an image.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\error.rs","byte_start":17912,"byte_end":17965,"line_start":135,"line_end":135,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\error.rs","byte_start":17966,"byte_end":17969,"line_start":136,"line_end":136,"column_start":1,"column_end":4}},{"value":"/ This is used as an opaque representation for the [`ImageError::Decoding`] variant. See its","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\error.rs","byte_start":17970,"byte_end":18064,"line_start":137,"line_end":137,"column_start":1,"column_end":95}},{"value":"/ documentation for more information.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\error.rs","byte_start":18065,"byte_end":18104,"line_start":138,"line_end":138,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\error.rs","byte_start":18105,"byte_end":18108,"line_start":139,"line_end":139,"column_start":1,"column_end":4}},{"value":"/ [`ImageError::Decoding`]: enum.ImageError.html#variant.Decoding","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\error.rs","byte_start":18109,"byte_end":18176,"line_start":140,"line_end":140,"column_start":1,"column_end":68}}]},{"kind":"Struct","id":{"krate":0,"index":2222},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\error.rs","byte_start":18618,"byte_end":18628,"line_start":154,"line_end":154,"column_start":12,"column_end":22},"name":"LimitError","qualname":"::error::LimitError","value":"LimitError {  }","parent":null,"children":[{"krate":0,"index":2223}],"decl_id":null,"docs":" Completing the operation would have required more resources than allowed.","sig":null,"attributes":[{"value":"/ Completing the operation would have required more resources than allowed.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\error.rs","byte_start":18307,"byte_end":18384,"line_start":147,"line_end":147,"column_start":1,"column_end":78}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\error.rs","byte_start":18385,"byte_end":18388,"line_start":148,"line_end":148,"column_start":1,"column_end":4}},{"value":"/ This is used as an opaque representation for the [`ImageError::Limits`] variant. See its","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\error.rs","byte_start":18389,"byte_end":18481,"line_start":149,"line_end":149,"column_start":1,"column_end":93}},{"value":"/ documentation for more information.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\error.rs","byte_start":18482,"byte_end":18521,"line_start":150,"line_end":150,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\error.rs","byte_start":18522,"byte_end":18525,"line_start":151,"line_end":151,"column_start":1,"column_end":4}},{"value":"/ [`ImageError::Limits`]: enum.ImageError.html#variant.Limits","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\error.rs","byte_start":18526,"byte_end":18589,"line_start":152,"line_end":152,"column_start":1,"column_end":64}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2227},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\error.rs","byte_start":19160,"byte_end":19174,"line_start":167,"line_end":167,"column_start":5,"column_end":19},"name":"DimensionError","qualname":"::error::LimitErrorKind::DimensionError","value":"LimitErrorKind::DimensionError","parent":{"krate":0,"index":2226},"children":[],"decl_id":null,"docs":" The resulting image exceed dimension limits in either direction.\n","sig":null,"attributes":[{"value":"/ The resulting image exceed dimension limits in either direction.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\error.rs","byte_start":19087,"byte_end":19155,"line_start":166,"line_end":166,"column_start":5,"column_end":73}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2229},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\error.rs","byte_start":19258,"byte_end":19276,"line_start":169,"line_end":169,"column_start":5,"column_end":23},"name":"InsufficientMemory","qualname":"::error::LimitErrorKind::InsufficientMemory","value":"LimitErrorKind::InsufficientMemory","parent":{"krate":0,"index":2226},"children":[],"decl_id":null,"docs":" The operation would have performed an allocation larger than allowed.\n","sig":null,"attributes":[{"value":"/ The operation would have performed an allocation larger than allowed.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\error.rs","byte_start":19180,"byte_end":19253,"line_start":168,"line_end":168,"column_start":5,"column_end":78}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2231},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\error.rs","byte_start":19360,"byte_end":19375,"line_start":172,"line_end":172,"column_start":5,"column_end":20},"name":"__NonExhaustive","qualname":"::error::LimitErrorKind::__NonExhaustive","value":"LimitErrorKind::__NonExhaustive(NonExhaustiveMarker)","parent":{"krate":0,"index":2226},"children":[],"decl_id":null,"docs":" Do not use this, not part of stability guarantees.\n","sig":null,"attributes":[{"value":"/ Do not use this, not part of stability guarantees.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\error.rs","byte_start":19301,"byte_end":19355,"line_start":171,"line_end":171,"column_start":5,"column_end":59}}]},{"kind":"Enum","id":{"krate":0,"index":2226},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\error.rs","byte_start":19066,"byte_end":19080,"line_start":165,"line_end":165,"column_start":10,"column_end":24},"name":"LimitErrorKind","qualname":"::error::LimitErrorKind","value":"pub enum LimitErrorKind {\n\n    /// The resulting image exceed dimension limits in either direction.\n    DimensionError,\n\n    /// The operation would have performed an allocation larger than allowed.\n    InsufficientMemory,\n\n    #[doc(hidden)]\n    /// Do not use this, not part of stability guarantees.\n    __NonExhaustive(NonExhaustiveMarker),\n}","parent":null,"children":[{"krate":0,"index":2227},{"krate":0,"index":2229},{"krate":0,"index":2231}],"decl_id":null,"docs":" Indicates the limit that prevented an operation from completing.","sig":null,"attributes":[{"value":"/ Indicates the limit that prevented an operation from completing.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\error.rs","byte_start":18699,"byte_end":18767,"line_start":159,"line_end":159,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\error.rs","byte_start":18768,"byte_end":18771,"line_start":160,"line_end":160,"column_start":1,"column_end":4}},{"value":"/ Note that this enumeration is not exhaustive and may in the future be extended to provide more","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\error.rs","byte_start":18772,"byte_end":18870,"line_start":161,"line_end":161,"column_start":1,"column_end":99}},{"value":"/ detailed information or to incorporate other resources types.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\error.rs","byte_start":18871,"byte_end":18936,"line_start":162,"line_end":162,"column_start":1,"column_end":66}},{"value":"allow(missing_copy_implementations)","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\error.rs","byte_start":18982,"byte_end":19020,"line_start":164,"line_end":164,"column_start":1,"column_end":39}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2249},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\error.rs","byte_start":19562,"byte_end":19567,"line_start":179,"line_end":179,"column_start":5,"column_end":10},"name":"Exact","qualname":"::error::ImageFormatHint::Exact","value":"ImageFormatHint::Exact(ImageFormat)","parent":{"krate":0,"index":2248},"children":[],"decl_id":null,"docs":" The format is known exactly.\n","sig":null,"attributes":[{"value":"/ The format is known exactly.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\error.rs","byte_start":19525,"byte_end":19557,"line_start":178,"line_end":178,"column_start":5,"column_end":37}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2252},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\error.rs","byte_start":19635,"byte_end":19639,"line_start":182,"line_end":182,"column_start":5,"column_end":9},"name":"Name","qualname":"::error::ImageFormatHint::Name","value":"ImageFormatHint::Name(String)","parent":{"krate":0,"index":2248},"children":[],"decl_id":null,"docs":" The format can be identified by a name.\n","sig":null,"attributes":[{"value":"/ The format can be identified by a name.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\error.rs","byte_start":19587,"byte_end":19630,"line_start":181,"line_end":181,"column_start":5,"column_end":48}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2255},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\error.rs","byte_start":19711,"byte_end":19724,"line_start":185,"line_end":185,"column_start":5,"column_end":18},"name":"PathExtension","qualname":"::error::ImageFormatHint::PathExtension","value":"ImageFormatHint::PathExtension(std::path::PathBuf)","parent":{"krate":0,"index":2248},"children":[],"decl_id":null,"docs":" A common path extension for the format is known.\n","sig":null,"attributes":[{"value":"/ A common path extension for the format is known.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\error.rs","byte_start":19654,"byte_end":19706,"line_start":184,"line_end":184,"column_start":5,"column_end":57}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2258},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\error.rs","byte_start":19811,"byte_end":19818,"line_start":188,"line_end":188,"column_start":5,"column_end":12},"name":"Unknown","qualname":"::error::ImageFormatHint::Unknown","value":"ImageFormatHint::Unknown","parent":{"krate":0,"index":2248},"children":[],"decl_id":null,"docs":" The format is not known or could not be determined.\n","sig":null,"attributes":[{"value":"/ The format is not known or could not be determined.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\error.rs","byte_start":19751,"byte_end":19806,"line_start":187,"line_end":187,"column_start":5,"column_end":60}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2260},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\error.rs","byte_start":19844,"byte_end":19859,"line_start":191,"line_end":191,"column_start":5,"column_end":20},"name":"__NonExhaustive","qualname":"::error::ImageFormatHint::__NonExhaustive","value":"ImageFormatHint::__NonExhaustive(NonExhaustiveMarker)","parent":{"krate":0,"index":2248},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":2248},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\error.rs","byte_start":19503,"byte_end":19518,"line_start":177,"line_end":177,"column_start":10,"column_end":25},"name":"ImageFormatHint","qualname":"::error::ImageFormatHint","value":"pub enum ImageFormatHint {\n\n    /// The format is known exactly.\n    Exact(ImageFormat),\n\n    /// The format can be identified by a name.\n    Name(String),\n\n    /// A common path extension for the format is known.\n    PathExtension(std::path::PathBuf),\n\n    /// The format is not known or could not be determined.\n    Unknown,\n\n    #[doc(hidden)]\n    __NonExhaustive(NonExhaustiveMarker),\n}","parent":null,"children":[{"krate":0,"index":2249},{"krate":0,"index":2252},{"krate":0,"index":2255},{"krate":0,"index":2258},{"krate":0,"index":2260}],"decl_id":null,"docs":" A best effort representation for image formats.\n","sig":null,"attributes":[{"value":"/ A best effort representation for image formats.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\error.rs","byte_start":19401,"byte_end":19452,"line_start":175,"line_end":175,"column_start":1,"column_end":52}}]},{"kind":"Method","id":{"krate":0,"index":64},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\error.rs","byte_start":20131,"byte_end":20151,"line_start":199,"line_end":199,"column_start":12,"column_end":32},"name":"from_format_and_kind","qualname":"<UnsupportedError>::from_format_and_kind","value":"pub fn from_format_and_kind(ImageFormatHint, UnsupportedErrorKind) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create an `UnsupportedError` for an image with details on the unsupported feature.","sig":null,"attributes":[{"value":"/ Create an `UnsupportedError` for an image with details on the unsupported feature.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\error.rs","byte_start":19913,"byte_end":19999,"line_start":195,"line_end":195,"column_start":5,"column_end":91}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\error.rs","byte_start":20004,"byte_end":20007,"line_start":196,"line_end":196,"column_start":5,"column_end":8}},{"value":"/ If the operation was not connected to a particular image format then the hint may be","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\error.rs","byte_start":20012,"byte_end":20100,"line_start":197,"line_end":197,"column_start":5,"column_end":93}},{"value":"/ `Unknown`.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\error.rs","byte_start":20105,"byte_end":20119,"line_start":198,"line_end":198,"column_start":5,"column_end":19}}]},{"kind":"Method","id":{"krate":0,"index":65},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\error.rs","byte_start":20379,"byte_end":20383,"line_start":207,"line_end":207,"column_start":12,"column_end":16},"name":"kind","qualname":"<UnsupportedError>::kind","value":"pub fn kind(&Self) -> UnsupportedErrorKind","parent":null,"children":[],"decl_id":null,"docs":" Returns the corresponding `UnsupportedErrorKind` of the error.\n","sig":null,"attributes":[{"value":"/ Returns the corresponding `UnsupportedErrorKind` of the error.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\error.rs","byte_start":20301,"byte_end":20367,"line_start":206,"line_end":206,"column_start":5,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":66},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\error.rs","byte_start":20522,"byte_end":20533,"line_start":212,"line_end":212,"column_start":12,"column_end":23},"name":"format_hint","qualname":"<UnsupportedError>::format_hint","value":"pub fn format_hint(&Self) -> ImageFormatHint","parent":null,"children":[],"decl_id":null,"docs":" Returns the image format associated with this error.\n","sig":null,"attributes":[{"value":"/ Returns the image format associated with this error.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\error.rs","byte_start":20454,"byte_end":20510,"line_start":211,"line_end":211,"column_start":5,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":68},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\error.rs","byte_start":20725,"byte_end":20728,"line_start":219,"line_end":219,"column_start":12,"column_end":15},"name":"new","qualname":"<DecodingError>::new","value":"pub fn new<impl Into<Box<dyn Error + Send + Sync>>: Into<Box<Error + Send +\n                                                             Sync>>>(ImageFormatHint,\n                                                                     impl Into<Box<dyn Error + Send + Sync>>)\n-> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a `DecodingError` that stems from an arbitrary error of an underlying decoder.\n","sig":null,"attributes":[{"value":"/ Create a `DecodingError` that stems from an arbitrary error of an underlying decoder.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\error.rs","byte_start":20624,"byte_end":20713,"line_start":218,"line_end":218,"column_start":5,"column_end":94}}]},{"kind":"Method","id":{"krate":0,"index":70},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\error.rs","byte_start":21096,"byte_end":21112,"line_start":232,"line_end":232,"column_start":12,"column_end":28},"name":"from_format_hint","qualname":"<DecodingError>::from_format_hint","value":"pub fn from_format_hint(ImageFormatHint) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a `DecodingError` for an image format.","sig":null,"attributes":[{"value":"/ Create a `DecodingError` for an image format.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\error.rs","byte_start":20940,"byte_end":20989,"line_start":229,"line_end":229,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\error.rs","byte_start":20994,"byte_end":20997,"line_start":230,"line_end":230,"column_start":5,"column_end":8}},{"value":"/ The error will not contain any further information but is very easy to create.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\error.rs","byte_start":21002,"byte_end":21084,"line_start":231,"line_end":231,"column_start":5,"column_end":87}}]},{"kind":"Method","id":{"krate":0,"index":71},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\error.rs","byte_start":21311,"byte_end":21322,"line_start":240,"line_end":240,"column_start":12,"column_end":23},"name":"format_hint","qualname":"<DecodingError>::format_hint","value":"pub fn format_hint(&Self) -> ImageFormatHint","parent":null,"children":[],"decl_id":null,"docs":" Returns the image format associated with this error.\n","sig":null,"attributes":[{"value":"/ Returns the image format associated with this error.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\error.rs","byte_start":21243,"byte_end":21299,"line_start":239,"line_end":239,"column_start":5,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":73},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\error.rs","byte_start":21515,"byte_end":21518,"line_start":247,"line_end":247,"column_start":12,"column_end":15},"name":"new","qualname":"<EncodingError>::new","value":"pub fn new<impl Into<Box<dyn Error + Send + Sync>>: Into<Box<Error + Send +\n                                                             Sync>>>(ImageFormatHint,\n                                                                     impl Into<Box<dyn Error + Send + Sync>>)\n-> Self","parent":null,"children":[],"decl_id":null,"docs":" Create an `EncodingError` that stems from an arbitrary error of an underlying encoder.\n","sig":null,"attributes":[{"value":"/ Create an `EncodingError` that stems from an arbitrary error of an underlying encoder.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\error.rs","byte_start":21413,"byte_end":21503,"line_start":246,"line_end":246,"column_start":5,"column_end":95}}]},{"kind":"Method","id":{"krate":0,"index":75},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\error.rs","byte_start":21887,"byte_end":21903,"line_start":260,"line_end":260,"column_start":12,"column_end":28},"name":"from_format_hint","qualname":"<EncodingError>::from_format_hint","value":"pub fn from_format_hint(ImageFormatHint) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create an `EncodingError` for an image format.","sig":null,"attributes":[{"value":"/ Create an `EncodingError` for an image format.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\error.rs","byte_start":21730,"byte_end":21780,"line_start":257,"line_end":257,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\error.rs","byte_start":21785,"byte_end":21788,"line_start":258,"line_end":258,"column_start":5,"column_end":8}},{"value":"/ The error will not contain any further information but is very easy to create.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\error.rs","byte_start":21793,"byte_end":21875,"line_start":259,"line_end":259,"column_start":5,"column_end":87}}]},{"kind":"Method","id":{"krate":0,"index":76},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\error.rs","byte_start":22101,"byte_end":22112,"line_start":268,"line_end":268,"column_start":12,"column_end":23},"name":"format_hint","qualname":"<EncodingError>::format_hint","value":"pub fn format_hint(&Self) -> ImageFormatHint","parent":null,"children":[],"decl_id":null,"docs":" Return the image format associated with this error.\n","sig":null,"attributes":[{"value":"/ Return the image format associated with this error.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\error.rs","byte_start":22034,"byte_end":22089,"line_start":267,"line_end":267,"column_start":5,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":78},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\error.rs","byte_start":22284,"byte_end":22293,"line_start":275,"line_end":275,"column_start":12,"column_end":21},"name":"from_kind","qualname":"<ParameterError>::from_kind","value":"pub fn from_kind(ParameterErrorKind) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Construct a `ParameterError` directly from a corresponding kind.\n","sig":null,"attributes":[{"value":"/ Construct a `ParameterError` directly from a corresponding kind.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\error.rs","byte_start":22204,"byte_end":22272,"line_start":274,"line_end":274,"column_start":5,"column_end":73}}]},{"kind":"Method","id":{"krate":0,"index":79},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\error.rs","byte_start":22500,"byte_end":22504,"line_start":283,"line_end":283,"column_start":12,"column_end":16},"name":"kind","qualname":"<ParameterError>::kind","value":"pub fn kind(&Self) -> ParameterErrorKind","parent":null,"children":[],"decl_id":null,"docs":" Returns the corresponding `ParameterErrorKind` of the error.\n","sig":null,"attributes":[{"value":"/ Returns the corresponding `ParameterErrorKind` of the error.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\error.rs","byte_start":22424,"byte_end":22488,"line_start":282,"line_end":282,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":81},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\error.rs","byte_start":22677,"byte_end":22686,"line_start":290,"line_end":290,"column_start":12,"column_end":21},"name":"from_kind","qualname":"<LimitError>::from_kind","value":"pub fn from_kind(LimitErrorKind) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Construct a generic `LimitError` directly from a corresponding kind.\n","sig":null,"attributes":[{"value":"/ Construct a generic `LimitError` directly from a corresponding kind.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\error.rs","byte_start":22593,"byte_end":22665,"line_start":289,"line_end":289,"column_start":5,"column_end":77}}]},{"kind":"Method","id":{"krate":0,"index":82},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\error.rs","byte_start":22851,"byte_end":22855,"line_start":297,"line_end":297,"column_start":12,"column_end":16},"name":"kind","qualname":"<LimitError>::kind","value":"pub fn kind(&Self) -> LimitErrorKind","parent":null,"children":[],"decl_id":null,"docs":" Returns the corresponding `LimitErrorKind` of the error.\n","sig":null,"attributes":[{"value":"/ Returns the corresponding `LimitErrorKind` of the error.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\error.rs","byte_start":22779,"byte_end":22839,"line_start":296,"line_end":296,"column_start":5,"column_end":65}}]},{"kind":"Type","id":{"krate":0,"index":91},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\error.rs","byte_start":23734,"byte_end":23745,"line_start":333,"line_end":333,"column_start":10,"column_end":21},"name":"ImageResult","qualname":"::error::ImageResult","value":"Result<T, ImageError>","parent":null,"children":[],"decl_id":null,"docs":" Result of an image decoding/encoding process\n","sig":null,"attributes":[{"value":"/ Result of an image decoding/encoding process","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\error.rs","byte_start":23676,"byte_end":23724,"line_start":332,"line_end":332,"column_start":1,"column_end":49}}]},{"kind":"Mod","id":{"krate":0,"index":117},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src/lib.rs","byte_start":5125,"byte_end":5131,"line_start":149,"line_end":149,"column_start":9,"column_end":15},"name":"buffer","qualname":"::buffer","value":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src/lib.rs","parent":null,"children":[{"krate":0,"index":118},{"krate":0,"index":119},{"krate":0,"index":120},{"krate":0,"index":121},{"krate":0,"index":122},{"krate":0,"index":123},{"krate":0,"index":124},{"krate":0,"index":125},{"krate":0,"index":126},{"krate":0,"index":127}],"decl_id":null,"docs":" Iterators and other auxiliary structure for the `ImageBuffer` type.\n","sig":null,"attributes":[{"value":"/ Iterators and other auxiliary structure for the `ImageBuffer` type.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src/lib.rs","byte_start":5045,"byte_end":5116,"line_start":148,"line_end":148,"column_start":1,"column_end":72}}]},{"kind":"Mod","id":{"krate":0,"index":128},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\math\\mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"math","qualname":"::math","value":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\math\\mod.rs","parent":null,"children":[{"krate":0,"index":129},{"krate":0,"index":143},{"krate":0,"index":147},{"krate":0,"index":148},{"krate":0,"index":149}],"decl_id":null,"docs":" Mathematical helper functions and types.\n","sig":null,"attributes":[{"value":"/ Mathematical helper functions and types.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\math\\mod.rs","byte_start":30378,"byte_end":30422,"line_start":1,"line_end":1,"column_start":1,"column_end":45}}]},{"kind":"Mod","id":{"krate":0,"index":129},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\math\\nq.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"nq","qualname":"::math::nq","value":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\math\\nq.rs","parent":null,"children":[{"krate":0,"index":130},{"krate":0,"index":132},{"krate":0,"index":139},{"krate":0,"index":141}],"decl_id":null,"docs":" NEUQUANT Neural-Net quantization algorithm by Anthony Dekker, 1994.\n See \"Kohonen neural networks for optimal colour quantization\"\n in \"Network: Computation in Neural Systems\" Vol. 5 (1994) pp 351-367.\n for a discussion of the algorithm.\n See also <https://scientificgems.wordpress.com/stuff/neuquant-fast-high-quality-image-quantization/>\n","sig":null,"attributes":[{"value":"/ NEUQUANT Neural-Net quantization algorithm by Anthony Dekker, 1994.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\math\\nq.rs","byte_start":30535,"byte_end":30606,"line_start":1,"line_end":1,"column_start":1,"column_end":72}},{"value":"/ See \"Kohonen neural networks for optimal colour quantization\"","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\math\\nq.rs","byte_start":30607,"byte_end":30672,"line_start":2,"line_end":2,"column_start":1,"column_end":66}},{"value":"/ in \"Network: Computation in Neural Systems\" Vol. 5 (1994) pp 351-367.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\math\\nq.rs","byte_start":30673,"byte_end":30746,"line_start":3,"line_end":3,"column_start":1,"column_end":74}},{"value":"/ for a discussion of the algorithm.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\math\\nq.rs","byte_start":30747,"byte_end":30785,"line_start":4,"line_end":4,"column_start":1,"column_end":39}},{"value":"/ See also <https://scientificgems.wordpress.com/stuff/neuquant-fast-high-quality-image-quantization/>","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\math\\nq.rs","byte_start":30786,"byte_end":30890,"line_start":5,"line_end":5,"column_start":1,"column_end":105}}]},{"kind":"Struct","id":{"krate":0,"index":130},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\math\\nq.rs","byte_start":33833,"byte_end":33841,"line_start":73,"line_end":73,"column_start":12,"column_end":20},"name":"NeuQuant","qualname":"::math::nq::NeuQuant","value":"NeuQuant {  }","parent":null,"children":[{"krate":0,"index":131}],"decl_id":null,"docs":" Neural network color quantizer","sig":null,"attributes":[{"value":"/ Neural network color quantizer","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\math\\nq.rs","byte_start":32076,"byte_end":32110,"line_start":33,"line_end":33,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\math\\nq.rs","byte_start":32111,"byte_end":32114,"line_start":34,"line_end":34,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\math\\nq.rs","byte_start":32115,"byte_end":32129,"line_start":35,"line_end":35,"column_start":1,"column_end":15}},{"value":"/ ```","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\math\\nq.rs","byte_start":32130,"byte_end":32137,"line_start":36,"line_end":36,"column_start":1,"column_end":8}},{"value":"/ use image::imageops::colorops::{index_colors, ColorMap};","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\math\\nq.rs","byte_start":32138,"byte_end":32198,"line_start":37,"line_end":37,"column_start":1,"column_end":61}},{"value":"/ use image::math::nq::NeuQuant;","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\math\\nq.rs","byte_start":32199,"byte_end":32233,"line_start":38,"line_end":38,"column_start":1,"column_end":35}},{"value":"/ use image::{ImageBuffer, Rgba, RgbaImage};","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\math\\nq.rs","byte_start":32234,"byte_end":32280,"line_start":39,"line_end":39,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\math\\nq.rs","byte_start":32281,"byte_end":32284,"line_start":40,"line_end":40,"column_start":1,"column_end":4}},{"value":"/ // Create simple color image with RGBA pixels.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\math\\nq.rs","byte_start":32285,"byte_end":32335,"line_start":41,"line_end":41,"column_start":1,"column_end":51}},{"value":"/ let (w, h) = (2, 2);","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\math\\nq.rs","byte_start":32336,"byte_end":32360,"line_start":42,"line_end":42,"column_start":1,"column_end":25}},{"value":"/ let red: Rgba<u8> = [255, 0, 0, 255].into();","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\math\\nq.rs","byte_start":32361,"byte_end":32409,"line_start":43,"line_end":43,"column_start":1,"column_end":49}},{"value":"/ let green: Rgba<u8> = [0, 255, 0, 255].into();","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\math\\nq.rs","byte_start":32410,"byte_end":32460,"line_start":44,"line_end":44,"column_start":1,"column_end":51}},{"value":"/ let blue: Rgba<u8> = [0, 0, 255, 255].into();","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\math\\nq.rs","byte_start":32461,"byte_end":32510,"line_start":45,"line_end":45,"column_start":1,"column_end":50}},{"value":"/ let white: Rgba<u8> = [255, 255, 255, 255].into();","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\math\\nq.rs","byte_start":32511,"byte_end":32565,"line_start":46,"line_end":46,"column_start":1,"column_end":55}},{"value":"/ let mut color_image = RgbaImage::new(w, h);","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\math\\nq.rs","byte_start":32566,"byte_end":32613,"line_start":47,"line_end":47,"column_start":1,"column_end":48}},{"value":"/ color_image.put_pixel(0, 0, red);","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\math\\nq.rs","byte_start":32614,"byte_end":32651,"line_start":48,"line_end":48,"column_start":1,"column_end":38}},{"value":"/ color_image.put_pixel(1, 0, green);","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\math\\nq.rs","byte_start":32652,"byte_end":32691,"line_start":49,"line_end":49,"column_start":1,"column_end":40}},{"value":"/ color_image.put_pixel(0, 1, blue);","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\math\\nq.rs","byte_start":32692,"byte_end":32730,"line_start":50,"line_end":50,"column_start":1,"column_end":39}},{"value":"/ color_image.put_pixel(1, 1, white);","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\math\\nq.rs","byte_start":32731,"byte_end":32770,"line_start":51,"line_end":51,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\math\\nq.rs","byte_start":32771,"byte_end":32774,"line_start":52,"line_end":52,"column_start":1,"column_end":4}},{"value":"/ // Create a `NeuQuant` colormap that will build an approximate color palette that best matches","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\math\\nq.rs","byte_start":32775,"byte_end":32873,"line_start":53,"line_end":53,"column_start":1,"column_end":99}},{"value":"/ // the original image.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\math\\nq.rs","byte_start":32874,"byte_end":32900,"line_start":54,"line_end":54,"column_start":1,"column_end":27}},{"value":"/ // Note, the NeuQuant algorithm is only designed to work with 6-8 bit output, so `colors`","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\math\\nq.rs","byte_start":32901,"byte_end":32994,"line_start":55,"line_end":55,"column_start":1,"column_end":94}},{"value":"/ // should be a power of 2 in the range [64, 256].","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\math\\nq.rs","byte_start":32995,"byte_end":33048,"line_start":56,"line_end":56,"column_start":1,"column_end":54}},{"value":"/ let pixels = color_image.clone().into_raw();","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\math\\nq.rs","byte_start":33049,"byte_end":33097,"line_start":57,"line_end":57,"column_start":1,"column_end":49}},{"value":"/ let cmap = NeuQuant::new(1, 256, &pixels);","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\math\\nq.rs","byte_start":33098,"byte_end":33144,"line_start":58,"line_end":58,"column_start":1,"column_end":47}},{"value":"/ // Map the original image through the color map to create an indexed image stored in a","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\math\\nq.rs","byte_start":33145,"byte_end":33235,"line_start":59,"line_end":59,"column_start":1,"column_end":91}},{"value":"/ // `GrayImage`.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\math\\nq.rs","byte_start":33236,"byte_end":33255,"line_start":60,"line_end":60,"column_start":1,"column_end":20}},{"value":"/ let palletized = index_colors(&color_image, &cmap);","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\math\\nq.rs","byte_start":33256,"byte_end":33311,"line_start":61,"line_end":61,"column_start":1,"column_end":56}},{"value":"/ // Map indexed image back `RgbaImage`.  Note the NeuQuant algorithm creates an approximation of","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\math\\nq.rs","byte_start":33312,"byte_end":33411,"line_start":62,"line_end":62,"column_start":1,"column_end":100}},{"value":"/ // the original colors, so even in this simple example the output is not pixel equivalent to","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\math\\nq.rs","byte_start":33412,"byte_end":33508,"line_start":63,"line_end":63,"column_start":1,"column_end":97}},{"value":"/ // the original.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\math\\nq.rs","byte_start":33509,"byte_end":33529,"line_start":64,"line_end":64,"column_start":1,"column_end":21}},{"value":"/ let mapped = ImageBuffer::from_fn(w, h, |x, y| -> Rgba<u8> {","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\math\\nq.rs","byte_start":33530,"byte_end":33594,"line_start":65,"line_end":65,"column_start":1,"column_end":65}},{"value":"/     let p = palletized.get_pixel(x, y);","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\math\\nq.rs","byte_start":33595,"byte_end":33638,"line_start":66,"line_end":66,"column_start":1,"column_end":44}},{"value":"/     cmap.lookup(p.0[0] as usize)","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\math\\nq.rs","byte_start":33639,"byte_end":33675,"line_start":67,"line_end":67,"column_start":1,"column_end":37}},{"value":"/         .expect(\"indexed color out-of-range\")","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\math\\nq.rs","byte_start":33676,"byte_end":33725,"line_start":68,"line_end":68,"column_start":1,"column_end":50}},{"value":"/         .into()","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\math\\nq.rs","byte_start":33726,"byte_end":33745,"line_start":69,"line_end":69,"column_start":1,"column_end":20}},{"value":"/ });","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\math\\nq.rs","byte_start":33746,"byte_end":33753,"line_start":70,"line_end":70,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\math\\nq.rs","byte_start":33754,"byte_end":33761,"line_start":71,"line_end":71,"column_start":1,"column_end":8}},{"value":"deprecated(note = \"Use the `color_quant` crate instead\")","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\math\\nq.rs","byte_start":33762,"byte_end":33821,"line_start":72,"line_end":72,"column_start":1,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":133},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\math\\nq.rs","byte_start":34360,"byte_end":34363,"line_start":87,"line_end":87,"column_start":12,"column_end":15},"name":"new","qualname":"<NeuQuant>::new","value":"pub fn new(i32, usize, &[u8]) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":134},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\math\\nq.rs","byte_start":34506,"byte_end":34510,"line_start":90,"line_end":90,"column_start":12,"column_end":16},"name":"init","qualname":"<NeuQuant>::init","value":"pub fn init(&mut Self, &[u8])","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":135},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\math\\nq.rs","byte_start":34588,"byte_end":34597,"line_start":93,"line_end":93,"column_start":12,"column_end":21},"name":"map_pixel","qualname":"<NeuQuant>::map_pixel","value":"pub fn map_pixel(&Self, &mut [u8])","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":136},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\math\\nq.rs","byte_start":34678,"byte_end":34686,"line_start":96,"line_end":96,"column_start":12,"column_end":20},"name":"index_of","qualname":"<NeuQuant>::index_of","value":"pub fn index_of(&Self, &[u8]) -> usize","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":137},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\math\\nq.rs","byte_start":34771,"byte_end":34777,"line_start":99,"line_end":99,"column_start":12,"column_end":18},"name":"lookup","qualname":"<NeuQuant>::lookup","value":"pub fn lookup(&Self, usize) -> Option<[u8; ]>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":143},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\math\\utils.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"utils","qualname":"::math::utils","value":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\math\\utils.rs","parent":null,"children":[{"krate":0,"index":144},{"krate":0,"index":146}],"decl_id":null,"docs":" Shared mathematical utility functions.\n","sig":null,"attributes":[{"value":"/ Shared mathematical utility functions.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\math\\utils.rs","byte_start":35150,"byte_end":35192,"line_start":1,"line_end":1,"column_start":1,"column_end":43}}]},{"kind":"Function","id":{"krate":0,"index":144},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\math\\utils.rs","byte_start":35451,"byte_end":35456,"line_start":14,"line_end":14,"column_start":8,"column_end":13},"name":"clamp","qualname":"::math::utils::clamp","value":"pub fn clamp<N>(N, N, N) -> N where N: PartialOrd","parent":null,"children":[],"decl_id":null,"docs":" Cut value to be inside given range","sig":null,"attributes":[{"value":"/ Cut value to be inside given range","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\math\\utils.rs","byte_start":35194,"byte_end":35232,"line_start":3,"line_end":3,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\math\\utils.rs","byte_start":35233,"byte_end":35236,"line_start":4,"line_end":4,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\math\\utils.rs","byte_start":35237,"byte_end":35244,"line_start":5,"line_end":5,"column_start":1,"column_end":8}},{"value":"/ use image::math::utils;","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\math\\utils.rs","byte_start":35245,"byte_end":35272,"line_start":6,"line_end":6,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\math\\utils.rs","byte_start":35273,"byte_end":35276,"line_start":7,"line_end":7,"column_start":1,"column_end":4}},{"value":"/ assert_eq!(utils::clamp(-5, 0, 10),  0);","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\math\\utils.rs","byte_start":35277,"byte_end":35321,"line_start":8,"line_end":8,"column_start":1,"column_end":45}},{"value":"/ assert_eq!(utils::clamp( 6, 0, 10),  6);","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\math\\utils.rs","byte_start":35322,"byte_end":35366,"line_start":9,"line_end":9,"column_start":1,"column_end":45}},{"value":"/ assert_eq!(utils::clamp(15, 0, 10), 10);","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\math\\utils.rs","byte_start":35367,"byte_end":35411,"line_start":10,"line_end":10,"column_start":1,"column_end":45}},{"value":"/ ```","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\math\\utils.rs","byte_start":35412,"byte_end":35419,"line_start":11,"line_end":11,"column_start":1,"column_end":8}},{"value":"inline","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\math\\utils.rs","byte_start":35420,"byte_end":35429,"line_start":12,"line_end":12,"column_start":1,"column_end":10}},{"value":"deprecated","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\math\\utils.rs","byte_start":35430,"byte_end":35443,"line_start":13,"line_end":13,"column_start":1,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":2274},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\math\\rect.rs","byte_start":38707,"byte_end":38711,"line_start":3,"line_end":3,"column_start":12,"column_end":16},"name":"Rect","qualname":"::math::rect::Rect","value":"Rect { x, y, width, height }","parent":null,"children":[{"krate":0,"index":2275},{"krate":0,"index":2276},{"krate":0,"index":2277},{"krate":0,"index":2278}],"decl_id":null,"docs":" A Rectangle defined by its top left corner, width and height.\n","sig":null,"attributes":[{"value":"/ A Rectangle defined by its top left corner, width and height.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\math\\rect.rs","byte_start":38579,"byte_end":38644,"line_start":1,"line_end":1,"column_start":1,"column_end":66}}]},{"kind":"Field","id":{"krate":0,"index":2275},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\math\\rect.rs","byte_start":38771,"byte_end":38772,"line_start":5,"line_end":5,"column_start":9,"column_end":10},"name":"x","qualname":"::math::rect::Rect::x","value":"u32","parent":{"krate":0,"index":2274},"children":[],"decl_id":null,"docs":" The x coordinate of the top left corner.\n","sig":null,"attributes":[{"value":"/ The x coordinate of the top left corner.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\math\\rect.rs","byte_start":38718,"byte_end":38762,"line_start":4,"line_end":4,"column_start":5,"column_end":49}}]},{"kind":"Field","id":{"krate":0,"index":2276},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\math\\rect.rs","byte_start":38836,"byte_end":38837,"line_start":7,"line_end":7,"column_start":9,"column_end":10},"name":"y","qualname":"::math::rect::Rect::y","value":"u32","parent":{"krate":0,"index":2274},"children":[],"decl_id":null,"docs":" The y coordinate of the top left corner.\n","sig":null,"attributes":[{"value":"/ The y coordinate of the top left corner.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\math\\rect.rs","byte_start":38783,"byte_end":38827,"line_start":6,"line_end":6,"column_start":5,"column_end":49}}]},{"kind":"Field","id":{"krate":0,"index":2277},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\math\\rect.rs","byte_start":38883,"byte_end":38888,"line_start":9,"line_end":9,"column_start":9,"column_end":14},"name":"width","qualname":"::math::rect::Rect::width","value":"u32","parent":{"krate":0,"index":2274},"children":[],"decl_id":null,"docs":" The rectangle's width.\n","sig":null,"attributes":[{"value":"/ The rectangle's width.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\math\\rect.rs","byte_start":38848,"byte_end":38874,"line_start":8,"line_end":8,"column_start":5,"column_end":31}}]},{"kind":"Field","id":{"krate":0,"index":2278},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\math\\rect.rs","byte_start":38935,"byte_end":38941,"line_start":11,"line_end":11,"column_start":9,"column_end":15},"name":"height","qualname":"::math::rect::Rect::height","value":"u32","parent":{"krate":0,"index":2274},"children":[],"decl_id":null,"docs":" The rectangle's height.\n","sig":null,"attributes":[{"value":"/ The rectangle's height.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\math\\rect.rs","byte_start":38899,"byte_end":38926,"line_start":10,"line_end":10,"column_start":5,"column_end":32}}]},{"kind":"Mod","id":{"krate":0,"index":150},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\imageops\\mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"imageops","qualname":"::imageops","value":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\imageops\\mod.rs","parent":null,"children":[{"krate":0,"index":151},{"krate":0,"index":152},{"krate":0,"index":153},{"krate":0,"index":154},{"krate":0,"index":155},{"krate":0,"index":156},{"krate":0,"index":157},{"krate":0,"index":158},{"krate":0,"index":159},{"krate":0,"index":160},{"krate":0,"index":161},{"krate":0,"index":162},{"krate":0,"index":163},{"krate":0,"index":164},{"krate":0,"index":3560},{"krate":0,"index":165},{"krate":0,"index":3562},{"krate":0,"index":166},{"krate":0,"index":3564},{"krate":0,"index":167},{"krate":0,"index":3566},{"krate":0,"index":168},{"krate":0,"index":3568},{"krate":0,"index":169},{"krate":0,"index":170},{"krate":0,"index":171},{"krate":0,"index":172},{"krate":0,"index":173},{"krate":0,"index":174},{"krate":0,"index":175},{"krate":0,"index":176},{"krate":0,"index":177},{"krate":0,"index":178},{"krate":0,"index":179},{"krate":0,"index":180},{"krate":0,"index":181},{"krate":0,"index":182},{"krate":0,"index":183},{"krate":0,"index":184},{"krate":0,"index":185},{"krate":0,"index":186},{"krate":0,"index":187},{"krate":0,"index":188},{"krate":0,"index":189},{"krate":0,"index":190},{"krate":0,"index":191},{"krate":0,"index":192},{"krate":0,"index":193},{"krate":0,"index":194},{"krate":0,"index":195},{"krate":0,"index":196},{"krate":0,"index":197},{"krate":0,"index":3620},{"krate":0,"index":198},{"krate":0,"index":199},{"krate":0,"index":240},{"krate":0,"index":317},{"krate":0,"index":402},{"krate":0,"index":404},{"krate":0,"index":406},{"krate":0,"index":408},{"krate":0,"index":409},{"krate":0,"index":412},{"krate":0,"index":415},{"krate":0,"index":420},{"krate":0,"index":425}],"decl_id":null,"docs":" Image Processing Functions\n","sig":null,"attributes":[{"value":"/ Image Processing Functions","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\imageops\\mod.rs","byte_start":38951,"byte_end":38981,"line_start":1,"line_end":1,"column_start":1,"column_end":31}}]},{"kind":"Function","id":{"krate":0,"index":209},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\imageops\\affine.rs","byte_start":51330,"byte_end":51338,"line_start":9,"line_end":9,"column_start":8,"column_end":16},"name":"rotate90","qualname":"::imageops::affine::rotate90","value":"pub fn rotate90<I: GenericImageView>(&I)\n-> ImageBuffer<I::Pixel, Vec<<I::Pixel as Pixel>::Subpixel>> where\nI::Pixel: 'static","parent":null,"children":[],"decl_id":null,"docs":" Rotate an image 90 degrees clockwise.\n","sig":null,"attributes":[{"value":"/ Rotate an image 90 degrees clockwise.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\imageops\\affine.rs","byte_start":51281,"byte_end":51322,"line_start":8,"line_end":8,"column_start":1,"column_end":42}}]},{"kind":"Function","id":{"krate":0,"index":211},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\imageops\\affine.rs","byte_start":51670,"byte_end":51679,"line_start":21,"line_end":21,"column_start":8,"column_end":17},"name":"rotate180","qualname":"::imageops::affine::rotate180","value":"pub fn rotate180<I: GenericImageView>(&I)\n-> ImageBuffer<I::Pixel, Vec<<I::Pixel as Pixel>::Subpixel>> where\nI::Pixel: 'static","parent":null,"children":[],"decl_id":null,"docs":" Rotate an image 180 degrees clockwise.\n","sig":null,"attributes":[{"value":"/ Rotate an image 180 degrees clockwise.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\imageops\\affine.rs","byte_start":51620,"byte_end":51662,"line_start":20,"line_end":20,"column_start":1,"column_end":43}}]},{"kind":"Function","id":{"krate":0,"index":213},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\imageops\\affine.rs","byte_start":52012,"byte_end":52021,"line_start":33,"line_end":33,"column_start":8,"column_end":17},"name":"rotate270","qualname":"::imageops::affine::rotate270","value":"pub fn rotate270<I: GenericImageView>(&I)\n-> ImageBuffer<I::Pixel, Vec<<I::Pixel as Pixel>::Subpixel>> where\nI::Pixel: 'static","parent":null,"children":[],"decl_id":null,"docs":" Rotate an image 270 degrees clockwise.\n","sig":null,"attributes":[{"value":"/ Rotate an image 270 degrees clockwise.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\imageops\\affine.rs","byte_start":51962,"byte_end":52004,"line_start":32,"line_end":32,"column_start":1,"column_end":43}}]},{"kind":"Function","id":{"krate":0,"index":215},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\imageops\\affine.rs","byte_start":52409,"byte_end":52420,"line_start":45,"line_end":45,"column_start":8,"column_end":19},"name":"rotate90_in","qualname":"::imageops::affine::rotate90_in","value":"pub fn rotate90_in<I, Container>(&I, &mut ImageBuffer<I::Pixel, Container>)\n-> crate::ImageResult<()> where I: GenericImageView, I::Pixel: 'static,\nContainer: std::ops::DerefMut<Target = [<I::Pixel as Pixel>::Subpixel]>","parent":null,"children":[],"decl_id":null,"docs":" Rotate an image 90 degrees clockwise and put the result into the destination [`ImageBuffer`].\n","sig":null,"attributes":[{"value":"/ Rotate an image 90 degrees clockwise and put the result into the destination [`ImageBuffer`].","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\imageops\\affine.rs","byte_start":52304,"byte_end":52401,"line_start":44,"line_end":44,"column_start":1,"column_end":98}}]},{"kind":"Function","id":{"krate":0,"index":218},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\imageops\\affine.rs","byte_start":53194,"byte_end":53206,"line_start":70,"line_end":70,"column_start":8,"column_end":20},"name":"rotate180_in","qualname":"::imageops::affine::rotate180_in","value":"pub fn rotate180_in<I, Container>(&I, &mut ImageBuffer<I::Pixel, Container>)\n-> crate::ImageResult<()> where I: GenericImageView, I::Pixel: 'static,\nContainer: std::ops::DerefMut<Target = [<I::Pixel as Pixel>::Subpixel]>","parent":null,"children":[],"decl_id":null,"docs":" Rotate an image 180 degrees clockwise and put the result into the destination [`ImageBuffer`].\n","sig":null,"attributes":[{"value":"/ Rotate an image 180 degrees clockwise and put the result into the destination [`ImageBuffer`].","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\imageops\\affine.rs","byte_start":53088,"byte_end":53186,"line_start":69,"line_end":69,"column_start":1,"column_end":99}}]},{"kind":"Function","id":{"krate":0,"index":221},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\imageops\\affine.rs","byte_start":53989,"byte_end":54001,"line_start":95,"line_end":95,"column_start":8,"column_end":20},"name":"rotate270_in","qualname":"::imageops::affine::rotate270_in","value":"pub fn rotate270_in<I, Container>(&I, &mut ImageBuffer<I::Pixel, Container>)\n-> crate::ImageResult<()> where I: GenericImageView, I::Pixel: 'static,\nContainer: std::ops::DerefMut<Target = [<I::Pixel as Pixel>::Subpixel]>","parent":null,"children":[],"decl_id":null,"docs":" Rotate an image 270 degrees clockwise and put the result into the destination [`ImageBuffer`].\n","sig":null,"attributes":[{"value":"/ Rotate an image 270 degrees clockwise and put the result into the destination [`ImageBuffer`].","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\imageops\\affine.rs","byte_start":53883,"byte_end":53981,"line_start":94,"line_end":94,"column_start":1,"column_end":99}}]},{"kind":"Function","id":{"krate":0,"index":224},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\imageops\\affine.rs","byte_start":54707,"byte_end":54722,"line_start":120,"line_end":120,"column_start":8,"column_end":23},"name":"flip_horizontal","qualname":"::imageops::affine::flip_horizontal","value":"pub fn flip_horizontal<I: GenericImageView>(&I)\n-> ImageBuffer<I::Pixel, Vec<<I::Pixel as Pixel>::Subpixel>> where\nI::Pixel: 'static","parent":null,"children":[],"decl_id":null,"docs":" Flip an image horizontally\n","sig":null,"attributes":[{"value":"/ Flip an image horizontally","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\imageops\\affine.rs","byte_start":54669,"byte_end":54699,"line_start":119,"line_end":119,"column_start":1,"column_end":31}}]},{"kind":"Function","id":{"krate":0,"index":226},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\imageops\\affine.rs","byte_start":55047,"byte_end":55060,"line_start":132,"line_end":132,"column_start":8,"column_end":21},"name":"flip_vertical","qualname":"::imageops::affine::flip_vertical","value":"pub fn flip_vertical<I: GenericImageView>(&I)\n-> ImageBuffer<I::Pixel, Vec<<I::Pixel as Pixel>::Subpixel>> where\nI::Pixel: 'static","parent":null,"children":[],"decl_id":null,"docs":" Flip an image vertically\n","sig":null,"attributes":[{"value":"/ Flip an image vertically","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\imageops\\affine.rs","byte_start":55011,"byte_end":55039,"line_start":131,"line_end":131,"column_start":1,"column_end":29}}]},{"kind":"Function","id":{"krate":0,"index":228},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\imageops\\affine.rs","byte_start":55442,"byte_end":55460,"line_start":144,"line_end":144,"column_start":8,"column_end":26},"name":"flip_horizontal_in","qualname":"::imageops::affine::flip_horizontal_in","value":"pub fn flip_horizontal_in<I,\n                          Container>(&I,\n                                     &mut ImageBuffer<I::Pixel, Container>)\n-> crate::ImageResult<()> where I: GenericImageView, I::Pixel: 'static,\nContainer: std::ops::DerefMut<Target = [<I::Pixel as Pixel>::Subpixel]>","parent":null,"children":[],"decl_id":null,"docs":" Flip an image horizontally and put the result into the destination [`ImageBuffer`].\n","sig":null,"attributes":[{"value":"/ Flip an image horizontally and put the result into the destination [`ImageBuffer`].","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\imageops\\affine.rs","byte_start":55347,"byte_end":55434,"line_start":143,"line_end":143,"column_start":1,"column_end":88}}]},{"kind":"Function","id":{"krate":0,"index":231},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\imageops\\affine.rs","byte_start":56221,"byte_end":56237,"line_start":169,"line_end":169,"column_start":8,"column_end":24},"name":"flip_vertical_in","qualname":"::imageops::affine::flip_vertical_in","value":"pub fn flip_vertical_in<I,\n                        Container>(&I, &mut ImageBuffer<I::Pixel, Container>)\n-> crate::ImageResult<()> where I: GenericImageView, I::Pixel: 'static,\nContainer: std::ops::DerefMut<Target = [<I::Pixel as Pixel>::Subpixel]>","parent":null,"children":[],"decl_id":null,"docs":" Flip an image vertically and put the result into the destination [`ImageBuffer`].\n","sig":null,"attributes":[{"value":"/ Flip an image vertically and put the result into the destination [`ImageBuffer`].","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\imageops\\affine.rs","byte_start":56128,"byte_end":56213,"line_start":168,"line_end":168,"column_start":1,"column_end":86}}]},{"kind":"Function","id":{"krate":0,"index":234},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\imageops\\affine.rs","byte_start":56964,"byte_end":56982,"line_start":194,"line_end":194,"column_start":8,"column_end":26},"name":"rotate180_in_place","qualname":"::imageops::affine::rotate180_in_place","value":"pub fn rotate180_in_place<I: GenericImage>(&mut I)","parent":null,"children":[],"decl_id":null,"docs":" Rotate an image 180 degrees clockwise in place.\n","sig":null,"attributes":[{"value":"/ Rotate an image 180 degrees clockwise in place.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\imageops\\affine.rs","byte_start":56905,"byte_end":56956,"line_start":193,"line_end":193,"column_start":1,"column_end":52}}]},{"kind":"Function","id":{"krate":0,"index":236},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\imageops\\affine.rs","byte_start":57762,"byte_end":57786,"line_start":225,"line_end":225,"column_start":8,"column_end":32},"name":"flip_horizontal_in_place","qualname":"::imageops::affine::flip_horizontal_in_place","value":"pub fn flip_horizontal_in_place<I: GenericImage>(&mut I)","parent":null,"children":[],"decl_id":null,"docs":" Flip an image horizontally in place.\n","sig":null,"attributes":[{"value":"/ Flip an image horizontally in place.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\imageops\\affine.rs","byte_start":57714,"byte_end":57754,"line_start":224,"line_end":224,"column_start":1,"column_end":41}}]},{"kind":"Function","id":{"krate":0,"index":238},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\imageops\\affine.rs","byte_start":58192,"byte_end":58214,"line_start":240,"line_end":240,"column_start":8,"column_end":30},"name":"flip_vertical_in_place","qualname":"::imageops::affine::flip_vertical_in_place","value":"pub fn flip_vertical_in_place<I: GenericImage>(&mut I)","parent":null,"children":[],"decl_id":null,"docs":" Flip an image vertically in place.\n","sig":null,"attributes":[{"value":"/ Flip an image vertically in place.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\imageops\\affine.rs","byte_start":58146,"byte_end":58184,"line_start":239,"line_end":239,"column_start":1,"column_end":39}}]},{"kind":"Mod","id":{"krate":0,"index":240},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\imageops\\colorops.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"colorops","qualname":"::imageops::colorops","value":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\imageops\\colorops.rs","parent":null,"children":[{"krate":0,"index":241},{"krate":0,"index":242},{"krate":0,"index":243},{"krate":0,"index":244},{"krate":0,"index":245},{"krate":0,"index":246},{"krate":0,"index":3644},{"krate":0,"index":247},{"krate":0,"index":3646},{"krate":0,"index":248},{"krate":0,"index":249},{"krate":0,"index":250},{"krate":0,"index":251},{"krate":0,"index":252},{"krate":0,"index":253},{"krate":0,"index":254},{"krate":0,"index":255},{"krate":0,"index":256},{"krate":0,"index":257},{"krate":0,"index":259},{"krate":0,"index":261},{"krate":0,"index":263},{"krate":0,"index":268},{"krate":0,"index":274},{"krate":0,"index":279},{"krate":0,"index":2294},{"krate":0,"index":2297},{"krate":0,"index":2296},{"krate":0,"index":285},{"krate":0,"index":291},{"krate":0,"index":298},{"krate":0,"index":305},{"krate":0,"index":309},{"krate":0,"index":314}],"decl_id":null,"docs":" Functions for altering and converting the color of pixelbufs\n","sig":null,"attributes":[{"value":"/ Functions for altering and converting the color of pixelbufs","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\imageops\\colorops.rs","byte_start":63167,"byte_end":63231,"line_start":1,"line_end":1,"column_start":1,"column_end":65}}]},{"kind":"Function","id":{"krate":0,"index":259},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\imageops\\colorops.rs","byte_start":63631,"byte_end":63640,"line_start":17,"line_end":17,"column_start":8,"column_end":17},"name":"grayscale","qualname":"::imageops::colorops::grayscale","value":"pub fn grayscale<I: GenericImageView>(&I)\n-> ImageBuffer<Luma<Subpixel<I>>, Vec<Subpixel<I>>> where\nSubpixel<I>: 'static, <Subpixel<I> as Num>::FromStrRadixErr: 'static","parent":null,"children":[],"decl_id":null,"docs":" Convert the supplied image to grayscale\n","sig":null,"attributes":[{"value":"/ Convert the supplied image to grayscale","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\imageops\\colorops.rs","byte_start":63580,"byte_end":63623,"line_start":16,"line_end":16,"column_start":1,"column_end":44}}]},{"kind":"Function","id":{"krate":0,"index":261},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\imageops\\colorops.rs","byte_start":64172,"byte_end":64178,"line_start":37,"line_end":37,"column_start":8,"column_end":14},"name":"invert","qualname":"::imageops::colorops::invert","value":"pub fn invert<I: GenericImage>(&mut I)","parent":null,"children":[],"decl_id":null,"docs":" Invert each pixel within the supplied image.\n This function operates in place.\n","sig":null,"attributes":[{"value":"/ Invert each pixel within the supplied image.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\imageops\\colorops.rs","byte_start":64079,"byte_end":64127,"line_start":35,"line_end":35,"column_start":1,"column_end":49}},{"value":"/ This function operates in place.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\imageops\\colorops.rs","byte_start":64128,"byte_end":64164,"line_start":36,"line_end":36,"column_start":1,"column_end":37}}]},{"kind":"Function","id":{"krate":0,"index":263},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\imageops\\colorops.rs","byte_start":64641,"byte_end":64649,"line_start":53,"line_end":53,"column_start":8,"column_end":16},"name":"contrast","qualname":"::imageops::colorops::contrast","value":"pub fn contrast<I, P, S>(&I, f32) -> ImageBuffer<P, Vec<S>> where\nI: GenericImageView<Pixel = P>, P: Pixel<Subpixel = S> + 'static,\nS: Primitive + 'static","parent":null,"children":[],"decl_id":null,"docs":" Adjust the contrast of the supplied image.\n ```contrast``` is the amount to adjust the contrast by.\n Negative values decrease the contrast and positive values increase the contrast.\n","sig":null,"attributes":[{"value":"/ Adjust the contrast of the supplied image.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\imageops\\colorops.rs","byte_start":64442,"byte_end":64488,"line_start":50,"line_end":50,"column_start":1,"column_end":47}},{"value":"/ ```contrast``` is the amount to adjust the contrast by.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\imageops\\colorops.rs","byte_start":64489,"byte_end":64548,"line_start":51,"line_end":51,"column_start":1,"column_end":60}},{"value":"/ Negative values decrease the contrast and positive values increase the contrast.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\imageops\\colorops.rs","byte_start":64549,"byte_end":64633,"line_start":52,"line_end":52,"column_start":1,"column_end":85}}]},{"kind":"Function","id":{"krate":0,"index":268},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\imageops\\colorops.rs","byte_start":65624,"byte_end":65632,"line_start":88,"line_end":88,"column_start":8,"column_end":16},"name":"brighten","qualname":"::imageops::colorops::brighten","value":"pub fn brighten<I, P, S>(&I, i32) -> ImageBuffer<P, Vec<S>> where\nI: GenericImageView<Pixel = P>, P: Pixel<Subpixel = S> + 'static,\nS: Primitive + 'static","parent":null,"children":[],"decl_id":null,"docs":" Brighten the supplied image.\n ```value``` is the amount to brighten each pixel by.\n Negative values decrease the brightness and positive values increase it.\n","sig":null,"attributes":[{"value":"/ Brighten the supplied image.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\imageops\\colorops.rs","byte_start":65450,"byte_end":65482,"line_start":85,"line_end":85,"column_start":1,"column_end":33}},{"value":"/ ```value``` is the amount to brighten each pixel by.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\imageops\\colorops.rs","byte_start":65483,"byte_end":65539,"line_start":86,"line_end":86,"column_start":1,"column_end":57}},{"value":"/ Negative values decrease the brightness and positive values increase it.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\imageops\\colorops.rs","byte_start":65540,"byte_end":65616,"line_start":87,"line_end":87,"column_start":1,"column_end":77}}]},{"kind":"Function","id":{"krate":0,"index":274},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\imageops\\colorops.rs","byte_start":66618,"byte_end":66627,"line_start":123,"line_end":123,"column_start":8,"column_end":17},"name":"huerotate","qualname":"::imageops::colorops::huerotate","value":"pub fn huerotate<I, P, S>(&I, i32) -> ImageBuffer<P, Vec<S>> where\nI: GenericImageView<Pixel = P>, P: Pixel<Subpixel = S> + 'static,\nS: Primitive + 'static","parent":null,"children":[],"decl_id":null,"docs":" Hue rotate the supplied image.\n `value` is the degrees to rotate each pixel by.\n 0 and 360 do nothing, the rest rotates by the given degree value.\n just like the css webkit filter hue-rotate(180)\n","sig":null,"attributes":[{"value":"/ Hue rotate the supplied image.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\imageops\\colorops.rs","byte_start":66402,"byte_end":66436,"line_start":119,"line_end":119,"column_start":1,"column_end":35}},{"value":"/ `value` is the degrees to rotate each pixel by.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\imageops\\colorops.rs","byte_start":66437,"byte_end":66488,"line_start":120,"line_end":120,"column_start":1,"column_end":52}},{"value":"/ 0 and 360 do nothing, the rest rotates by the given degree value.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\imageops\\colorops.rs","byte_start":66489,"byte_end":66558,"line_start":121,"line_end":121,"column_start":1,"column_end":70}},{"value":"/ just like the css webkit filter hue-rotate(180)","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\imageops\\colorops.rs","byte_start":66559,"byte_end":66610,"line_start":122,"line_end":122,"column_start":1,"column_end":52}}]},{"kind":"Trait","id":{"krate":0,"index":279},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\imageops\\colorops.rs","byte_start":68541,"byte_end":68549,"line_start":180,"line_end":180,"column_start":11,"column_end":19},"name":"ColorMap","qualname":"::imageops::colorops::ColorMap","value":"ColorMap","parent":null,"children":[{"krate":0,"index":280},{"krate":0,"index":281},{"krate":0,"index":282},{"krate":0,"index":283},{"krate":0,"index":284}],"decl_id":null,"docs":" A color map\n","sig":null,"attributes":[{"value":"/ A color map","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\imageops\\colorops.rs","byte_start":68515,"byte_end":68530,"line_start":179,"line_end":179,"column_start":1,"column_end":16}}]},{"kind":"Type","id":{"krate":0,"index":280},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\imageops\\colorops.rs","byte_start":68613,"byte_end":68618,"line_start":182,"line_end":182,"column_start":10,"column_end":15},"name":"Color","qualname":"::imageops::colorops::ColorMap::Color","value":"type Color;","parent":{"krate":0,"index":279},"children":[],"decl_id":null,"docs":" The color type on which the map operates on\n","sig":null,"attributes":[{"value":"/ The color type on which the map operates on","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\imageops\\colorops.rs","byte_start":68556,"byte_end":68603,"line_start":181,"line_end":181,"column_start":5,"column_end":52}}]},{"kind":"Method","id":{"krate":0,"index":281},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\imageops\\colorops.rs","byte_start":68711,"byte_end":68719,"line_start":185,"line_end":185,"column_start":8,"column_end":16},"name":"index_of","qualname":"::imageops::colorops::ColorMap::index_of","value":"pub fn index_of(&Self, &Self::Color) -> usize","parent":{"krate":0,"index":279},"children":[],"decl_id":null,"docs":" Returns the index of the closest match of `color`\n in the color map.\n","sig":null,"attributes":[{"value":"/ Returns the index of the closest match of `color`","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\imageops\\colorops.rs","byte_start":68624,"byte_end":68677,"line_start":183,"line_end":183,"column_start":5,"column_end":58}},{"value":"/ in the color map.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\imageops\\colorops.rs","byte_start":68682,"byte_end":68703,"line_start":184,"line_end":184,"column_start":5,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":282},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\imageops\\colorops.rs","byte_start":68927,"byte_end":68933,"line_start":188,"line_end":188,"column_start":8,"column_end":14},"name":"lookup","qualname":"::imageops::colorops::ColorMap::lookup","value":"pub fn lookup(&Self, usize) -> Option<Self::Color>","parent":{"krate":0,"index":279},"children":[],"decl_id":null,"docs":" Looks up color by index in the color map.  If `idx` is out of range for the color map, or\n ColorMap doesn't implement `lookup` `None` is returned.\n","sig":null,"attributes":[{"value":"/ Looks up color by index in the color map.  If `idx` is out of range for the color map, or","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\imageops\\colorops.rs","byte_start":68762,"byte_end":68855,"line_start":186,"line_end":186,"column_start":5,"column_end":98}},{"value":"/ ColorMap doesn't implement `lookup` `None` is returned.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\imageops\\colorops.rs","byte_start":68860,"byte_end":68919,"line_start":187,"line_end":187,"column_start":5,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":283},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\imageops\\colorops.rs","byte_start":69114,"byte_end":69124,"line_start":193,"line_end":193,"column_start":8,"column_end":18},"name":"has_lookup","qualname":"::imageops::colorops::ColorMap::has_lookup","value":"pub fn has_lookup(&Self) -> bool","parent":{"krate":0,"index":279},"children":[],"decl_id":null,"docs":" Determine if this implementation of ColorMap overrides the default `lookup`.\n","sig":null,"attributes":[{"value":"/ Determine if this implementation of ColorMap overrides the default `lookup`.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\imageops\\colorops.rs","byte_start":69026,"byte_end":69106,"line_start":192,"line_end":192,"column_start":5,"column_end":85}}]},{"kind":"Method","id":{"krate":0,"index":284},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\imageops\\colorops.rs","byte_start":69229,"byte_end":69238,"line_start":197,"line_end":197,"column_start":8,"column_end":17},"name":"map_color","qualname":"::imageops::colorops::ColorMap::map_color","value":"pub fn map_color(&Self, &mut Self::Color)","parent":{"krate":0,"index":279},"children":[],"decl_id":null,"docs":" Maps `color` to the closest color in the color map.\n","sig":null,"attributes":[{"value":"/ Maps `color` to the closest color in the color map.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\imageops\\colorops.rs","byte_start":69166,"byte_end":69221,"line_start":196,"line_end":196,"column_start":5,"column_end":60}}]},{"kind":"Struct","id":{"krate":0,"index":2294},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\imageops\\colorops.rs","byte_start":70383,"byte_end":70390,"line_start":230,"line_end":230,"column_start":12,"column_end":19},"name":"BiLevel","qualname":"::imageops::colorops::BiLevel","value":"","parent":null,"children":[],"decl_id":null,"docs":" A bi-level color map","sig":null,"attributes":[{"value":"/ A bi-level color map","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\imageops\\colorops.rs","byte_start":69275,"byte_end":69299,"line_start":200,"line_end":200,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\imageops\\colorops.rs","byte_start":69300,"byte_end":69303,"line_start":201,"line_end":201,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\imageops\\colorops.rs","byte_start":69304,"byte_end":69318,"line_start":202,"line_end":202,"column_start":1,"column_end":15}},{"value":"/ ```","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\imageops\\colorops.rs","byte_start":69319,"byte_end":69326,"line_start":203,"line_end":203,"column_start":1,"column_end":8}},{"value":"/ use image::imageops::colorops::{index_colors, BiLevel, ColorMap};","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\imageops\\colorops.rs","byte_start":69327,"byte_end":69396,"line_start":204,"line_end":204,"column_start":1,"column_end":70}},{"value":"/ use image::{ImageBuffer, Luma};","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\imageops\\colorops.rs","byte_start":69397,"byte_end":69432,"line_start":205,"line_end":205,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\imageops\\colorops.rs","byte_start":69433,"byte_end":69436,"line_start":206,"line_end":206,"column_start":1,"column_end":4}},{"value":"/ let (w, h) = (16, 16);","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\imageops\\colorops.rs","byte_start":69437,"byte_end":69463,"line_start":207,"line_end":207,"column_start":1,"column_end":27}},{"value":"/ // Create an image with a smooth horizontal gradient from black (0) to white (255).","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\imageops\\colorops.rs","byte_start":69464,"byte_end":69551,"line_start":208,"line_end":208,"column_start":1,"column_end":88}},{"value":"/ let gray = ImageBuffer::from_fn(w, h, |x, y| -> Luma<u8> { [(255 * x / w) as u8].into() });","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\imageops\\colorops.rs","byte_start":69552,"byte_end":69647,"line_start":209,"line_end":209,"column_start":1,"column_end":96}},{"value":"/ // Mapping the gray image through the `BiLevel` filter should map gray pixels less than half","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\imageops\\colorops.rs","byte_start":69648,"byte_end":69744,"line_start":210,"line_end":210,"column_start":1,"column_end":97}},{"value":"/ // intensity (127) to black (0), and anything greater to white (255).","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\imageops\\colorops.rs","byte_start":69745,"byte_end":69818,"line_start":211,"line_end":211,"column_start":1,"column_end":74}},{"value":"/ let cmap = BiLevel;","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\imageops\\colorops.rs","byte_start":69819,"byte_end":69842,"line_start":212,"line_end":212,"column_start":1,"column_end":24}},{"value":"/ let palletized = index_colors(&gray, &cmap);","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\imageops\\colorops.rs","byte_start":69843,"byte_end":69891,"line_start":213,"line_end":213,"column_start":1,"column_end":49}},{"value":"/ let mapped = ImageBuffer::from_fn(w, h, |x, y| {","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\imageops\\colorops.rs","byte_start":69892,"byte_end":69944,"line_start":214,"line_end":214,"column_start":1,"column_end":53}},{"value":"/     let p = palletized.get_pixel(x, y);","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\imageops\\colorops.rs","byte_start":69945,"byte_end":69988,"line_start":215,"line_end":215,"column_start":1,"column_end":44}},{"value":"/     cmap.lookup(p.0[0] as usize)","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\imageops\\colorops.rs","byte_start":69989,"byte_end":70025,"line_start":216,"line_end":216,"column_start":1,"column_end":37}},{"value":"/         .expect(\"indexed color out-of-range\")","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\imageops\\colorops.rs","byte_start":70026,"byte_end":70075,"line_start":217,"line_end":217,"column_start":1,"column_end":50}},{"value":"/ });","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\imageops\\colorops.rs","byte_start":70076,"byte_end":70083,"line_start":218,"line_end":218,"column_start":1,"column_end":8}},{"value":"/ // Create an black and white image of expected output.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\imageops\\colorops.rs","byte_start":70084,"byte_end":70142,"line_start":219,"line_end":219,"column_start":1,"column_end":59}},{"value":"/ let bw = ImageBuffer::from_fn(w, h, |x, y| -> Luma<u8> {","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\imageops\\colorops.rs","byte_start":70143,"byte_end":70203,"line_start":220,"line_end":220,"column_start":1,"column_end":61}},{"value":"/     if x <= (w / 2) {","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\imageops\\colorops.rs","byte_start":70204,"byte_end":70229,"line_start":221,"line_end":221,"column_start":1,"column_end":26}},{"value":"/         [0].into()","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\imageops\\colorops.rs","byte_start":70230,"byte_end":70252,"line_start":222,"line_end":222,"column_start":1,"column_end":23}},{"value":"/     } else {","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\imageops\\colorops.rs","byte_start":70253,"byte_end":70269,"line_start":223,"line_end":223,"column_start":1,"column_end":17}},{"value":"/         [255].into()","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\imageops\\colorops.rs","byte_start":70270,"byte_end":70294,"line_start":224,"line_end":224,"column_start":1,"column_end":25}},{"value":"/     }","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\imageops\\colorops.rs","byte_start":70295,"byte_end":70304,"line_start":225,"line_end":225,"column_start":1,"column_end":10}},{"value":"/ });","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\imageops\\colorops.rs","byte_start":70305,"byte_end":70312,"line_start":226,"line_end":226,"column_start":1,"column_end":8}},{"value":"/ assert_eq!(mapped, bw);","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\imageops\\colorops.rs","byte_start":70313,"byte_end":70340,"line_start":227,"line_end":227,"column_start":1,"column_end":28}},{"value":"/ ```","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\imageops\\colorops.rs","byte_start":70341,"byte_end":70348,"line_start":228,"line_end":228,"column_start":1,"column_end":8}}]},{"kind":"Function","id":{"krate":0,"index":309},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\imageops\\colorops.rs","byte_start":73363,"byte_end":73369,"line_start":345,"line_end":345,"column_start":8,"column_end":14},"name":"dither","qualname":"::imageops::colorops::dither","value":"pub fn dither<Pix, Map: ?Sized>(&mut ImageBuffer<Pix, Vec<u8>>, &Map) where\nMap: ColorMap<Color = Pix>, Pix: Pixel<Subpixel = u8> + 'static","parent":null,"children":[],"decl_id":null,"docs":" Reduces the colors of the image using the supplied `color_map` while applying\n Floyd-Steinberg dithering to improve the visual conception\n","sig":null,"attributes":[{"value":"/ Reduces the colors of the image using the supplied `color_map` while applying","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\imageops\\colorops.rs","byte_start":73211,"byte_end":73292,"line_start":343,"line_end":343,"column_start":1,"column_end":82}},{"value":"/ Floyd-Steinberg dithering to improve the visual conception","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\imageops\\colorops.rs","byte_start":73293,"byte_end":73355,"line_start":344,"line_end":344,"column_start":1,"column_end":63}}]},{"kind":"Function","id":{"krate":0,"index":314},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\imageops\\colorops.rs","byte_start":74923,"byte_end":74935,"line_start":383,"line_end":383,"column_start":8,"column_end":20},"name":"index_colors","qualname":"::imageops::colorops::index_colors","value":"pub fn index_colors<Pix, Map: ?Sized>(&ImageBuffer<Pix, Vec<u8>>, &Map)\n-> ImageBuffer<Luma<u8>, Vec<u8>> where Map: ColorMap<Color = Pix>,\nPix: Pixel<Subpixel = u8> + 'static","parent":null,"children":[],"decl_id":null,"docs":" Reduces the colors using the supplied `color_map` and returns an image of the indices\n","sig":null,"attributes":[{"value":"/ Reduces the colors using the supplied `color_map` and returns an image of the indices","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\imageops\\colorops.rs","byte_start":74826,"byte_end":74915,"line_start":382,"line_end":382,"column_start":1,"column_end":90}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2300},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\imageops\\sample.rs","byte_start":78621,"byte_end":78628,"line_start":84,"line_end":84,"column_start":5,"column_end":12},"name":"Nearest","qualname":"::imageops::sample::FilterType::Nearest","value":"FilterType::Nearest","parent":{"krate":0,"index":2299},"children":[],"decl_id":null,"docs":" Nearest Neighbor\n","sig":null,"attributes":[{"value":"/ Nearest Neighbor","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\imageops\\sample.rs","byte_start":78596,"byte_end":78616,"line_start":83,"line_end":83,"column_start":5,"column_end":25}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2302},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\imageops\\sample.rs","byte_start":78657,"byte_end":78665,"line_start":87,"line_end":87,"column_start":5,"column_end":13},"name":"Triangle","qualname":"::imageops::sample::FilterType::Triangle","value":"FilterType::Triangle","parent":{"krate":0,"index":2299},"children":[],"decl_id":null,"docs":" Linear Filter\n","sig":null,"attributes":[{"value":"/ Linear Filter","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\imageops\\sample.rs","byte_start":78635,"byte_end":78652,"line_start":86,"line_end":86,"column_start":5,"column_end":22}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2304},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\imageops\\sample.rs","byte_start":78693,"byte_end":78703,"line_start":90,"line_end":90,"column_start":5,"column_end":15},"name":"CatmullRom","qualname":"::imageops::sample::FilterType::CatmullRom","value":"FilterType::CatmullRom","parent":{"krate":0,"index":2299},"children":[],"decl_id":null,"docs":" Cubic Filter\n","sig":null,"attributes":[{"value":"/ Cubic Filter","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\imageops\\sample.rs","byte_start":78672,"byte_end":78688,"line_start":89,"line_end":89,"column_start":5,"column_end":21}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2306},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\imageops\\sample.rs","byte_start":78734,"byte_end":78742,"line_start":93,"line_end":93,"column_start":5,"column_end":13},"name":"Gaussian","qualname":"::imageops::sample::FilterType::Gaussian","value":"FilterType::Gaussian","parent":{"krate":0,"index":2299},"children":[],"decl_id":null,"docs":" Gaussian Filter\n","sig":null,"attributes":[{"value":"/ Gaussian Filter","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\imageops\\sample.rs","byte_start":78710,"byte_end":78729,"line_start":92,"line_end":92,"column_start":5,"column_end":24}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2308},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\imageops\\sample.rs","byte_start":78779,"byte_end":78787,"line_start":96,"line_end":96,"column_start":5,"column_end":13},"name":"Lanczos3","qualname":"::imageops::sample::FilterType::Lanczos3","value":"FilterType::Lanczos3","parent":{"krate":0,"index":2299},"children":[],"decl_id":null,"docs":" Lanczos with window 3\n","sig":null,"attributes":[{"value":"/ Lanczos with window 3","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\imageops\\sample.rs","byte_start":78749,"byte_end":78774,"line_start":95,"line_end":95,"column_start":5,"column_end":30}}]},{"kind":"Enum","id":{"krate":0,"index":2299},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\imageops\\sample.rs","byte_start":78579,"byte_end":78589,"line_start":82,"line_end":82,"column_start":10,"column_end":20},"name":"FilterType","qualname":"::imageops::sample::FilterType","value":"pub enum FilterType {\n\n    /// Nearest Neighbor\n    Nearest,\n\n    /// Linear Filter\n    Triangle,\n\n    /// Cubic Filter\n    CatmullRom,\n\n    /// Gaussian Filter\n    Gaussian,\n\n    /// Lanczos with window 3\n    Lanczos3,\n}","parent":null,"children":[{"krate":0,"index":2300},{"krate":0,"index":2302},{"krate":0,"index":2304},{"krate":0,"index":2306},{"krate":0,"index":2308}],"decl_id":null,"docs":" Available Sampling Filters.","sig":null,"attributes":[{"value":"/ Available Sampling Filters.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\imageops\\sample.rs","byte_start":76137,"byte_end":76168,"line_start":15,"line_end":15,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\imageops\\sample.rs","byte_start":76169,"byte_end":76172,"line_start":16,"line_end":16,"column_start":1,"column_end":4}},{"value":"/ ## Examples","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\imageops\\sample.rs","byte_start":76173,"byte_end":76188,"line_start":17,"line_end":17,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\imageops\\sample.rs","byte_start":76189,"byte_end":76192,"line_start":18,"line_end":18,"column_start":1,"column_end":4}},{"value":"/ To test the different sampling filters on a real example, you can find two","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\imageops\\sample.rs","byte_start":76193,"byte_end":76271,"line_start":19,"line_end":19,"column_start":1,"column_end":79}},{"value":"/ examples called","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\imageops\\sample.rs","byte_start":76272,"byte_end":76291,"line_start":20,"line_end":20,"column_start":1,"column_end":20}},{"value":"/ [`scaledown`](https://github.com/image-rs/image/tree/master/examples/scaledown)","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\imageops\\sample.rs","byte_start":76292,"byte_end":76375,"line_start":21,"line_end":21,"column_start":1,"column_end":84}},{"value":"/ and","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\imageops\\sample.rs","byte_start":76376,"byte_end":76383,"line_start":22,"line_end":22,"column_start":1,"column_end":8}},{"value":"/ [`scaleup`](https://github.com/image-rs/image/tree/master/examples/scaleup)","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\imageops\\sample.rs","byte_start":76384,"byte_end":76463,"line_start":23,"line_end":23,"column_start":1,"column_end":80}},{"value":"/ in the `examples` directory of the crate source code.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\imageops\\sample.rs","byte_start":76464,"byte_end":76521,"line_start":24,"line_end":24,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\imageops\\sample.rs","byte_start":76522,"byte_end":76525,"line_start":25,"line_end":25,"column_start":1,"column_end":4}},{"value":"/ Here is a 3.58 MiB","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\imageops\\sample.rs","byte_start":76526,"byte_end":76548,"line_start":26,"line_end":26,"column_start":1,"column_end":23}},{"value":"/ [test image](https://github.com/image-rs/image/blob/master/examples/scaledown/test.jpg)","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\imageops\\sample.rs","byte_start":76549,"byte_end":76640,"line_start":27,"line_end":27,"column_start":1,"column_end":92}},{"value":"/ that has been scaled down to 300x225 px:","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\imageops\\sample.rs","byte_start":76641,"byte_end":76685,"line_start":28,"line_end":28,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\imageops\\sample.rs","byte_start":76686,"byte_end":76689,"line_start":29,"line_end":29,"column_start":1,"column_end":4}},{"value":"/ <!-- NOTE: To test new test images locally, replace the GitHub path with `../../../docs/` -->","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\imageops\\sample.rs","byte_start":76690,"byte_end":76787,"line_start":30,"line_end":30,"column_start":1,"column_end":98}},{"value":"/ <div style=\"display: flex; flex-wrap: wrap; align-items: flex-start;\">","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\imageops\\sample.rs","byte_start":76788,"byte_end":76862,"line_start":31,"line_end":31,"column_start":1,"column_end":75}},{"value":"/   <div style=\"margin: 0 8px 8px 0;\">","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\imageops\\sample.rs","byte_start":76863,"byte_end":76903,"line_start":32,"line_end":32,"column_start":1,"column_end":41}},{"value":"/     <img src=\"https://raw.githubusercontent.com/image-rs/image/master/examples/scaledown/scaledown-test-near.png\" title=\"Nearest\"><br>","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\imageops\\sample.rs","byte_start":76904,"byte_end":77042,"line_start":33,"line_end":33,"column_start":1,"column_end":139}},{"value":"/     Nearest Neighbor","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\imageops\\sample.rs","byte_start":77043,"byte_end":77067,"line_start":34,"line_end":34,"column_start":1,"column_end":25}},{"value":"/   </div>","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\imageops\\sample.rs","byte_start":77068,"byte_end":77080,"line_start":35,"line_end":35,"column_start":1,"column_end":13}},{"value":"/   <div style=\"margin: 0 8px 8px 0;\">","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\imageops\\sample.rs","byte_start":77081,"byte_end":77121,"line_start":36,"line_end":36,"column_start":1,"column_end":41}},{"value":"/     <img src=\"https://raw.githubusercontent.com/image-rs/image/master/examples/scaledown/scaledown-test-tri.png\" title=\"Triangle\"><br>","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\imageops\\sample.rs","byte_start":77122,"byte_end":77260,"line_start":37,"line_end":37,"column_start":1,"column_end":139}},{"value":"/     Linear: Triangle","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\imageops\\sample.rs","byte_start":77261,"byte_end":77285,"line_start":38,"line_end":38,"column_start":1,"column_end":25}},{"value":"/   </div>","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\imageops\\sample.rs","byte_start":77286,"byte_end":77298,"line_start":39,"line_end":39,"column_start":1,"column_end":13}},{"value":"/   <div style=\"margin: 0 8px 8px 0;\">","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\imageops\\sample.rs","byte_start":77299,"byte_end":77339,"line_start":40,"line_end":40,"column_start":1,"column_end":41}},{"value":"/     <img src=\"https://raw.githubusercontent.com/image-rs/image/master/examples/scaledown/scaledown-test-cmr.png\" title=\"CatmullRom\"><br>","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\imageops\\sample.rs","byte_start":77340,"byte_end":77480,"line_start":41,"line_end":41,"column_start":1,"column_end":141}},{"value":"/     Cubic: Catmull-Rom","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\imageops\\sample.rs","byte_start":77481,"byte_end":77507,"line_start":42,"line_end":42,"column_start":1,"column_end":27}},{"value":"/   </div>","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\imageops\\sample.rs","byte_start":77508,"byte_end":77520,"line_start":43,"line_end":43,"column_start":1,"column_end":13}},{"value":"/   <div style=\"margin: 0 8px 8px 0;\">","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\imageops\\sample.rs","byte_start":77521,"byte_end":77561,"line_start":44,"line_end":44,"column_start":1,"column_end":41}},{"value":"/     <img src=\"https://raw.githubusercontent.com/image-rs/image/master/examples/scaledown/scaledown-test-gauss.png\" title=\"Gaussian\"><br>","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\imageops\\sample.rs","byte_start":77562,"byte_end":77702,"line_start":45,"line_end":45,"column_start":1,"column_end":141}},{"value":"/     Gaussian","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\imageops\\sample.rs","byte_start":77703,"byte_end":77719,"line_start":46,"line_end":46,"column_start":1,"column_end":17}},{"value":"/   </div>","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\imageops\\sample.rs","byte_start":77720,"byte_end":77732,"line_start":47,"line_end":47,"column_start":1,"column_end":13}},{"value":"/   <div style=\"margin: 0 8px 8px 0;\">","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\imageops\\sample.rs","byte_start":77733,"byte_end":77773,"line_start":48,"line_end":48,"column_start":1,"column_end":41}},{"value":"/     <img src=\"https://raw.githubusercontent.com/image-rs/image/master/examples/scaledown/scaledown-test-lcz2.png\" title=\"Lanczos3\"><br>","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\imageops\\sample.rs","byte_start":77774,"byte_end":77913,"line_start":49,"line_end":49,"column_start":1,"column_end":140}},{"value":"/     Lanczos with window 3","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\imageops\\sample.rs","byte_start":77914,"byte_end":77943,"line_start":50,"line_end":50,"column_start":1,"column_end":30}},{"value":"/   </div>","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\imageops\\sample.rs","byte_start":77944,"byte_end":77956,"line_start":51,"line_end":51,"column_start":1,"column_end":13}},{"value":"/ </div>","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\imageops\\sample.rs","byte_start":77957,"byte_end":77967,"line_start":52,"line_end":52,"column_start":1,"column_end":11}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\imageops\\sample.rs","byte_start":77968,"byte_end":77971,"line_start":53,"line_end":53,"column_start":1,"column_end":4}},{"value":"/ ## Speed","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\imageops\\sample.rs","byte_start":77972,"byte_end":77984,"line_start":54,"line_end":54,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\imageops\\sample.rs","byte_start":77985,"byte_end":77988,"line_start":55,"line_end":55,"column_start":1,"column_end":4}},{"value":"/ Time required to create each of the examples above, tested on an Intel","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\imageops\\sample.rs","byte_start":77989,"byte_end":78063,"line_start":56,"line_end":56,"column_start":1,"column_end":75}},{"value":"/ i7-4770 CPU with Rust 1.37 in release mode:","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\imageops\\sample.rs","byte_start":78064,"byte_end":78111,"line_start":57,"line_end":57,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\imageops\\sample.rs","byte_start":78112,"byte_end":78115,"line_start":58,"line_end":58,"column_start":1,"column_end":4}},{"value":"/ <table style=\"width: auto;\">","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\imageops\\sample.rs","byte_start":78116,"byte_end":78148,"line_start":59,"line_end":59,"column_start":1,"column_end":33}},{"value":"/   <tr>","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\imageops\\sample.rs","byte_start":78149,"byte_end":78159,"line_start":60,"line_end":60,"column_start":1,"column_end":11}},{"value":"/     <th>Nearest</th>","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\imageops\\sample.rs","byte_start":78160,"byte_end":78184,"line_start":61,"line_end":61,"column_start":1,"column_end":25}},{"value":"/     <td>31 ms</td>","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\imageops\\sample.rs","byte_start":78185,"byte_end":78207,"line_start":62,"line_end":62,"column_start":1,"column_end":23}},{"value":"/   </tr>","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\imageops\\sample.rs","byte_start":78208,"byte_end":78219,"line_start":63,"line_end":63,"column_start":1,"column_end":12}},{"value":"/   <tr>","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\imageops\\sample.rs","byte_start":78220,"byte_end":78230,"line_start":64,"line_end":64,"column_start":1,"column_end":11}},{"value":"/     <th>Triangle</th>","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\imageops\\sample.rs","byte_start":78231,"byte_end":78256,"line_start":65,"line_end":65,"column_start":1,"column_end":26}},{"value":"/     <td>414 ms</td>","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\imageops\\sample.rs","byte_start":78257,"byte_end":78280,"line_start":66,"line_end":66,"column_start":1,"column_end":24}},{"value":"/   </tr>","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\imageops\\sample.rs","byte_start":78281,"byte_end":78292,"line_start":67,"line_end":67,"column_start":1,"column_end":12}},{"value":"/   <tr>","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\imageops\\sample.rs","byte_start":78293,"byte_end":78303,"line_start":68,"line_end":68,"column_start":1,"column_end":11}},{"value":"/     <th>CatmullRom</th>","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\imageops\\sample.rs","byte_start":78304,"byte_end":78331,"line_start":69,"line_end":69,"column_start":1,"column_end":28}},{"value":"/     <td>817 ms</td>","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\imageops\\sample.rs","byte_start":78332,"byte_end":78355,"line_start":70,"line_end":70,"column_start":1,"column_end":24}},{"value":"/   </tr>","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\imageops\\sample.rs","byte_start":78356,"byte_end":78367,"line_start":71,"line_end":71,"column_start":1,"column_end":12}},{"value":"/   <tr>","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\imageops\\sample.rs","byte_start":78368,"byte_end":78378,"line_start":72,"line_end":72,"column_start":1,"column_end":11}},{"value":"/     <th>Gaussian</th>","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\imageops\\sample.rs","byte_start":78379,"byte_end":78404,"line_start":73,"line_end":73,"column_start":1,"column_end":26}},{"value":"/     <td>1180 ms</td>","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\imageops\\sample.rs","byte_start":78405,"byte_end":78429,"line_start":74,"line_end":74,"column_start":1,"column_end":25}},{"value":"/   </tr>","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\imageops\\sample.rs","byte_start":78430,"byte_end":78441,"line_start":75,"line_end":75,"column_start":1,"column_end":12}},{"value":"/   <tr>","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\imageops\\sample.rs","byte_start":78442,"byte_end":78452,"line_start":76,"line_end":76,"column_start":1,"column_end":11}},{"value":"/     <th>Lanczos3</th>","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\imageops\\sample.rs","byte_start":78453,"byte_end":78478,"line_start":77,"line_end":77,"column_start":1,"column_end":26}},{"value":"/     <td>1170 ms</td>","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\imageops\\sample.rs","byte_start":78479,"byte_end":78503,"line_start":78,"line_end":78,"column_start":1,"column_end":25}},{"value":"/   </tr>","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\imageops\\sample.rs","byte_start":78504,"byte_end":78515,"line_start":79,"line_end":79,"column_start":1,"column_end":12}},{"value":"/ </table>","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\imageops\\sample.rs","byte_start":78516,"byte_end":78528,"line_start":80,"line_end":80,"column_start":1,"column_end":13}}]},{"kind":"Function","id":{"krate":0,"index":364},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\imageops\\sample.rs","byte_start":88249,"byte_end":88258,"line_start":393,"line_end":393,"column_start":8,"column_end":17},"name":"thumbnail","qualname":"::imageops::sample::thumbnail","value":"pub fn thumbnail<I, P, S>(&I, u32, u32) -> ImageBuffer<P, Vec<S>> where\nI: GenericImageView<Pixel = P>, P: Pixel<Subpixel = S> + 'static,\nS: Primitive + Enlargeable + 'static","parent":null,"children":[],"decl_id":null,"docs":" Resize the supplied image to the specific dimensions.","sig":null,"attributes":[{"value":"/ Resize the supplied image to the specific dimensions.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\imageops\\sample.rs","byte_start":87503,"byte_end":87560,"line_start":381,"line_end":381,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\imageops\\sample.rs","byte_start":87561,"byte_end":87564,"line_start":382,"line_end":382,"column_start":1,"column_end":4}},{"value":"/ For downscaling, this method uses a fast integer algorithm where each source pixel contributes","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\imageops\\sample.rs","byte_start":87565,"byte_end":87663,"line_start":383,"line_end":383,"column_start":1,"column_end":99}},{"value":"/ to exactly one target pixel.  May give aliasing artifacts if new size is close to old size.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\imageops\\sample.rs","byte_start":87664,"byte_end":87759,"line_start":384,"line_end":384,"column_start":1,"column_end":96}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\imageops\\sample.rs","byte_start":87760,"byte_end":87763,"line_start":385,"line_end":385,"column_start":1,"column_end":4}},{"value":"/ In case the current width is smaller than the new width or similar for the height, another","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\imageops\\sample.rs","byte_start":87764,"byte_end":87858,"line_start":386,"line_end":386,"column_start":1,"column_end":95}},{"value":"/ strategy is used instead.  For each pixel in the output, a rectangular region of the input is","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\imageops\\sample.rs","byte_start":87859,"byte_end":87956,"line_start":387,"line_end":387,"column_start":1,"column_end":98}},{"value":"/ determined, just as previously.  But when no input pixel is part of this region, the nearest","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\imageops\\sample.rs","byte_start":87957,"byte_end":88053,"line_start":388,"line_end":388,"column_start":1,"column_end":97}},{"value":"/ pixels are interpolated instead.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\imageops\\sample.rs","byte_start":88054,"byte_end":88090,"line_start":389,"line_end":389,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\imageops\\sample.rs","byte_start":88091,"byte_end":88094,"line_start":390,"line_end":390,"column_start":1,"column_end":4}},{"value":"/ For speed reasons, all interpolation is performed linearly over the colour values.  It will not","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\imageops\\sample.rs","byte_start":88095,"byte_end":88194,"line_start":391,"line_end":391,"column_start":1,"column_end":100}},{"value":"/ take the pixel colour spaces into account.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\imageops\\sample.rs","byte_start":88195,"byte_end":88241,"line_start":392,"line_end":392,"column_start":1,"column_end":47}}]},{"kind":"Function","id":{"krate":0,"index":387},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\imageops\\sample.rs","byte_start":96117,"byte_end":96126,"line_start":632,"line_end":632,"column_start":8,"column_end":17},"name":"filter3x3","qualname":"::imageops::sample::filter3x3","value":"pub fn filter3x3<I, P, S>(&I, &[f32]) -> ImageBuffer<P, Vec<S>> where\nI: GenericImageView<Pixel = P>, P: Pixel<Subpixel = S> + 'static,\nS: Primitive + 'static","parent":null,"children":[],"decl_id":null,"docs":" Perform a 3x3 box filter on the supplied image.\n ```kernel``` is an array of the filter weights of length 9.\n","sig":null,"attributes":[{"value":"/ Perform a 3x3 box filter on the supplied image.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\imageops\\sample.rs","byte_start":95994,"byte_end":96045,"line_start":630,"line_end":630,"column_start":1,"column_end":52}},{"value":"/ ```kernel``` is an array of the filter weights of length 9.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\imageops\\sample.rs","byte_start":96046,"byte_end":96109,"line_start":631,"line_end":631,"column_start":1,"column_end":64}}]},{"kind":"Function","id":{"krate":0,"index":392},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\imageops\\sample.rs","byte_start":98553,"byte_end":98559,"line_start":712,"line_end":712,"column_start":8,"column_end":14},"name":"resize","qualname":"::imageops::sample::resize","value":"pub fn resize<I: GenericImageView>(&I, u32, u32, FilterType)\n-> ImageBuffer<I::Pixel, Vec<<I::Pixel as Pixel>::Subpixel>> where\nI::Pixel: 'static, <I::Pixel as Pixel>::Subpixel: 'static","parent":null,"children":[],"decl_id":null,"docs":" Resize the supplied image to the specified dimensions.\n ```nwidth``` and ```nheight``` are the new dimensions.\n ```filter``` is the sampling filter to use.\n","sig":null,"attributes":[{"value":"/ Resize the supplied image to the specified dimensions.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\imageops\\sample.rs","byte_start":98380,"byte_end":98438,"line_start":709,"line_end":709,"column_start":1,"column_end":59}},{"value":"/ ```nwidth``` and ```nheight``` are the new dimensions.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\imageops\\sample.rs","byte_start":98439,"byte_end":98497,"line_start":710,"line_end":710,"column_start":1,"column_end":59}},{"value":"/ ```filter``` is the sampling filter to use.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\imageops\\sample.rs","byte_start":98498,"byte_end":98545,"line_start":711,"line_end":711,"column_start":1,"column_end":48}}]},{"kind":"Function","id":{"krate":0,"index":394},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\imageops\\sample.rs","byte_start":99685,"byte_end":99689,"line_start":751,"line_end":751,"column_start":8,"column_end":12},"name":"blur","qualname":"::imageops::sample::blur","value":"pub fn blur<I: GenericImageView>(&I, f32)\n-> ImageBuffer<I::Pixel, Vec<<I::Pixel as Pixel>::Subpixel>> where\nI::Pixel: 'static","parent":null,"children":[],"decl_id":null,"docs":" Performs a Gaussian blur on the supplied image.\n ```sigma``` is a measure of how much to blur by.\n","sig":null,"attributes":[{"value":"/ Performs a Gaussian blur on the supplied image.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\imageops\\sample.rs","byte_start":99573,"byte_end":99624,"line_start":749,"line_end":749,"column_start":1,"column_end":52}},{"value":"/ ```sigma``` is a measure of how much to blur by.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\imageops\\sample.rs","byte_start":99625,"byte_end":99677,"line_start":750,"line_end":750,"column_start":1,"column_end":53}}]},{"kind":"Function","id":{"krate":0,"index":397},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\imageops\\sample.rs","byte_start":100513,"byte_end":100522,"line_start":778,"line_end":778,"column_start":8,"column_end":17},"name":"unsharpen","qualname":"::imageops::sample::unsharpen","value":"pub fn unsharpen<I, P, S>(&I, f32, i32) -> ImageBuffer<P, Vec<S>> where\nI: GenericImageView<Pixel = P>, P: Pixel<Subpixel = S> + 'static,\nS: Primitive + 'static","parent":null,"children":[],"decl_id":null,"docs":" Performs an unsharpen mask on the supplied image.\n ```sigma``` is the amount to blur the image by.\n ```threshold``` is the threshold for the difference between","sig":null,"attributes":[{"value":"/ Performs an unsharpen mask on the supplied image.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\imageops\\sample.rs","byte_start":100252,"byte_end":100305,"line_start":773,"line_end":773,"column_start":1,"column_end":54}},{"value":"/ ```sigma``` is the amount to blur the image by.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\imageops\\sample.rs","byte_start":100306,"byte_end":100357,"line_start":774,"line_end":774,"column_start":1,"column_end":52}},{"value":"/ ```threshold``` is the threshold for the difference between","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\imageops\\sample.rs","byte_start":100358,"byte_end":100421,"line_start":775,"line_end":775,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\imageops\\sample.rs","byte_start":100422,"byte_end":100425,"line_start":776,"line_end":776,"column_start":1,"column_end":4}},{"value":"/ See <https://en.wikipedia.org/wiki/Unsharp_masking#Digital_unsharp_masking>","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\imageops\\sample.rs","byte_start":100426,"byte_end":100505,"line_start":777,"line_end":777,"column_start":1,"column_end":80}}]},{"kind":"Function","id":{"krate":0,"index":402},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\imageops\\mod.rs","byte_start":39962,"byte_end":39966,"line_start":33,"line_end":33,"column_start":8,"column_end":12},"name":"crop","qualname":"::imageops::crop","value":"pub fn crop<I: GenericImageView>(&mut I, u32, u32, u32, u32)\n-> SubImage<&mut I>","parent":null,"children":[],"decl_id":null,"docs":" Return a mutable view into an image\n","sig":null,"attributes":[{"value":"/ Return a mutable view into an image","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\imageops\\mod.rs","byte_start":39915,"byte_end":39954,"line_start":32,"line_end":32,"column_start":1,"column_end":40}}]},{"kind":"Function","id":{"krate":0,"index":404},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\imageops\\mod.rs","byte_start":40260,"byte_end":40268,"line_start":45,"line_end":45,"column_start":8,"column_end":16},"name":"crop_imm","qualname":"::imageops::crop_imm","value":"pub fn crop_imm<I: GenericImageView>(&I, u32, u32, u32, u32) -> SubImage<&I>","parent":null,"children":[],"decl_id":null,"docs":" Return an immutable view into an image\n","sig":null,"attributes":[{"value":"/ Return an immutable view into an image","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\imageops\\mod.rs","byte_start":40210,"byte_end":40252,"line_start":44,"line_end":44,"column_start":1,"column_end":43}}]},{"kind":"Function","id":{"krate":0,"index":408},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\imageops\\mod.rs","byte_start":43052,"byte_end":43066,"line_start":129,"line_end":129,"column_start":8,"column_end":22},"name":"overlay_bounds","qualname":"::imageops::overlay_bounds","value":"pub fn overlay_bounds((u32, u32), (u32, u32), u32, u32) -> (u32, u32)","parent":null,"children":[],"decl_id":null,"docs":" Calculate the region that can be copied from top to bottom.","sig":null,"attributes":[{"value":"/ Calculate the region that can be copied from top to bottom.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\imageops\\mod.rs","byte_start":40880,"byte_end":40943,"line_start":74,"line_end":74,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\imageops\\mod.rs","byte_start":40944,"byte_end":40947,"line_start":75,"line_end":75,"column_start":1,"column_end":4}},{"value":"/ Given image size of bottom and top image, and a point at which we want to place the top image","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\imageops\\mod.rs","byte_start":40948,"byte_end":41045,"line_start":76,"line_end":76,"column_start":1,"column_end":98}},{"value":"/ onto the bottom image, how large can we be? Have to wary of the following issues:","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\imageops\\mod.rs","byte_start":41046,"byte_end":41131,"line_start":77,"line_end":77,"column_start":1,"column_end":86}},{"value":"/ * Top might be larger than bottom","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\imageops\\mod.rs","byte_start":41132,"byte_end":41169,"line_start":78,"line_end":78,"column_start":1,"column_end":38}},{"value":"/ * Overflows in the computation","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\imageops\\mod.rs","byte_start":41170,"byte_end":41204,"line_start":79,"line_end":79,"column_start":1,"column_end":35}},{"value":"/ * Coordinates could be completely out of bounds","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\imageops\\mod.rs","byte_start":41205,"byte_end":41256,"line_start":80,"line_end":80,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\imageops\\mod.rs","byte_start":41257,"byte_end":41260,"line_start":81,"line_end":81,"column_start":1,"column_end":4}},{"value":"/ The main idea is to make use of inequalities provided by the nature of `saturing_add` and","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\imageops\\mod.rs","byte_start":41261,"byte_end":41354,"line_start":82,"line_end":82,"column_start":1,"column_end":94}},{"value":"/ `saturating_sub`. These intrinsically validate that all resulting coordinates will be in bounds","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\imageops\\mod.rs","byte_start":41355,"byte_end":41454,"line_start":83,"line_end":83,"column_start":1,"column_end":100}},{"value":"/ for both images.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\imageops\\mod.rs","byte_start":41455,"byte_end":41475,"line_start":84,"line_end":84,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\imageops\\mod.rs","byte_start":41476,"byte_end":41479,"line_start":85,"line_end":85,"column_start":1,"column_end":4}},{"value":"/ We want that all these coordinate accesses are safe:","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\imageops\\mod.rs","byte_start":41480,"byte_end":41536,"line_start":86,"line_end":86,"column_start":1,"column_end":57}},{"value":"/ 1. `bottom.get_pixel(x + [0..x_range), y + [0..y_range))`","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\imageops\\mod.rs","byte_start":41537,"byte_end":41598,"line_start":87,"line_end":87,"column_start":1,"column_end":62}},{"value":"/ 2. `top.get_pixel([0..x_range), [0..y_range))`","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\imageops\\mod.rs","byte_start":41599,"byte_end":41649,"line_start":88,"line_end":88,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\imageops\\mod.rs","byte_start":41650,"byte_end":41653,"line_start":89,"line_end":89,"column_start":1,"column_end":4}},{"value":"/ Proof that the function provides the necessary bounds for width. Note that all unaugmented math","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\imageops\\mod.rs","byte_start":41654,"byte_end":41753,"line_start":90,"line_end":90,"column_start":1,"column_end":100}},{"value":"/ operations are to be read in standard arithmetic, not integer arithmetic. Since no direct","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\imageops\\mod.rs","byte_start":41754,"byte_end":41847,"line_start":91,"line_end":91,"column_start":1,"column_end":94}},{"value":"/ integer arithmetic occurs in the implementation, this is unambiguous.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\imageops\\mod.rs","byte_start":41848,"byte_end":41921,"line_start":92,"line_end":92,"column_start":1,"column_end":74}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\imageops\\mod.rs","byte_start":41922,"byte_end":41925,"line_start":93,"line_end":93,"column_start":1,"column_end":4}},{"value":"/ ```text","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\imageops\\mod.rs","byte_start":41926,"byte_end":41937,"line_start":94,"line_end":94,"column_start":1,"column_end":12}},{"value":"/ Three short notes/lemmata:","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\imageops\\mod.rs","byte_start":41938,"byte_end":41968,"line_start":95,"line_end":95,"column_start":1,"column_end":31}},{"value":"/ - Iff `(a - b) <= 0` then `a.saturating_sub(b) = 0`","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\imageops\\mod.rs","byte_start":41969,"byte_end":42024,"line_start":96,"line_end":96,"column_start":1,"column_end":56}},{"value":"/ - Iff `(a - b) >= 0` then `a.saturating_sub(b) = a - b`","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\imageops\\mod.rs","byte_start":42025,"byte_end":42084,"line_start":97,"line_end":97,"column_start":1,"column_end":60}},{"value":"/ - If  `a <= c` then `a.saturating_sub(b) <= c.saturating_sub(b)`","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\imageops\\mod.rs","byte_start":42085,"byte_end":42153,"line_start":98,"line_end":98,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\imageops\\mod.rs","byte_start":42154,"byte_end":42157,"line_start":99,"line_end":99,"column_start":1,"column_end":4}},{"value":"/ 1.1 We show that if `bottom_width <= x`, then `x_range = 0` therefore `x + [0..x_range)` is empty.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\imageops\\mod.rs","byte_start":42158,"byte_end":42260,"line_start":100,"line_end":100,"column_start":1,"column_end":103}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\imageops\\mod.rs","byte_start":42261,"byte_end":42264,"line_start":101,"line_end":101,"column_start":1,"column_end":4}},{"value":"/ x_range","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\imageops\\mod.rs","byte_start":42265,"byte_end":42276,"line_start":102,"line_end":102,"column_start":1,"column_end":12}},{"value":"/  = (top_width.saturating_add(x).min(bottom_width)).saturating_sub(x)","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\imageops\\mod.rs","byte_start":42277,"byte_end":42349,"line_start":103,"line_end":103,"column_start":1,"column_end":73}},{"value":"/ <= bottom_width.saturating_sub(x)","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\imageops\\mod.rs","byte_start":42350,"byte_end":42387,"line_start":104,"line_end":104,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\imageops\\mod.rs","byte_start":42388,"byte_end":42391,"line_start":105,"line_end":105,"column_start":1,"column_end":4}},{"value":"/ bottom_width <= x","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\imageops\\mod.rs","byte_start":42392,"byte_end":42413,"line_start":106,"line_end":106,"column_start":1,"column_end":22}},{"value":"/ <==> bottom_width - x <= 0","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\imageops\\mod.rs","byte_start":42414,"byte_end":42444,"line_start":107,"line_end":107,"column_start":1,"column_end":31}},{"value":"/ <==> bottom_width.saturating_sub(x) = 0","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\imageops\\mod.rs","byte_start":42445,"byte_end":42488,"line_start":108,"line_end":108,"column_start":1,"column_end":44}},{"value":"/  ==> x_range <= 0","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\imageops\\mod.rs","byte_start":42489,"byte_end":42510,"line_start":109,"line_end":109,"column_start":1,"column_end":22}},{"value":"/  ==> x_range  = 0","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\imageops\\mod.rs","byte_start":42511,"byte_end":42532,"line_start":110,"line_end":110,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\imageops\\mod.rs","byte_start":42533,"byte_end":42536,"line_start":111,"line_end":111,"column_start":1,"column_end":4}},{"value":"/ 1.2 If `x < bottom_width` then `x + x_range < bottom_width`","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\imageops\\mod.rs","byte_start":42537,"byte_end":42600,"line_start":112,"line_end":112,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\imageops\\mod.rs","byte_start":42601,"byte_end":42604,"line_start":113,"line_end":113,"column_start":1,"column_end":4}},{"value":"/ x + x_range","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\imageops\\mod.rs","byte_start":42605,"byte_end":42620,"line_start":114,"line_end":114,"column_start":1,"column_end":16}},{"value":"/ <= x + bottom_width.saturating_sub(x)","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\imageops\\mod.rs","byte_start":42621,"byte_end":42662,"line_start":115,"line_end":115,"column_start":1,"column_end":42}},{"value":"/  = x + (bottom_width - x)","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\imageops\\mod.rs","byte_start":42663,"byte_end":42692,"line_start":116,"line_end":116,"column_start":1,"column_end":30}},{"value":"/  = bottom_width","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\imageops\\mod.rs","byte_start":42693,"byte_end":42712,"line_start":117,"line_end":117,"column_start":1,"column_end":20}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\imageops\\mod.rs","byte_start":42713,"byte_end":42716,"line_start":118,"line_end":118,"column_start":1,"column_end":4}},{"value":"/ 2. We show that `x_range <= top_width`","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\imageops\\mod.rs","byte_start":42717,"byte_end":42759,"line_start":119,"line_end":119,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\imageops\\mod.rs","byte_start":42760,"byte_end":42763,"line_start":120,"line_end":120,"column_start":1,"column_end":4}},{"value":"/ x_range","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\imageops\\mod.rs","byte_start":42764,"byte_end":42775,"line_start":121,"line_end":121,"column_start":1,"column_end":12}},{"value":"/  = (top_width.saturating_add(x).min(bottom_width)).saturating_sub(x)","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\imageops\\mod.rs","byte_start":42776,"byte_end":42848,"line_start":122,"line_end":122,"column_start":1,"column_end":73}},{"value":"/ <= top_width.saturating_add(x).saturating_sub(x)","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\imageops\\mod.rs","byte_start":42849,"byte_end":42901,"line_start":123,"line_end":123,"column_start":1,"column_end":53}},{"value":"/ <= (top_wdith + x).saturating_sub(x)","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\imageops\\mod.rs","byte_start":42902,"byte_end":42942,"line_start":124,"line_end":124,"column_start":1,"column_end":41}},{"value":"/  = top_width (due to `top_width >= 0` and `x >= 0`)","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\imageops\\mod.rs","byte_start":42943,"byte_end":42998,"line_start":125,"line_end":125,"column_start":1,"column_end":56}},{"value":"/ ```","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\imageops\\mod.rs","byte_start":42999,"byte_end":43006,"line_start":126,"line_end":126,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\imageops\\mod.rs","byte_start":43007,"byte_end":43010,"line_start":127,"line_end":127,"column_start":1,"column_end":4}},{"value":"/ Proof is the same for height.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\imageops\\mod.rs","byte_start":43011,"byte_end":43044,"line_start":128,"line_end":128,"column_start":1,"column_end":34}}]},{"kind":"Function","id":{"krate":0,"index":409},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\imageops\\mod.rs","byte_start":43580,"byte_end":43587,"line_start":147,"line_end":147,"column_start":8,"column_end":15},"name":"overlay","qualname":"::imageops::overlay","value":"pub fn overlay<I, J>(&mut I, &J, u32, u32) where I: GenericImage,\nJ: GenericImageView<Pixel = I::Pixel>","parent":null,"children":[],"decl_id":null,"docs":" Overlay an image at a given coordinate (x, y)\n","sig":null,"attributes":[{"value":"/ Overlay an image at a given coordinate (x, y)","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\imageops\\mod.rs","byte_start":43523,"byte_end":43572,"line_start":146,"line_end":146,"column_start":1,"column_end":50}}]},{"kind":"Function","id":{"krate":0,"index":412},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\imageops\\mod.rs","byte_start":44606,"byte_end":44610,"line_start":183,"line_end":183,"column_start":8,"column_end":12},"name":"tile","qualname":"::imageops::tile","value":"pub fn tile<I, J>(&mut I, &J) where I: GenericImage, J: GenericImageView<Pixel\n= I::Pixel>","parent":null,"children":[],"decl_id":null,"docs":" Tile an image by repeating it multiple times","sig":null,"attributes":[{"value":"/ Tile an image by repeating it multiple times","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\imageops\\mod.rs","byte_start":44246,"byte_end":44294,"line_start":169,"line_end":169,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\imageops\\mod.rs","byte_start":44295,"byte_end":44298,"line_start":170,"line_end":170,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\imageops\\mod.rs","byte_start":44299,"byte_end":44313,"line_start":171,"line_end":171,"column_start":1,"column_end":15}},{"value":"/ ```no_run","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\imageops\\mod.rs","byte_start":44314,"byte_end":44327,"line_start":172,"line_end":172,"column_start":1,"column_end":14}},{"value":"/ use image::{RgbaImage};","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\imageops\\mod.rs","byte_start":44328,"byte_end":44355,"line_start":173,"line_end":173,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\imageops\\mod.rs","byte_start":44356,"byte_end":44359,"line_start":174,"line_end":174,"column_start":1,"column_end":4}},{"value":"/ fn main() {","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\imageops\\mod.rs","byte_start":44360,"byte_end":44375,"line_start":175,"line_end":175,"column_start":1,"column_end":16}},{"value":"/      let mut img = RgbaImage::new(1920, 1080);","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\imageops\\mod.rs","byte_start":44376,"byte_end":44426,"line_start":176,"line_end":176,"column_start":1,"column_end":51}},{"value":"/      let tile = image::open(\"tile.png\").unwrap();","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\imageops\\mod.rs","byte_start":44427,"byte_end":44480,"line_start":177,"line_end":177,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\imageops\\mod.rs","byte_start":44481,"byte_end":44484,"line_start":178,"line_end":178,"column_start":1,"column_end":4}},{"value":"/      image::imageops::tile(&mut img, &tile);","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\imageops\\mod.rs","byte_start":44485,"byte_end":44533,"line_start":179,"line_end":179,"column_start":1,"column_end":49}},{"value":"/      img.save(\"tiled_wallpaper.png\").unwrap();","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\imageops\\mod.rs","byte_start":44534,"byte_end":44584,"line_start":180,"line_end":180,"column_start":1,"column_end":51}},{"value":"/ }","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\imageops\\mod.rs","byte_start":44585,"byte_end":44590,"line_start":181,"line_end":181,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\imageops\\mod.rs","byte_start":44591,"byte_end":44598,"line_start":182,"line_end":182,"column_start":1,"column_end":8}}]},{"kind":"Function","id":{"krate":0,"index":415},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\imageops\\mod.rs","byte_start":45407,"byte_end":45424,"line_start":211,"line_end":211,"column_start":8,"column_end":25},"name":"vertical_gradient","qualname":"::imageops::vertical_gradient","value":"pub fn vertical_gradient<S, P, I>(&mut I, &P, &P) where I: GenericImage<Pixel\n= P>, P: Pixel<Subpixel = S> + 'static, S: Primitive + Lerp + 'static","parent":null,"children":[],"decl_id":null,"docs":" Fill the image with a linear vertical gradient\n \n This function assumes a linear color space.\n \n # Examples\n ```no_run\n use image::{Rgba, RgbaImage, Pixel};\n \n fn main() {\n     let mut img = RgbaImage::new(100, 100);\n     let start = Rgba::from_slice(&[0, 128, 0, 0]);\n     let end = Rgba::from_slice(&[255, 255, 255, 255]);\n \n     image::imageops::vertical_gradient(&mut img, start, end);\n     img.save(\"vertical_gradient.png\").unwrap();\n }\n","sig":null,"attributes":[{"value":"/ Fill the image with a linear vertical gradient","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\imageops\\mod.rs","byte_start":44909,"byte_end":44959,"line_start":195,"line_end":195,"column_start":1,"column_end":51}},{"value":"/ ","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\imageops\\mod.rs","byte_start":44960,"byte_end":44964,"line_start":196,"line_end":196,"column_start":1,"column_end":5}},{"value":"/ This function assumes a linear color space.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\imageops\\mod.rs","byte_start":44965,"byte_end":45012,"line_start":197,"line_end":197,"column_start":1,"column_end":48}},{"value":"/ ","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\imageops\\mod.rs","byte_start":45013,"byte_end":45017,"line_start":198,"line_end":198,"column_start":1,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\imageops\\mod.rs","byte_start":45018,"byte_end":45032,"line_start":199,"line_end":199,"column_start":1,"column_end":15}},{"value":"/ ```no_run","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\imageops\\mod.rs","byte_start":45033,"byte_end":45046,"line_start":200,"line_end":200,"column_start":1,"column_end":14}},{"value":"/ use image::{Rgba, RgbaImage, Pixel};","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\imageops\\mod.rs","byte_start":45047,"byte_end":45087,"line_start":201,"line_end":201,"column_start":1,"column_end":41}},{"value":"/ ","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\imageops\\mod.rs","byte_start":45088,"byte_end":45092,"line_start":202,"line_end":202,"column_start":1,"column_end":5}},{"value":"/ fn main() {","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\imageops\\mod.rs","byte_start":45093,"byte_end":45108,"line_start":203,"line_end":203,"column_start":1,"column_end":16}},{"value":"/     let mut img = RgbaImage::new(100, 100);","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\imageops\\mod.rs","byte_start":45109,"byte_end":45156,"line_start":204,"line_end":204,"column_start":1,"column_end":48}},{"value":"/     let start = Rgba::from_slice(&[0, 128, 0, 0]);","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\imageops\\mod.rs","byte_start":45157,"byte_end":45211,"line_start":205,"line_end":205,"column_start":1,"column_end":55}},{"value":"/     let end = Rgba::from_slice(&[255, 255, 255, 255]);","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\imageops\\mod.rs","byte_start":45212,"byte_end":45270,"line_start":206,"line_end":206,"column_start":1,"column_end":59}},{"value":"/ ","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\imageops\\mod.rs","byte_start":45271,"byte_end":45275,"line_start":207,"line_end":207,"column_start":1,"column_end":5}},{"value":"/     image::imageops::vertical_gradient(&mut img, start, end);","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\imageops\\mod.rs","byte_start":45276,"byte_end":45341,"line_start":208,"line_end":208,"column_start":1,"column_end":66}},{"value":"/     img.save(\"vertical_gradient.png\").unwrap();","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\imageops\\mod.rs","byte_start":45342,"byte_end":45393,"line_start":209,"line_end":209,"column_start":1,"column_end":52}},{"value":"/ }","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\imageops\\mod.rs","byte_start":45394,"byte_end":45399,"line_start":210,"line_end":210,"column_start":1,"column_end":6}}]},{"kind":"Function","id":{"krate":0,"index":420},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\imageops\\mod.rs","byte_start":46454,"byte_end":46473,"line_start":246,"line_end":246,"column_start":8,"column_end":27},"name":"horizontal_gradient","qualname":"::imageops::horizontal_gradient","value":"pub fn horizontal_gradient<S, P, I>(&mut I, &P, &P) where\nI: GenericImage<Pixel = P>, P: Pixel<Subpixel = S> + 'static, S: Primitive +\nLerp + 'static","parent":null,"children":[],"decl_id":null,"docs":" Fill the image with a linear horizontal gradient\n \n This function assumes a linear color space.","sig":null,"attributes":[{"value":"/ Fill the image with a linear horizontal gradient","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\imageops\\mod.rs","byte_start":45951,"byte_end":46003,"line_start":230,"line_end":230,"column_start":1,"column_end":53}},{"value":"/ ","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\imageops\\mod.rs","byte_start":46004,"byte_end":46008,"line_start":231,"line_end":231,"column_start":1,"column_end":5}},{"value":"/ This function assumes a linear color space.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\imageops\\mod.rs","byte_start":46009,"byte_end":46056,"line_start":232,"line_end":232,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\imageops\\mod.rs","byte_start":46057,"byte_end":46060,"line_start":233,"line_end":233,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\imageops\\mod.rs","byte_start":46061,"byte_end":46075,"line_start":234,"line_end":234,"column_start":1,"column_end":15}},{"value":"/ ```no_run","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\imageops\\mod.rs","byte_start":46076,"byte_end":46089,"line_start":235,"line_end":235,"column_start":1,"column_end":14}},{"value":"/ use image::{Rgba, RgbaImage, Pixel};","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\imageops\\mod.rs","byte_start":46090,"byte_end":46130,"line_start":236,"line_end":236,"column_start":1,"column_end":41}},{"value":"/ ","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\imageops\\mod.rs","byte_start":46131,"byte_end":46135,"line_start":237,"line_end":237,"column_start":1,"column_end":5}},{"value":"/ fn main() {","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\imageops\\mod.rs","byte_start":46136,"byte_end":46151,"line_start":238,"line_end":238,"column_start":1,"column_end":16}},{"value":"/     let mut img = RgbaImage::new(100, 100);","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\imageops\\mod.rs","byte_start":46152,"byte_end":46199,"line_start":239,"line_end":239,"column_start":1,"column_end":48}},{"value":"/     let start = Rgba::from_slice(&[0, 128, 0, 0]);","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\imageops\\mod.rs","byte_start":46200,"byte_end":46254,"line_start":240,"line_end":240,"column_start":1,"column_end":55}},{"value":"/     let end = Rgba::from_slice(&[255, 255, 255, 255]);","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\imageops\\mod.rs","byte_start":46255,"byte_end":46313,"line_start":241,"line_end":241,"column_start":1,"column_end":59}},{"value":"/ ","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\imageops\\mod.rs","byte_start":46314,"byte_end":46318,"line_start":242,"line_end":242,"column_start":1,"column_end":5}},{"value":"/     image::imageops::horizontal_gradient(&mut img, start, end);","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\imageops\\mod.rs","byte_start":46319,"byte_end":46386,"line_start":243,"line_end":243,"column_start":1,"column_end":68}},{"value":"/     img.save(\"horizontal_gradient.png\").unwrap();","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\imageops\\mod.rs","byte_start":46387,"byte_end":46440,"line_start":244,"line_end":244,"column_start":1,"column_end":54}},{"value":"/ }","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\imageops\\mod.rs","byte_start":46441,"byte_end":46446,"line_start":245,"line_end":245,"column_start":1,"column_end":6}}]},{"kind":"Function","id":{"krate":0,"index":425},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\imageops\\mod.rs","byte_start":47070,"byte_end":47077,"line_start":266,"line_end":266,"column_start":8,"column_end":15},"name":"replace","qualname":"::imageops::replace","value":"pub fn replace<I, J>(&mut I, &J, u32, u32) where I: GenericImage,\nJ: GenericImageView<Pixel = I::Pixel>","parent":null,"children":[],"decl_id":null,"docs":" Replace the contents of an image at a given coordinate (x, y)\n","sig":null,"attributes":[{"value":"/ Replace the contents of an image at a given coordinate (x, y)","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\imageops\\mod.rs","byte_start":46997,"byte_end":47062,"line_start":265,"line_end":265,"column_start":1,"column_end":66}}]},{"kind":"Mod","id":{"krate":0,"index":428},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\io\\mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"io","qualname":"::io","value":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\io\\mod.rs","parent":null,"children":[{"krate":0,"index":429},{"krate":0,"index":475},{"krate":0,"index":511}],"decl_id":null,"docs":" Input and output of images.\n","sig":null,"attributes":[{"value":"/ Input and output of images.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\io\\mod.rs","byte_start":103483,"byte_end":103514,"line_start":1,"line_end":1,"column_start":1,"column_end":32}}]},{"kind":"Struct","id":{"krate":0,"index":450},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\io\\reader.rs","byte_start":105711,"byte_end":105717,"line_start":61,"line_end":61,"column_start":12,"column_end":18},"name":"Reader","qualname":"::io::reader::Reader","value":"Reader {  }","parent":null,"children":[{"krate":0,"index":452},{"krate":0,"index":453}],"decl_id":null,"docs":" A multi-format image reader.","sig":null,"attributes":[{"value":"/ A multi-format image reader.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\io\\reader.rs","byte_start":103912,"byte_end":103944,"line_start":12,"line_end":12,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\io\\reader.rs","byte_start":103945,"byte_end":103948,"line_start":13,"line_end":13,"column_start":1,"column_end":4}},{"value":"/ Wraps an input reader to facilitate automatic detection of an image's format, appropriate","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\io\\reader.rs","byte_start":103949,"byte_end":104042,"line_start":14,"line_end":14,"column_start":1,"column_end":94}},{"value":"/ decoding method, and dispatches into the set of supported [`ImageDecoder`] implementations.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\io\\reader.rs","byte_start":104043,"byte_end":104138,"line_start":15,"line_end":15,"column_start":1,"column_end":96}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\io\\reader.rs","byte_start":104139,"byte_end":104142,"line_start":16,"line_end":16,"column_start":1,"column_end":4}},{"value":"/ ## Usage","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\io\\reader.rs","byte_start":104143,"byte_end":104155,"line_start":17,"line_end":17,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\io\\reader.rs","byte_start":104156,"byte_end":104159,"line_start":18,"line_end":18,"column_start":1,"column_end":4}},{"value":"/ Opening a file, deducing the format based on the file path automatically, and trying to decode","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\io\\reader.rs","byte_start":104160,"byte_end":104258,"line_start":19,"line_end":19,"column_start":1,"column_end":99}},{"value":"/ the image contained can be performed by constructing the reader and immediately consuming it.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\io\\reader.rs","byte_start":104259,"byte_end":104356,"line_start":20,"line_end":20,"column_start":1,"column_end":98}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\io\\reader.rs","byte_start":104357,"byte_end":104360,"line_start":21,"line_end":21,"column_start":1,"column_end":4}},{"value":"/ ```no_run","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\io\\reader.rs","byte_start":104361,"byte_end":104374,"line_start":22,"line_end":22,"column_start":1,"column_end":14}},{"value":"/ # use image::ImageError;","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\io\\reader.rs","byte_start":104375,"byte_end":104403,"line_start":23,"line_end":23,"column_start":1,"column_end":29}},{"value":"/ # use image::io::Reader;","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\io\\reader.rs","byte_start":104404,"byte_end":104432,"line_start":24,"line_end":24,"column_start":1,"column_end":29}},{"value":"/ # fn main() -> Result<(), ImageError> {","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\io\\reader.rs","byte_start":104433,"byte_end":104476,"line_start":25,"line_end":25,"column_start":1,"column_end":44}},{"value":"/ let image = Reader::open(\"path/to/image.png\")?","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\io\\reader.rs","byte_start":104477,"byte_end":104527,"line_start":26,"line_end":26,"column_start":1,"column_end":51}},{"value":"/     .decode()?;","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\io\\reader.rs","byte_start":104528,"byte_end":104547,"line_start":27,"line_end":27,"column_start":1,"column_end":20}},{"value":"/ # Ok(()) }","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\io\\reader.rs","byte_start":104548,"byte_end":104562,"line_start":28,"line_end":28,"column_start":1,"column_end":15}},{"value":"/ ```","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\io\\reader.rs","byte_start":104563,"byte_end":104570,"line_start":29,"line_end":29,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\io\\reader.rs","byte_start":104571,"byte_end":104574,"line_start":30,"line_end":30,"column_start":1,"column_end":4}},{"value":"/ It is also possible to make a guess based on the content. This is especially handy if the","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\io\\reader.rs","byte_start":104575,"byte_end":104668,"line_start":31,"line_end":31,"column_start":1,"column_end":94}},{"value":"/ source is some blob in memory and you have constructed the reader in another way. Here is an","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\io\\reader.rs","byte_start":104669,"byte_end":104765,"line_start":32,"line_end":32,"column_start":1,"column_end":97}},{"value":"/ example with a `pnm` black-and-white subformat that encodes its pixel matrix with ascii values.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\io\\reader.rs","byte_start":104766,"byte_end":104865,"line_start":33,"line_end":33,"column_start":1,"column_end":100}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\io\\reader.rs","byte_start":104866,"byte_end":104869,"line_start":34,"line_end":34,"column_start":1,"column_end":4}},{"value":"/ # use image::ImageError;","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\io\\reader.rs","byte_start":104965,"byte_end":104993,"line_start":37,"line_end":37,"column_start":1,"column_end":29}},{"value":"/ # use image::io::Reader;","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\io\\reader.rs","byte_start":104994,"byte_end":105022,"line_start":38,"line_end":38,"column_start":1,"column_end":29}},{"value":"/ # fn main() -> Result<(), ImageError> {","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\io\\reader.rs","byte_start":105023,"byte_end":105066,"line_start":39,"line_end":39,"column_start":1,"column_end":44}},{"value":"/ use std::io::Cursor;","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\io\\reader.rs","byte_start":105067,"byte_end":105091,"line_start":40,"line_end":40,"column_start":1,"column_end":25}},{"value":"/ use image::ImageFormat;","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\io\\reader.rs","byte_start":105092,"byte_end":105119,"line_start":41,"line_end":41,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\io\\reader.rs","byte_start":105120,"byte_end":105123,"line_start":42,"line_end":42,"column_start":1,"column_end":4}},{"value":"/ let raw_data = b\"P1 2 2\\n\\","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\io\\reader.rs","byte_start":105124,"byte_end":105154,"line_start":43,"line_end":43,"column_start":1,"column_end":31}},{"value":"/     0 1\\n\\","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\io\\reader.rs","byte_start":105155,"byte_end":105169,"line_start":44,"line_end":44,"column_start":1,"column_end":15}},{"value":"/     1 0\\n\";","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\io\\reader.rs","byte_start":105170,"byte_end":105185,"line_start":45,"line_end":45,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\io\\reader.rs","byte_start":105186,"byte_end":105189,"line_start":46,"line_end":46,"column_start":1,"column_end":4}},{"value":"/ let mut reader = Reader::new(Cursor::new(raw_data))","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\io\\reader.rs","byte_start":105190,"byte_end":105245,"line_start":47,"line_end":47,"column_start":1,"column_end":56}},{"value":"/     .with_guessed_format()","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\io\\reader.rs","byte_start":105246,"byte_end":105276,"line_start":48,"line_end":48,"column_start":1,"column_end":31}},{"value":"/     .expect(\"Cursor io never fails\");","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\io\\reader.rs","byte_start":105277,"byte_end":105318,"line_start":49,"line_end":49,"column_start":1,"column_end":42}},{"value":"/ assert_eq!(reader.format(), Some(ImageFormat::Pnm));","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\io\\reader.rs","byte_start":105319,"byte_end":105375,"line_start":50,"line_end":50,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\io\\reader.rs","byte_start":105376,"byte_end":105379,"line_start":51,"line_end":51,"column_start":1,"column_end":4}},{"value":"/ let image = reader.decode()?;","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\io\\reader.rs","byte_start":105380,"byte_end":105413,"line_start":52,"line_end":52,"column_start":1,"column_end":34}},{"value":"/ # Ok(()) }","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\io\\reader.rs","byte_start":105414,"byte_end":105428,"line_start":53,"line_end":53,"column_start":1,"column_end":15}},{"value":"/ ```","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\io\\reader.rs","byte_start":105429,"byte_end":105436,"line_start":54,"line_end":54,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\io\\reader.rs","byte_start":105437,"byte_end":105440,"line_start":55,"line_end":55,"column_start":1,"column_end":4}},{"value":"/ As a final fallback or if only a specific format must be used, the reader always allows manual","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\io\\reader.rs","byte_start":105441,"byte_end":105539,"line_start":56,"line_end":56,"column_start":1,"column_end":99}},{"value":"/ specification of the supposed image format with [`set_format`].","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\io\\reader.rs","byte_start":105540,"byte_end":105607,"line_start":57,"line_end":57,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\io\\reader.rs","byte_start":105608,"byte_end":105611,"line_start":58,"line_end":58,"column_start":1,"column_end":4}},{"value":"/ [`set_format`]: #method.set_format","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\io\\reader.rs","byte_start":105612,"byte_end":105650,"line_start":59,"line_end":59,"column_start":1,"column_end":39}},{"value":"/ [`ImageDecoder`]: ../trait.ImageDecoder.html","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\io\\reader.rs","byte_start":105651,"byte_end":105699,"line_start":60,"line_end":60,"column_start":1,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":456},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\io\\reader.rs","byte_start":106238,"byte_end":106241,"line_start":76,"line_end":76,"column_start":12,"column_end":15},"name":"new","qualname":"<Reader<R>>::new","value":"pub fn new(R) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new image reader without a preset format.","sig":null,"attributes":[{"value":"/ Create a new image reader without a preset format.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\io\\reader.rs","byte_start":105881,"byte_end":105935,"line_start":69,"line_end":69,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\io\\reader.rs","byte_start":105940,"byte_end":105943,"line_start":70,"line_end":70,"column_start":5,"column_end":8}},{"value":"/ It is possible to guess the format based on the content of the read object with","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\io\\reader.rs","byte_start":105948,"byte_end":106031,"line_start":71,"line_end":71,"column_start":5,"column_end":88}},{"value":"/ [`with_guessed_format`], or to set the format directly with [`set_format`].","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\io\\reader.rs","byte_start":106036,"byte_end":106115,"line_start":72,"line_end":72,"column_start":5,"column_end":84}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\io\\reader.rs","byte_start":106120,"byte_end":106123,"line_start":73,"line_end":73,"column_start":5,"column_end":8}},{"value":"/ [`with_guessed_format`]: #method.with_guessed_format","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\io\\reader.rs","byte_start":106128,"byte_end":106184,"line_start":74,"line_end":74,"column_start":5,"column_end":61}},{"value":"/ [`set_format`]: method.set_format","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\io\\reader.rs","byte_start":106189,"byte_end":106226,"line_start":75,"line_end":75,"column_start":5,"column_end":42}}]},{"kind":"Method","id":{"krate":0,"index":457},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\io\\reader.rs","byte_start":106411,"byte_end":106422,"line_start":84,"line_end":84,"column_start":12,"column_end":23},"name":"with_format","qualname":"<Reader<R>>::with_format","value":"pub fn with_format(R, ImageFormat) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Construct a reader with specified format.\n","sig":null,"attributes":[{"value":"/ Construct a reader with specified format.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\io\\reader.rs","byte_start":106354,"byte_end":106399,"line_start":83,"line_end":83,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":458},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\io\\reader.rs","byte_start":106616,"byte_end":106622,"line_start":92,"line_end":92,"column_start":12,"column_end":18},"name":"format","qualname":"<Reader<R>>::format","value":"pub fn format(&Self) -> Option<ImageFormat>","parent":null,"children":[],"decl_id":null,"docs":" Get the currently determined format.\n","sig":null,"attributes":[{"value":"/ Get the currently determined format.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\io\\reader.rs","byte_start":106564,"byte_end":106604,"line_start":91,"line_end":91,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":459},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\io\\reader.rs","byte_start":106757,"byte_end":106767,"line_start":97,"line_end":97,"column_start":12,"column_end":22},"name":"set_format","qualname":"<Reader<R>>::set_format","value":"pub fn set_format(&mut Self, ImageFormat)","parent":null,"children":[],"decl_id":null,"docs":" Supply the format as which to interpret the read image.\n","sig":null,"attributes":[{"value":"/ Supply the format as which to interpret the read image.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\io\\reader.rs","byte_start":106686,"byte_end":106745,"line_start":96,"line_end":96,"column_start":5,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":460},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\io\\reader.rs","byte_start":107097,"byte_end":107109,"line_start":105,"line_end":105,"column_start":12,"column_end":24},"name":"clear_format","qualname":"<Reader<R>>::clear_format","value":"pub fn clear_format(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":" Remove the current information on the image format.","sig":null,"attributes":[{"value":"/ Remove the current information on the image format.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\io\\reader.rs","byte_start":106849,"byte_end":106904,"line_start":101,"line_end":101,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\io\\reader.rs","byte_start":106909,"byte_end":106912,"line_start":102,"line_end":102,"column_start":5,"column_end":8}},{"value":"/ Note that many operations require format information to be present and will return e.g. an","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\io\\reader.rs","byte_start":106917,"byte_end":107011,"line_start":103,"line_end":103,"column_start":5,"column_end":99}},{"value":"/ `ImageError::Unsupported` when the image format has not been set.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\io\\reader.rs","byte_start":107016,"byte_end":107085,"line_start":104,"line_end":104,"column_start":5,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":461},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\io\\reader.rs","byte_start":107196,"byte_end":107206,"line_start":110,"line_end":110,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<Reader<R>>::into_inner","value":"pub fn into_inner(Self) -> R","parent":null,"children":[],"decl_id":null,"docs":" Unwrap the reader.\n","sig":null,"attributes":[{"value":"/ Unwrap the reader.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\io\\reader.rs","byte_start":107162,"byte_end":107184,"line_start":109,"line_end":109,"column_start":5,"column_end":27}}]},{"kind":"Method","id":{"krate":0,"index":463},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\io\\reader.rs","byte_start":107689,"byte_end":107693,"line_start":124,"line_end":124,"column_start":12,"column_end":16},"name":"open","qualname":"<Reader<BufReader<File>>>::open","value":"pub fn open<P>(P) -> io::Result<Self> where P: AsRef<Path>","parent":null,"children":[],"decl_id":null,"docs":" Open a file to read, format will be guessed from path.","sig":null,"attributes":[{"value":"/ Open a file to read, format will be guessed from path.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\io\\reader.rs","byte_start":107283,"byte_end":107341,"line_start":116,"line_end":116,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\io\\reader.rs","byte_start":107346,"byte_end":107349,"line_start":117,"line_end":117,"column_start":5,"column_end":8}},{"value":"/ This will not attempt any io operation on the opened file.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\io\\reader.rs","byte_start":107354,"byte_end":107416,"line_start":118,"line_end":118,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\io\\reader.rs","byte_start":107421,"byte_end":107424,"line_start":119,"line_end":119,"column_start":5,"column_end":8}},{"value":"/ If you want to inspect the content for a better guess on the format, which does not depend","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\io\\reader.rs","byte_start":107429,"byte_end":107523,"line_start":120,"line_end":120,"column_start":5,"column_end":99}},{"value":"/ on file extensions, follow this call with a call to [`with_guessed_format`].","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\io\\reader.rs","byte_start":107528,"byte_end":107608,"line_start":121,"line_end":121,"column_start":5,"column_end":85}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\io\\reader.rs","byte_start":107613,"byte_end":107616,"line_start":122,"line_end":122,"column_start":5,"column_end":8}},{"value":"/ [`with_guessed_format`]: #method.with_guessed_format","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\io\\reader.rs","byte_start":107621,"byte_end":107677,"line_start":123,"line_end":123,"column_start":5,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":468},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\io\\reader.rs","byte_start":109335,"byte_end":109354,"line_start":166,"line_end":166,"column_start":12,"column_end":31},"name":"with_guessed_format","qualname":"<Reader<R>>::with_guessed_format","value":"pub fn with_guessed_format(Self) -> io::Result<Self>","parent":null,"children":[],"decl_id":null,"docs":" Make a format guess based on the content, replacing it on success.","sig":null,"attributes":[{"value":"/ Make a format guess based on the content, replacing it on success.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\io\\reader.rs","byte_start":108061,"byte_end":108131,"line_start":138,"line_end":138,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\io\\reader.rs","byte_start":108136,"byte_end":108139,"line_start":139,"line_end":139,"column_start":5,"column_end":8}},{"value":"/ Returns `Ok` with the guess if no io error occurs. Additionally, replaces the current","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\io\\reader.rs","byte_start":108144,"byte_end":108233,"line_start":140,"line_end":140,"column_start":5,"column_end":94}},{"value":"/ format if the guess was successful. If the guess was unable to determine a format then","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\io\\reader.rs","byte_start":108238,"byte_end":108328,"line_start":141,"line_end":141,"column_start":5,"column_end":95}},{"value":"/ the current format of the reader is unchanged.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\io\\reader.rs","byte_start":108333,"byte_end":108383,"line_start":142,"line_end":142,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\io\\reader.rs","byte_start":108388,"byte_end":108391,"line_start":143,"line_end":143,"column_start":5,"column_end":8}},{"value":"/ Returns an error if the underlying reader fails. The format is unchanged. The error is a","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\io\\reader.rs","byte_start":108396,"byte_end":108488,"line_start":144,"line_end":144,"column_start":5,"column_end":97}},{"value":"/ `std::io::Error` and not `ImageError` since the only error case is an error when the","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\io\\reader.rs","byte_start":108493,"byte_end":108581,"line_start":145,"line_end":145,"column_start":5,"column_end":93}},{"value":"/ underlying reader seeks.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\io\\reader.rs","byte_start":108586,"byte_end":108614,"line_start":146,"line_end":146,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\io\\reader.rs","byte_start":108619,"byte_end":108622,"line_start":147,"line_end":147,"column_start":5,"column_end":8}},{"value":"/ When an error occurs, the reader may not have been properly reset and it is potentially","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\io\\reader.rs","byte_start":108627,"byte_end":108718,"line_start":148,"line_end":148,"column_start":5,"column_end":96}},{"value":"/ hazardous to continue with more io.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\io\\reader.rs","byte_start":108723,"byte_end":108762,"line_start":149,"line_end":149,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\io\\reader.rs","byte_start":108767,"byte_end":108770,"line_start":150,"line_end":150,"column_start":5,"column_end":8}},{"value":"/ ## Usage","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\io\\reader.rs","byte_start":108775,"byte_end":108787,"line_start":151,"line_end":151,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\io\\reader.rs","byte_start":108792,"byte_end":108795,"line_start":152,"line_end":152,"column_start":5,"column_end":8}},{"value":"/ This supplements the path based type deduction from [`open`](Reader::open) with content based deduction.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\io\\reader.rs","byte_start":108800,"byte_end":108908,"line_start":153,"line_end":153,"column_start":5,"column_end":113}},{"value":"/ This is more common in Linux and UNIX operating systems and also helpful if the path can","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\io\\reader.rs","byte_start":108913,"byte_end":109005,"line_start":154,"line_end":154,"column_start":5,"column_end":97}},{"value":"/ not be directly controlled.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\io\\reader.rs","byte_start":109010,"byte_end":109041,"line_start":155,"line_end":155,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\io\\reader.rs","byte_start":109046,"byte_end":109049,"line_start":156,"line_end":156,"column_start":5,"column_end":8}},{"value":"/ ```no_run","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\io\\reader.rs","byte_start":109054,"byte_end":109067,"line_start":157,"line_end":157,"column_start":5,"column_end":18}},{"value":"/ # use image::ImageError;","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\io\\reader.rs","byte_start":109072,"byte_end":109100,"line_start":158,"line_end":158,"column_start":5,"column_end":33}},{"value":"/ # use image::io::Reader;","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\io\\reader.rs","byte_start":109105,"byte_end":109133,"line_start":159,"line_end":159,"column_start":5,"column_end":33}},{"value":"/ # fn main() -> Result<(), ImageError> {","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\io\\reader.rs","byte_start":109138,"byte_end":109181,"line_start":160,"line_end":160,"column_start":5,"column_end":48}},{"value":"/ let image = Reader::open(\"image.unknown\")?","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\io\\reader.rs","byte_start":109186,"byte_end":109232,"line_start":161,"line_end":161,"column_start":5,"column_end":51}},{"value":"/     .with_guessed_format()?","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\io\\reader.rs","byte_start":109237,"byte_end":109268,"line_start":162,"line_end":162,"column_start":5,"column_end":36}},{"value":"/     .decode()?;","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\io\\reader.rs","byte_start":109273,"byte_end":109292,"line_start":163,"line_end":163,"column_start":5,"column_end":24}},{"value":"/ # Ok(()) }","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\io\\reader.rs","byte_start":109297,"byte_end":109311,"line_start":164,"line_end":164,"column_start":5,"column_end":19}},{"value":"/ ```","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\io\\reader.rs","byte_start":109316,"byte_end":109323,"line_start":165,"line_end":165,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":471},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\io\\reader.rs","byte_start":110312,"byte_end":110327,"line_start":192,"line_end":192,"column_start":12,"column_end":27},"name":"into_dimensions","qualname":"<Reader<R>>::into_dimensions","value":"pub fn into_dimensions(Self) -> ImageResult<(u32, u32)>","parent":null,"children":[],"decl_id":null,"docs":" Read the image dimensions.","sig":null,"attributes":[{"value":"/ Read the image dimensions.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\io\\reader.rs","byte_start":110099,"byte_end":110129,"line_start":187,"line_end":187,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\io\\reader.rs","byte_start":110134,"byte_end":110137,"line_start":188,"line_end":188,"column_start":5,"column_end":8}},{"value":"/ Uses the current format to construct the correct reader for the format.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\io\\reader.rs","byte_start":110142,"byte_end":110217,"line_start":189,"line_end":189,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\io\\reader.rs","byte_start":110222,"byte_end":110225,"line_start":190,"line_end":190,"column_start":5,"column_end":8}},{"value":"/ If no format was determined, returns an `ImageError::Unsupported`.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\io\\reader.rs","byte_start":110230,"byte_end":110300,"line_start":191,"line_end":191,"column_start":5,"column_end":75}}]},{"kind":"Method","id":{"krate":0,"index":472},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\io\\reader.rs","byte_start":110721,"byte_end":110727,"line_start":202,"line_end":202,"column_start":12,"column_end":18},"name":"decode","qualname":"<Reader<R>>::decode","value":"pub fn decode(Self) -> ImageResult<DynamicImage>","parent":null,"children":[],"decl_id":null,"docs":" Read the image (replaces `load`).","sig":null,"attributes":[{"value":"/ Read the image (replaces `load`).","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\io\\reader.rs","byte_start":110501,"byte_end":110538,"line_start":197,"line_end":197,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\io\\reader.rs","byte_start":110543,"byte_end":110546,"line_start":198,"line_end":198,"column_start":5,"column_end":8}},{"value":"/ Uses the current format to construct the correct reader for the format.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\io\\reader.rs","byte_start":110551,"byte_end":110626,"line_start":199,"line_end":199,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\io\\reader.rs","byte_start":110631,"byte_end":110634,"line_start":200,"line_end":200,"column_start":5,"column_end":8}},{"value":"/ If no format was determined, returns an `ImageError::Unsupported`.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\io\\reader.rs","byte_start":110639,"byte_end":110709,"line_start":201,"line_end":201,"column_start":5,"column_end":75}}]},{"kind":"Function","id":{"krate":0,"index":498},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\io\\free_functions.rs","byte_start":112672,"byte_end":112676,"line_start":58,"line_end":58,"column_start":8,"column_end":12},"name":"load","qualname":"::io::free_functions::load","value":"pub fn load<R: BufRead + Seek>(R, ImageFormat) -> ImageResult<DynamicImage>","parent":null,"children":[],"decl_id":null,"docs":" Create a new image from a Reader","sig":null,"attributes":[{"value":"/ Create a new image from a Reader","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\io\\free_functions.rs","byte_start":112459,"byte_end":112495,"line_start":51,"line_end":51,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\io\\free_functions.rs","byte_start":112496,"byte_end":112499,"line_start":52,"line_end":52,"column_start":1,"column_end":4}},{"value":"/ Try [`io::Reader`] for more advanced uses.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\io\\free_functions.rs","byte_start":112500,"byte_end":112546,"line_start":53,"line_end":53,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\io\\free_functions.rs","byte_start":112547,"byte_end":112550,"line_start":54,"line_end":54,"column_start":1,"column_end":4}},{"value":"/ [`io::Reader`]: io/struct.Reader.html","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\io\\free_functions.rs","byte_start":112551,"byte_end":112592,"line_start":55,"line_end":55,"column_start":1,"column_end":42}},{"value":"allow(unused_variables)","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\io\\free_functions.rs","byte_start":112593,"byte_end":112619,"line_start":56,"line_end":56,"column_start":1,"column_end":27}}]},{"kind":"Function","id":{"krate":0,"index":509},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\io\\free_functions.rs","byte_start":121142,"byte_end":121154,"line_start":245,"line_end":245,"column_start":8,"column_end":20},"name":"guess_format","qualname":"::io::free_functions::guess_format","value":"pub fn guess_format(&[u8]) -> ImageResult<ImageFormat>","parent":null,"children":[],"decl_id":null,"docs":" Guess image format from memory block","sig":null,"attributes":[{"value":"/ Guess image format from memory block","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\io\\free_functions.rs","byte_start":120881,"byte_end":120921,"line_start":240,"line_end":240,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\io\\free_functions.rs","byte_start":120922,"byte_end":120925,"line_start":241,"line_end":241,"column_start":1,"column_end":4}},{"value":"/ Makes an educated guess about the image format based on the Magic Bytes at the beginning.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\io\\free_functions.rs","byte_start":120926,"byte_end":121019,"line_start":242,"line_end":242,"column_start":1,"column_end":94}},{"value":"/ TGA is not supported by this function.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\io\\free_functions.rs","byte_start":121020,"byte_end":121062,"line_start":243,"line_end":243,"column_start":1,"column_end":43}},{"value":"/ This is not to be trusted on the validity of the whole memory block","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\io\\free_functions.rs","byte_start":121063,"byte_end":121134,"line_start":244,"line_end":244,"column_start":1,"column_end":72}}]},{"kind":"Mod","id":{"krate":0,"index":512},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"flat","qualname":"::flat","value":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","parent":null,"children":[{"krate":0,"index":513},{"krate":0,"index":514},{"krate":0,"index":515},{"krate":0,"index":516},{"krate":0,"index":517},{"krate":0,"index":518},{"krate":0,"index":519},{"krate":0,"index":520},{"krate":0,"index":521},{"krate":0,"index":3766},{"krate":0,"index":522},{"krate":0,"index":523},{"krate":0,"index":524},{"krate":0,"index":525},{"krate":0,"index":526},{"krate":0,"index":527},{"krate":0,"index":528},{"krate":0,"index":529},{"krate":0,"index":530},{"krate":0,"index":531},{"krate":0,"index":532},{"krate":0,"index":533},{"krate":0,"index":534},{"krate":0,"index":535},{"krate":0,"index":536},{"krate":0,"index":537},{"krate":0,"index":538},{"krate":0,"index":2318},{"krate":0,"index":2326},{"krate":0,"index":2323},{"krate":0,"index":2329},{"krate":0,"index":2349},{"krate":0,"index":2348},{"krate":0,"index":2346},{"krate":0,"index":2342},{"krate":0,"index":2343},{"krate":0,"index":2339},{"krate":0,"index":2340},{"krate":0,"index":2336},{"krate":0,"index":2351},{"krate":0,"index":2377},{"krate":0,"index":2376},{"krate":0,"index":2374},{"krate":0,"index":2370},{"krate":0,"index":2371},{"krate":0,"index":2367},{"krate":0,"index":2368},{"krate":0,"index":2357},{"krate":0,"index":2355},{"krate":0,"index":539},{"krate":0,"index":562},{"krate":0,"index":566},{"krate":0,"index":608},{"krate":0,"index":2379},{"krate":0,"index":2388},{"krate":0,"index":2384},{"krate":0,"index":2392},{"krate":0,"index":2401},{"krate":0,"index":2397},{"krate":0,"index":2405},{"krate":0,"index":2427},{"krate":0,"index":2426},{"krate":0,"index":2424},{"krate":0,"index":2420},{"krate":0,"index":2421},{"krate":0,"index":2417},{"krate":0,"index":2418},{"krate":0,"index":2414},{"krate":0,"index":2429},{"krate":0,"index":2452},{"krate":0,"index":2451},{"krate":0,"index":2449},{"krate":0,"index":2446},{"krate":0,"index":2447},{"krate":0,"index":2443},{"krate":0,"index":2444},{"krate":0,"index":2440},{"krate":0,"index":613},{"krate":0,"index":626},{"krate":0,"index":638},{"krate":0,"index":639},{"krate":0,"index":640},{"krate":0,"index":645},{"krate":0,"index":649},{"krate":0,"index":661},{"krate":0,"index":673},{"krate":0,"index":681},{"krate":0,"index":686},{"krate":0,"index":688},{"krate":0,"index":689}],"decl_id":null,"docs":" Image representations for ffi.","sig":null,"attributes":[{"value":"/ Image representations for ffi.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":121586,"byte_end":121620,"line_start":1,"line_end":1,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":121621,"byte_end":121624,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ # Usage","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":121625,"byte_end":121636,"line_start":3,"line_end":3,"column_start":1,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":121637,"byte_end":121640,"line_start":4,"line_end":4,"column_start":1,"column_end":4}},{"value":"/ Imagine you want to offer a very simple ffi interface: The caller provides an image buffer and","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":121641,"byte_end":121739,"line_start":5,"line_end":5,"column_start":1,"column_end":99}},{"value":"/ your program creates a thumbnail from it and dumps that image as `png`. This module is designed","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":121740,"byte_end":121839,"line_start":6,"line_end":6,"column_start":1,"column_end":100}},{"value":"/ to help you transition from raw memory data to Rust representation.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":121840,"byte_end":121911,"line_start":7,"line_end":7,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":121912,"byte_end":121915,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/ ```no_run","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":121916,"byte_end":121929,"line_start":9,"line_end":9,"column_start":1,"column_end":14}},{"value":"/ use std::ptr;","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":121930,"byte_end":121947,"line_start":10,"line_end":10,"column_start":1,"column_end":18}},{"value":"/ use std::slice;","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":121948,"byte_end":121967,"line_start":11,"line_end":11,"column_start":1,"column_end":20}},{"value":"/ use image::Rgb;","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":121968,"byte_end":121987,"line_start":12,"line_end":12,"column_start":1,"column_end":20}},{"value":"/ use image::flat::{FlatSamples, SampleLayout};","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":121988,"byte_end":122037,"line_start":13,"line_end":13,"column_start":1,"column_end":50}},{"value":"/ use image::imageops::thumbnail;","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":122038,"byte_end":122073,"line_start":14,"line_end":14,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":122074,"byte_end":122077,"line_start":15,"line_end":15,"column_start":1,"column_end":4}},{"value":"/ #[no_mangle]","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":122078,"byte_end":122094,"line_start":16,"line_end":16,"column_start":1,"column_end":17}},{"value":"/ pub extern \"C\" fn store_rgb8_compressed(","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":122095,"byte_end":122139,"line_start":17,"line_end":17,"column_start":1,"column_end":45}},{"value":"/     data: *const u8, len: usize,","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":122140,"byte_end":122176,"line_start":18,"line_end":18,"column_start":1,"column_end":37}},{"value":"/     layout: *const SampleLayout","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":122177,"byte_end":122212,"line_start":19,"line_end":19,"column_start":1,"column_end":36}},{"value":"/ )","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":122213,"byte_end":122218,"line_start":20,"line_end":20,"column_start":1,"column_end":6}},{"value":"/     -> bool","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":122219,"byte_end":122234,"line_start":21,"line_end":21,"column_start":1,"column_end":16}},{"value":"/ {","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":122235,"byte_end":122240,"line_start":22,"line_end":22,"column_start":1,"column_end":6}},{"value":"/     let samples = unsafe { slice::from_raw_parts(data, len) };","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":122241,"byte_end":122307,"line_start":23,"line_end":23,"column_start":1,"column_end":67}},{"value":"/     let layout = unsafe { ptr::read(layout) };","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":122308,"byte_end":122358,"line_start":24,"line_end":24,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":122359,"byte_end":122362,"line_start":25,"line_end":25,"column_start":1,"column_end":4}},{"value":"/     let buffer = FlatSamples {","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":122363,"byte_end":122397,"line_start":26,"line_end":26,"column_start":1,"column_end":35}},{"value":"/         samples,","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":122398,"byte_end":122418,"line_start":27,"line_end":27,"column_start":1,"column_end":21}},{"value":"/         layout,","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":122419,"byte_end":122438,"line_start":28,"line_end":28,"column_start":1,"column_end":20}},{"value":"/         color_hint: None,","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":122439,"byte_end":122468,"line_start":29,"line_end":29,"column_start":1,"column_end":30}},{"value":"/     };","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":122469,"byte_end":122479,"line_start":30,"line_end":30,"column_start":1,"column_end":11}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":122480,"byte_end":122483,"line_start":31,"line_end":31,"column_start":1,"column_end":4}},{"value":"/     let view = match buffer.as_view::<Rgb<u8>>() {","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":122484,"byte_end":122538,"line_start":32,"line_end":32,"column_start":1,"column_end":55}},{"value":"/         Err(_) => return false, // Invalid layout.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":122539,"byte_end":122593,"line_start":33,"line_end":33,"column_start":1,"column_end":55}},{"value":"/         Ok(view) => view,","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":122594,"byte_end":122623,"line_start":34,"line_end":34,"column_start":1,"column_end":30}},{"value":"/     };","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":122624,"byte_end":122634,"line_start":35,"line_end":35,"column_start":1,"column_end":11}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":122635,"byte_end":122638,"line_start":36,"line_end":36,"column_start":1,"column_end":4}},{"value":"/     thumbnail(&view, 64, 64)","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":122639,"byte_end":122671,"line_start":37,"line_end":37,"column_start":1,"column_end":33}},{"value":"/         .save(\"output.png\")","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":122672,"byte_end":122703,"line_start":38,"line_end":38,"column_start":1,"column_end":32}},{"value":"/         .map(|_| true)","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":122704,"byte_end":122730,"line_start":39,"line_end":39,"column_start":1,"column_end":27}},{"value":"/         .unwrap_or_else(|_| false)","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":122731,"byte_end":122769,"line_start":40,"line_end":40,"column_start":1,"column_end":39}},{"value":"/ }","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":122770,"byte_end":122775,"line_start":41,"line_end":41,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":122776,"byte_end":122783,"line_start":42,"line_end":42,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":122784,"byte_end":122787,"line_start":43,"line_end":43,"column_start":1,"column_end":4}}]},{"kind":"Struct","id":{"krate":0,"index":2318},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":124778,"byte_end":124789,"line_start":81,"line_end":81,"column_start":12,"column_end":23},"name":"FlatSamples","qualname":"::flat::FlatSamples","value":"FlatSamples { samples, layout, color_hint }","parent":null,"children":[{"krate":0,"index":2320},{"krate":0,"index":2321},{"krate":0,"index":2322}],"decl_id":null,"docs":" A flat buffer over a (multi channel) image.","sig":null,"attributes":[{"value":"/ A flat buffer over a (multi channel) image.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":123195,"byte_end":123242,"line_start":56,"line_end":56,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":123243,"byte_end":123246,"line_start":57,"line_end":57,"column_start":1,"column_end":4}},{"value":"/ In contrast to `ImageBuffer`, this representation of a sample collection is much more lenient","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":123247,"byte_end":123344,"line_start":58,"line_end":58,"column_start":1,"column_end":98}},{"value":"/ in the layout thereof. It also allows grouping by color planes instead of by pixel as long as","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":123345,"byte_end":123442,"line_start":59,"line_end":59,"column_start":1,"column_end":98}},{"value":"/ the strides of each extent are constant. This struct itself has no invariants on the strides","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":123443,"byte_end":123539,"line_start":60,"line_end":60,"column_start":1,"column_end":97}},{"value":"/ but not every possible configuration can be interpreted as a [`GenericImageView`] or","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":123540,"byte_end":123628,"line_start":61,"line_end":61,"column_start":1,"column_end":89}},{"value":"/ [`GenericImage`]. The methods [`as_view`] and [`as_view_mut`] construct the actual implementors","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":123629,"byte_end":123728,"line_start":62,"line_end":62,"column_start":1,"column_end":100}},{"value":"/ of these traits and perform necessary checks. To manually perform this and other layout checks","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":123729,"byte_end":123827,"line_start":63,"line_end":63,"column_start":1,"column_end":99}},{"value":"/ use [`is_normal`] or [`has_aliased_samples`].","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":123828,"byte_end":123877,"line_start":64,"line_end":64,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":123878,"byte_end":123881,"line_start":65,"line_end":65,"column_start":1,"column_end":4}},{"value":"/ Instances can be constructed not only by hand. The buffer instances returned by library","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":123882,"byte_end":123973,"line_start":66,"line_end":66,"column_start":1,"column_end":92}},{"value":"/ functions such as [`ImageBuffer::as_flat_samples`] guarantee that the conversion to a generic","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":123974,"byte_end":124071,"line_start":67,"line_end":67,"column_start":1,"column_end":98}},{"value":"/ image or generic view succeeds. A very different constructor is [`with_monocolor`]. It uses a","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":124072,"byte_end":124169,"line_start":68,"line_end":68,"column_start":1,"column_end":98}},{"value":"/ single pixel as the backing storage for an arbitrarily sized read-only raster by mapping each","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":124170,"byte_end":124267,"line_start":69,"line_end":69,"column_start":1,"column_end":98}},{"value":"/ pixel to the same samples by setting some strides to `0`.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":124268,"byte_end":124329,"line_start":70,"line_end":70,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":124330,"byte_end":124333,"line_start":71,"line_end":71,"column_start":1,"column_end":4}},{"value":"/ [`GenericImage`]: ../trait.GenericImage.html","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":124334,"byte_end":124382,"line_start":72,"line_end":72,"column_start":1,"column_end":49}},{"value":"/ [`GenericImageView`]: ../trait.GenericImageView.html","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":124383,"byte_end":124439,"line_start":73,"line_end":73,"column_start":1,"column_end":57}},{"value":"/ [`ImageBuffer::as_flat_samples`]: ../struct.ImageBuffer.html#method.as_flat_samples","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":124440,"byte_end":124527,"line_start":74,"line_end":74,"column_start":1,"column_end":88}},{"value":"/ [`is_normal`]: #method.is_normal","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":124528,"byte_end":124564,"line_start":75,"line_end":75,"column_start":1,"column_end":37}},{"value":"/ [`has_aliased_samples`]: #method.has_aliased_samples","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":124565,"byte_end":124621,"line_start":76,"line_end":76,"column_start":1,"column_end":57}},{"value":"/ [`as_view`]: #method.as_view","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":124622,"byte_end":124654,"line_start":77,"line_end":77,"column_start":1,"column_end":33}},{"value":"/ [`as_view_mut`]: #method.as_view_mut","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":124655,"byte_end":124695,"line_start":78,"line_end":78,"column_start":1,"column_end":41}},{"value":"/ [`with_monocolor`]: #method.with_monocolor","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":124696,"byte_end":124742,"line_start":79,"line_end":79,"column_start":1,"column_end":47}}]},{"kind":"Field","id":{"krate":0,"index":2320},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":124867,"byte_end":124874,"line_start":83,"line_end":83,"column_start":9,"column_end":16},"name":"samples","qualname":"::flat::FlatSamples::samples","value":"Buffer","parent":{"krate":0,"index":2318},"children":[],"decl_id":null,"docs":" Underlying linear container holding sample values.\n","sig":null,"attributes":[{"value":"/ Underlying linear container holding sample values.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":124804,"byte_end":124858,"line_start":82,"line_end":82,"column_start":5,"column_end":59}}]},{"kind":"Field","id":{"krate":0,"index":2321},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":124958,"byte_end":124964,"line_start":86,"line_end":86,"column_start":9,"column_end":15},"name":"layout","qualname":"::flat::FlatSamples::layout","value":"flat::SampleLayout","parent":{"krate":0,"index":2318},"children":[],"decl_id":null,"docs":" A `repr(C)` description of the layout of buffer samples.\n","sig":null,"attributes":[{"value":"/ A `repr(C)` description of the layout of buffer samples.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":124889,"byte_end":124949,"line_start":85,"line_end":85,"column_start":5,"column_end":65}}]},{"kind":"Field","id":{"krate":0,"index":2322},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":125419,"byte_end":125429,"line_start":94,"line_end":94,"column_start":9,"column_end":19},"name":"color_hint","qualname":"::flat::FlatSamples::color_hint","value":"std::option::Option<color::ColorType>","parent":{"krate":0,"index":2318},"children":[],"decl_id":null,"docs":" Supplementary color information.","sig":null,"attributes":[{"value":"/ Supplementary color information.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":124985,"byte_end":125021,"line_start":88,"line_end":88,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":125026,"byte_end":125029,"line_start":89,"line_end":89,"column_start":5,"column_end":8}},{"value":"/ You may keep this as `None` in most cases. This is NOT checked in `View` or other","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":125034,"byte_end":125119,"line_start":90,"line_end":90,"column_start":5,"column_end":90}},{"value":"/ converters. It is intended mainly as a way for types that convert to this buffer type to","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":125124,"byte_end":125216,"line_start":91,"line_end":91,"column_start":5,"column_end":97}},{"value":"/ attach their otherwise static color information. A dynamic image representation could","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":125221,"byte_end":125310,"line_start":92,"line_end":92,"column_start":5,"column_end":94}},{"value":"/ however use this to resolve representational ambiguities such as the order of RGB channels.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":125315,"byte_end":125410,"line_start":93,"line_end":93,"column_start":5,"column_end":100}}]},{"kind":"Struct","id":{"krate":0,"index":2329},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":125579,"byte_end":125591,"line_start":100,"line_end":100,"column_start":12,"column_end":24},"name":"SampleLayout","qualname":"::flat::SampleLayout","value":"SampleLayout { channels, channel_stride, width, width_stride, height, height_stride }","parent":null,"children":[{"krate":0,"index":2330},{"krate":0,"index":2331},{"krate":0,"index":2332},{"krate":0,"index":2333},{"krate":0,"index":2334},{"krate":0,"index":2335}],"decl_id":null,"docs":" A ffi compatible description of a sample buffer.\n","sig":null,"attributes":[{"value":"/ A ffi compatible description of a sample buffer.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":125453,"byte_end":125505,"line_start":97,"line_end":97,"column_start":1,"column_end":53}},{"value":"repr(C)","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":125506,"byte_end":125516,"line_start":98,"line_end":98,"column_start":1,"column_end":11}}]},{"kind":"Field","id":{"krate":0,"index":2330},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":125675,"byte_end":125683,"line_start":102,"line_end":102,"column_start":9,"column_end":17},"name":"channels","qualname":"::flat::SampleLayout::channels","value":"u8","parent":{"krate":0,"index":2329},"children":[],"decl_id":null,"docs":" The number of channels in the color representation of the image.\n","sig":null,"attributes":[{"value":"/ The number of channels in the color representation of the image.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":125598,"byte_end":125666,"line_start":101,"line_end":101,"column_start":5,"column_end":73}}]},{"kind":"Field","id":{"krate":0,"index":2331},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":125769,"byte_end":125783,"line_start":105,"line_end":105,"column_start":9,"column_end":23},"name":"channel_stride","qualname":"::flat::SampleLayout::channel_stride","value":"usize","parent":{"krate":0,"index":2329},"children":[],"decl_id":null,"docs":" Add this to an index to get to the sample in the next channel.\n","sig":null,"attributes":[{"value":"/ Add this to an index to get to the sample in the next channel.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":125694,"byte_end":125760,"line_start":104,"line_end":104,"column_start":5,"column_end":71}}]},{"kind":"Field","id":{"krate":0,"index":2332},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":125845,"byte_end":125850,"line_start":108,"line_end":108,"column_start":9,"column_end":14},"name":"width","qualname":"::flat::SampleLayout::width","value":"u32","parent":{"krate":0,"index":2329},"children":[],"decl_id":null,"docs":" The width of the represented image.\n","sig":null,"attributes":[{"value":"/ The width of the represented image.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":125797,"byte_end":125836,"line_start":107,"line_end":107,"column_start":5,"column_end":44}}]},{"kind":"Field","id":{"krate":0,"index":2333},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":125937,"byte_end":125949,"line_start":111,"line_end":111,"column_start":9,"column_end":21},"name":"width_stride","qualname":"::flat::SampleLayout::width_stride","value":"usize","parent":{"krate":0,"index":2329},"children":[],"decl_id":null,"docs":" Add this to an index to get to the next sample in x-direction.\n","sig":null,"attributes":[{"value":"/ Add this to an index to get to the next sample in x-direction.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":125862,"byte_end":125928,"line_start":110,"line_end":110,"column_start":5,"column_end":71}}]},{"kind":"Field","id":{"krate":0,"index":2334},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":126012,"byte_end":126018,"line_start":114,"line_end":114,"column_start":9,"column_end":15},"name":"height","qualname":"::flat::SampleLayout::height","value":"u32","parent":{"krate":0,"index":2329},"children":[],"decl_id":null,"docs":" The height of the represented image.\n","sig":null,"attributes":[{"value":"/ The height of the represented image.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":125963,"byte_end":126003,"line_start":113,"line_end":113,"column_start":5,"column_end":45}}]},{"kind":"Field","id":{"krate":0,"index":2335},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":126105,"byte_end":126118,"line_start":117,"line_end":117,"column_start":9,"column_end":22},"name":"height_stride","qualname":"::flat::SampleLayout::height_stride","value":"usize","parent":{"krate":0,"index":2329},"children":[],"decl_id":null,"docs":" Add this to an index to get to the next sample in y-direction.\n","sig":null,"attributes":[{"value":"/ Add this to an index to get to the next sample in y-direction.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":126030,"byte_end":126096,"line_start":116,"line_end":116,"column_start":5,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":540},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":127093,"byte_end":127109,"line_start":141,"line_end":141,"column_start":12,"column_end":28},"name":"row_major_packed","qualname":"<SampleLayout>::row_major_packed","value":"pub fn row_major_packed(u8, u32, u32) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Describe a row-major image packed in all directions.","sig":null,"attributes":[{"value":"/ Describe a row-major image packed in all directions.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":126299,"byte_end":126355,"line_start":125,"line_end":125,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":126360,"byte_end":126363,"line_start":126,"line_end":126,"column_start":5,"column_end":8}},{"value":"/ The resulting will surely be `NormalForm::RowMajorPacked`. It can therefore be converted to","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":126368,"byte_end":126463,"line_start":127,"line_end":127,"column_start":5,"column_end":100}},{"value":"/ safely to an `ImageBuffer` with a large enough underlying buffer.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":126468,"byte_end":126537,"line_start":128,"line_end":128,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":126542,"byte_end":126545,"line_start":129,"line_end":129,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":126550,"byte_end":126557,"line_start":130,"line_end":130,"column_start":5,"column_end":12}},{"value":"/ # use image::flat::{NormalForm, SampleLayout};","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":126562,"byte_end":126612,"line_start":131,"line_end":131,"column_start":5,"column_end":55}},{"value":"/ let layout = SampleLayout::row_major_packed(3, 640, 480);","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":126617,"byte_end":126678,"line_start":132,"line_end":132,"column_start":5,"column_end":66}},{"value":"/ assert!(layout.is_normal(NormalForm::RowMajorPacked));","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":126683,"byte_end":126741,"line_start":133,"line_end":133,"column_start":5,"column_end":63}},{"value":"/ ```","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":126746,"byte_end":126753,"line_start":134,"line_end":134,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":126758,"byte_end":126761,"line_start":135,"line_end":135,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":126766,"byte_end":126778,"line_start":136,"line_end":136,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":126783,"byte_end":126786,"line_start":137,"line_end":137,"column_start":5,"column_end":8}},{"value":"/ On platforms where `usize` has the same size as `u32` this panics when the resulting stride","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":126791,"byte_end":126886,"line_start":138,"line_end":138,"column_start":5,"column_end":100}},{"value":"/ in the `height` direction would be larger than `usize::max_value()`. On other platforms","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":126891,"byte_end":126982,"line_start":139,"line_end":139,"column_start":5,"column_end":96}},{"value":"/ where it can surely accomodate `u8::max_value() * u32::max_value(), this can never happen.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":126987,"byte_end":127081,"line_start":140,"line_end":140,"column_start":5,"column_end":99}}]},{"kind":"Method","id":{"krate":0,"index":541},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":128360,"byte_end":128379,"line_start":170,"line_end":170,"column_start":12,"column_end":31},"name":"column_major_packed","qualname":"<SampleLayout>::column_major_packed","value":"pub fn column_major_packed(u8, u32, u32) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Describe a column-major image packed in all directions.","sig":null,"attributes":[{"value":"/ Describe a column-major image packed in all directions.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":127547,"byte_end":127606,"line_start":154,"line_end":154,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":127611,"byte_end":127614,"line_start":155,"line_end":155,"column_start":5,"column_end":8}},{"value":"/ The resulting will surely be `NormalForm::ColumnMajorPacked`. This is not particularly","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":127619,"byte_end":127709,"line_start":156,"line_end":156,"column_start":5,"column_end":95}},{"value":"/ useful for conversion but can be used to describe such a buffer without pitfalls.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":127714,"byte_end":127799,"line_start":157,"line_end":157,"column_start":5,"column_end":90}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":127804,"byte_end":127807,"line_start":158,"line_end":158,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":127812,"byte_end":127819,"line_start":159,"line_end":159,"column_start":5,"column_end":12}},{"value":"/ # use image::flat::{NormalForm, SampleLayout};","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":127824,"byte_end":127874,"line_start":160,"line_end":160,"column_start":5,"column_end":55}},{"value":"/ let layout = SampleLayout::column_major_packed(3, 640, 480);","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":127879,"byte_end":127943,"line_start":161,"line_end":161,"column_start":5,"column_end":69}},{"value":"/ assert!(layout.is_normal(NormalForm::ColumnMajorPacked));","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":127948,"byte_end":128009,"line_start":162,"line_end":162,"column_start":5,"column_end":66}},{"value":"/ ```","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":128014,"byte_end":128021,"line_start":163,"line_end":163,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":128026,"byte_end":128029,"line_start":164,"line_end":164,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":128034,"byte_end":128046,"line_start":165,"line_end":165,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":128051,"byte_end":128054,"line_start":166,"line_end":166,"column_start":5,"column_end":8}},{"value":"/ On platforms where `usize` has the same size as `u32` this panics when the resulting stride","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":128059,"byte_end":128154,"line_start":167,"line_end":167,"column_start":5,"column_end":100}},{"value":"/ in the `width` direction would be larger than `usize::max_value()`. On other platforms","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":128159,"byte_end":128249,"line_start":168,"line_end":168,"column_start":5,"column_end":95}},{"value":"/ where it can surely accomodate `u8::max_value() * u32::max_value(), this can never happen.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":128254,"byte_end":128348,"line_start":169,"line_end":169,"column_start":5,"column_end":99}}]},{"kind":"Method","id":{"krate":0,"index":542},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":128995,"byte_end":129006,"line_start":187,"line_end":187,"column_start":12,"column_end":23},"name":"strides_cwh","qualname":"<SampleLayout>::strides_cwh","value":"pub fn strides_cwh(&Self) -> (usize, usize, usize)","parent":null,"children":[],"decl_id":null,"docs":" Get the strides for indexing matrix-like `[(c, w, h)]`.","sig":null,"attributes":[{"value":"/ Get the strides for indexing matrix-like `[(c, w, h)]`.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":128820,"byte_end":128879,"line_start":183,"line_end":183,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":128884,"byte_end":128887,"line_start":184,"line_end":184,"column_start":5,"column_end":8}},{"value":"/ For a row-major layout with grouped samples, this tuple is strictly","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":128892,"byte_end":128963,"line_start":185,"line_end":185,"column_start":5,"column_end":76}},{"value":"/ increasing.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":128968,"byte_end":128983,"line_start":186,"line_end":186,"column_start":5,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":543},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":129323,"byte_end":129330,"line_start":195,"line_end":195,"column_start":12,"column_end":19},"name":"extents","qualname":"<SampleLayout>::extents","value":"pub fn extents(&Self) -> (usize, usize, usize)","parent":null,"children":[],"decl_id":null,"docs":" Get the dimensions `(channels, width, height)`.","sig":null,"attributes":[{"value":"/ Get the dimensions `(channels, width, height)`.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":129121,"byte_end":129172,"line_start":191,"line_end":191,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":129177,"byte_end":129180,"line_start":192,"line_end":192,"column_start":5,"column_end":8}},{"value":"/ The interface is optimized for use with `strides_cwh` instead. The channel extent will be","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":129185,"byte_end":129278,"line_start":193,"line_end":193,"column_start":5,"column_end":98}},{"value":"/ before width and height.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":129283,"byte_end":129311,"line_start":194,"line_end":194,"column_start":5,"column_end":33}}]},{"kind":"Method","id":{"krate":0,"index":544},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":129704,"byte_end":129710,"line_start":203,"line_end":203,"column_start":12,"column_end":18},"name":"bounds","qualname":"<SampleLayout>::bounds","value":"pub fn bounds(&Self) -> (u8, u32, u32)","parent":null,"children":[],"decl_id":null,"docs":" Tuple of bounds in the order of coordinate inputs.","sig":null,"attributes":[{"value":"/ Tuple of bounds in the order of coordinate inputs.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":129452,"byte_end":129506,"line_start":199,"line_end":199,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":129511,"byte_end":129514,"line_start":200,"line_end":200,"column_start":5,"column_end":8}},{"value":"/ This function should be used whenever working with image coordinates opposed to buffer","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":129519,"byte_end":129609,"line_start":201,"line_end":201,"column_start":5,"column_end":95}},{"value":"/ coordinates. The only difference compared to `extents` is the output type.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":129614,"byte_end":129692,"line_start":202,"line_end":202,"column_start":5,"column_end":83}}]},{"kind":"Method","id":{"krate":0,"index":545},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":131863,"byte_end":131873,"line_start":258,"line_end":258,"column_start":12,"column_end":22},"name":"min_length","qualname":"<SampleLayout>::min_length","value":"pub fn min_length(&Self) -> Option<usize>","parent":null,"children":[],"decl_id":null,"docs":" Get the minimum length of a buffer such that all in-bounds samples have valid indices.","sig":null,"attributes":[{"value":"/ Get the minimum length of a buffer such that all in-bounds samples have valid indices.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":129798,"byte_end":129888,"line_start":207,"line_end":207,"column_start":5,"column_end":95}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":129893,"byte_end":129896,"line_start":208,"line_end":208,"column_start":5,"column_end":8}},{"value":"/ This method will allow zero strides, allowing compact representations of monochrome images.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":129901,"byte_end":129996,"line_start":209,"line_end":209,"column_start":5,"column_end":100}},{"value":"/ To check that no aliasing occurs, try `check_alias_invariants`. For compact images (no","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":130001,"byte_end":130091,"line_start":210,"line_end":210,"column_start":5,"column_end":95}},{"value":"/ aliasing and no unindexed samples) this is `width*height*channels`. But for both of the","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":130096,"byte_end":130187,"line_start":211,"line_end":211,"column_start":5,"column_end":96}},{"value":"/ other cases, the reasoning is slightly more involved.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":130192,"byte_end":130249,"line_start":212,"line_end":212,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":130254,"byte_end":130257,"line_start":213,"line_end":213,"column_start":5,"column_end":8}},{"value":"/ # Explanation","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":130262,"byte_end":130279,"line_start":214,"line_end":214,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":130284,"byte_end":130287,"line_start":215,"line_end":215,"column_start":5,"column_end":8}},{"value":"/ Note that there is a difference between `min_length` and the index of the sample","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":130292,"byte_end":130376,"line_start":216,"line_end":216,"column_start":5,"column_end":89}},{"value":"/ 'one-past-the-end`. This is due to strides that may be larger than the dimension below.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":130381,"byte_end":130472,"line_start":217,"line_end":217,"column_start":5,"column_end":96}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":130477,"byte_end":130480,"line_start":218,"line_end":218,"column_start":5,"column_end":8}},{"value":"/ ## Example with holes","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":130485,"byte_end":130510,"line_start":219,"line_end":219,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":130515,"byte_end":130518,"line_start":220,"line_end":220,"column_start":5,"column_end":8}},{"value":"/ Let's look at an example of a grayscale image with","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":130523,"byte_end":130577,"line_start":221,"line_end":221,"column_start":5,"column_end":59}},{"value":"/ * `width_stride = 1`","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":130582,"byte_end":130606,"line_start":222,"line_end":222,"column_start":5,"column_end":29}},{"value":"/ * `width = 2`","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":130611,"byte_end":130628,"line_start":223,"line_end":223,"column_start":5,"column_end":22}},{"value":"/ * `height_stride = 3`","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":130633,"byte_end":130658,"line_start":224,"line_end":224,"column_start":5,"column_end":30}},{"value":"/ * `height = 2`","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":130663,"byte_end":130681,"line_start":225,"line_end":225,"column_start":5,"column_end":23}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":130686,"byte_end":130689,"line_start":226,"line_end":226,"column_start":5,"column_end":8}},{"value":"/ ```text","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":130694,"byte_end":130705,"line_start":227,"line_end":227,"column_start":5,"column_end":16}},{"value":"/ | x x   | x x m | $","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":130710,"byte_end":130733,"line_start":228,"line_end":228,"column_start":5,"column_end":28}},{"value":"/  min_length m ^","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":130738,"byte_end":130757,"line_start":229,"line_end":229,"column_start":5,"column_end":24}},{"value":"/                   ^ one-past-the-end $","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":130762,"byte_end":130804,"line_start":230,"line_end":230,"column_start":5,"column_end":47}},{"value":"/ ```","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":130809,"byte_end":130816,"line_start":231,"line_end":231,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":130821,"byte_end":130824,"line_start":232,"line_end":232,"column_start":5,"column_end":8}},{"value":"/ The difference is also extreme for empty images with large strides. The one-past-the-end","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":130829,"byte_end":130921,"line_start":233,"line_end":233,"column_start":5,"column_end":97}},{"value":"/ sample index is still as large as the largest of these strides while `min_length = 0`.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":130926,"byte_end":131016,"line_start":234,"line_end":234,"column_start":5,"column_end":95}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":131021,"byte_end":131024,"line_start":235,"line_end":235,"column_start":5,"column_end":8}},{"value":"/ ## Example with aliasing","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":131029,"byte_end":131057,"line_start":236,"line_end":236,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":131062,"byte_end":131065,"line_start":237,"line_end":237,"column_start":5,"column_end":8}},{"value":"/ The concept gets even more important when you allow samples to alias each other. Here we","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":131070,"byte_end":131162,"line_start":238,"line_end":238,"column_start":5,"column_end":97}},{"value":"/ have the buffer of a small grayscale image where this is the case, this time we will first","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":131167,"byte_end":131261,"line_start":239,"line_end":239,"column_start":5,"column_end":99}},{"value":"/ show the buffer and then the individual rows below.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":131266,"byte_end":131321,"line_start":240,"line_end":240,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":131326,"byte_end":131329,"line_start":241,"line_end":241,"column_start":5,"column_end":8}},{"value":"/ * `width_stride = 1`","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":131334,"byte_end":131358,"line_start":242,"line_end":242,"column_start":5,"column_end":29}},{"value":"/ * `width = 3`","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":131363,"byte_end":131380,"line_start":243,"line_end":243,"column_start":5,"column_end":22}},{"value":"/ * `height_stride = 2`","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":131385,"byte_end":131410,"line_start":244,"line_end":244,"column_start":5,"column_end":30}},{"value":"/ * `height = 2`","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":131415,"byte_end":131433,"line_start":245,"line_end":245,"column_start":5,"column_end":23}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":131438,"byte_end":131441,"line_start":246,"line_end":246,"column_start":5,"column_end":8}},{"value":"/ ```text","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":131446,"byte_end":131457,"line_start":247,"line_end":247,"column_start":5,"column_end":16}},{"value":"/  1 2 3 4 5 m","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":131462,"byte_end":131478,"line_start":248,"line_end":248,"column_start":5,"column_end":21}},{"value":"/ |1 2 3| row one","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":131483,"byte_end":131502,"line_start":249,"line_end":249,"column_start":5,"column_end":24}},{"value":"/     |3 4 5| row two","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":131507,"byte_end":131530,"line_start":250,"line_end":250,"column_start":5,"column_end":28}},{"value":"/            ^ m min_length","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":131535,"byte_end":131564,"line_start":251,"line_end":251,"column_start":5,"column_end":34}},{"value":"/          ^ ??? one-past-the-end","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":131569,"byte_end":131604,"line_start":252,"line_end":252,"column_start":5,"column_end":40}},{"value":"/ ```","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":131609,"byte_end":131616,"line_start":253,"line_end":253,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":131621,"byte_end":131624,"line_start":254,"line_end":254,"column_start":5,"column_end":8}},{"value":"/ This time 'one-past-the-end' is not even simply the largest stride times the extent of its","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":131629,"byte_end":131723,"line_start":255,"line_end":255,"column_start":5,"column_end":99}},{"value":"/ dimension. That still points inside the image because `height*height_stride = 4` but also","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":131728,"byte_end":131821,"line_start":256,"line_end":256,"column_start":5,"column_end":98}},{"value":"/ `index_of(1, 2) = 4`.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":131826,"byte_end":131851,"line_start":257,"line_end":257,"column_start":5,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":547},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":132205,"byte_end":132209,"line_start":268,"line_end":268,"column_start":12,"column_end":16},"name":"fits","qualname":"<SampleLayout>::fits","value":"pub fn fits(&Self, usize) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Check if a buffer of length `len` is large enough.\n","sig":null,"attributes":[{"value":"/ Check if a buffer of length `len` is large enough.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":132139,"byte_end":132193,"line_start":267,"line_end":267,"column_start":5,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":552},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":133319,"byte_end":133338,"line_start":293,"line_end":293,"column_start":12,"column_end":31},"name":"has_aliased_samples","qualname":"<SampleLayout>::has_aliased_samples","value":"pub fn has_aliased_samples(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" If there are any samples aliasing each other.","sig":null,"attributes":[{"value":"/ If there are any samples aliasing each other.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":132969,"byte_end":133018,"line_start":288,"line_end":288,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":133023,"byte_end":133026,"line_start":289,"line_end":289,"column_start":5,"column_end":8}},{"value":"/ If this is not the case, it would always be safe to allow mutable access to two different","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":133031,"byte_end":133124,"line_start":290,"line_end":290,"column_start":5,"column_end":98}},{"value":"/ samples at the same time. Otherwise, this operation would need additional checks. When one","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":133129,"byte_end":133223,"line_start":291,"line_end":291,"column_start":5,"column_end":99}},{"value":"/ dimension overflows `usize` with its stride we also consider this aliasing.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":133228,"byte_end":133307,"line_start":292,"line_end":292,"column_start":5,"column_end":84}}]},{"kind":"Method","id":{"krate":0,"index":553},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":134583,"byte_end":134592,"line_start":323,"line_end":323,"column_start":12,"column_end":21},"name":"is_normal","qualname":"<SampleLayout>::is_normal","value":"pub fn is_normal(&Self, NormalForm) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Check if a buffer fulfills the requirements of a normal form.","sig":null,"attributes":[{"value":"/ Check if a buffer fulfills the requirements of a normal form.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":134073,"byte_end":134138,"line_start":316,"line_end":316,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":134143,"byte_end":134146,"line_start":317,"line_end":317,"column_start":5,"column_end":8}},{"value":"/ Certain conversions have preconditions on the structure of the sample buffer that are not","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":134151,"byte_end":134244,"line_start":318,"line_end":318,"column_start":5,"column_end":98}},{"value":"/ captured (by design) by the type system. These are then checked before the conversion. Such","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":134249,"byte_end":134344,"line_start":319,"line_end":319,"column_start":5,"column_end":100}},{"value":"/ checks can all be done in constant time and will not inspect the buffer content. You can","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":134349,"byte_end":134441,"line_start":320,"line_end":320,"column_start":5,"column_end":97}},{"value":"/ perform these checks yourself when the conversion is not required at this moment but maybe","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":134446,"byte_end":134540,"line_start":321,"line_end":321,"column_start":5,"column_end":99}},{"value":"/ still performed later.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":134545,"byte_end":134571,"line_start":322,"line_end":322,"column_start":5,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":554},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":136290,"byte_end":136299,"line_start":378,"line_end":378,"column_start":12,"column_end":21},"name":"in_bounds","qualname":"<SampleLayout>::in_bounds","value":"pub fn in_bounds(&Self, u8, u32, u32) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Check that the pixel and the channel index are in bounds.","sig":null,"attributes":[{"value":"/ Check that the pixel and the channel index are in bounds.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":135948,"byte_end":136009,"line_start":373,"line_end":373,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":136014,"byte_end":136017,"line_start":374,"line_end":374,"column_start":5,"column_end":8}},{"value":"/ An in-bound coordinate does not yet guarantee that the corresponding calculation of a","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":136022,"byte_end":136111,"line_start":375,"line_end":375,"column_start":5,"column_end":94}},{"value":"/ buffer index does not overflow. However, if such a buffer large enough to hold all samples","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":136116,"byte_end":136210,"line_start":376,"line_end":376,"column_start":5,"column_end":99}},{"value":"/ actually exists in memory, this porperty of course follows.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":136215,"byte_end":136278,"line_start":377,"line_end":377,"column_start":5,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":555},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":136573,"byte_end":136578,"line_start":385,"line_end":385,"column_start":12,"column_end":17},"name":"index","qualname":"<SampleLayout>::index","value":"pub fn index(&Self, u8, u32, u32) -> Option<usize>","parent":null,"children":[],"decl_id":null,"docs":" Resolve the index of a particular sample.","sig":null,"attributes":[{"value":"/ Resolve the index of a particular sample.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":136426,"byte_end":136471,"line_start":382,"line_end":382,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":136476,"byte_end":136479,"line_start":383,"line_end":383,"column_start":5,"column_end":8}},{"value":"/ `None` if the index is outside the bounds or does not fit into a `usize`.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":136484,"byte_end":136561,"line_start":384,"line_end":384,"column_start":5,"column_end":82}}]},{"kind":"Method","id":{"krate":0,"index":556},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":137172,"byte_end":137193,"line_start":398,"line_end":398,"column_start":12,"column_end":33},"name":"index_ignoring_bounds","qualname":"<SampleLayout>::index_ignoring_bounds","value":"pub fn index_ignoring_bounds(&Self, usize, usize, usize) -> Option<usize>","parent":null,"children":[],"decl_id":null,"docs":" Get the theoretical position of sample (channel, x, y).","sig":null,"attributes":[{"value":"/ Get the theoretical position of sample (channel, x, y).","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":136801,"byte_end":136860,"line_start":393,"line_end":393,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":136865,"byte_end":136868,"line_start":394,"line_end":394,"column_start":5,"column_end":8}},{"value":"/ The 'check' is for overflow during index calculation, not that it is contained in the","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":136873,"byte_end":136962,"line_start":395,"line_end":395,"column_start":5,"column_end":94}},{"value":"/ image. Two samples may return the same index, even when one of them is out of bounds. This","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":136967,"byte_end":137061,"line_start":396,"line_end":396,"column_start":5,"column_end":99}},{"value":"/ happens when all strides are `0`, i.e. the image is an arbitrarily large monochrome image.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":137066,"byte_end":137160,"line_start":397,"line_end":397,"column_start":5,"column_end":99}}]},{"kind":"Method","id":{"krate":0,"index":560},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":138124,"byte_end":138139,"line_start":419,"line_end":419,"column_start":12,"column_end":27},"name":"in_bounds_index","qualname":"<SampleLayout>::in_bounds_index","value":"pub fn in_bounds_index(&Self, u8, u32, u32) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Get an index provided it is inbouds.","sig":null,"attributes":[{"value":"/ Get an index provided it is inbouds.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":137823,"byte_end":137863,"line_start":414,"line_end":414,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":137868,"byte_end":137871,"line_start":415,"line_end":415,"column_start":5,"column_end":8}},{"value":"/ Assumes that the image is backed by some sufficiently large buffer. Then computation can","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":137876,"byte_end":137968,"line_start":416,"line_end":416,"column_start":5,"column_end":97}},{"value":"/ not overflow as we could represent the maximum coordinate. Since overflow is defined either","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":137973,"byte_end":138068,"line_start":417,"line_end":417,"column_start":5,"column_end":100}},{"value":"/ way, this method can not be unsafe.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":138073,"byte_end":138112,"line_start":418,"line_end":418,"column_start":5,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":561},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":138667,"byte_end":138676,"line_start":430,"line_end":430,"column_start":12,"column_end":21},"name":"shrink_to","qualname":"<SampleLayout>::shrink_to","value":"pub fn shrink_to(&mut Self, u8, u32, u32)","parent":null,"children":[],"decl_id":null,"docs":" Shrink the image to the minimum of current and given extents.","sig":null,"attributes":[{"value":"/ Shrink the image to the minimum of current and given extents.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":138342,"byte_end":138407,"line_start":425,"line_end":425,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":138412,"byte_end":138415,"line_start":426,"line_end":426,"column_start":5,"column_end":8}},{"value":"/ This does not modify the strides, so that the resulting sample buffer may have holes","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":138420,"byte_end":138508,"line_start":427,"line_end":427,"column_start":5,"column_end":93}},{"value":"/ created by the shrinking operation. Shrinking could also lead to an non-aliasing image when","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":138513,"byte_end":138608,"line_start":428,"line_end":428,"column_start":5,"column_end":100}},{"value":"/ samples had aliased each other before.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":138613,"byte_end":138655,"line_start":429,"line_end":429,"column_start":5,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":568},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":139349,"byte_end":139360,"line_start":457,"line_end":457,"column_start":12,"column_end":23},"name":"strides_cwh","qualname":"<FlatSamples<Buffer>>::strides_cwh","value":"pub fn strides_cwh(&Self) -> (usize, usize, usize)","parent":null,"children":[],"decl_id":null,"docs":" Get the strides for indexing matrix-like `[(c, w, h)]`.","sig":null,"attributes":[{"value":"/ Get the strides for indexing matrix-like `[(c, w, h)]`.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":139174,"byte_end":139233,"line_start":453,"line_end":453,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":139238,"byte_end":139241,"line_start":454,"line_end":454,"column_start":5,"column_end":8}},{"value":"/ For a row-major layout with grouped samples, this tuple is strictly","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":139246,"byte_end":139317,"line_start":455,"line_end":455,"column_start":5,"column_end":76}},{"value":"/ increasing.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":139322,"byte_end":139337,"line_start":456,"line_end":456,"column_start":5,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":569},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":139642,"byte_end":139649,"line_start":465,"line_end":465,"column_start":12,"column_end":19},"name":"extents","qualname":"<FlatSamples<Buffer>>::extents","value":"pub fn extents(&Self) -> (usize, usize, usize)","parent":null,"children":[],"decl_id":null,"docs":" Get the dimensions `(channels, width, height)`.","sig":null,"attributes":[{"value":"/ Get the dimensions `(channels, width, height)`.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":139440,"byte_end":139491,"line_start":461,"line_end":461,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":139496,"byte_end":139499,"line_start":462,"line_end":462,"column_start":5,"column_end":8}},{"value":"/ The interface is optimized for use with `strides_cwh` instead. The channel extent will be","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":139504,"byte_end":139597,"line_start":463,"line_end":463,"column_start":5,"column_end":98}},{"value":"/ before width and height.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":139602,"byte_end":139630,"line_start":464,"line_end":464,"column_start":5,"column_end":33}}]},{"kind":"Method","id":{"krate":0,"index":570},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":139977,"byte_end":139983,"line_start":473,"line_end":473,"column_start":12,"column_end":18},"name":"bounds","qualname":"<FlatSamples<Buffer>>::bounds","value":"pub fn bounds(&Self) -> (u8, u32, u32)","parent":null,"children":[],"decl_id":null,"docs":" Tuple of bounds in the order of coordinate inputs.","sig":null,"attributes":[{"value":"/ Tuple of bounds in the order of coordinate inputs.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":139725,"byte_end":139779,"line_start":469,"line_end":469,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":139784,"byte_end":139787,"line_start":470,"line_end":470,"column_start":5,"column_end":8}},{"value":"/ This function should be used whenever working with image coordinates opposed to buffer","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":139792,"byte_end":139882,"line_start":471,"line_end":471,"column_start":5,"column_end":95}},{"value":"/ coordinates. The only difference compared to `extents` is the output type.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":139887,"byte_end":139965,"line_start":472,"line_end":472,"column_start":5,"column_end":83}}]},{"kind":"Method","id":{"krate":0,"index":571},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":140097,"byte_end":140103,"line_start":478,"line_end":478,"column_start":12,"column_end":18},"name":"as_ref","qualname":"<FlatSamples<Buffer>>::as_ref","value":"pub fn as_ref<T>(&Self) -> FlatSamples<&[T]> where Buffer: AsRef<[T]>","parent":null,"children":[],"decl_id":null,"docs":" Get a reference based version.\n","sig":null,"attributes":[{"value":"/ Get a reference based version.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":140051,"byte_end":140085,"line_start":477,"line_end":477,"column_start":5,"column_end":39}}]},{"kind":"Method","id":{"krate":0,"index":573},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":140377,"byte_end":140383,"line_start":487,"line_end":487,"column_start":12,"column_end":18},"name":"as_mut","qualname":"<FlatSamples<Buffer>>::as_mut","value":"pub fn as_mut<T>(&mut Self) -> FlatSamples<&mut [T]> where Buffer: AsMut<[T]>","parent":null,"children":[],"decl_id":null,"docs":" Get a mutable reference based version.\n","sig":null,"attributes":[{"value":"/ Get a mutable reference based version.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":140323,"byte_end":140365,"line_start":486,"line_end":486,"column_start":5,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":575},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":140662,"byte_end":140668,"line_start":496,"line_end":496,"column_start":12,"column_end":18},"name":"to_vec","qualname":"<FlatSamples<Buffer>>::to_vec","value":"pub fn to_vec<T>(&Self) -> FlatSamples<Vec<T>> where T: Clone,\nBuffer: AsRef<[T]>","parent":null,"children":[],"decl_id":null,"docs":" Copy the data into an owned vector.\n","sig":null,"attributes":[{"value":"/ Copy the data into an owned vector.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":140611,"byte_end":140650,"line_start":495,"line_end":495,"column_start":5,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":577},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":141941,"byte_end":141951,"line_start":527,"line_end":527,"column_start":12,"column_end":22},"name":"get_sample","qualname":"<FlatSamples<Buffer>>::get_sample","value":"pub fn get_sample<T>(&Self, u8, u32, u32) -> Option<&T> where\nBuffer: AsRef<[T]>","parent":null,"children":[],"decl_id":null,"docs":" Get a reference to a single sample.","sig":null,"attributes":[{"value":"/ Get a reference to a single sample.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":140921,"byte_end":140960,"line_start":506,"line_end":506,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":140965,"byte_end":140968,"line_start":507,"line_end":507,"column_start":5,"column_end":8}},{"value":"/ This more restrictive than the method based on `std::ops::Index` but guarantees to properly","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":140973,"byte_end":141068,"line_start":508,"line_end":508,"column_start":5,"column_end":100}},{"value":"/ check all bounds and not panic as long as `Buffer::as_ref` does not do so.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":141073,"byte_end":141151,"line_start":509,"line_end":509,"column_start":5,"column_end":83}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":141156,"byte_end":141159,"line_start":510,"line_end":510,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":141164,"byte_end":141171,"line_start":511,"line_end":511,"column_start":5,"column_end":12}},{"value":"/ # use image::{RgbImage};","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":141176,"byte_end":141204,"line_start":512,"line_end":512,"column_start":5,"column_end":33}},{"value":"/ let flat = RgbImage::new(480, 640).into_flat_samples();","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":141209,"byte_end":141268,"line_start":513,"line_end":513,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":141273,"byte_end":141276,"line_start":514,"line_end":514,"column_start":5,"column_end":8}},{"value":"/ // Get the blue channel at (10, 10).","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":141281,"byte_end":141321,"line_start":515,"line_end":515,"column_start":5,"column_end":45}},{"value":"/ assert!(flat.get_sample(1, 10, 10).is_some());","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":141326,"byte_end":141376,"line_start":516,"line_end":516,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":141381,"byte_end":141384,"line_start":517,"line_end":517,"column_start":5,"column_end":8}},{"value":"/ // There is no alpha channel.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":141389,"byte_end":141422,"line_start":518,"line_end":518,"column_start":5,"column_end":38}},{"value":"/ assert!(flat.get_sample(3, 10, 10).is_none());","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":141427,"byte_end":141477,"line_start":519,"line_end":519,"column_start":5,"column_end":55}},{"value":"/ ```","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":141482,"byte_end":141489,"line_start":520,"line_end":520,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":141494,"byte_end":141497,"line_start":521,"line_end":521,"column_start":5,"column_end":8}},{"value":"/ For cases where a special buffer does not provide `AsRef<[T]>`, consider encapsulating","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":141502,"byte_end":141592,"line_start":522,"line_end":522,"column_start":5,"column_end":95}},{"value":"/ bounds checks with `min_length` in a type similar to `View`. Then you may use","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":141597,"byte_end":141678,"line_start":523,"line_end":523,"column_start":5,"column_end":86}},{"value":"/ `in_bounds_index` as a small speedup over the index calculation of this method which relies","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":141683,"byte_end":141778,"line_start":524,"line_end":524,"column_start":5,"column_end":100}},{"value":"/ on `index_ignoring_bounds` since it can not have a-priori knowledge that the sample","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":141783,"byte_end":141870,"line_start":525,"line_end":525,"column_start":5,"column_end":92}},{"value":"/ coordinate is in fact backed by any memory buffer.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":141875,"byte_end":141929,"line_start":526,"line_end":526,"column_start":5,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":580},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":143548,"byte_end":143562,"line_start":560,"line_end":560,"column_start":12,"column_end":26},"name":"get_mut_sample","qualname":"<FlatSamples<Buffer>>::get_mut_sample","value":"pub fn get_mut_sample<T>(&mut Self, u8, u32, u32) -> Option<&mut T> where\nBuffer: AsMut<[T]>","parent":null,"children":[],"decl_id":null,"docs":" Get a mutable reference to a single sample.","sig":null,"attributes":[{"value":"/ Get a mutable reference to a single sample.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":142138,"byte_end":142185,"line_start":534,"line_end":534,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":142190,"byte_end":142193,"line_start":535,"line_end":535,"column_start":5,"column_end":8}},{"value":"/ This more restrictive than the method based on `std::ops::IndexMut` but guarantees to","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":142198,"byte_end":142287,"line_start":536,"line_end":536,"column_start":5,"column_end":94}},{"value":"/ properly check all bounds and not panic as long as `Buffer::as_ref` does not do so.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":142292,"byte_end":142379,"line_start":537,"line_end":537,"column_start":5,"column_end":92}},{"value":"/ Contrary to conversion to `ViewMut`, this does not require that samples are packed since it","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":142384,"byte_end":142479,"line_start":538,"line_end":538,"column_start":5,"column_end":100}},{"value":"/ does not need to convert samples to a color representation.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":142484,"byte_end":142547,"line_start":539,"line_end":539,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":142552,"byte_end":142555,"line_start":540,"line_end":540,"column_start":5,"column_end":8}},{"value":"/ **WARNING**: Note that of course samples may alias, so that the mutable reference returned","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":142560,"byte_end":142654,"line_start":541,"line_end":541,"column_start":5,"column_end":99}},{"value":"/ here can in fact modify more than the coordinate in the argument.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":142659,"byte_end":142728,"line_start":542,"line_end":542,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":142733,"byte_end":142736,"line_start":543,"line_end":543,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":142741,"byte_end":142748,"line_start":544,"line_end":544,"column_start":5,"column_end":12}},{"value":"/ # use image::{RgbImage};","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":142753,"byte_end":142781,"line_start":545,"line_end":545,"column_start":5,"column_end":33}},{"value":"/ let mut flat = RgbImage::new(480, 640).into_flat_samples();","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":142786,"byte_end":142849,"line_start":546,"line_end":546,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":142854,"byte_end":142857,"line_start":547,"line_end":547,"column_start":5,"column_end":8}},{"value":"/ // Assign some new color to the blue channel at (10, 10).","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":142862,"byte_end":142923,"line_start":548,"line_end":548,"column_start":5,"column_end":66}},{"value":"/ *flat.get_mut_sample(1, 10, 10).unwrap() = 255;","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":142928,"byte_end":142979,"line_start":549,"line_end":549,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":142984,"byte_end":142987,"line_start":550,"line_end":550,"column_start":5,"column_end":8}},{"value":"/ // There is no alpha channel.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":142992,"byte_end":143025,"line_start":551,"line_end":551,"column_start":5,"column_end":38}},{"value":"/ assert!(flat.get_mut_sample(3, 10, 10).is_none());","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":143030,"byte_end":143084,"line_start":552,"line_end":552,"column_start":5,"column_end":59}},{"value":"/ ```","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":143089,"byte_end":143096,"line_start":553,"line_end":553,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":143101,"byte_end":143104,"line_start":554,"line_end":554,"column_start":5,"column_end":8}},{"value":"/ For cases where a special buffer does not provide `AsRef<[T]>`, consider encapsulating","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":143109,"byte_end":143199,"line_start":555,"line_end":555,"column_start":5,"column_end":95}},{"value":"/ bounds checks with `min_length` in a type similar to `View`. Then you may use","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":143204,"byte_end":143285,"line_start":556,"line_end":556,"column_start":5,"column_end":86}},{"value":"/ `in_bounds_index` as a small speedup over the index calculation of this method which relies","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":143290,"byte_end":143385,"line_start":557,"line_end":557,"column_start":5,"column_end":100}},{"value":"/ on `index_ignoring_bounds` since it can not have a-priori knowledge that the sample","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":143390,"byte_end":143477,"line_start":558,"line_end":558,"column_start":5,"column_end":92}},{"value":"/ coordinate is in fact backed by any memory buffer.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":143482,"byte_end":143536,"line_start":559,"line_end":559,"column_start":5,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":582},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":144226,"byte_end":144233,"line_start":575,"line_end":575,"column_start":12,"column_end":19},"name":"as_view","qualname":"<FlatSamples<Buffer>>::as_view","value":"pub fn as_view<P>(&Self) -> Result<View<&[P::Subpixel], P>, Error> where\nP: Pixel, Buffer: AsRef<[P::Subpixel]>","parent":null,"children":[],"decl_id":null,"docs":" View this buffer as an image over some type of pixel.","sig":null,"attributes":[{"value":"/ View this buffer as an image over some type of pixel.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":143814,"byte_end":143871,"line_start":569,"line_end":569,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":143876,"byte_end":143879,"line_start":570,"line_end":570,"column_start":5,"column_end":8}},{"value":"/ This first ensures that all in-bounds coordinates refer to valid indices in the sample","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":143884,"byte_end":143974,"line_start":571,"line_end":571,"column_start":5,"column_end":95}},{"value":"/ buffer. It also checks that the specified pixel format expects the same number of channels","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":143979,"byte_end":144073,"line_start":572,"line_end":572,"column_start":5,"column_end":99}},{"value":"/ that are present in this buffer. Neither are larger nor a smaller number will be accepted.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":144078,"byte_end":144172,"line_start":573,"line_end":573,"column_start":5,"column_end":99}},{"value":"/ There is no automatic conversion.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":144177,"byte_end":144214,"line_start":574,"line_end":574,"column_start":5,"column_end":42}}]},{"kind":"Method","id":{"krate":0,"index":584},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":145810,"byte_end":145834,"line_start":612,"line_end":612,"column_start":12,"column_end":36},"name":"as_view_with_mut_samples","qualname":"<FlatSamples<Buffer>>::as_view_with_mut_samples","value":"pub fn as_view_with_mut_samples<P>(&mut Self)\n-> Result<View<&mut [P::Subpixel], P>, Error> where P: Pixel,\nBuffer: AsMut<[P::Subpixel]>","parent":null,"children":[],"decl_id":null,"docs":" View this buffer but keep mutability at a sample level.","sig":null,"attributes":[{"value":"/ View this buffer but keep mutability at a sample level.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":144845,"byte_end":144904,"line_start":597,"line_end":597,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":144909,"byte_end":144912,"line_start":598,"line_end":598,"column_start":5,"column_end":8}},{"value":"/ This is similar to `as_view` but subtly different from `as_view_mut`. The resulting type","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":144917,"byte_end":145009,"line_start":599,"line_end":599,"column_start":5,"column_end":97}},{"value":"/ can be used as a `GenericImage` with the same prior invariants needed as for `as_view`.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":145014,"byte_end":145105,"line_start":600,"line_end":600,"column_start":5,"column_end":96}},{"value":"/ It can not be used as a mutable `GenericImage` but does not need channels to be packed in","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":145110,"byte_end":145203,"line_start":601,"line_end":601,"column_start":5,"column_end":98}},{"value":"/ their pixel representation.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":145208,"byte_end":145239,"line_start":602,"line_end":602,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":145244,"byte_end":145247,"line_start":603,"line_end":603,"column_start":5,"column_end":8}},{"value":"/ This first ensures that all in-bounds coordinates refer to valid indices in the sample","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":145252,"byte_end":145342,"line_start":604,"line_end":604,"column_start":5,"column_end":95}},{"value":"/ buffer. It also checks that the specified pixel format expects the same number of channels","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":145347,"byte_end":145441,"line_start":605,"line_end":605,"column_start":5,"column_end":99}},{"value":"/ that are present in this buffer. Neither are larger nor a smaller number will be accepted.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":145446,"byte_end":145540,"line_start":606,"line_end":606,"column_start":5,"column_end":99}},{"value":"/ There is no automatic conversion.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":145545,"byte_end":145582,"line_start":607,"line_end":607,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":145587,"byte_end":145590,"line_start":608,"line_end":608,"column_start":5,"column_end":8}},{"value":"/ **WARNING**: Note that of course samples may alias, so that the mutable reference returned","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":145595,"byte_end":145689,"line_start":609,"line_end":609,"column_start":5,"column_end":99}},{"value":"/ for one sample can in fact modify other samples as well. Sometimes exactly this is","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":145694,"byte_end":145780,"line_start":610,"line_end":610,"column_start":5,"column_end":91}},{"value":"/ intended.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":145785,"byte_end":145798,"line_start":611,"line_end":611,"column_start":5,"column_end":18}}]},{"kind":"Method","id":{"krate":0,"index":586},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":147197,"byte_end":147208,"line_start":645,"line_end":645,"column_start":12,"column_end":23},"name":"as_view_mut","qualname":"<FlatSamples<Buffer>>::as_view_mut","value":"pub fn as_view_mut<P>(&mut Self)\n-> Result<ViewMut<&mut [P::Subpixel], P>, Error> where P: Pixel,\nBuffer: AsMut<[P::Subpixel]>","parent":null,"children":[],"decl_id":null,"docs":" Interpret this buffer as a mutable image.","sig":null,"attributes":[{"value":"/ Interpret this buffer as a mutable image.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":146454,"byte_end":146499,"line_start":634,"line_end":634,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":146504,"byte_end":146507,"line_start":635,"line_end":635,"column_start":5,"column_end":8}},{"value":"/ To succeed, the pixels in this buffer may not alias each other and the samples of each","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":146512,"byte_end":146602,"line_start":636,"line_end":636,"column_start":5,"column_end":95}},{"value":"/ pixel must be packed (i.e. `channel_stride` is `1`). The number of channels must be","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":146607,"byte_end":146694,"line_start":637,"line_end":637,"column_start":5,"column_end":92}},{"value":"/ consistent with the channel count expected by the pixel format.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":146699,"byte_end":146766,"line_start":638,"line_end":638,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":146771,"byte_end":146774,"line_start":639,"line_end":639,"column_start":5,"column_end":8}},{"value":"/ This is similar to an `ImageBuffer` except it is a temporary view that is not normalized as","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":146779,"byte_end":146874,"line_start":640,"line_end":640,"column_start":5,"column_end":100}},{"value":"/ strongly. To get an owning version, consider copying the data into an `ImageBuffer`. This","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":146879,"byte_end":146972,"line_start":641,"line_end":641,"column_start":5,"column_end":98}},{"value":"/ provides many more operations, is possibly faster (if not you may want to open an issue) is","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":146977,"byte_end":147072,"line_start":642,"line_end":642,"column_start":5,"column_end":100}},{"value":"/ generally polished. You can also try to convert this buffer inline, see","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":147077,"byte_end":147152,"line_start":643,"line_end":643,"column_start":5,"column_end":80}},{"value":"/ `ImageBuffer::from_raw`.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":147157,"byte_end":147185,"line_start":644,"line_end":644,"column_start":5,"column_end":33}}]},{"kind":"Method","id":{"krate":0,"index":588},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":148205,"byte_end":148213,"line_start":675,"line_end":675,"column_start":12,"column_end":20},"name":"as_slice","qualname":"<FlatSamples<Buffer>>::as_slice","value":"pub fn as_slice<T>(&Self) -> &[T] where Buffer: AsRef<[T]>","parent":null,"children":[],"decl_id":null,"docs":" View the samples as a slice.","sig":null,"attributes":[{"value":"/ View the samples as a slice.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":147981,"byte_end":148013,"line_start":671,"line_end":671,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":148018,"byte_end":148021,"line_start":672,"line_end":672,"column_start":5,"column_end":8}},{"value":"/ The slice is not limited to the region of the image and not all sample indices are valid","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":148026,"byte_end":148118,"line_start":673,"line_end":673,"column_start":5,"column_end":97}},{"value":"/ indices into this buffer. See `image_mut_slice` as an alternative.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":148123,"byte_end":148193,"line_start":674,"line_end":674,"column_start":5,"column_end":75}}]},{"kind":"Method","id":{"krate":0,"index":590},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":148524,"byte_end":148536,"line_start":683,"line_end":683,"column_start":12,"column_end":24},"name":"as_mut_slice","qualname":"<FlatSamples<Buffer>>::as_mut_slice","value":"pub fn as_mut_slice<T>(&mut Self) -> &mut [T] where Buffer: AsMut<[T]>","parent":null,"children":[],"decl_id":null,"docs":" View the samples as a slice.","sig":null,"attributes":[{"value":"/ View the samples as a slice.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":148300,"byte_end":148332,"line_start":679,"line_end":679,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":148337,"byte_end":148340,"line_start":680,"line_end":680,"column_start":5,"column_end":8}},{"value":"/ The slice is not limited to the region of the image and not all sample indices are valid","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":148345,"byte_end":148437,"line_start":681,"line_end":681,"column_start":5,"column_end":97}},{"value":"/ indices into this buffer. See `image_mut_slice` as an alternative.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":148442,"byte_end":148512,"line_start":682,"line_end":682,"column_start":5,"column_end":75}}]},{"kind":"Method","id":{"krate":0,"index":592},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":148967,"byte_end":148978,"line_start":692,"line_end":692,"column_start":12,"column_end":23},"name":"image_slice","qualname":"<FlatSamples<Buffer>>::image_slice","value":"pub fn image_slice<T>(&Self) -> Option<&[T]> where Buffer: AsRef<[T]>","parent":null,"children":[],"decl_id":null,"docs":" Return the portion of the buffer that holds sample values.","sig":null,"attributes":[{"value":"/ Return the portion of the buffer that holds sample values.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":148631,"byte_end":148693,"line_start":687,"line_end":687,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":148698,"byte_end":148701,"line_start":688,"line_end":688,"column_start":5,"column_end":8}},{"value":"/ This may fail when the coordinates in this image are either out-of-bounds of the underlying","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":148706,"byte_end":148801,"line_start":689,"line_end":689,"column_start":5,"column_end":100}},{"value":"/ buffer or can not be represented. Note that the slice may have holes that do not correspond","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":148806,"byte_end":148901,"line_start":690,"line_end":690,"column_start":5,"column_end":100}},{"value":"/ to any sample in the image represented by it.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":148906,"byte_end":148955,"line_start":691,"line_end":691,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":594},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":149395,"byte_end":149410,"line_start":707,"line_end":707,"column_start":12,"column_end":27},"name":"image_mut_slice","qualname":"<FlatSamples<Buffer>>::image_mut_slice","value":"pub fn image_mut_slice<T>(&mut Self) -> Option<&mut [T]> where\nBuffer: AsMut<[T]>","parent":null,"children":[],"decl_id":null,"docs":" Mutable portion of the buffer that holds sample values.\n","sig":null,"attributes":[{"value":"/ Mutable portion of the buffer that holds sample values.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":149324,"byte_end":149383,"line_start":706,"line_end":706,"column_start":5,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":596},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":150064,"byte_end":150079,"line_start":726,"line_end":726,"column_start":12,"column_end":27},"name":"try_into_buffer","qualname":"<FlatSamples<Buffer>>::try_into_buffer","value":"pub fn try_into_buffer<P>(Self)\n-> Result<ImageBuffer<P, Buffer>, (Error, Self)> where P: Pixel + 'static,\nP::Subpixel: 'static, Buffer: Deref<Target = [P::Subpixel]>","parent":null,"children":[],"decl_id":null,"docs":" Move the data into an image buffer.","sig":null,"attributes":[{"value":"/ Move the data into an image buffer.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":149768,"byte_end":149807,"line_start":721,"line_end":721,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":149812,"byte_end":149815,"line_start":722,"line_end":722,"column_start":5,"column_end":8}},{"value":"/ This does **not** convert the sample layout. The buffer needs to be in packed row-major form","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":149820,"byte_end":149916,"line_start":723,"line_end":723,"column_start":5,"column_end":101}},{"value":"/ before calling this function. In case of an error, returns the buffer again so that it does","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":149921,"byte_end":150016,"line_start":724,"line_end":724,"column_start":5,"column_end":100}},{"value":"/ not release any allocation.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":150021,"byte_end":150052,"line_start":725,"line_end":725,"column_start":5,"column_end":36}}]},{"kind":"Method","id":{"krate":0,"index":599},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":152915,"byte_end":152925,"line_start":800,"line_end":800,"column_start":12,"column_end":22},"name":"min_length","qualname":"<FlatSamples<Buffer>>::min_length","value":"pub fn min_length(&Self) -> Option<usize>","parent":null,"children":[],"decl_id":null,"docs":" Get the minimum length of a buffer such that all in-bounds samples have valid indices.","sig":null,"attributes":[{"value":"/ Get the minimum length of a buffer such that all in-bounds samples have valid indices.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":150850,"byte_end":150940,"line_start":749,"line_end":749,"column_start":5,"column_end":95}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":150945,"byte_end":150948,"line_start":750,"line_end":750,"column_start":5,"column_end":8}},{"value":"/ This method will allow zero strides, allowing compact representations of monochrome images.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":150953,"byte_end":151048,"line_start":751,"line_end":751,"column_start":5,"column_end":100}},{"value":"/ To check that no aliasing occurs, try `check_alias_invariants`. For compact images (no","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":151053,"byte_end":151143,"line_start":752,"line_end":752,"column_start":5,"column_end":95}},{"value":"/ aliasing and no unindexed samples) this is `width*height*channels`. But for both of the","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":151148,"byte_end":151239,"line_start":753,"line_end":753,"column_start":5,"column_end":96}},{"value":"/ other cases, the reasoning is slightly more involved.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":151244,"byte_end":151301,"line_start":754,"line_end":754,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":151306,"byte_end":151309,"line_start":755,"line_end":755,"column_start":5,"column_end":8}},{"value":"/ # Explanation","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":151314,"byte_end":151331,"line_start":756,"line_end":756,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":151336,"byte_end":151339,"line_start":757,"line_end":757,"column_start":5,"column_end":8}},{"value":"/ Note that there is a difference between `min_length` and the index of the sample","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":151344,"byte_end":151428,"line_start":758,"line_end":758,"column_start":5,"column_end":89}},{"value":"/ 'one-past-the-end`. This is due to strides that may be larger than the dimension below.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":151433,"byte_end":151524,"line_start":759,"line_end":759,"column_start":5,"column_end":96}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":151529,"byte_end":151532,"line_start":760,"line_end":760,"column_start":5,"column_end":8}},{"value":"/ ## Example with holes","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":151537,"byte_end":151562,"line_start":761,"line_end":761,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":151567,"byte_end":151570,"line_start":762,"line_end":762,"column_start":5,"column_end":8}},{"value":"/ Let's look at an example of a grayscale image with","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":151575,"byte_end":151629,"line_start":763,"line_end":763,"column_start":5,"column_end":59}},{"value":"/ * `width_stride = 1`","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":151634,"byte_end":151658,"line_start":764,"line_end":764,"column_start":5,"column_end":29}},{"value":"/ * `width = 2`","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":151663,"byte_end":151680,"line_start":765,"line_end":765,"column_start":5,"column_end":22}},{"value":"/ * `height_stride = 3`","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":151685,"byte_end":151710,"line_start":766,"line_end":766,"column_start":5,"column_end":30}},{"value":"/ * `height = 2`","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":151715,"byte_end":151733,"line_start":767,"line_end":767,"column_start":5,"column_end":23}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":151738,"byte_end":151741,"line_start":768,"line_end":768,"column_start":5,"column_end":8}},{"value":"/ ```text","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":151746,"byte_end":151757,"line_start":769,"line_end":769,"column_start":5,"column_end":16}},{"value":"/ | x x   | x x m | $","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":151762,"byte_end":151785,"line_start":770,"line_end":770,"column_start":5,"column_end":28}},{"value":"/  min_length m ^","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":151790,"byte_end":151809,"line_start":771,"line_end":771,"column_start":5,"column_end":24}},{"value":"/                   ^ one-past-the-end $","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":151814,"byte_end":151856,"line_start":772,"line_end":772,"column_start":5,"column_end":47}},{"value":"/ ```","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":151861,"byte_end":151868,"line_start":773,"line_end":773,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":151873,"byte_end":151876,"line_start":774,"line_end":774,"column_start":5,"column_end":8}},{"value":"/ The difference is also extreme for empty images with large strides. The one-past-the-end","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":151881,"byte_end":151973,"line_start":775,"line_end":775,"column_start":5,"column_end":97}},{"value":"/ sample index is still as large as the largest of these strides while `min_length = 0`.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":151978,"byte_end":152068,"line_start":776,"line_end":776,"column_start":5,"column_end":95}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":152073,"byte_end":152076,"line_start":777,"line_end":777,"column_start":5,"column_end":8}},{"value":"/ ## Example with aliasing","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":152081,"byte_end":152109,"line_start":778,"line_end":778,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":152114,"byte_end":152117,"line_start":779,"line_end":779,"column_start":5,"column_end":8}},{"value":"/ The concept gets even more important when you allow samples to alias each other. Here we","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":152122,"byte_end":152214,"line_start":780,"line_end":780,"column_start":5,"column_end":97}},{"value":"/ have the buffer of a small grayscale image where this is the case, this time we will first","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":152219,"byte_end":152313,"line_start":781,"line_end":781,"column_start":5,"column_end":99}},{"value":"/ show the buffer and then the individual rows below.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":152318,"byte_end":152373,"line_start":782,"line_end":782,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":152378,"byte_end":152381,"line_start":783,"line_end":783,"column_start":5,"column_end":8}},{"value":"/ * `width_stride = 1`","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":152386,"byte_end":152410,"line_start":784,"line_end":784,"column_start":5,"column_end":29}},{"value":"/ * `width = 3`","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":152415,"byte_end":152432,"line_start":785,"line_end":785,"column_start":5,"column_end":22}},{"value":"/ * `height_stride = 2`","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":152437,"byte_end":152462,"line_start":786,"line_end":786,"column_start":5,"column_end":30}},{"value":"/ * `height = 2`","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":152467,"byte_end":152485,"line_start":787,"line_end":787,"column_start":5,"column_end":23}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":152490,"byte_end":152493,"line_start":788,"line_end":788,"column_start":5,"column_end":8}},{"value":"/ ```text","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":152498,"byte_end":152509,"line_start":789,"line_end":789,"column_start":5,"column_end":16}},{"value":"/  1 2 3 4 5 m","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":152514,"byte_end":152530,"line_start":790,"line_end":790,"column_start":5,"column_end":21}},{"value":"/ |1 2 3| row one","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":152535,"byte_end":152554,"line_start":791,"line_end":791,"column_start":5,"column_end":24}},{"value":"/     |3 4 5| row two","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":152559,"byte_end":152582,"line_start":792,"line_end":792,"column_start":5,"column_end":28}},{"value":"/            ^ m min_length","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":152587,"byte_end":152616,"line_start":793,"line_end":793,"column_start":5,"column_end":34}},{"value":"/          ^ ??? one-past-the-end","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":152621,"byte_end":152656,"line_start":794,"line_end":794,"column_start":5,"column_end":40}},{"value":"/ ```","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":152661,"byte_end":152668,"line_start":795,"line_end":795,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":152673,"byte_end":152676,"line_start":796,"line_end":796,"column_start":5,"column_end":8}},{"value":"/ This time 'one-past-the-end' is not even simply the largest stride times the extent of its","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":152681,"byte_end":152775,"line_start":797,"line_end":797,"column_start":5,"column_end":99}},{"value":"/ dimension. That still points inside the image because `height*height_stride = 4` but also","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":152780,"byte_end":152873,"line_start":798,"line_end":798,"column_start":5,"column_end":98}},{"value":"/ `index_of(1, 2) = 4`.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":152878,"byte_end":152903,"line_start":799,"line_end":799,"column_start":5,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":600},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":153062,"byte_end":153066,"line_start":805,"line_end":805,"column_start":12,"column_end":16},"name":"fits","qualname":"<FlatSamples<Buffer>>::fits","value":"pub fn fits(&Self, usize) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Check if a buffer of length `len` is large enough.\n","sig":null,"attributes":[{"value":"/ Check if a buffer of length `len` is large enough.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":152996,"byte_end":153050,"line_start":804,"line_end":804,"column_start":5,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":601},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":153487,"byte_end":153506,"line_start":814,"line_end":814,"column_start":12,"column_end":31},"name":"has_aliased_samples","qualname":"<FlatSamples<Buffer>>::has_aliased_samples","value":"pub fn has_aliased_samples(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" If there are any samples aliasing each other.","sig":null,"attributes":[{"value":"/ If there are any samples aliasing each other.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":153137,"byte_end":153186,"line_start":809,"line_end":809,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":153191,"byte_end":153194,"line_start":810,"line_end":810,"column_start":5,"column_end":8}},{"value":"/ If this is not the case, it would always be safe to allow mutable access to two different","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":153199,"byte_end":153292,"line_start":811,"line_end":811,"column_start":5,"column_end":98}},{"value":"/ samples at the same time. Otherwise, this operation would need additional checks. When one","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":153297,"byte_end":153391,"line_start":812,"line_end":812,"column_start":5,"column_end":99}},{"value":"/ dimension overflows `usize` with its stride we also consider this aliasing.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":153396,"byte_end":153475,"line_start":813,"line_end":813,"column_start":5,"column_end":84}}]},{"kind":"Method","id":{"krate":0,"index":602},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":154087,"byte_end":154096,"line_start":825,"line_end":825,"column_start":12,"column_end":21},"name":"is_normal","qualname":"<FlatSamples<Buffer>>::is_normal","value":"pub fn is_normal(&Self, NormalForm) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Check if a buffer fulfills the requirements of a normal form.","sig":null,"attributes":[{"value":"/ Check if a buffer fulfills the requirements of a normal form.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":153577,"byte_end":153642,"line_start":818,"line_end":818,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":153647,"byte_end":153650,"line_start":819,"line_end":819,"column_start":5,"column_end":8}},{"value":"/ Certain conversions have preconditions on the structure of the sample buffer that are not","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":153655,"byte_end":153748,"line_start":820,"line_end":820,"column_start":5,"column_end":98}},{"value":"/ captured (by design) by the type system. These are then checked before the conversion. Such","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":153753,"byte_end":153848,"line_start":821,"line_end":821,"column_start":5,"column_end":100}},{"value":"/ checks can all be done in constant time and will not inspect the buffer content. You can","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":153853,"byte_end":153945,"line_start":822,"line_end":822,"column_start":5,"column_end":97}},{"value":"/ perform these checks yourself when the conversion is not required at this moment but maybe","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":153950,"byte_end":154044,"line_start":823,"line_end":823,"column_start":5,"column_end":99}},{"value":"/ still performed later.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":154049,"byte_end":154075,"line_start":824,"line_end":824,"column_start":5,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":603},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":154521,"byte_end":154530,"line_start":834,"line_end":834,"column_start":12,"column_end":21},"name":"in_bounds","qualname":"<FlatSamples<Buffer>>::in_bounds","value":"pub fn in_bounds(&Self, u8, u32, u32) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Check that the pixel and the channel index are in bounds.","sig":null,"attributes":[{"value":"/ Check that the pixel and the channel index are in bounds.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":154179,"byte_end":154240,"line_start":829,"line_end":829,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":154245,"byte_end":154248,"line_start":830,"line_end":830,"column_start":5,"column_end":8}},{"value":"/ An in-bound coordinate does not yet guarantee that the corresponding calculation of a","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":154253,"byte_end":154342,"line_start":831,"line_end":831,"column_start":5,"column_end":94}},{"value":"/ buffer index does not overflow. However, if such a buffer large enough to hold all samples","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":154347,"byte_end":154441,"line_start":832,"line_end":832,"column_start":5,"column_end":99}},{"value":"/ actually exists in memory, this porperty of course follows.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":154446,"byte_end":154509,"line_start":833,"line_end":833,"column_start":5,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":604},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":154780,"byte_end":154785,"line_start":841,"line_end":841,"column_start":12,"column_end":17},"name":"index","qualname":"<FlatSamples<Buffer>>::index","value":"pub fn index(&Self, u8, u32, u32) -> Option<usize>","parent":null,"children":[],"decl_id":null,"docs":" Resolve the index of a particular sample.","sig":null,"attributes":[{"value":"/ Resolve the index of a particular sample.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":154633,"byte_end":154678,"line_start":838,"line_end":838,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":154683,"byte_end":154686,"line_start":839,"line_end":839,"column_start":5,"column_end":8}},{"value":"/ `None` if the index is outside the bounds or does not fit into a `usize`.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":154691,"byte_end":154768,"line_start":840,"line_end":840,"column_start":5,"column_end":82}}]},{"kind":"Method","id":{"krate":0,"index":605},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":155264,"byte_end":155285,"line_start":850,"line_end":850,"column_start":12,"column_end":33},"name":"index_ignoring_bounds","qualname":"<FlatSamples<Buffer>>::index_ignoring_bounds","value":"pub fn index_ignoring_bounds(&Self, usize, usize, usize) -> Option<usize>","parent":null,"children":[],"decl_id":null,"docs":" Get the theoretical position of sample (x, y, channel).","sig":null,"attributes":[{"value":"/ Get the theoretical position of sample (x, y, channel).","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":154893,"byte_end":154952,"line_start":845,"line_end":845,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":154957,"byte_end":154960,"line_start":846,"line_end":846,"column_start":5,"column_end":8}},{"value":"/ The 'check' is for overflow during index calculation, not that it is contained in the","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":154965,"byte_end":155054,"line_start":847,"line_end":847,"column_start":5,"column_end":94}},{"value":"/ image. Two samples may return the same index, even when one of them is out of bounds. This","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":155059,"byte_end":155153,"line_start":848,"line_end":848,"column_start":5,"column_end":99}},{"value":"/ happens when all strides are `0`, i.e. the image is an arbitrarily large monochrome image.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":155158,"byte_end":155252,"line_start":849,"line_end":849,"column_start":5,"column_end":99}}]},{"kind":"Method","id":{"krate":0,"index":606},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":155717,"byte_end":155732,"line_start":859,"line_end":859,"column_start":12,"column_end":27},"name":"in_bounds_index","qualname":"<FlatSamples<Buffer>>::in_bounds_index","value":"pub fn in_bounds_index(&Self, u8, u32, u32) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Get an index provided it is inbouds.","sig":null,"attributes":[{"value":"/ Get an index provided it is inbouds.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":155416,"byte_end":155456,"line_start":854,"line_end":854,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":155461,"byte_end":155464,"line_start":855,"line_end":855,"column_start":5,"column_end":8}},{"value":"/ Assumes that the image is backed by some sufficiently large buffer. Then computation can","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":155469,"byte_end":155561,"line_start":856,"line_end":856,"column_start":5,"column_end":97}},{"value":"/ not overflow as we could represent the maximum coordinate. Since overflow is defined either","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":155566,"byte_end":155661,"line_start":857,"line_end":857,"column_start":5,"column_end":100}},{"value":"/ way, this method can not be unsafe.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":155666,"byte_end":155705,"line_start":858,"line_end":858,"column_start":5,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":607},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":156167,"byte_end":156176,"line_start":868,"line_end":868,"column_start":12,"column_end":21},"name":"shrink_to","qualname":"<FlatSamples<Buffer>>::shrink_to","value":"pub fn shrink_to(&mut Self, u8, u32, u32)","parent":null,"children":[],"decl_id":null,"docs":" Shrink the image to the minimum of current and given extents.","sig":null,"attributes":[{"value":"/ Shrink the image to the minimum of current and given extents.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":155842,"byte_end":155907,"line_start":863,"line_end":863,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":155912,"byte_end":155915,"line_start":864,"line_end":864,"column_start":5,"column_end":8}},{"value":"/ This does not modify the strides, so that the resulting sample buffer may have holes","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":155920,"byte_end":156008,"line_start":865,"line_end":865,"column_start":5,"column_end":93}},{"value":"/ created by the shrinking operation. Shrinking could also lead to an non-aliasing image when","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":156013,"byte_end":156108,"line_start":866,"line_end":866,"column_start":5,"column_end":100}},{"value":"/ samples had aliased each other before.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":156113,"byte_end":156155,"line_start":867,"line_end":867,"column_start":5,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":611},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":157062,"byte_end":157076,"line_start":894,"line_end":894,"column_start":12,"column_end":26},"name":"with_monocolor","qualname":"<FlatSamples<&'buf [Subpixel]>>::with_monocolor","value":"pub fn with_monocolor<P>(&'buf P, u32, u32) -> Self where P: Pixel<Subpixel =\nSubpixel>, Subpixel: Primitive","parent":null,"children":[],"decl_id":null,"docs":" Create a monocolor image from a single pixel.","sig":null,"attributes":[{"value":"/ Create a monocolor image from a single pixel.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":156350,"byte_end":156399,"line_start":874,"line_end":874,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":156404,"byte_end":156407,"line_start":875,"line_end":875,"column_start":5,"column_end":8}},{"value":"/ This can be used as a very cheap source of a `GenericImageView` with an arbitrary number of","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":156412,"byte_end":156507,"line_start":876,"line_end":876,"column_start":5,"column_end":100}},{"value":"/ pixels of a single color, without any dynamic allocation.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":156512,"byte_end":156573,"line_start":877,"line_end":877,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":156578,"byte_end":156581,"line_start":878,"line_end":878,"column_start":5,"column_end":8}},{"value":"/ ## Examples","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":156586,"byte_end":156601,"line_start":879,"line_end":879,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":156606,"byte_end":156609,"line_start":880,"line_end":880,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":156614,"byte_end":156621,"line_start":881,"line_end":881,"column_start":5,"column_end":12}},{"value":"/ # fn paint_something<T>(_: T) {}","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":156626,"byte_end":156662,"line_start":882,"line_end":882,"column_start":5,"column_end":41}},{"value":"/ use image::{flat::FlatSamples, GenericImage, RgbImage, Rgb};","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":156667,"byte_end":156731,"line_start":883,"line_end":883,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":156736,"byte_end":156739,"line_start":884,"line_end":884,"column_start":5,"column_end":8}},{"value":"/ let background = Rgb([20, 20, 20]);","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":156744,"byte_end":156783,"line_start":885,"line_end":885,"column_start":5,"column_end":44}},{"value":"/ let bg = FlatSamples::with_monocolor(&background, 200, 200);;","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":156788,"byte_end":156853,"line_start":886,"line_end":886,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":156858,"byte_end":156861,"line_start":887,"line_end":887,"column_start":5,"column_end":8}},{"value":"/ let mut image = RgbImage::new(200, 200);","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":156866,"byte_end":156910,"line_start":888,"line_end":888,"column_start":5,"column_end":49}},{"value":"/ paint_something(&mut image);","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":156915,"byte_end":156947,"line_start":889,"line_end":889,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":156952,"byte_end":156955,"line_start":890,"line_end":890,"column_start":5,"column_end":8}},{"value":"/ // Reset the canvas","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":156960,"byte_end":156983,"line_start":891,"line_end":891,"column_start":5,"column_end":28}},{"value":"/ image.copy_from(&bg.as_view().unwrap(), 0, 0);","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":156988,"byte_end":157038,"line_start":892,"line_end":892,"column_start":5,"column_end":55}},{"value":"/ ```","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":157043,"byte_end":157050,"line_start":893,"line_end":893,"column_start":5,"column_end":12}}]},{"kind":"Struct","id":{"krate":0,"index":2379},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":158281,"byte_end":158285,"line_start":929,"line_end":929,"column_start":12,"column_end":16},"name":"View","qualname":"::flat::View","value":"View {  }","parent":null,"children":[{"krate":0,"index":2382},{"krate":0,"index":2383}],"decl_id":null,"docs":" A flat buffer that can be used as an image view.","sig":null,"attributes":[{"value":"/ A flat buffer that can be used as an image view.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":157579,"byte_end":157631,"line_start":914,"line_end":914,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":157632,"byte_end":157635,"line_start":915,"line_end":915,"column_start":1,"column_end":4}},{"value":"/ This is a nearly trivial wrapper around a buffer but at least sanitizes by checking the buffer","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":157636,"byte_end":157734,"line_start":916,"line_end":916,"column_start":1,"column_end":99}},{"value":"/ length first and constraining the pixel type.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":157735,"byte_end":157784,"line_start":917,"line_end":917,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":157785,"byte_end":157788,"line_start":918,"line_end":918,"column_start":1,"column_end":4}},{"value":"/ Note that this does not eliminate panics as the `AsRef<[T]>` implementation of `Buffer` may be","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":157789,"byte_end":157887,"line_start":919,"line_end":919,"column_start":1,"column_end":99}},{"value":"/ unreliable, i.e. return different buffers at different times. This of course is a non-issue for","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":157888,"byte_end":157987,"line_start":920,"line_end":920,"column_start":1,"column_end":100}},{"value":"/ all common collections where the bounds check once must be enough.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":157988,"byte_end":158058,"line_start":921,"line_end":921,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":158059,"byte_end":158062,"line_start":922,"line_end":922,"column_start":1,"column_end":4}},{"value":"/ # Inner invariants","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":158063,"byte_end":158085,"line_start":923,"line_end":923,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":158086,"byte_end":158089,"line_start":924,"line_end":924,"column_start":1,"column_end":4}},{"value":"/ * For all indices inside bounds, the corresponding index is valid in the buffer","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":158090,"byte_end":158173,"line_start":925,"line_end":925,"column_start":1,"column_end":84}},{"value":"/ * `P::channel_count()` agrees with `self.inner.layout.channels`","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":158174,"byte_end":158241,"line_start":926,"line_end":926,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":158242,"byte_end":158245,"line_start":927,"line_end":927,"column_start":1,"column_end":4}}]},{"kind":"Struct","id":{"krate":0,"index":2392},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":159131,"byte_end":159138,"line_start":952,"line_end":952,"column_start":12,"column_end":19},"name":"ViewMut","qualname":"::flat::ViewMut","value":"ViewMut {  }","parent":null,"children":[{"krate":0,"index":2395},{"krate":0,"index":2396}],"decl_id":null,"docs":" A mutable owning version of a flat buffer.","sig":null,"attributes":[{"value":"/ A mutable owning version of a flat buffer.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":158409,"byte_end":158455,"line_start":937,"line_end":937,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":158456,"byte_end":158459,"line_start":938,"line_end":938,"column_start":1,"column_end":4}},{"value":"/ While this wraps a buffer similar to `ImageBuffer`, this is mostly intended as a utility. The","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":158460,"byte_end":158557,"line_start":939,"line_end":939,"column_start":1,"column_end":98}},{"value":"/ library endorsed normalized representation is still `ImageBuffer`. Also, the implementation of","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":158558,"byte_end":158656,"line_start":940,"line_end":940,"column_start":1,"column_end":99}},{"value":"/ `AsMut<[P::Subpixel]>` must always yield the same buffer. Therefore there is no public way to","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":158657,"byte_end":158754,"line_start":941,"line_end":941,"column_start":1,"column_end":98}},{"value":"/ construct this with an owning buffer.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":158755,"byte_end":158796,"line_start":942,"line_end":942,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":158797,"byte_end":158800,"line_start":943,"line_end":943,"column_start":1,"column_end":4}},{"value":"/ # Inner invariants","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":158801,"byte_end":158823,"line_start":944,"line_end":944,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":158824,"byte_end":158827,"line_start":945,"line_end":945,"column_start":1,"column_end":4}},{"value":"/ * For all indices inside bounds, the corresponding index is valid in the buffer","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":158828,"byte_end":158911,"line_start":946,"line_end":946,"column_start":1,"column_end":84}},{"value":"/ * There is no aliasing of samples","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":158912,"byte_end":158949,"line_start":947,"line_end":947,"column_start":1,"column_end":38}},{"value":"/ * The samples are packed, i.e. `self.inner.layout.sample_stride == 1`","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":158950,"byte_end":159023,"line_start":948,"line_end":948,"column_start":1,"column_end":74}},{"value":"/ * `P::channel_count()` agrees with `self.inner.layout.channels`","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":159024,"byte_end":159091,"line_start":949,"line_end":949,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":159092,"byte_end":159095,"line_start":950,"line_end":950,"column_start":1,"column_end":4}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2406},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":159846,"byte_end":159854,"line_start":971,"line_end":971,"column_start":5,"column_end":13},"name":"TooLarge","qualname":"::flat::Error::TooLarge","value":"Error::TooLarge","parent":{"krate":0,"index":2405},"children":[],"decl_id":null,"docs":" The represented image was too large.","sig":null,"attributes":[{"value":"/ The represented image was too large.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":159723,"byte_end":159763,"line_start":968,"line_end":968,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":159768,"byte_end":159771,"line_start":969,"line_end":969,"column_start":5,"column_end":8}},{"value":"/ The optional value denotes a possibly accepted maximal bound.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":159776,"byte_end":159841,"line_start":970,"line_end":970,"column_start":5,"column_end":70}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2408},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":160011,"byte_end":160029,"line_start":976,"line_end":976,"column_start":5,"column_end":23},"name":"NormalFormRequired","qualname":"::flat::Error::NormalFormRequired","value":"Error::NormalFormRequired(NormalForm)","parent":{"krate":0,"index":2405},"children":[],"decl_id":null,"docs":" The represented image can not use this representation.","sig":null,"attributes":[{"value":"/ The represented image can not use this representation.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":159861,"byte_end":159919,"line_start":973,"line_end":973,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":159924,"byte_end":159927,"line_start":974,"line_end":974,"column_start":5,"column_end":8}},{"value":"/ Has an additional value of the normalized form that would be accepted.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":159932,"byte_end":160006,"line_start":975,"line_end":975,"column_start":5,"column_end":79}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2411},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":160638,"byte_end":160648,"line_start":987,"line_end":987,"column_start":5,"column_end":15},"name":"WrongColor","qualname":"::flat::Error::WrongColor","value":"Error::WrongColor(ColorType)","parent":{"krate":0,"index":2405},"children":[],"decl_id":null,"docs":" The color format did not match the channel count.","sig":null,"attributes":[{"value":"/ The color format did not match the channel count.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":160048,"byte_end":160101,"line_start":978,"line_end":978,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":160106,"byte_end":160109,"line_start":979,"line_end":979,"column_start":5,"column_end":8}},{"value":"/ In some cases you might be able to fix this by lowering the reported pixel count of the","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":160114,"byte_end":160205,"line_start":980,"line_end":980,"column_start":5,"column_end":96}},{"value":"/ buffer without touching the strides.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":160210,"byte_end":160250,"line_start":981,"line_end":981,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":160255,"byte_end":160258,"line_start":982,"line_end":982,"column_start":5,"column_end":8}},{"value":"/ In very special circumstances you *may* do the opposite. This is **VERY** dangerous but not","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":160263,"byte_end":160358,"line_start":983,"line_end":983,"column_start":5,"column_end":100}},{"value":"/ directly memory unsafe although that will likely alias pixels. One scenario is when you","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":160363,"byte_end":160454,"line_start":984,"line_end":984,"column_start":5,"column_end":96}},{"value":"/ want to construct an `Rgba` image but have only 3 bytes per pixel and for some reason don't","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":160459,"byte_end":160554,"line_start":985,"line_end":985,"column_start":5,"column_end":100}},{"value":"/ care about the value of the alpha channel even though you need `Rgba`.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":160559,"byte_end":160633,"line_start":986,"line_end":986,"column_start":5,"column_end":79}}]},{"kind":"Enum","id":{"krate":0,"index":2405},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":159711,"byte_end":159716,"line_start":967,"line_end":967,"column_start":10,"column_end":15},"name":"Error","qualname":"::flat::Error","value":"pub enum Error {\n\n    /// The represented image was too large.\n    ///\n    /// The optional value denotes a possibly accepted maximal bound.\n    TooLarge,\n\n    /// The represented image can not use this representation.\n    ///\n    /// Has an additional value of the normalized form that would be accepted.\n    NormalFormRequired(NormalForm),\n\n    /// The color format did not match the channel count.\n    ///\n    /// In some cases you might be able to fix this by lowering the reported pixel count of the\n    /// buffer without touching the strides.\n    ///\n    /// In very special circumstances you *may* do the opposite. This is **VERY** dangerous but not\n    /// directly memory unsafe although that will likely alias pixels. One scenario is when you\n    /// want to construct an `Rgba` image but have only 3 bytes per pixel and for some reason don't\n    /// care about the value of the alpha channel even though you need `Rgba`.\n    WrongColor(ColorType),\n}","parent":null,"children":[{"krate":0,"index":2406},{"krate":0,"index":2408},{"krate":0,"index":2411}],"decl_id":null,"docs":" Denotes invalid flat sample buffers when trying to convert to stricter types.","sig":null,"attributes":[{"value":"/ Denotes invalid flat sample buffers when trying to convert to stricter types.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":159262,"byte_end":159343,"line_start":960,"line_end":960,"column_start":1,"column_end":82}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":159344,"byte_end":159347,"line_start":961,"line_end":961,"column_start":1,"column_end":4}},{"value":"/ The biggest use case being `ImageBuffer` which expects closely packed","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":159348,"byte_end":159421,"line_start":962,"line_end":962,"column_start":1,"column_end":74}},{"value":"/ samples in a row major matrix representation. But this error type may be","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":159422,"byte_end":159498,"line_start":963,"line_end":963,"column_start":1,"column_end":77}},{"value":"/ resused for other import functions. A more versatile user may also try to","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":159499,"byte_end":159576,"line_start":964,"line_end":964,"column_start":1,"column_end":78}},{"value":"/ correct the underlying representation depending on the error variant.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":159577,"byte_end":159650,"line_start":965,"line_end":965,"column_start":1,"column_end":74}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2430},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":161147,"byte_end":161156,"line_start":1000,"line_end":1000,"column_start":5,"column_end":14},"name":"Unaliased","qualname":"::flat::NormalForm::Unaliased","value":"NormalForm::Unaliased","parent":{"krate":0,"index":2429},"children":[],"decl_id":null,"docs":" No pixel aliases another.","sig":null,"attributes":[{"value":"/ No pixel aliases another.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":160924,"byte_end":160953,"line_start":996,"line_end":996,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":160958,"byte_end":160961,"line_start":997,"line_end":997,"column_start":5,"column_end":8}},{"value":"/ Unaliased also guarantees that all index calculations in the image bounds using","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":160966,"byte_end":161049,"line_start":998,"line_end":998,"column_start":5,"column_end":88}},{"value":"/ `dim_index*dim_stride` (such as `x*width_stride + y*height_stride`) do not overflow.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":161054,"byte_end":161142,"line_start":999,"line_end":999,"column_start":5,"column_end":93}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2432},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":161386,"byte_end":161397,"line_start":1006,"line_end":1006,"column_start":5,"column_end":16},"name":"PixelPacked","qualname":"::flat::NormalForm::PixelPacked","value":"NormalForm::PixelPacked","parent":{"krate":0,"index":2429},"children":[],"decl_id":null,"docs":" At least pixels are packed.","sig":null,"attributes":[{"value":"/ At least pixels are packed.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":161163,"byte_end":161194,"line_start":1002,"line_end":1002,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":161199,"byte_end":161202,"line_start":1003,"line_end":1003,"column_start":5,"column_end":8}},{"value":"/ Images of these types can wrap `[T]`-slices into the standard color types. This is a","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":161207,"byte_end":161295,"line_start":1004,"line_end":1004,"column_start":5,"column_end":93}},{"value":"/ precondition for `GenericImage` which requires by-reference access to pixels.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":161300,"byte_end":161381,"line_start":1005,"line_end":1005,"column_start":5,"column_end":86}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2434},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":161681,"byte_end":161692,"line_start":1013,"line_end":1013,"column_start":5,"column_end":16},"name":"ImagePacked","qualname":"::flat::NormalForm::ImagePacked","value":"NormalForm::ImagePacked","parent":{"krate":0,"index":2429},"children":[],"decl_id":null,"docs":" All samples are packed.","sig":null,"attributes":[{"value":"/ All samples are packed.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":161404,"byte_end":161431,"line_start":1008,"line_end":1008,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":161436,"byte_end":161439,"line_start":1009,"line_end":1009,"column_start":5,"column_end":8}},{"value":"/ This is orthogonal to `PixelPacked`. It requires that there are no holes in the image but","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":161444,"byte_end":161537,"line_start":1010,"line_end":1010,"column_start":5,"column_end":98}},{"value":"/ it is not necessary that the pixel samples themselves are adjacent. An example of this","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":161542,"byte_end":161632,"line_start":1011,"line_end":1011,"column_start":5,"column_end":95}},{"value":"/ behaviour is a planar image layout.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":161637,"byte_end":161676,"line_start":1012,"line_end":1012,"column_start":5,"column_end":44}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2436},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":161902,"byte_end":161916,"line_start":1019,"line_end":1019,"column_start":5,"column_end":19},"name":"RowMajorPacked","qualname":"::flat::NormalForm::RowMajorPacked","value":"NormalForm::RowMajorPacked","parent":{"krate":0,"index":2429},"children":[],"decl_id":null,"docs":" The samples are in row-major form and all samples are packed.","sig":null,"attributes":[{"value":"/ The samples are in row-major form and all samples are packed.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":161699,"byte_end":161764,"line_start":1015,"line_end":1015,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":161769,"byte_end":161772,"line_start":1016,"line_end":1016,"column_start":5,"column_end":8}},{"value":"/ In addition to `PixelPacked` and `ImagePacked` this also asserts that the pixel matrix is","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":161777,"byte_end":161870,"line_start":1017,"line_end":1017,"column_start":5,"column_end":98}},{"value":"/ in row-major form.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":161875,"byte_end":161897,"line_start":1018,"line_end":1018,"column_start":5,"column_end":27}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2438},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":162132,"byte_end":162149,"line_start":1025,"line_end":1025,"column_start":5,"column_end":22},"name":"ColumnMajorPacked","qualname":"::flat::NormalForm::ColumnMajorPacked","value":"NormalForm::ColumnMajorPacked","parent":{"krate":0,"index":2429},"children":[],"decl_id":null,"docs":" The samples are in column-major form and all samples are packed.","sig":null,"attributes":[{"value":"/ The samples are in column-major form and all samples are packed.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":161923,"byte_end":161991,"line_start":1021,"line_end":1021,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":161996,"byte_end":161999,"line_start":1022,"line_end":1022,"column_start":5,"column_end":8}},{"value":"/ In addition to `PixelPacked` and `ImagePacked` this also asserts that the pixel matrix is","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":162004,"byte_end":162097,"line_start":1023,"line_end":1023,"column_start":5,"column_end":98}},{"value":"/ in column-major form.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":162102,"byte_end":162127,"line_start":1024,"line_end":1024,"column_start":5,"column_end":30}}]},{"kind":"Enum","id":{"krate":0,"index":2429},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":160907,"byte_end":160917,"line_start":995,"line_end":995,"column_start":10,"column_end":20},"name":"NormalForm","qualname":"::flat::NormalForm","value":"pub enum NormalForm {\n\n    /// No pixel aliases another.\n    ///\n    /// Unaliased also guarantees that all index calculations in the image bounds using\n    /// `dim_index*dim_stride` (such as `x*width_stride + y*height_stride`) do not overflow.\n    Unaliased,\n\n    /// At least pixels are packed.\n    ///\n    /// Images of these types can wrap `[T]`-slices into the standard color types. This is a\n    /// precondition for `GenericImage` which requires by-reference access to pixels.\n    PixelPacked,\n\n    /// All samples are packed.\n    ///\n    /// This is orthogonal to `PixelPacked`. It requires that there are no holes in the image but\n    /// it is not necessary that the pixel samples themselves are adjacent. An example of this\n    /// behaviour is a planar image layout.\n    ImagePacked,\n\n    /// The samples are in row-major form and all samples are packed.\n    ///\n    /// In addition to `PixelPacked` and `ImagePacked` this also asserts that the pixel matrix is\n    /// in row-major form.\n    RowMajorPacked,\n\n    /// The samples are in column-major form and all samples are packed.\n    ///\n    /// In addition to `PixelPacked` and `ImagePacked` this also asserts that the pixel matrix is\n    /// in column-major form.\n    ColumnMajorPacked,\n}","parent":null,"children":[{"krate":0,"index":2430},{"krate":0,"index":2432},{"krate":0,"index":2434},{"krate":0,"index":2436},{"krate":0,"index":2438}],"decl_id":null,"docs":" Different normal forms of buffers.","sig":null,"attributes":[{"value":"/ Different normal forms of buffers.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":160664,"byte_end":160702,"line_start":990,"line_end":990,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":160703,"byte_end":160706,"line_start":991,"line_end":991,"column_start":1,"column_end":4}},{"value":"/ A normal form is an unaliased buffer with some additional constraints.  The `ÌmageBuffer` uses","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":160707,"byte_end":160806,"line_start":992,"line_end":992,"column_start":1,"column_end":99}},{"value":"/ row major form with packed samples.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":160807,"byte_end":160846,"line_start":993,"line_end":993,"column_start":1,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":616},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":162357,"byte_end":162367,"line_start":1035,"line_end":1035,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<View<Buffer, P>>::into_inner","value":"pub fn into_inner(Self) -> FlatSamples<Buffer>","parent":null,"children":[],"decl_id":null,"docs":" Take out the sample buffer.","sig":null,"attributes":[{"value":"/ Take out the sample buffer.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":162238,"byte_end":162269,"line_start":1032,"line_end":1032,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":162274,"byte_end":162277,"line_start":1033,"line_end":1033,"column_start":5,"column_end":8}},{"value":"/ Gives up the normalization invariants on the buffer format.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":162282,"byte_end":162345,"line_start":1034,"line_end":1034,"column_start":5,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":617},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":162850,"byte_end":162854,"line_start":1045,"line_end":1045,"column_start":12,"column_end":16},"name":"flat","qualname":"<View<Buffer, P>>::flat","value":"pub fn flat(&Self) -> &FlatSamples<Buffer>","parent":null,"children":[],"decl_id":null,"docs":" Get a reference on the inner sample descriptor.","sig":null,"attributes":[{"value":"/ Get a reference on the inner sample descriptor.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":162429,"byte_end":162480,"line_start":1039,"line_end":1039,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":162485,"byte_end":162488,"line_start":1040,"line_end":1040,"column_start":5,"column_end":8}},{"value":"/ There is no mutable counterpart as modifying the buffer format, including strides and","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":162493,"byte_end":162582,"line_start":1041,"line_end":1041,"column_start":5,"column_end":94}},{"value":"/ lengths, could invalidate the accessibility invariants of the `View`. It is not specified","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":162587,"byte_end":162680,"line_start":1042,"line_end":1042,"column_start":5,"column_end":98}},{"value":"/ if the inner buffer is the same as the buffer of the image from which this view was","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":162685,"byte_end":162772,"line_start":1043,"line_end":1043,"column_start":5,"column_end":92}},{"value":"/ created. It might have been truncated as an optimization.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":162777,"byte_end":162838,"line_start":1044,"line_end":1044,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":618},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":163133,"byte_end":163140,"line_start":1053,"line_end":1053,"column_start":12,"column_end":19},"name":"samples","qualname":"<View<Buffer, P>>::samples","value":"pub fn samples(&Self) -> &Buffer","parent":null,"children":[],"decl_id":null,"docs":" Get a reference on the inner buffer.","sig":null,"attributes":[{"value":"/ Get a reference on the inner buffer.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":162919,"byte_end":162959,"line_start":1049,"line_end":1049,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":162964,"byte_end":162967,"line_start":1050,"line_end":1050,"column_start":5,"column_end":8}},{"value":"/ There is no mutable counter part since it is not intended to allow you to reassign the","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":162972,"byte_end":163062,"line_start":1051,"line_end":1051,"column_start":5,"column_end":95}},{"value":"/ buffer or otherwise change its size or properties.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":163067,"byte_end":163121,"line_start":1052,"line_end":1052,"column_start":5,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":619},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":163459,"byte_end":163469,"line_start":1061,"line_end":1061,"column_start":12,"column_end":22},"name":"get_sample","qualname":"<View<Buffer, P>>::get_sample","value":"pub fn get_sample(&Self, u8, u32, u32) -> Option<&P::Subpixel>","parent":null,"children":[],"decl_id":null,"docs":" Get a reference to a selected subpixel if it is in-bounds.","sig":null,"attributes":[{"value":"/ Get a reference to a selected subpixel if it is in-bounds.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":163200,"byte_end":163262,"line_start":1057,"line_end":1057,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":163267,"byte_end":163270,"line_start":1058,"line_end":1058,"column_start":5,"column_end":8}},{"value":"/ This method will return `None` when the sample is out-of-bounds. All errors that could","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":163275,"byte_end":163365,"line_start":1059,"line_end":1059,"column_start":5,"column_end":95}},{"value":"/ occur due to overflow have been eliminated while construction the `View`.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":163370,"byte_end":163447,"line_start":1060,"line_end":1060,"column_start":5,"column_end":82}}]},{"kind":"Method","id":{"krate":0,"index":620},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":164343,"byte_end":164357,"line_start":1079,"line_end":1079,"column_start":12,"column_end":26},"name":"get_mut_sample","qualname":"<View<Buffer, P>>::get_mut_sample","value":"pub fn get_mut_sample(&mut Self, u8, u32, u32) -> Option<&mut P::Subpixel>\nwhere Buffer: AsMut<[P::Subpixel]>","parent":null,"children":[],"decl_id":null,"docs":" Get a mutable reference to a selected subpixel if it is in-bounds.","sig":null,"attributes":[{"value":"/ Get a mutable reference to a selected subpixel if it is in-bounds.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":163801,"byte_end":163871,"line_start":1071,"line_end":1071,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":163876,"byte_end":163879,"line_start":1072,"line_end":1072,"column_start":5,"column_end":8}},{"value":"/ This is relevant only when constructed with `FlatSamples::as_view_with_mut_samples`.  This","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":163884,"byte_end":163978,"line_start":1073,"line_end":1073,"column_start":5,"column_end":99}},{"value":"/ method will return `None` when the sample is out-of-bounds. All errors that could occur due","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":163983,"byte_end":164078,"line_start":1074,"line_end":1074,"column_start":5,"column_end":100}},{"value":"/ to overflow have been eliminated while construction the `View`.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":164083,"byte_end":164150,"line_start":1075,"line_end":1075,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":164155,"byte_end":164158,"line_start":1076,"line_end":1076,"column_start":5,"column_end":8}},{"value":"/ **WARNING**: Note that of course samples may alias, so that the mutable reference returned","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":164163,"byte_end":164257,"line_start":1077,"line_end":1077,"column_start":5,"column_end":99}},{"value":"/ here can in fact modify more than the coordinate in the argument.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":164262,"byte_end":164331,"line_start":1078,"line_end":1078,"column_start":5,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":621},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":164934,"byte_end":164944,"line_start":1094,"line_end":1094,"column_start":12,"column_end":22},"name":"min_length","qualname":"<View<Buffer, P>>::min_length","value":"pub fn min_length(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Get the minimum length of a buffer such that all in-bounds samples have valid indices.","sig":null,"attributes":[{"value":"/ Get the minimum length of a buffer such that all in-bounds samples have valid indices.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":164752,"byte_end":164842,"line_start":1091,"line_end":1091,"column_start":5,"column_end":95}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":164847,"byte_end":164850,"line_start":1092,"line_end":1092,"column_start":5,"column_end":8}},{"value":"/ See `FlatSamples::min_length`. This method will always succeed.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":164855,"byte_end":164922,"line_start":1093,"line_end":1093,"column_start":5,"column_end":72}}]},{"kind":"Method","id":{"krate":0,"index":622},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":165278,"byte_end":165289,"line_start":1102,"line_end":1102,"column_start":12,"column_end":23},"name":"image_slice","qualname":"<View<Buffer, P>>::image_slice","value":"pub fn image_slice(&Self) -> &[P::Subpixel]","parent":null,"children":[],"decl_id":null,"docs":" Return the portion of the buffer that holds sample values.","sig":null,"attributes":[{"value":"/ Return the portion of the buffer that holds sample values.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":165015,"byte_end":165077,"line_start":1098,"line_end":1098,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":165082,"byte_end":165085,"line_start":1099,"line_end":1099,"column_start":5,"column_end":8}},{"value":"/ While this can not fail–the validity of all coordinates has been validated during the","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":165090,"byte_end":165181,"line_start":1100,"line_end":1100,"column_start":5,"column_end":94}},{"value":"/ conversion from `FlatSamples`–the resulting slice may still contain holes.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":165186,"byte_end":165266,"line_start":1101,"line_end":1101,"column_start":5,"column_end":83}}]},{"kind":"Method","id":{"krate":0,"index":623},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":165746,"byte_end":165761,"line_start":1111,"line_end":1111,"column_start":12,"column_end":27},"name":"image_mut_slice","qualname":"<View<Buffer, P>>::image_mut_slice","value":"pub fn image_mut_slice(&mut Self) -> &mut [P::Subpixel] where\nBuffer: AsMut<[P::Subpixel]>","parent":null,"children":[],"decl_id":null,"docs":" Return the mutable portion of the buffer that holds sample values.","sig":null,"attributes":[{"value":"/ Return the mutable portion of the buffer that holds sample values.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":165382,"byte_end":165452,"line_start":1106,"line_end":1106,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":165457,"byte_end":165460,"line_start":1107,"line_end":1107,"column_start":5,"column_end":8}},{"value":"/ This is relevant only when constructed with `FlatSamples::as_view_with_mut_samples`. While","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":165465,"byte_end":165559,"line_start":1108,"line_end":1108,"column_start":5,"column_end":99}},{"value":"/ this can not fail–the validity of all coordinates has been validated during the conversion","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":165564,"byte_end":165660,"line_start":1109,"line_end":1109,"column_start":5,"column_end":99}},{"value":"/ from `FlatSamples`–the resulting slice may still contain holes.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":165665,"byte_end":165734,"line_start":1110,"line_end":1110,"column_start":5,"column_end":72}}]},{"kind":"Method","id":{"krate":0,"index":624},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":166284,"byte_end":166293,"line_start":1123,"line_end":1123,"column_start":12,"column_end":21},"name":"shrink_to","qualname":"<View<Buffer, P>>::shrink_to","value":"pub fn shrink_to(&mut Self, u32, u32)","parent":null,"children":[],"decl_id":null,"docs":" Shrink the inner image.","sig":null,"attributes":[{"value":"/ Shrink the inner image.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":165954,"byte_end":165981,"line_start":1118,"line_end":1118,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":165986,"byte_end":165989,"line_start":1119,"line_end":1119,"column_start":5,"column_end":8}},{"value":"/ The new dimensions will be the minimum of the previous dimensions. Since the set of","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":165994,"byte_end":166081,"line_start":1120,"line_end":1120,"column_start":5,"column_end":92}},{"value":"/ in-bounds pixels afterwards is a subset of the current ones, this is allowed on a `View`.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":166086,"byte_end":166179,"line_start":1121,"line_end":1121,"column_start":5,"column_end":98}},{"value":"/ Note that you can not change the number of channels as an intrinsic property of `P`.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":166184,"byte_end":166272,"line_start":1122,"line_end":1122,"column_start":5,"column_end":93}}]},{"kind":"Method","id":{"krate":0,"index":625},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":167297,"byte_end":167308,"line_start":1146,"line_end":1146,"column_start":12,"column_end":23},"name":"try_upgrade","qualname":"<View<Buffer, P>>::try_upgrade","value":"pub fn try_upgrade(Self) -> Result<ViewMut<Buffer, P>, (Error, Self)> where\nBuffer: AsMut<[P::Subpixel]>","parent":null,"children":[],"decl_id":null,"docs":" Try to convert this into an image with mutable pixels.","sig":null,"attributes":[{"value":"/ Try to convert this into an image with mutable pixels.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":166448,"byte_end":166506,"line_start":1128,"line_end":1128,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":166511,"byte_end":166514,"line_start":1129,"line_end":1129,"column_start":5,"column_end":8}},{"value":"/ The resulting image implements `GenericImage` in addition to `GenericImageView`. While this","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":166519,"byte_end":166614,"line_start":1130,"line_end":1130,"column_start":5,"column_end":100}},{"value":"/ has mutable samples, it does not enforce that pixel can not alias and that samples are","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":166619,"byte_end":166709,"line_start":1131,"line_end":1131,"column_start":5,"column_end":95}},{"value":"/ packed enough for a mutable pixel reference. This is slightly cheaper than the chain","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":166714,"byte_end":166802,"line_start":1132,"line_end":1132,"column_start":5,"column_end":93}},{"value":"/ `self.into_inner().as_view_mut()` and keeps the `View` alive on failure.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":166807,"byte_end":166883,"line_start":1133,"line_end":1133,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":166888,"byte_end":166891,"line_start":1134,"line_end":1134,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":166896,"byte_end":166903,"line_start":1135,"line_end":1135,"column_start":5,"column_end":12}},{"value":"/ # use image::RgbImage;","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":166908,"byte_end":166934,"line_start":1136,"line_end":1136,"column_start":5,"column_end":31}},{"value":"/ # use image::Rgb;","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":166939,"byte_end":166960,"line_start":1137,"line_end":1137,"column_start":5,"column_end":26}},{"value":"/ let mut buffer = RgbImage::new(480, 640).into_flat_samples();","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":166965,"byte_end":167030,"line_start":1138,"line_end":1138,"column_start":5,"column_end":70}},{"value":"/ let view = buffer.as_view_with_mut_samples::<Rgb<u8>>().unwrap();","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":167035,"byte_end":167104,"line_start":1139,"line_end":1139,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":167109,"byte_end":167112,"line_start":1140,"line_end":1140,"column_start":5,"column_end":8}},{"value":"/ // Inspect some pixels, …","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":167117,"byte_end":167148,"line_start":1141,"line_end":1141,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":167153,"byte_end":167156,"line_start":1142,"line_end":1142,"column_start":5,"column_end":8}},{"value":"/ // Doesn't fail because it was originally an `RgbImage`.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":167161,"byte_end":167221,"line_start":1143,"line_end":1143,"column_start":5,"column_end":65}},{"value":"/ let view_mut = view.try_upgrade().unwrap();","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":167226,"byte_end":167273,"line_start":1144,"line_end":1144,"column_start":5,"column_end":52}},{"value":"/ ```","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":167278,"byte_end":167285,"line_start":1145,"line_end":1145,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":629},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":167949,"byte_end":167959,"line_start":1168,"line_end":1168,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<ViewMut<Buffer, P>>::into_inner","value":"pub fn into_inner(Self) -> FlatSamples<Buffer>","parent":null,"children":[],"decl_id":null,"docs":" Take out the sample buffer.","sig":null,"attributes":[{"value":"/ Take out the sample buffer.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":167830,"byte_end":167861,"line_start":1165,"line_end":1165,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":167866,"byte_end":167869,"line_start":1166,"line_end":1166,"column_start":5,"column_end":8}},{"value":"/ Gives up the normalization invariants on the buffer format.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":167874,"byte_end":167937,"line_start":1167,"line_end":1167,"column_start":5,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":630},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":168443,"byte_end":168447,"line_start":1178,"line_end":1178,"column_start":12,"column_end":16},"name":"flat","qualname":"<ViewMut<Buffer, P>>::flat","value":"pub fn flat(&Self) -> &FlatSamples<Buffer>","parent":null,"children":[],"decl_id":null,"docs":" Get a reference on the sample buffer descriptor.","sig":null,"attributes":[{"value":"/ Get a reference on the sample buffer descriptor.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":168021,"byte_end":168073,"line_start":1172,"line_end":1172,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":168078,"byte_end":168081,"line_start":1173,"line_end":1173,"column_start":5,"column_end":8}},{"value":"/ There is no mutable counterpart as modifying the buffer format, including strides and","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":168086,"byte_end":168175,"line_start":1174,"line_end":1174,"column_start":5,"column_end":94}},{"value":"/ lengths, could invalidate the accessibility invariants of the `View`. It is not specified","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":168180,"byte_end":168273,"line_start":1175,"line_end":1175,"column_start":5,"column_end":98}},{"value":"/ if the inner buffer is the same as the buffer of the image from which this view was","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":168278,"byte_end":168365,"line_start":1176,"line_end":1176,"column_start":5,"column_end":92}},{"value":"/ created. It might have been truncated as an optimization.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":168370,"byte_end":168431,"line_start":1177,"line_end":1177,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":631},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":168820,"byte_end":168827,"line_start":1187,"line_end":1187,"column_start":12,"column_end":19},"name":"samples","qualname":"<ViewMut<Buffer, P>>::samples","value":"pub fn samples(&Self) -> &Buffer","parent":null,"children":[],"decl_id":null,"docs":" Get a reference on the inner buffer.","sig":null,"attributes":[{"value":"/ Get a reference on the inner buffer.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":168512,"byte_end":168552,"line_start":1182,"line_end":1182,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":168557,"byte_end":168560,"line_start":1183,"line_end":1183,"column_start":5,"column_end":8}},{"value":"/ There is no mutable counter part since it is not intended to allow you to reassign the","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":168565,"byte_end":168655,"line_start":1184,"line_end":1184,"column_start":5,"column_end":95}},{"value":"/ buffer or otherwise change its size or properties. However, its contents can be accessed","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":168660,"byte_end":168752,"line_start":1185,"line_end":1185,"column_start":5,"column_end":97}},{"value":"/ mutable through a slice with `image_mut_slice`.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":168757,"byte_end":168808,"line_start":1186,"line_end":1186,"column_start":5,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":632},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":169069,"byte_end":169079,"line_start":1194,"line_end":1194,"column_start":12,"column_end":22},"name":"min_length","qualname":"<ViewMut<Buffer, P>>::min_length","value":"pub fn min_length(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Get the minimum length of a buffer such that all in-bounds samples have valid indices.","sig":null,"attributes":[{"value":"/ Get the minimum length of a buffer such that all in-bounds samples have valid indices.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":168887,"byte_end":168977,"line_start":1191,"line_end":1191,"column_start":5,"column_end":95}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":168982,"byte_end":168985,"line_start":1192,"line_end":1192,"column_start":5,"column_end":8}},{"value":"/ See `FlatSamples::min_length`. This method will always succeed.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":168990,"byte_end":169057,"line_start":1193,"line_end":1193,"column_start":5,"column_end":72}}]},{"kind":"Method","id":{"krate":0,"index":633},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":169390,"byte_end":169400,"line_start":1202,"line_end":1202,"column_start":12,"column_end":22},"name":"get_sample","qualname":"<ViewMut<Buffer, P>>::get_sample","value":"pub fn get_sample(&Self, u8, u32, u32) -> Option<&P::Subpixel> where\nBuffer: AsRef<[P::Subpixel]>","parent":null,"children":[],"decl_id":null,"docs":" Get a reference to a selected subpixel.","sig":null,"attributes":[{"value":"/ Get a reference to a selected subpixel.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":169150,"byte_end":169193,"line_start":1198,"line_end":1198,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":169198,"byte_end":169201,"line_start":1199,"line_end":1199,"column_start":5,"column_end":8}},{"value":"/ This method will return `None` when the sample is out-of-bounds. All errors that could","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":169206,"byte_end":169296,"line_start":1200,"line_end":1200,"column_start":5,"column_end":95}},{"value":"/ occur due to overflow have been eliminated while construction the `View`.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":169301,"byte_end":169378,"line_start":1201,"line_end":1201,"column_start":5,"column_end":82}}]},{"kind":"Method","id":{"krate":0,"index":634},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":170025,"byte_end":170039,"line_start":1218,"line_end":1218,"column_start":12,"column_end":26},"name":"get_mut_sample","qualname":"<ViewMut<Buffer, P>>::get_mut_sample","value":"pub fn get_mut_sample(&mut Self, u8, u32, u32) -> Option<&mut P::Subpixel>","parent":null,"children":[],"decl_id":null,"docs":" Get a mutable reference to a selected sample.","sig":null,"attributes":[{"value":"/ Get a mutable reference to a selected sample.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":169779,"byte_end":169828,"line_start":1214,"line_end":1214,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":169833,"byte_end":169836,"line_start":1215,"line_end":1215,"column_start":5,"column_end":8}},{"value":"/ This method will return `None` when the sample is out-of-bounds. All errors that could","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":169841,"byte_end":169931,"line_start":1216,"line_end":1216,"column_start":5,"column_end":95}},{"value":"/ occur due to overflow have been eliminated while construction the `View`.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":169936,"byte_end":170013,"line_start":1217,"line_end":1217,"column_start":5,"column_end":82}}]},{"kind":"Method","id":{"krate":0,"index":635},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":170650,"byte_end":170661,"line_start":1232,"line_end":1232,"column_start":12,"column_end":23},"name":"image_slice","qualname":"<ViewMut<Buffer, P>>::image_slice","value":"pub fn image_slice(&Self) -> &[P::Subpixel] where Buffer: AsRef<[P::Subpixel]>","parent":null,"children":[],"decl_id":null,"docs":" Return the portion of the buffer that holds sample values.","sig":null,"attributes":[{"value":"/ Return the portion of the buffer that holds sample values.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":170387,"byte_end":170449,"line_start":1228,"line_end":1228,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":170454,"byte_end":170457,"line_start":1229,"line_end":1229,"column_start":5,"column_end":8}},{"value":"/ While this can not fail–the validity of all coordinates has been validated during the","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":170462,"byte_end":170553,"line_start":1230,"line_end":1230,"column_start":5,"column_end":94}},{"value":"/ conversion from `FlatSamples`–the resulting slice may still contain holes.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":170558,"byte_end":170638,"line_start":1231,"line_end":1231,"column_start":5,"column_end":83}}]},{"kind":"Method","id":{"krate":0,"index":636},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":170860,"byte_end":170875,"line_start":1237,"line_end":1237,"column_start":12,"column_end":27},"name":"image_mut_slice","qualname":"<ViewMut<Buffer, P>>::image_mut_slice","value":"pub fn image_mut_slice(&mut Self) -> &mut [P::Subpixel]","parent":null,"children":[],"decl_id":null,"docs":" Return the mutable buffer that holds sample values.\n","sig":null,"attributes":[{"value":"/ Return the mutable buffer that holds sample values.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":170793,"byte_end":170848,"line_start":1236,"line_end":1236,"column_start":5,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":637},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":171343,"byte_end":171352,"line_start":1247,"line_end":1247,"column_start":12,"column_end":21},"name":"shrink_to","qualname":"<ViewMut<Buffer, P>>::shrink_to","value":"pub fn shrink_to(&mut Self, u32, u32)","parent":null,"children":[],"decl_id":null,"docs":" Shrink the inner image.","sig":null,"attributes":[{"value":"/ Shrink the inner image.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":171013,"byte_end":171040,"line_start":1242,"line_end":1242,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":171045,"byte_end":171048,"line_start":1243,"line_end":1243,"column_start":5,"column_end":8}},{"value":"/ The new dimensions will be the minimum of the previous dimensions. Since the set of","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":171053,"byte_end":171140,"line_start":1244,"line_end":1244,"column_start":5,"column_end":92}},{"value":"/ in-bounds pixels afterwards is a subset of the current ones, this is allowed on a `View`.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":171145,"byte_end":171238,"line_start":1245,"line_end":1245,"column_start":5,"column_end":98}},{"value":"/ Note that you can not change the number of channels as an intrinsic property of `P`.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":171243,"byte_end":171331,"line_start":1246,"line_end":1246,"column_start":5,"column_end":93}}]},{"kind":"Mod","id":{"krate":0,"index":691},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src/lib.rs","byte_start":7611,"byte_end":7617,"line_start":215,"line_end":215,"column_start":9,"column_end":15},"name":"codecs","qualname":"::codecs","value":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src/lib.rs","parent":null,"children":[{"krate":0,"index":692},{"krate":0,"index":920}],"decl_id":null,"docs":" Encoding and decoding for various image file formats.","sig":null,"attributes":[{"value":"/ Encoding and decoding for various image file formats.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src/lib.rs","byte_start":5569,"byte_end":5626,"line_start":176,"line_end":176,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src/lib.rs","byte_start":5627,"byte_end":5630,"line_start":177,"line_end":177,"column_start":1,"column_end":4}},{"value":"/ # Supported formats","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src/lib.rs","byte_start":5631,"byte_end":5654,"line_start":178,"line_end":178,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src/lib.rs","byte_start":5655,"byte_end":5658,"line_start":179,"line_end":179,"column_start":1,"column_end":4}},{"value":"/ | Format | Decoding | Encoding |","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src/lib.rs","byte_start":5659,"byte_end":5695,"line_start":180,"line_end":180,"column_start":1,"column_end":37}},{"value":"/ | ------ | -------- | -------- |","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src/lib.rs","byte_start":5696,"byte_end":5732,"line_start":181,"line_end":181,"column_start":1,"column_end":37}},{"value":"/ | PNG    | All supported color types | Same as decoding |","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src/lib.rs","byte_start":5733,"byte_end":5794,"line_start":182,"line_end":182,"column_start":1,"column_end":62}},{"value":"/ | JPEG   | Baseline and progressive | Baseline JPEG |","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src/lib.rs","byte_start":5795,"byte_end":5852,"line_start":183,"line_end":183,"column_start":1,"column_end":58}},{"value":"/ | GIF    | Yes | Yes |","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src/lib.rs","byte_start":5853,"byte_end":5879,"line_start":184,"line_end":184,"column_start":1,"column_end":27}},{"value":"/ | BMP    | Yes | RGB8, RGBA8, Gray8, GrayA8 |","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src/lib.rs","byte_start":5880,"byte_end":5929,"line_start":185,"line_end":185,"column_start":1,"column_end":50}},{"value":"/ | ICO    | Yes | Yes |","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src/lib.rs","byte_start":5930,"byte_end":5956,"line_start":186,"line_end":186,"column_start":1,"column_end":27}},{"value":"/ | TIFF   | Baseline(no fax support) + LZW + PackBits | RGB8, RGBA8, Gray8 |","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src/lib.rs","byte_start":5957,"byte_end":6036,"line_start":187,"line_end":187,"column_start":1,"column_end":80}},{"value":"/ | WebP   | Lossy(Luma channel only) | No |","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src/lib.rs","byte_start":6037,"byte_end":6083,"line_start":188,"line_end":188,"column_start":1,"column_end":47}},{"value":"/ | PNM    | PBM, PGM, PPM, standard PAM | Yes |","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src/lib.rs","byte_start":6084,"byte_end":6134,"line_start":189,"line_end":189,"column_start":1,"column_end":51}},{"value":"/ | DDS    | DXT1, DXT3, DXT5 | No |","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src/lib.rs","byte_start":6135,"byte_end":6173,"line_start":190,"line_end":190,"column_start":1,"column_end":39}},{"value":"/ | TGA    | Yes | RGB8, RGBA8, BGR8, BGRA8, Gray8, GrayA8 |","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src/lib.rs","byte_start":6174,"byte_end":6236,"line_start":191,"line_end":191,"column_start":1,"column_end":63}},{"value":"/ | farbfeld | Yes | Yes |","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src/lib.rs","byte_start":6237,"byte_end":6265,"line_start":192,"line_end":192,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src/lib.rs","byte_start":6266,"byte_end":6269,"line_start":193,"line_end":193,"column_start":1,"column_end":4}},{"value":"/ ## A note on format specific features","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src/lib.rs","byte_start":6270,"byte_end":6311,"line_start":194,"line_end":194,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src/lib.rs","byte_start":6312,"byte_end":6315,"line_start":195,"line_end":195,"column_start":1,"column_end":4}},{"value":"/ One of the main goals of `image` is stability, in runtime but also for programmers. This","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src/lib.rs","byte_start":6316,"byte_end":6408,"line_start":196,"line_end":196,"column_start":1,"column_end":93}},{"value":"/ ensures that performance as well as safety fixes reach a majority of its user base with little","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src/lib.rs","byte_start":6409,"byte_end":6507,"line_start":197,"line_end":197,"column_start":1,"column_end":99}},{"value":"/ effort. Re-exporting all details of its dependencies would run counter to this goal as it","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src/lib.rs","byte_start":6508,"byte_end":6601,"line_start":198,"line_end":198,"column_start":1,"column_end":94}},{"value":"/ linked _all_ major version bumps between them and `image`. As such, we are wary of exposing too","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src/lib.rs","byte_start":6602,"byte_end":6701,"line_start":199,"line_end":199,"column_start":1,"column_end":100}},{"value":"/ many details, or configuration options, that are not shared between different image formats.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src/lib.rs","byte_start":6702,"byte_end":6798,"line_start":200,"line_end":200,"column_start":1,"column_end":97}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src/lib.rs","byte_start":6799,"byte_end":6802,"line_start":201,"line_end":201,"column_start":1,"column_end":4}},{"value":"/ Nevertheless, the advantage of precise control is hard to ignore. We will thus consider","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src/lib.rs","byte_start":6803,"byte_end":6894,"line_start":202,"line_end":202,"column_start":1,"column_end":92}},{"value":"/ _wrappers_, not direct re-exports, in either of the following cases:","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src/lib.rs","byte_start":6895,"byte_end":6967,"line_start":203,"line_end":203,"column_start":1,"column_end":73}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src/lib.rs","byte_start":6968,"byte_end":6971,"line_start":204,"line_end":204,"column_start":1,"column_end":4}},{"value":"/ 1. A standard specifies that configuration _x_ is required for decoders/encoders and there","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src/lib.rs","byte_start":6972,"byte_end":7066,"line_start":205,"line_end":205,"column_start":1,"column_end":95}},{"value":"/    exists an essentially canonical way to control it.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src/lib.rs","byte_start":7067,"byte_end":7124,"line_start":206,"line_end":206,"column_start":1,"column_end":58}},{"value":"/ 2. At least two different implementations agree on some (sub-)set of features in practice.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src/lib.rs","byte_start":7125,"byte_end":7219,"line_start":207,"line_end":207,"column_start":1,"column_end":95}},{"value":"/ 3. A technical argument including measurements of the performance, space benefits, or otherwise","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src/lib.rs","byte_start":7220,"byte_end":7319,"line_start":208,"line_end":208,"column_start":1,"column_end":100}},{"value":"/    objectively quantified benefits can be made, and the added interface is unlikely to require","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src/lib.rs","byte_start":7320,"byte_end":7418,"line_start":209,"line_end":209,"column_start":1,"column_end":99}},{"value":"/    breaking changes.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src/lib.rs","byte_start":7419,"byte_end":7443,"line_start":210,"line_end":210,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src/lib.rs","byte_start":7444,"byte_end":7447,"line_start":211,"line_end":211,"column_start":1,"column_end":4}},{"value":"/ Features that fulfill two or more criteria are preferred.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src/lib.rs","byte_start":7448,"byte_end":7509,"line_start":212,"line_end":212,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src/lib.rs","byte_start":7510,"byte_end":7513,"line_start":213,"line_end":213,"column_start":1,"column_end":4}},{"value":"/ Re-exports of dependencies that reach version `1` will be discussed when it happens.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src/lib.rs","byte_start":7514,"byte_end":7602,"line_start":214,"line_end":214,"column_start":1,"column_end":89}}]},{"kind":"Mod","id":{"krate":0,"index":692},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\codecs\\jpeg\\mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"jpeg","qualname":"::codecs::jpeg","value":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\codecs\\jpeg\\mod.rs","parent":null,"children":[{"krate":0,"index":693},{"krate":0,"index":694},{"krate":0,"index":695},{"krate":0,"index":696},{"krate":0,"index":697},{"krate":0,"index":698},{"krate":0,"index":699},{"krate":0,"index":749},{"krate":0,"index":899},{"krate":0,"index":902}],"decl_id":null,"docs":" Decoding and Encoding of JPEG Images","sig":null,"attributes":[{"value":"cfg(feature = \"jpeg\")","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src/lib.rs","byte_start":7996,"byte_end":8020,"line_start":232,"line_end":232,"column_start":5,"column_end":29}},{"value":"/ Decoding and Encoding of JPEG Images","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\codecs\\jpeg\\mod.rs","byte_start":184528,"byte_end":184568,"line_start":1,"line_end":1,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\codecs\\jpeg\\mod.rs","byte_start":184569,"byte_end":184572,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ JPEG (Joint Photographic Experts Group) is an image format that supports lossy compression.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\codecs\\jpeg\\mod.rs","byte_start":184573,"byte_end":184668,"line_start":3,"line_end":3,"column_start":1,"column_end":96}},{"value":"/ This module implements the Baseline JPEG standard.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\codecs\\jpeg\\mod.rs","byte_start":184669,"byte_end":184723,"line_start":4,"line_end":4,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\codecs\\jpeg\\mod.rs","byte_start":184724,"byte_end":184727,"line_start":5,"line_end":5,"column_start":1,"column_end":4}},{"value":"/ # Related Links","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\codecs\\jpeg\\mod.rs","byte_start":184728,"byte_end":184747,"line_start":6,"line_end":6,"column_start":1,"column_end":20}},{"value":"/ * <http://www.w3.org/Graphics/JPEG/itu-t81.pdf> - The JPEG specification","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\codecs\\jpeg\\mod.rs","byte_start":184748,"byte_end":184824,"line_start":7,"line_end":7,"column_start":1,"column_end":77}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\codecs\\jpeg\\mod.rs","byte_start":184825,"byte_end":184828,"line_start":8,"line_end":8,"column_start":1,"column_end":4}}]},{"kind":"Struct","id":{"krate":0,"index":717},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\codecs\\jpeg\\decoder.rs","byte_start":185401,"byte_end":185412,"line_start":13,"line_end":13,"column_start":12,"column_end":23},"name":"JpegDecoder","qualname":"::codecs::jpeg::decoder::JpegDecoder","value":"JpegDecoder {  }","parent":null,"children":[{"krate":0,"index":719},{"krate":0,"index":720}],"decl_id":null,"docs":" JPEG decoder\n","sig":null,"attributes":[{"value":"/ JPEG decoder","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\codecs\\jpeg\\decoder.rs","byte_start":185373,"byte_end":185389,"line_start":12,"line_end":12,"column_start":1,"column_end":17}}]},{"kind":"Method","id":{"krate":0,"index":723},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\codecs\\jpeg\\decoder.rs","byte_start":185591,"byte_end":185594,"line_start":20,"line_end":20,"column_start":12,"column_end":15},"name":"new","qualname":"<JpegDecoder<R>>::new","value":"pub fn new(R) -> ImageResult<JpegDecoder<R>>","parent":null,"children":[],"decl_id":null,"docs":" Create a new decoder that decodes from the stream ```r```\n","sig":null,"attributes":[{"value":"/ Create a new decoder that decodes from the stream ```r```","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\codecs\\jpeg\\decoder.rs","byte_start":185518,"byte_end":185579,"line_start":19,"line_end":19,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":724},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\codecs\\jpeg\\decoder.rs","byte_start":186711,"byte_end":186716,"line_start":50,"line_end":50,"column_start":12,"column_end":17},"name":"scale","qualname":"<JpegDecoder<R>>::scale","value":"pub fn scale(&mut Self, u16, u16) -> ImageResult<(u16, u16)>","parent":null,"children":[],"decl_id":null,"docs":" Configure the decoder to scale the image during decoding.","sig":null,"attributes":[{"value":"/ Configure the decoder to scale the image during decoding.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\codecs\\jpeg\\decoder.rs","byte_start":186097,"byte_end":186158,"line_start":37,"line_end":37,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\codecs\\jpeg\\decoder.rs","byte_start":186163,"byte_end":186166,"line_start":38,"line_end":38,"column_start":5,"column_end":8}},{"value":"/ This efficiently scales the image by the smallest supported","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\codecs\\jpeg\\decoder.rs","byte_start":186171,"byte_end":186234,"line_start":39,"line_end":39,"column_start":5,"column_end":68}},{"value":"/ scale factor that produces an image larger than or equal to","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\codecs\\jpeg\\decoder.rs","byte_start":186239,"byte_end":186302,"line_start":40,"line_end":40,"column_start":5,"column_end":68}},{"value":"/ the requested size in at least one axis. The currently","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\codecs\\jpeg\\decoder.rs","byte_start":186307,"byte_end":186365,"line_start":41,"line_end":41,"column_start":5,"column_end":63}},{"value":"/ implemented scale factors are 1/8, 1/4, 1/2 and 1.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\codecs\\jpeg\\decoder.rs","byte_start":186370,"byte_end":186424,"line_start":42,"line_end":42,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\codecs\\jpeg\\decoder.rs","byte_start":186429,"byte_end":186432,"line_start":43,"line_end":43,"column_start":5,"column_end":8}},{"value":"/ To generate a thumbnail of an exact size, pass the desired","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\codecs\\jpeg\\decoder.rs","byte_start":186437,"byte_end":186499,"line_start":44,"line_end":44,"column_start":5,"column_end":67}},{"value":"/ size and then scale to the final size using a traditional","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\codecs\\jpeg\\decoder.rs","byte_start":186504,"byte_end":186565,"line_start":45,"line_end":45,"column_start":5,"column_end":66}},{"value":"/ resampling algorithm.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\codecs\\jpeg\\decoder.rs","byte_start":186570,"byte_end":186595,"line_start":46,"line_end":46,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\codecs\\jpeg\\decoder.rs","byte_start":186600,"byte_end":186603,"line_start":47,"line_end":47,"column_start":5,"column_end":8}},{"value":"/ The size of the image to be loaded, with the scale factor","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\codecs\\jpeg\\decoder.rs","byte_start":186608,"byte_end":186669,"line_start":48,"line_end":48,"column_start":5,"column_end":66}},{"value":"/ applied, is returned.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\codecs\\jpeg\\decoder.rs","byte_start":186674,"byte_end":186699,"line_start":49,"line_end":49,"column_start":5,"column_end":30}}]},{"kind":"Struct","id":{"krate":0,"index":725},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\codecs\\jpeg\\decoder.rs","byte_start":187121,"byte_end":187131,"line_start":66,"line_end":66,"column_start":12,"column_end":22},"name":"JpegReader","qualname":"::codecs::jpeg::decoder::JpegReader","value":"","parent":null,"children":[],"decl_id":null,"docs":" Wrapper struct around a `Cursor<Vec<u8>>`\n","sig":null,"attributes":[{"value":"/ Wrapper struct around a `Cursor<Vec<u8>>`","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\codecs\\jpeg\\decoder.rs","byte_start":187064,"byte_end":187109,"line_start":65,"line_end":65,"column_start":1,"column_end":46}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2477},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\codecs\\jpeg\\encoder.rs","byte_start":218705,"byte_end":218721,"line_start":275,"line_end":275,"column_start":5,"column_end":21},"name":"PixelAspectRatio","qualname":"::codecs::jpeg::encoder::PixelDensityUnit::PixelAspectRatio","value":"PixelDensityUnit::PixelAspectRatio","parent":{"krate":0,"index":2476},"children":[],"decl_id":null,"docs":" Represents the absence of a unit, the values indicate only a\n [pixel aspect ratio](https://en.wikipedia.org/wiki/Pixel_aspect_ratio)\n","sig":null,"attributes":[{"value":"/ Represents the absence of a unit, the values indicate only a","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\codecs\\jpeg\\encoder.rs","byte_start":218557,"byte_end":218621,"line_start":273,"line_end":273,"column_start":5,"column_end":69}},{"value":"/ [pixel aspect ratio](https://en.wikipedia.org/wiki/Pixel_aspect_ratio)","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\codecs\\jpeg\\encoder.rs","byte_start":218626,"byte_end":218700,"line_start":274,"line_end":274,"column_start":5,"column_end":79}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2479},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\codecs\\jpeg\\encoder.rs","byte_start":218762,"byte_end":218768,"line_start":278,"line_end":278,"column_start":5,"column_end":11},"name":"Inches","qualname":"::codecs::jpeg::encoder::PixelDensityUnit::Inches","value":"PixelDensityUnit::Inches","parent":{"krate":0,"index":2476},"children":[],"decl_id":null,"docs":" Pixels per inch (2.54 cm)\n","sig":null,"attributes":[{"value":"/ Pixels per inch (2.54 cm)","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\codecs\\jpeg\\encoder.rs","byte_start":218728,"byte_end":218757,"line_start":277,"line_end":277,"column_start":5,"column_end":34}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2481},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\codecs\\jpeg\\encoder.rs","byte_start":218805,"byte_end":218816,"line_start":281,"line_end":281,"column_start":5,"column_end":16},"name":"Centimeters","qualname":"::codecs::jpeg::encoder::PixelDensityUnit::Centimeters","value":"PixelDensityUnit::Centimeters","parent":{"krate":0,"index":2476},"children":[],"decl_id":null,"docs":" Pixels per centimeter\n","sig":null,"attributes":[{"value":"/ Pixels per centimeter","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\codecs\\jpeg\\encoder.rs","byte_start":218775,"byte_end":218800,"line_start":280,"line_end":280,"column_start":5,"column_end":30}}]},{"kind":"Enum","id":{"krate":0,"index":2476},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\codecs\\jpeg\\encoder.rs","byte_start":218534,"byte_end":218550,"line_start":272,"line_end":272,"column_start":10,"column_end":26},"name":"PixelDensityUnit","qualname":"::codecs::jpeg::encoder::PixelDensityUnit","value":"pub enum PixelDensityUnit {\n\n    /// Represents the absence of a unit, the values indicate only a\n    /// [pixel aspect ratio](https://en.wikipedia.org/wiki/Pixel_aspect_ratio)\n    PixelAspectRatio,\n\n    /// Pixels per inch (2.54 cm)\n    Inches,\n\n    /// Pixels per centimeter\n    Centimeters,\n}","parent":null,"children":[{"krate":0,"index":2477},{"krate":0,"index":2479},{"krate":0,"index":2481}],"decl_id":null,"docs":" Represents a unit in which the density of an image is measured\n","sig":null,"attributes":[{"value":"/ Represents a unit in which the density of an image is measured","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\codecs\\jpeg\\encoder.rs","byte_start":218413,"byte_end":218479,"line_start":270,"line_end":270,"column_start":1,"column_end":67}}]},{"kind":"Struct","id":{"krate":0,"index":2494},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\codecs\\jpeg\\encoder.rs","byte_start":219153,"byte_end":219165,"line_start":294,"line_end":294,"column_start":12,"column_end":24},"name":"PixelDensity","qualname":"::codecs::jpeg::encoder::PixelDensity","value":"PixelDensity { density, unit }","parent":null,"children":[{"krate":0,"index":2495},{"krate":0,"index":2496}],"decl_id":null,"docs":" Represents the pixel density of an image","sig":null,"attributes":[{"value":"/ Represents the pixel density of an image","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\codecs\\jpeg\\encoder.rs","byte_start":218821,"byte_end":218865,"line_start":284,"line_end":284,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\codecs\\jpeg\\encoder.rs","byte_start":218866,"byte_end":218869,"line_start":285,"line_end":285,"column_start":1,"column_end":4}},{"value":"/ For example, a 300 DPI image is represented by:","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\codecs\\jpeg\\encoder.rs","byte_start":218870,"byte_end":218921,"line_start":286,"line_end":286,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\codecs\\jpeg\\encoder.rs","byte_start":218922,"byte_end":218925,"line_start":287,"line_end":287,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\codecs\\jpeg\\encoder.rs","byte_start":218926,"byte_end":218937,"line_start":288,"line_end":288,"column_start":1,"column_end":12}},{"value":"/ use image::jpeg::*;","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\codecs\\jpeg\\encoder.rs","byte_start":218938,"byte_end":218961,"line_start":289,"line_end":289,"column_start":1,"column_end":24}},{"value":"/ let hdpi = PixelDensity::dpi(300);","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\codecs\\jpeg\\encoder.rs","byte_start":218962,"byte_end":219000,"line_start":290,"line_end":290,"column_start":1,"column_end":39}},{"value":"/ assert_eq!(hdpi, PixelDensity {density: (300,300), unit: PixelDensityUnit::Inches})","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\codecs\\jpeg\\encoder.rs","byte_start":219001,"byte_end":219088,"line_start":291,"line_end":291,"column_start":1,"column_end":88}},{"value":"/ ```","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\codecs\\jpeg\\encoder.rs","byte_start":219089,"byte_end":219096,"line_start":292,"line_end":292,"column_start":1,"column_end":8}}]},{"kind":"Field","id":{"krate":0,"index":2495},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\codecs\\jpeg\\encoder.rs","byte_start":219228,"byte_end":219235,"line_start":296,"line_end":296,"column_start":9,"column_end":16},"name":"density","qualname":"::codecs::jpeg::encoder::PixelDensity::density","value":"(u16, u16)","parent":{"krate":0,"index":2494},"children":[],"decl_id":null,"docs":" A couple of values for (Xdensity, Ydensity)\n","sig":null,"attributes":[{"value":"/ A couple of values for (Xdensity, Ydensity)","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\codecs\\jpeg\\encoder.rs","byte_start":219172,"byte_end":219219,"line_start":295,"line_end":295,"column_start":5,"column_end":52}}]},{"kind":"Field","id":{"krate":0,"index":2496},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\codecs\\jpeg\\encoder.rs","byte_start":219307,"byte_end":219311,"line_start":298,"line_end":298,"column_start":9,"column_end":13},"name":"unit","qualname":"::codecs::jpeg::encoder::PixelDensity::unit","value":"codecs::jpeg::encoder::PixelDensityUnit","parent":{"krate":0,"index":2494},"children":[],"decl_id":null,"docs":" The unit in which the density is measured\n","sig":null,"attributes":[{"value":"/ The unit in which the density is measured","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\codecs\\jpeg\\encoder.rs","byte_start":219253,"byte_end":219298,"line_start":297,"line_end":297,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":827},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\codecs\\jpeg\\encoder.rs","byte_start":219517,"byte_end":219520,"line_start":305,"line_end":305,"column_start":12,"column_end":15},"name":"dpi","qualname":"<PixelDensity>::dpi","value":"pub fn dpi(u16) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates the most common pixel density type:\n the horizontal and the vertical density are equal,\n and measured in pixels per inch.\n","sig":null,"attributes":[{"value":"/ Creates the most common pixel density type:","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\codecs\\jpeg\\encoder.rs","byte_start":219358,"byte_end":219405,"line_start":302,"line_end":302,"column_start":5,"column_end":52}},{"value":"/ the horizontal and the vertical density are equal,","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\codecs\\jpeg\\encoder.rs","byte_start":219410,"byte_end":219464,"line_start":303,"line_end":303,"column_start":5,"column_end":59}},{"value":"/ and measured in pixels per inch.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\codecs\\jpeg\\encoder.rs","byte_start":219469,"byte_end":219505,"line_start":304,"line_end":304,"column_start":5,"column_end":41}}]},{"kind":"Struct","id":{"krate":0,"index":830},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\codecs\\jpeg\\encoder.rs","byte_start":219971,"byte_end":219982,"line_start":324,"line_end":324,"column_start":12,"column_end":23},"name":"JpegEncoder","qualname":"::codecs::jpeg::encoder::JpegEncoder","value":"JpegEncoder {  }","parent":null,"children":[{"krate":0,"index":833},{"krate":0,"index":834},{"krate":0,"index":835},{"krate":0,"index":837},{"krate":0,"index":838},{"krate":0,"index":839},{"krate":0,"index":840},{"krate":0,"index":841}],"decl_id":null,"docs":" The representation of a JPEG encoder\n","sig":null,"attributes":[{"value":"/ The representation of a JPEG encoder","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\codecs\\jpeg\\encoder.rs","byte_start":219919,"byte_end":219959,"line_start":323,"line_end":323,"column_start":1,"column_end":41}}]},{"kind":"Type","id":{"krate":0,"index":842},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\codecs\\jpeg\\encoder.rs","byte_start":220467,"byte_end":220478,"line_start":347,"line_end":347,"column_start":10,"column_end":21},"name":"JPEGEncoder","qualname":"::codecs::jpeg::encoder::JPEGEncoder","value":"JpegEncoder","parent":null,"children":[],"decl_id":null,"docs":" JPEG Encoder","sig":null,"attributes":[{"value":"/ JPEG Encoder","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\codecs\\jpeg\\encoder.rs","byte_start":220264,"byte_end":220280,"line_start":338,"line_end":338,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\codecs\\jpeg\\encoder.rs","byte_start":220281,"byte_end":220284,"line_start":339,"line_end":339,"column_start":1,"column_end":4}},{"value":"/ An alias of [`JpegEncoder`].","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\codecs\\jpeg\\encoder.rs","byte_start":220285,"byte_end":220317,"line_start":340,"line_end":340,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\codecs\\jpeg\\encoder.rs","byte_start":220318,"byte_end":220321,"line_start":341,"line_end":341,"column_start":1,"column_end":4}},{"value":"/ TODO: remove","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\codecs\\jpeg\\encoder.rs","byte_start":220322,"byte_end":220338,"line_start":342,"line_end":342,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\codecs\\jpeg\\encoder.rs","byte_start":220339,"byte_end":220342,"line_start":343,"line_end":343,"column_start":1,"column_end":4}},{"value":"/ [`JpegEncoder`]: struct.JpegEncoder.html","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\codecs\\jpeg\\encoder.rs","byte_start":220343,"byte_end":220387,"line_start":344,"line_end":344,"column_start":1,"column_end":45}},{"value":"allow(dead_code)","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\codecs\\jpeg\\encoder.rs","byte_start":220388,"byte_end":220407,"line_start":345,"line_end":345,"column_start":1,"column_end":20}},{"value":"deprecated(note = \"Use `JpegEncoder` instead\")","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\codecs\\jpeg\\encoder.rs","byte_start":220408,"byte_end":220457,"line_start":346,"line_end":346,"column_start":1,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":848},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\codecs\\jpeg\\encoder.rs","byte_start":220623,"byte_end":220626,"line_start":351,"line_end":351,"column_start":12,"column_end":15},"name":"new","qualname":"<JpegEncoder>::new","value":"pub fn new(&mut W) -> JpegEncoder<, W>","parent":null,"children":[],"decl_id":null,"docs":" Create a new encoder that writes its output to ```w```\n","sig":null,"attributes":[{"value":"/ Create a new encoder that writes its output to ```w```","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\codecs\\jpeg\\encoder.rs","byte_start":220553,"byte_end":220611,"line_start":350,"line_end":350,"column_start":5,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":849},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\codecs\\jpeg\\encoder.rs","byte_start":220919,"byte_end":220935,"line_start":358,"line_end":358,"column_start":12,"column_end":28},"name":"new_with_quality","qualname":"<JpegEncoder>::new_with_quality","value":"pub fn new_with_quality(&mut W, u8) -> JpegEncoder<, W>","parent":null,"children":[],"decl_id":null,"docs":" Create a new encoder that writes its output to ```w```, and has\n the quality parameter ```quality``` with a value in the range 1-100\n where 1 is the worst and 100 is the best.\n","sig":null,"attributes":[{"value":"/ Create a new encoder that writes its output to ```w```, and has","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\codecs\\jpeg\\encoder.rs","byte_start":220714,"byte_end":220781,"line_start":355,"line_end":355,"column_start":5,"column_end":72}},{"value":"/ the quality parameter ```quality``` with a value in the range 1-100","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\codecs\\jpeg\\encoder.rs","byte_start":220786,"byte_end":220857,"line_start":356,"line_end":356,"column_start":5,"column_end":76}},{"value":"/ where 1 is the worst and 100 is the best.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\codecs\\jpeg\\encoder.rs","byte_start":220862,"byte_end":220907,"line_start":357,"line_end":357,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":852},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\codecs\\jpeg\\encoder.rs","byte_start":223277,"byte_end":223294,"line_start":430,"line_end":430,"column_start":12,"column_end":29},"name":"set_pixel_density","qualname":"<JpegEncoder>::set_pixel_density","value":"pub fn set_pixel_density(&mut Self, PixelDensity)","parent":null,"children":[],"decl_id":null,"docs":" Set the pixel density of the images the encoder will encode.\n If this method is not called, then a default pixel aspect ratio of 1x1 will be applied,\n and no DPI information will be stored in the image.\n","sig":null,"attributes":[{"value":"/ Set the pixel density of the images the encoder will encode.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\codecs\\jpeg\\encoder.rs","byte_start":223045,"byte_end":223109,"line_start":427,"line_end":427,"column_start":5,"column_end":69}},{"value":"/ If this method is not called, then a default pixel aspect ratio of 1x1 will be applied,","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\codecs\\jpeg\\encoder.rs","byte_start":223114,"byte_end":223205,"line_start":428,"line_end":428,"column_start":5,"column_end":96}},{"value":"/ and no DPI information will be stored in the image.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\codecs\\jpeg\\encoder.rs","byte_start":223210,"byte_end":223265,"line_start":429,"line_end":429,"column_start":5,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":853},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\codecs\\jpeg\\encoder.rs","byte_start":223626,"byte_end":223632,"line_start":439,"line_end":439,"column_start":12,"column_end":18},"name":"encode","qualname":"<JpegEncoder>::encode","value":"pub fn encode(&mut Self, &[u8], u32, u32, ColorType) -> ImageResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Encodes the image stored in the raw byte buffer ```image```\n that has dimensions ```width``` and ```height```\n and ```ColorType``` ```c```","sig":null,"attributes":[{"value":"/ Encodes the image stored in the raw byte buffer ```image```","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\codecs\\jpeg\\encoder.rs","byte_start":223392,"byte_end":223455,"line_start":434,"line_end":434,"column_start":5,"column_end":68}},{"value":"/ that has dimensions ```width``` and ```height```","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\codecs\\jpeg\\encoder.rs","byte_start":223460,"byte_end":223512,"line_start":435,"line_end":435,"column_start":5,"column_end":57}},{"value":"/ and ```ColorType``` ```c```","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\codecs\\jpeg\\encoder.rs","byte_start":223517,"byte_end":223548,"line_start":436,"line_end":436,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\codecs\\jpeg\\encoder.rs","byte_start":223553,"byte_end":223556,"line_start":437,"line_end":437,"column_start":5,"column_end":8}},{"value":"/ The Image in encoded with subsampling ratio 4:2:2","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\codecs\\jpeg\\encoder.rs","byte_start":223561,"byte_end":223614,"line_start":438,"line_end":438,"column_start":5,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":854},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\codecs\\jpeg\\encoder.rs","byte_start":225833,"byte_end":225845,"line_start":491,"line_end":491,"column_start":12,"column_end":24},"name":"encode_image","qualname":"<JpegEncoder>::encode_image","value":"pub fn encode_image<I: GenericImageView>(&mut Self, &I) -> ImageResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Encodes the given image.","sig":null,"attributes":[{"value":"/ Encodes the given image.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\codecs\\jpeg\\encoder.rs","byte_start":225305,"byte_end":225333,"line_start":482,"line_end":482,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\codecs\\jpeg\\encoder.rs","byte_start":225338,"byte_end":225341,"line_start":483,"line_end":483,"column_start":5,"column_end":8}},{"value":"/ As a special feature this does not require the whole image to be present in memory at the","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\codecs\\jpeg\\encoder.rs","byte_start":225346,"byte_end":225439,"line_start":484,"line_end":484,"column_start":5,"column_end":98}},{"value":"/ same time such that it may be computed on the fly, which is why this method exists on this","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\codecs\\jpeg\\encoder.rs","byte_start":225444,"byte_end":225538,"line_start":485,"line_end":485,"column_start":5,"column_end":99}},{"value":"/ encoder but not on others. Instead the encoder will iterate over 8-by-8 blocks of pixels at","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\codecs\\jpeg\\encoder.rs","byte_start":225543,"byte_end":225638,"line_start":486,"line_end":486,"column_start":5,"column_end":100}},{"value":"/ a time, inspecting each pixel exactly once. You can rely on this behaviour when calling","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\codecs\\jpeg\\encoder.rs","byte_start":225643,"byte_end":225734,"line_start":487,"line_end":487,"column_start":5,"column_end":96}},{"value":"/ this method.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\codecs\\jpeg\\encoder.rs","byte_start":225739,"byte_end":225755,"line_start":488,"line_end":488,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\codecs\\jpeg\\encoder.rs","byte_start":225760,"byte_end":225763,"line_start":489,"line_end":489,"column_start":5,"column_end":8}},{"value":"/ The Image in encoded with subsampling ratio 4:2:2","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\codecs\\jpeg\\encoder.rs","byte_start":225768,"byte_end":225821,"line_start":490,"line_end":490,"column_start":5,"column_end":58}}]},{"kind":"Mod","id":{"krate":0,"index":920},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\codecs\\png.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"png","qualname":"::codecs::png","value":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\codecs\\png.rs","parent":null,"children":[{"krate":0,"index":921},{"krate":0,"index":922},{"krate":0,"index":923},{"krate":0,"index":924},{"krate":0,"index":925},{"krate":0,"index":926},{"krate":0,"index":927},{"krate":0,"index":928},{"krate":0,"index":929},{"krate":0,"index":930},{"krate":0,"index":931},{"krate":0,"index":932},{"krate":0,"index":933},{"krate":0,"index":934},{"krate":0,"index":3910},{"krate":0,"index":935},{"krate":0,"index":3912},{"krate":0,"index":936},{"krate":0,"index":937},{"krate":0,"index":3916},{"krate":0,"index":938},{"krate":0,"index":3918},{"krate":0,"index":939},{"krate":0,"index":940},{"krate":0,"index":941},{"krate":0,"index":942},{"krate":0,"index":943},{"krate":0,"index":944},{"krate":0,"index":945},{"krate":0,"index":946},{"krate":0,"index":947},{"krate":0,"index":948},{"krate":0,"index":949},{"krate":0,"index":950},{"krate":0,"index":951},{"krate":0,"index":952},{"krate":0,"index":953},{"krate":0,"index":954},{"krate":0,"index":955},{"krate":0,"index":956},{"krate":0,"index":957},{"krate":0,"index":958},{"krate":0,"index":959},{"krate":0,"index":960},{"krate":0,"index":961},{"krate":0,"index":962},{"krate":0,"index":967},{"krate":0,"index":969},{"krate":0,"index":972},{"krate":0,"index":976},{"krate":0,"index":980},{"krate":0,"index":985},{"krate":0,"index":986},{"krate":0,"index":1000},{"krate":0,"index":1008},{"krate":0,"index":1014},{"krate":0,"index":1026},{"krate":0,"index":1031},{"krate":0,"index":2509},{"krate":0,"index":2533},{"krate":0,"index":2532},{"krate":0,"index":2530},{"krate":0,"index":2527},{"krate":0,"index":2528},{"krate":0,"index":2523},{"krate":0,"index":2524},{"krate":0,"index":2535},{"krate":0,"index":2559},{"krate":0,"index":2558},{"krate":0,"index":2556},{"krate":0,"index":2553},{"krate":0,"index":2554},{"krate":0,"index":2549},{"krate":0,"index":2550},{"krate":0,"index":1033},{"krate":0,"index":1040},{"krate":0,"index":1048},{"krate":0,"index":1051},{"krate":0,"index":1053}],"decl_id":null,"docs":" Decoding and Encoding of PNG Images","sig":null,"attributes":[{"value":"cfg(feature = \"png\")","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src/lib.rs","byte_start":8043,"byte_end":8066,"line_start":234,"line_end":234,"column_start":5,"column_end":28}},{"value":"/ Decoding and Encoding of PNG Images","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\codecs\\png.rs","byte_start":253077,"byte_end":253116,"line_start":1,"line_end":1,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\codecs\\png.rs","byte_start":253117,"byte_end":253120,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ PNG (Portable Network Graphics) is an image format that supports lossless compression.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\codecs\\png.rs","byte_start":253121,"byte_end":253211,"line_start":3,"line_end":3,"column_start":1,"column_end":91}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\codecs\\png.rs","byte_start":253212,"byte_end":253215,"line_start":4,"line_end":4,"column_start":1,"column_end":4}},{"value":"/ # Related Links","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\codecs\\png.rs","byte_start":253216,"byte_end":253235,"line_start":5,"line_end":5,"column_start":1,"column_end":20}},{"value":"/ * <http://www.w3.org/TR/PNG/> - The PNG Specification","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\codecs\\png.rs","byte_start":253236,"byte_end":253293,"line_start":6,"line_end":6,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\codecs\\png.rs","byte_start":253294,"byte_end":253297,"line_start":7,"line_end":7,"column_start":1,"column_end":4}}]},{"kind":"Struct","id":{"krate":0,"index":962},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\codecs\\png.rs","byte_start":254050,"byte_end":254059,"line_start":28,"line_end":28,"column_start":12,"column_end":21},"name":"PngReader","qualname":"::codecs::png::PngReader","value":"PngReader {  }","parent":null,"children":[{"krate":0,"index":964},{"krate":0,"index":965},{"krate":0,"index":966}],"decl_id":null,"docs":" Png Reader","sig":null,"attributes":[{"value":"/ Png Reader","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\codecs\\png.rs","byte_start":253860,"byte_end":253874,"line_start":23,"line_end":23,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\codecs\\png.rs","byte_start":253875,"byte_end":253878,"line_start":24,"line_end":24,"column_start":1,"column_end":4}},{"value":"/ This reader will try to read the png one row at a time,","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\codecs\\png.rs","byte_start":253879,"byte_end":253938,"line_start":25,"line_end":25,"column_start":1,"column_end":60}},{"value":"/ however for interlaced png files this is not possible and","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\codecs\\png.rs","byte_start":253939,"byte_end":254000,"line_start":26,"line_end":26,"column_start":1,"column_end":62}},{"value":"/ these are therefore read at once.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\codecs\\png.rs","byte_start":254001,"byte_end":254038,"line_start":27,"line_end":27,"column_start":1,"column_end":38}}]},{"kind":"Type","id":{"krate":0,"index":967},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\codecs\\png.rs","byte_start":254334,"byte_end":254343,"line_start":43,"line_end":43,"column_start":10,"column_end":19},"name":"PNGReader","qualname":"::codecs::png::PNGReader","value":"PngReader<R>","parent":null,"children":[],"decl_id":null,"docs":" PNG Reader","sig":null,"attributes":[{"value":"/ PNG Reader","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\codecs\\png.rs","byte_start":254141,"byte_end":254155,"line_start":34,"line_end":34,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\codecs\\png.rs","byte_start":254156,"byte_end":254159,"line_start":35,"line_end":35,"column_start":1,"column_end":4}},{"value":"/ An alias of [`PngReader`].","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\codecs\\png.rs","byte_start":254160,"byte_end":254190,"line_start":36,"line_end":36,"column_start":1,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\codecs\\png.rs","byte_start":254191,"byte_end":254194,"line_start":37,"line_end":37,"column_start":1,"column_end":4}},{"value":"/ TODO: remove","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\codecs\\png.rs","byte_start":254195,"byte_end":254211,"line_start":38,"line_end":38,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\codecs\\png.rs","byte_start":254212,"byte_end":254215,"line_start":39,"line_end":39,"column_start":1,"column_end":4}},{"value":"/ [`PngReader`]: struct.PngReader.html","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\codecs\\png.rs","byte_start":254216,"byte_end":254256,"line_start":40,"line_end":40,"column_start":1,"column_end":41}},{"value":"allow(dead_code)","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\codecs\\png.rs","byte_start":254257,"byte_end":254276,"line_start":41,"line_end":41,"column_start":1,"column_end":20}},{"value":"deprecated(note = \"Use `PngReader` instead\")","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\codecs\\png.rs","byte_start":254277,"byte_end":254324,"line_start":42,"line_end":42,"column_start":1,"column_end":48}}]},{"kind":"Struct","id":{"krate":0,"index":976},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\codecs\\png.rs","byte_start":256425,"byte_end":256435,"line_start":115,"line_end":115,"column_start":12,"column_end":22},"name":"PngDecoder","qualname":"::codecs::png::PngDecoder","value":"PngDecoder {  }","parent":null,"children":[{"krate":0,"index":978},{"krate":0,"index":979}],"decl_id":null,"docs":" PNG decoder\n","sig":null,"attributes":[{"value":"/ PNG decoder","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\codecs\\png.rs","byte_start":256398,"byte_end":256413,"line_start":114,"line_end":114,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":982},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\codecs\\png.rs","byte_start":256613,"byte_end":256616,"line_start":122,"line_end":122,"column_start":12,"column_end":15},"name":"new","qualname":"<PngDecoder<R>>::new","value":"pub fn new(R) -> ImageResult<PngDecoder<R>>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new decoder that decodes from the stream ```r```\n","sig":null,"attributes":[{"value":"/ Creates a new decoder that decodes from the stream ```r```","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\codecs\\png.rs","byte_start":256539,"byte_end":256601,"line_start":121,"line_end":121,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":983},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\codecs\\png.rs","byte_start":260369,"byte_end":260373,"line_start":187,"line_end":187,"column_start":12,"column_end":16},"name":"apng","qualname":"<PngDecoder<R>>::apng","value":"pub fn apng(Self) -> ApngDecoder<R>","parent":null,"children":[],"decl_id":null,"docs":" Turn this into an iterator over the animation frames.","sig":null,"attributes":[{"value":"/ Turn this into an iterator over the animation frames.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\codecs\\png.rs","byte_start":259722,"byte_end":259779,"line_start":177,"line_end":177,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\codecs\\png.rs","byte_start":259784,"byte_end":259787,"line_start":178,"line_end":178,"column_start":5,"column_end":8}},{"value":"/ Reading the complete animation requires more memory than reading the data from the IDAT","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\codecs\\png.rs","byte_start":259792,"byte_end":259883,"line_start":179,"line_end":179,"column_start":5,"column_end":96}},{"value":"/ frame–multiple frame buffers need to be reserved at the same time. We further do not","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\codecs\\png.rs","byte_start":259888,"byte_end":259978,"line_start":180,"line_end":180,"column_start":5,"column_end":93}},{"value":"/ support compositing 16-bit colors. In any case this would be lossy as the interface of","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\codecs\\png.rs","byte_start":259983,"byte_end":260073,"line_start":181,"line_end":181,"column_start":5,"column_end":95}},{"value":"/ animation decoders does not support 16-bit colors.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\codecs\\png.rs","byte_start":260078,"byte_end":260132,"line_start":182,"line_end":182,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\codecs\\png.rs","byte_start":260137,"byte_end":260140,"line_start":183,"line_end":183,"column_start":5,"column_end":8}},{"value":"/ If something is not supported or a limit is violated then the decoding step that requires","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\codecs\\png.rs","byte_start":260145,"byte_end":260238,"line_start":184,"line_end":184,"column_start":5,"column_end":98}},{"value":"/ them will fail and an error will be returned instead of the frame. No further frames will","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\codecs\\png.rs","byte_start":260243,"byte_end":260336,"line_start":185,"line_end":185,"column_start":5,"column_end":98}},{"value":"/ be returned.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\codecs\\png.rs","byte_start":260341,"byte_end":260357,"line_start":186,"line_end":186,"column_start":5,"column_end":21}}]},{"kind":"Method","id":{"krate":0,"index":984},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\codecs\\png.rs","byte_start":260796,"byte_end":260803,"line_start":197,"line_end":197,"column_start":12,"column_end":19},"name":"is_apng","qualname":"<PngDecoder<R>>::is_apng","value":"pub fn is_apng(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns if the image contains an animation.","sig":null,"attributes":[{"value":"/ Returns if the image contains an animation.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\codecs\\png.rs","byte_start":260442,"byte_end":260489,"line_start":191,"line_end":191,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\codecs\\png.rs","byte_start":260494,"byte_end":260497,"line_start":192,"line_end":192,"column_start":5,"column_end":8}},{"value":"/ Note that the file itself decides if the default image is considered to be part of the","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\codecs\\png.rs","byte_start":260502,"byte_end":260592,"line_start":193,"line_end":193,"column_start":5,"column_end":95}},{"value":"/ animation. When it is not the common interpretation is to use it as a thumbnail.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\codecs\\png.rs","byte_start":260597,"byte_end":260681,"line_start":194,"line_end":194,"column_start":5,"column_end":89}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\codecs\\png.rs","byte_start":260686,"byte_end":260689,"line_start":195,"line_end":195,"column_start":5,"column_end":8}},{"value":"/ If a non-animated image is converted into an `ApngDecoder` then its iterator is empty.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\codecs\\png.rs","byte_start":260694,"byte_end":260784,"line_start":196,"line_end":196,"column_start":5,"column_end":95}}]},{"kind":"Struct","id":{"krate":0,"index":1000},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\codecs\\png.rs","byte_start":262772,"byte_end":262783,"line_start":258,"line_end":258,"column_start":12,"column_end":23},"name":"ApngDecoder","qualname":"::codecs::png::ApngDecoder","value":"ApngDecoder {  }","parent":null,"children":[{"krate":0,"index":1002},{"krate":0,"index":1003},{"krate":0,"index":1004},{"krate":0,"index":1005},{"krate":0,"index":1006},{"krate":0,"index":1007}],"decl_id":null,"docs":" An [`AnimationDecoder`] adapter of [`PngDecoder`].","sig":null,"attributes":[{"value":"/ An [`AnimationDecoder`] adapter of [`PngDecoder`].","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\codecs\\png.rs","byte_start":262486,"byte_end":262540,"line_start":251,"line_end":251,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\codecs\\png.rs","byte_start":262541,"byte_end":262544,"line_start":252,"line_end":252,"column_start":1,"column_end":4}},{"value":"/ See [`PngDecoder::apng`] for more information.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\codecs\\png.rs","byte_start":262545,"byte_end":262595,"line_start":253,"line_end":253,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\codecs\\png.rs","byte_start":262596,"byte_end":262599,"line_start":254,"line_end":254,"column_start":1,"column_end":4}},{"value":"/ [`AnimationDecoder`]: ../trait.AnimationDecoder.html","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\codecs\\png.rs","byte_start":262600,"byte_end":262656,"line_start":255,"line_end":255,"column_start":1,"column_end":57}},{"value":"/ [`PngDecoder`]: struct.PngDecoder.html","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\codecs\\png.rs","byte_start":262657,"byte_end":262699,"line_start":256,"line_end":256,"column_start":1,"column_end":43}},{"value":"/ [`PngDecoder::apng`]: struct.PngDecoder.html#method.apng","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\codecs\\png.rs","byte_start":262700,"byte_end":262760,"line_start":257,"line_end":257,"column_start":1,"column_end":61}}]},{"kind":"Struct","id":{"krate":0,"index":1026},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\codecs\\png.rs","byte_start":269979,"byte_end":269989,"line_start":445,"line_end":445,"column_start":12,"column_end":22},"name":"PngEncoder","qualname":"::codecs::png::PngEncoder","value":"PngEncoder {  }","parent":null,"children":[{"krate":0,"index":1028},{"krate":0,"index":1029},{"krate":0,"index":1030}],"decl_id":null,"docs":" PNG encoder\n","sig":null,"attributes":[{"value":"/ PNG encoder","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\codecs\\png.rs","byte_start":269952,"byte_end":269967,"line_start":444,"line_end":444,"column_start":1,"column_end":16}}]},{"kind":"Type","id":{"krate":0,"index":1031},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\codecs\\png.rs","byte_start":270271,"byte_end":270281,"line_start":460,"line_end":460,"column_start":10,"column_end":20},"name":"PNGEncoder","qualname":"::codecs::png::PNGEncoder","value":"PngEncoder<W>","parent":null,"children":[],"decl_id":null,"docs":" PNG Encoder","sig":null,"attributes":[{"value":"/ PNG Encoder","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\codecs\\png.rs","byte_start":270073,"byte_end":270088,"line_start":451,"line_end":451,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\codecs\\png.rs","byte_start":270089,"byte_end":270092,"line_start":452,"line_end":452,"column_start":1,"column_end":4}},{"value":"/ An alias of [`PngEncoder`].","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\codecs\\png.rs","byte_start":270093,"byte_end":270124,"line_start":453,"line_end":453,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\codecs\\png.rs","byte_start":270125,"byte_end":270128,"line_start":454,"line_end":454,"column_start":1,"column_end":4}},{"value":"/ TODO: remove","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\codecs\\png.rs","byte_start":270129,"byte_end":270145,"line_start":455,"line_end":455,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\codecs\\png.rs","byte_start":270146,"byte_end":270149,"line_start":456,"line_end":456,"column_start":1,"column_end":4}},{"value":"/ [`PngEncoder`]: struct.PngEncoder.html","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\codecs\\png.rs","byte_start":270150,"byte_end":270192,"line_start":457,"line_end":457,"column_start":1,"column_end":43}},{"value":"allow(dead_code)","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\codecs\\png.rs","byte_start":270193,"byte_end":270212,"line_start":458,"line_end":458,"column_start":1,"column_end":20}},{"value":"deprecated(note = \"Use `PngEncoder` instead\")","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\codecs\\png.rs","byte_start":270213,"byte_end":270261,"line_start":459,"line_end":459,"column_start":1,"column_end":49}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2510},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\codecs\\png.rs","byte_start":270484,"byte_end":270491,"line_start":466,"line_end":466,"column_start":5,"column_end":12},"name":"Default","qualname":"::codecs::png::CompressionType::Default","value":"CompressionType::Default","parent":{"krate":0,"index":2509},"children":[],"decl_id":null,"docs":" Default compression level\n","sig":null,"attributes":[{"value":"/ Default compression level","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\codecs\\png.rs","byte_start":270450,"byte_end":270479,"line_start":465,"line_end":465,"column_start":5,"column_end":34}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2512},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\codecs\\png.rs","byte_start":270531,"byte_end":270535,"line_start":468,"line_end":468,"column_start":5,"column_end":9},"name":"Fast","qualname":"::codecs::png::CompressionType::Fast","value":"CompressionType::Fast","parent":{"krate":0,"index":2509},"children":[],"decl_id":null,"docs":" Fast, minimal compression\n","sig":null,"attributes":[{"value":"/ Fast, minimal compression","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\codecs\\png.rs","byte_start":270497,"byte_end":270526,"line_start":467,"line_end":467,"column_start":5,"column_end":34}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2514},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\codecs\\png.rs","byte_start":270572,"byte_end":270576,"line_start":470,"line_end":470,"column_start":5,"column_end":9},"name":"Best","qualname":"::codecs::png::CompressionType::Best","value":"CompressionType::Best","parent":{"krate":0,"index":2509},"children":[],"decl_id":null,"docs":" High compression level\n","sig":null,"attributes":[{"value":"/ High compression level","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\codecs\\png.rs","byte_start":270541,"byte_end":270567,"line_start":469,"line_end":469,"column_start":5,"column_end":31}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2516},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\codecs\\png.rs","byte_start":270617,"byte_end":270624,"line_start":472,"line_end":472,"column_start":5,"column_end":12},"name":"Huffman","qualname":"::codecs::png::CompressionType::Huffman","value":"CompressionType::Huffman","parent":{"krate":0,"index":2509},"children":[],"decl_id":null,"docs":" Huffman coding compression\n","sig":null,"attributes":[{"value":"/ Huffman coding compression","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\codecs\\png.rs","byte_start":270582,"byte_end":270612,"line_start":471,"line_end":471,"column_start":5,"column_end":35}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2518},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\codecs\\png.rs","byte_start":270670,"byte_end":270673,"line_start":474,"line_end":474,"column_start":5,"column_end":8},"name":"Rle","qualname":"::codecs::png::CompressionType::Rle","value":"CompressionType::Rle","parent":{"krate":0,"index":2509},"children":[],"decl_id":null,"docs":" Run-length encoding compression\n","sig":null,"attributes":[{"value":"/ Run-length encoding compression","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\codecs\\png.rs","byte_start":270630,"byte_end":270665,"line_start":473,"line_end":473,"column_start":5,"column_end":40}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2520},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\codecs\\png.rs","byte_start":270699,"byte_end":270714,"line_start":477,"line_end":477,"column_start":5,"column_end":20},"name":"__NonExhaustive","qualname":"::codecs::png::CompressionType::__NonExhaustive","value":"CompressionType::__NonExhaustive(crate::utils::NonExhaustiveMarker)","parent":{"krate":0,"index":2509},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":2509},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\codecs\\png.rs","byte_start":270428,"byte_end":270443,"line_start":464,"line_end":464,"column_start":10,"column_end":25},"name":"CompressionType","qualname":"::codecs::png::CompressionType","value":"pub enum CompressionType {\n\n    /// Default compression level\n    Default,\n\n    /// Fast, minimal compression\n    Fast,\n\n    /// High compression level\n    Best,\n\n    /// Huffman coding compression\n    Huffman,\n\n    /// Run-length encoding compression\n    Rle,\n\n    #[doc(hidden)]\n    __NonExhaustive(crate::utils::NonExhaustiveMarker),\n}","parent":null,"children":[{"krate":0,"index":2510},{"krate":0,"index":2512},{"krate":0,"index":2514},{"krate":0,"index":2516},{"krate":0,"index":2518},{"krate":0,"index":2520}],"decl_id":null,"docs":" Compression level of a PNG encoder. The default setting is `Fast`.\n","sig":null,"attributes":[{"value":"/ Compression level of a PNG encoder. The default setting is `Fast`.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\codecs\\png.rs","byte_start":270303,"byte_end":270373,"line_start":462,"line_end":462,"column_start":1,"column_end":71}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2536},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\codecs\\png.rs","byte_start":271149,"byte_end":271157,"line_start":488,"line_end":488,"column_start":5,"column_end":13},"name":"NoFilter","qualname":"::codecs::png::FilterType::NoFilter","value":"FilterType::NoFilter","parent":{"krate":0,"index":2535},"children":[],"decl_id":null,"docs":" No processing done, best used for low bit depth greyscale or data with a\n low color count\n","sig":null,"attributes":[{"value":"/ No processing done, best used for low bit depth greyscale or data with a","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\codecs\\png.rs","byte_start":271044,"byte_end":271120,"line_start":486,"line_end":486,"column_start":5,"column_end":81}},{"value":"/ low color count","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\codecs\\png.rs","byte_start":271125,"byte_end":271144,"line_start":487,"line_end":487,"column_start":5,"column_end":24}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2538},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\codecs\\png.rs","byte_start":271224,"byte_end":271227,"line_start":490,"line_end":490,"column_start":5,"column_end":8},"name":"Sub","qualname":"::codecs::png::FilterType::Sub","value":"FilterType::Sub","parent":{"krate":0,"index":2535},"children":[],"decl_id":null,"docs":" Filters based on previous pixel in the same scanline\n","sig":null,"attributes":[{"value":"/ Filters based on previous pixel in the same scanline","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\codecs\\png.rs","byte_start":271163,"byte_end":271219,"line_start":489,"line_end":489,"column_start":5,"column_end":61}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2540},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\codecs\\png.rs","byte_start":271277,"byte_end":271279,"line_start":492,"line_end":492,"column_start":5,"column_end":7},"name":"Up","qualname":"::codecs::png::FilterType::Up","value":"FilterType::Up","parent":{"krate":0,"index":2535},"children":[],"decl_id":null,"docs":" Filters based on the scanline above\n","sig":null,"attributes":[{"value":"/ Filters based on the scanline above","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\codecs\\png.rs","byte_start":271233,"byte_end":271272,"line_start":491,"line_end":491,"column_start":5,"column_end":44}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2542},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\codecs\\png.rs","byte_start":271356,"byte_end":271359,"line_start":494,"line_end":494,"column_start":5,"column_end":8},"name":"Avg","qualname":"::codecs::png::FilterType::Avg","value":"FilterType::Avg","parent":{"krate":0,"index":2535},"children":[],"decl_id":null,"docs":" Filters based on the average of left and right neighbor pixels\n","sig":null,"attributes":[{"value":"/ Filters based on the average of left and right neighbor pixels","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\codecs\\png.rs","byte_start":271285,"byte_end":271351,"line_start":493,"line_end":493,"column_start":5,"column_end":71}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2544},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\codecs\\png.rs","byte_start":271446,"byte_end":271451,"line_start":496,"line_end":496,"column_start":5,"column_end":10},"name":"Paeth","qualname":"::codecs::png::FilterType::Paeth","value":"FilterType::Paeth","parent":{"krate":0,"index":2535},"children":[],"decl_id":null,"docs":" Algorithm that takes into account the left, upper left, and above pixels\n","sig":null,"attributes":[{"value":"/ Algorithm that takes into account the left, upper left, and above pixels","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\codecs\\png.rs","byte_start":271365,"byte_end":271441,"line_start":495,"line_end":495,"column_start":5,"column_end":81}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2546},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\codecs\\png.rs","byte_start":271477,"byte_end":271492,"line_start":499,"line_end":499,"column_start":5,"column_end":20},"name":"__NonExhaustive","qualname":"::codecs::png::FilterType::__NonExhaustive","value":"FilterType::__NonExhaustive(crate::utils::NonExhaustiveMarker)","parent":{"krate":0,"index":2535},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":2535},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\codecs\\png.rs","byte_start":271027,"byte_end":271037,"line_start":485,"line_end":485,"column_start":10,"column_end":20},"name":"FilterType","qualname":"::codecs::png::FilterType","value":"pub enum FilterType {\n\n    /// No processing done, best used for low bit depth greyscale or data with a\n    /// low color count\n    NoFilter,\n\n    /// Filters based on previous pixel in the same scanline\n    Sub,\n\n    /// Filters based on the scanline above\n    Up,\n\n    /// Filters based on the average of left and right neighbor pixels\n    Avg,\n\n    /// Algorithm that takes into account the left, upper left, and above pixels\n    Paeth,\n\n    #[doc(hidden)]\n    __NonExhaustive(crate::utils::NonExhaustiveMarker),\n}","parent":null,"children":[{"krate":0,"index":2536},{"krate":0,"index":2538},{"krate":0,"index":2540},{"krate":0,"index":2542},{"krate":0,"index":2544},{"krate":0,"index":2546}],"decl_id":null,"docs":" Filter algorithms used to process image data to improve compression.","sig":null,"attributes":[{"value":"/ Filter algorithms used to process image data to improve compression.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\codecs\\png.rs","byte_start":270754,"byte_end":270826,"line_start":480,"line_end":480,"column_start":1,"column_end":73}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\codecs\\png.rs","byte_start":270827,"byte_end":270830,"line_start":481,"line_end":481,"column_start":1,"column_end":4}},{"value":"/ The default filter is `Sub` though this default may change in the future, most notable if an","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\codecs\\png.rs","byte_start":270831,"byte_end":270927,"line_start":482,"line_end":482,"column_start":1,"column_end":97}},{"value":"/ adaptive encoding option is implemented.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\codecs\\png.rs","byte_start":270928,"byte_end":270972,"line_start":483,"line_end":483,"column_start":1,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":1035},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\codecs\\png.rs","byte_start":271637,"byte_end":271640,"line_start":504,"line_end":504,"column_start":12,"column_end":15},"name":"new","qualname":"<PngEncoder<W>>::new","value":"pub fn new(W) -> PngEncoder<W>","parent":null,"children":[],"decl_id":null,"docs":" Create a new encoder that writes its output to ```w```\n","sig":null,"attributes":[{"value":"/ Create a new encoder that writes its output to ```w```","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\codecs\\png.rs","byte_start":271567,"byte_end":271625,"line_start":503,"line_end":503,"column_start":5,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":1036},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\codecs\\png.rs","byte_start":272822,"byte_end":272838,"line_start":526,"line_end":526,"column_start":12,"column_end":28},"name":"new_with_quality","qualname":"<PngEncoder<W>>::new_with_quality","value":"pub fn new_with_quality(W, CompressionType, FilterType) -> PngEncoder<W>","parent":null,"children":[],"decl_id":null,"docs":" Create a new encoder that writes its output to `w` with `CompressionType` `compression` and\n `FilterType` `filter`.","sig":null,"attributes":[{"value":"/ Create a new encoder that writes its output to `w` with `CompressionType` `compression` and","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\codecs\\png.rs","byte_start":271808,"byte_end":271903,"line_start":512,"line_end":512,"column_start":5,"column_end":100}},{"value":"/ `FilterType` `filter`.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\codecs\\png.rs","byte_start":271908,"byte_end":271934,"line_start":513,"line_end":513,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\codecs\\png.rs","byte_start":271939,"byte_end":271942,"line_start":514,"line_end":514,"column_start":5,"column_end":8}},{"value":"/ It is best to view the options as a _hint_ to the implementation on the smallest or fastest","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\codecs\\png.rs","byte_start":271947,"byte_end":272042,"line_start":515,"line_end":515,"column_start":5,"column_end":100}},{"value":"/ option for encoding a particular image. That is, using options that map directly to a PNG","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\codecs\\png.rs","byte_start":272047,"byte_end":272140,"line_start":516,"line_end":516,"column_start":5,"column_end":98}},{"value":"/ image parameter will use this parameter where possible. But variants that have no direct","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\codecs\\png.rs","byte_start":272145,"byte_end":272237,"line_start":517,"line_end":517,"column_start":5,"column_end":97}},{"value":"/ mapping may be interpreted differently in minor versions. The exact output is expressly","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\codecs\\png.rs","byte_start":272242,"byte_end":272333,"line_start":518,"line_end":518,"column_start":5,"column_end":96}},{"value":"/ __not__ part the SemVer stability guarantee.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\codecs\\png.rs","byte_start":272338,"byte_end":272386,"line_start":519,"line_end":519,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\codecs\\png.rs","byte_start":272391,"byte_end":272394,"line_start":520,"line_end":520,"column_start":5,"column_end":8}},{"value":"/ Note that it is not optimal to use a single filter type. It is likely that the library used","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\codecs\\png.rs","byte_start":272399,"byte_end":272494,"line_start":521,"line_end":521,"column_start":5,"column_end":100}},{"value":"/ will at some point gain the ability to use adaptive filtering methods per pixel row (or","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\codecs\\png.rs","byte_start":272499,"byte_end":272590,"line_start":522,"line_end":522,"column_start":5,"column_end":96}},{"value":"/ even interlaced row). We might make it the new default variant in which case choosing a","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\codecs\\png.rs","byte_start":272595,"byte_end":272686,"line_start":523,"line_end":523,"column_start":5,"column_end":96}},{"value":"/ particular filter method likely produces larger images. Be sure to check the release notes","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\codecs\\png.rs","byte_start":272691,"byte_end":272785,"line_start":524,"line_end":524,"column_start":5,"column_end":99}},{"value":"/ once in a while.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\codecs\\png.rs","byte_start":272790,"byte_end":272810,"line_start":525,"line_end":525,"column_start":5,"column_end":25}}]},{"kind":"Method","id":{"krate":0,"index":1037},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\codecs\\png.rs","byte_start":273118,"byte_end":273124,"line_start":535,"line_end":535,"column_start":12,"column_end":18},"name":"encode","qualname":"<PngEncoder<W>>::encode","value":"pub fn encode(Self, &[u8], u32, u32, ColorType) -> ImageResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Encodes the image `data` that has dimensions `width` and `height` and `ColorType` `c`.\n","sig":null,"attributes":[{"value":"/ Encodes the image `data` that has dimensions `width` and `height` and `ColorType` `c`.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\codecs\\png.rs","byte_start":273016,"byte_end":273106,"line_start":534,"line_end":534,"column_start":5,"column_end":95}}]},{"kind":"Mod","id":{"krate":0,"index":1055},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src/lib.rs","byte_start":10251,"byte_end":10255,"line_start":307,"line_end":307,"column_start":9,"column_end":13},"name":"jpeg","qualname":"::jpeg","value":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src/lib.rs","parent":null,"children":[{"krate":0,"index":1056},{"krate":0,"index":1057},{"krate":0,"index":1058},{"krate":0,"index":1059},{"krate":0,"index":1060},{"krate":0,"index":1061}],"decl_id":null,"docs":" Decoding and Encoding of JPEG Images\n","sig":null,"attributes":[{"value":"cfg(feature = \"jpeg\")","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src/lib.rs","byte_start":10175,"byte_end":10199,"line_start":305,"line_end":305,"column_start":1,"column_end":25}},{"value":"deprecated = \"Use codecs::jpeg instead\"","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src/lib.rs","byte_start":10200,"byte_end":10242,"line_start":306,"line_end":306,"column_start":1,"column_end":43}},{"value":"/ Decoding and Encoding of JPEG Images","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src/lib.rs","byte_start":10262,"byte_end":10302,"line_start":308,"line_end":308,"column_start":5,"column_end":45}}]},{"kind":"Mod","id":{"krate":0,"index":1062},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src/lib.rs","byte_start":10525,"byte_end":10528,"line_start":316,"line_end":316,"column_start":9,"column_end":12},"name":"png","qualname":"::png","value":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src/lib.rs","parent":null,"children":[{"krate":0,"index":1063},{"krate":0,"index":1064},{"krate":0,"index":1065},{"krate":0,"index":1066},{"krate":0,"index":1067},{"krate":0,"index":1068},{"krate":0,"index":1069},{"krate":0,"index":1070},{"krate":0,"index":1071}],"decl_id":null,"docs":" Decoding and Encoding of PNG Images\n","sig":null,"attributes":[{"value":"cfg(feature = \"png\")","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src/lib.rs","byte_start":10451,"byte_end":10474,"line_start":314,"line_end":314,"column_start":1,"column_end":24}},{"value":"deprecated = \"Use codecs::png instead\"","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src/lib.rs","byte_start":10475,"byte_end":10516,"line_start":315,"line_end":315,"column_start":1,"column_end":42}},{"value":"/ Decoding and Encoding of PNG Images","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src/lib.rs","byte_start":10535,"byte_end":10574,"line_start":317,"line_end":317,"column_start":5,"column_end":44}}]},{"kind":"Struct","id":{"krate":0,"index":1078},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\animation.rs","byte_start":279319,"byte_end":279325,"line_start":10,"line_end":10,"column_start":12,"column_end":18},"name":"Frames","qualname":"::animation::Frames","value":"Frames {  }","parent":null,"children":[{"krate":0,"index":1080}],"decl_id":null,"docs":" An implementation dependent iterator, reading the frames as requested\n","sig":null,"attributes":[{"value":"/ An implementation dependent iterator, reading the frames as requested","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\animation.rs","byte_start":279234,"byte_end":279307,"line_start":9,"line_end":9,"column_start":1,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":1083},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\animation.rs","byte_start":279505,"byte_end":279508,"line_start":16,"line_end":16,"column_start":12,"column_end":15},"name":"new","qualname":"<Frames>::new","value":"pub fn new(Box<Iterator<Item = ImageResult<Frame>> + 'a>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new `Frames` from an implementation specific iterator.\n","sig":null,"attributes":[{"value":"/ Creates a new `Frames` from an implementation specific iterator.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\animation.rs","byte_start":279425,"byte_end":279493,"line_start":15,"line_end":15,"column_start":5,"column_end":73}}]},{"kind":"Method","id":{"krate":0,"index":1084},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\animation.rs","byte_start":279900,"byte_end":279914,"line_start":25,"line_end":25,"column_start":12,"column_end":26},"name":"collect_frames","qualname":"<Frames>::collect_frames","value":"pub fn collect_frames(Self) -> ImageResult<Vec<Frame>>","parent":null,"children":[],"decl_id":null,"docs":" Steps through the iterator from the current frame until the end and pushes each frame into\n a `Vec`.\n If en error is encountered that error is returned instead.","sig":null,"attributes":[{"value":"/ Steps through the iterator from the current frame until the end and pushes each frame into","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\animation.rs","byte_start":279619,"byte_end":279713,"line_start":20,"line_end":20,"column_start":5,"column_end":99}},{"value":"/ a `Vec`.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\animation.rs","byte_start":279718,"byte_end":279730,"line_start":21,"line_end":21,"column_start":5,"column_end":17}},{"value":"/ If en error is encountered that error is returned instead.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\animation.rs","byte_start":279735,"byte_end":279797,"line_start":22,"line_end":22,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\animation.rs","byte_start":279802,"byte_end":279805,"line_start":23,"line_end":23,"column_start":5,"column_end":8}},{"value":"/ Note: This is equivalent to `Frames::collect::<ImageResult<Vec<Frame>>>()`","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\animation.rs","byte_start":279810,"byte_end":279888,"line_start":24,"line_end":24,"column_start":5,"column_end":83}}]},{"kind":"Struct","id":{"krate":0,"index":2561},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\animation.rs","byte_start":280203,"byte_end":280208,"line_start":39,"line_end":39,"column_start":12,"column_end":17},"name":"Frame","qualname":"::animation::Frame","value":"Frame {  }","parent":null,"children":[{"krate":0,"index":2562},{"krate":0,"index":2563},{"krate":0,"index":2564},{"krate":0,"index":2565}],"decl_id":null,"docs":" A single animation frame\n","sig":null,"attributes":[{"value":"/ A single animation frame","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\animation.rs","byte_start":280146,"byte_end":280174,"line_start":37,"line_end":37,"column_start":1,"column_end":29}}]},{"kind":"Struct","id":{"krate":0,"index":2568},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\animation.rs","byte_start":280490,"byte_end":280495,"line_start":51,"line_end":51,"column_start":12,"column_end":17},"name":"Delay","qualname":"::animation::Delay","value":"Delay {  }","parent":null,"children":[{"krate":0,"index":2569}],"decl_id":null,"docs":" The delay of a frame relative to the previous one.\n","sig":null,"attributes":[{"value":"/ The delay of a frame relative to the previous one.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\animation.rs","byte_start":280367,"byte_end":280421,"line_start":49,"line_end":49,"column_start":1,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":1090},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\animation.rs","byte_start":280597,"byte_end":280600,"line_start":57,"line_end":57,"column_start":12,"column_end":15},"name":"new","qualname":"<Frame>::new","value":"pub fn new(RgbaImage) -> Frame","parent":null,"children":[],"decl_id":null,"docs":" Contructs a new frame without any delay.\n","sig":null,"attributes":[{"value":"/ Contructs a new frame without any delay.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\animation.rs","byte_start":280541,"byte_end":280585,"line_start":56,"line_end":56,"column_start":5,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":1091},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\animation.rs","byte_start":280828,"byte_end":280838,"line_start":67,"line_end":67,"column_start":12,"column_end":22},"name":"from_parts","qualname":"<Frame>::from_parts","value":"pub fn from_parts(RgbaImage, u32, u32, Delay) -> Frame","parent":null,"children":[],"decl_id":null,"docs":" Contructs a new frame\n","sig":null,"attributes":[{"value":"/ Contructs a new frame","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\animation.rs","byte_start":280791,"byte_end":280816,"line_start":66,"line_end":66,"column_start":5,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":1092},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\animation.rs","byte_start":281050,"byte_end":281055,"line_start":77,"line_end":77,"column_start":12,"column_end":17},"name":"delay","qualname":"<Frame>::delay","value":"pub fn delay(&Self) -> Delay","parent":null,"children":[],"decl_id":null,"docs":" Delay of this frame\n","sig":null,"attributes":[{"value":"/ Delay of this frame","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\animation.rs","byte_start":281015,"byte_end":281038,"line_start":76,"line_end":76,"column_start":5,"column_end":28}}]},{"kind":"Method","id":{"krate":0,"index":1093},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\animation.rs","byte_start":281144,"byte_end":281150,"line_start":82,"line_end":82,"column_start":12,"column_end":18},"name":"buffer","qualname":"<Frame>::buffer","value":"pub fn buffer(&Self) -> &RgbaImage","parent":null,"children":[],"decl_id":null,"docs":" Returns the image buffer\n","sig":null,"attributes":[{"value":"/ Returns the image buffer","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\animation.rs","byte_start":281104,"byte_end":281132,"line_start":81,"line_end":81,"column_start":5,"column_end":33}}]},{"kind":"Method","id":{"krate":0,"index":1094},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\animation.rs","byte_start":281246,"byte_end":281257,"line_start":87,"line_end":87,"column_start":12,"column_end":23},"name":"into_buffer","qualname":"<Frame>::into_buffer","value":"pub fn into_buffer(Self) -> RgbaImage","parent":null,"children":[],"decl_id":null,"docs":" Returns the image buffer\n","sig":null,"attributes":[{"value":"/ Returns the image buffer","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\animation.rs","byte_start":281206,"byte_end":281234,"line_start":86,"line_end":86,"column_start":5,"column_end":33}}]},{"kind":"Method","id":{"krate":0,"index":1095},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\animation.rs","byte_start":281346,"byte_end":281350,"line_start":92,"line_end":92,"column_start":12,"column_end":16},"name":"left","qualname":"<Frame>::left","value":"pub fn left(&Self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Returns the x offset\n","sig":null,"attributes":[{"value":"/ Returns the x offset","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\animation.rs","byte_start":281310,"byte_end":281334,"line_start":91,"line_end":91,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":1096},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\animation.rs","byte_start":281432,"byte_end":281435,"line_start":97,"line_end":97,"column_start":12,"column_end":15},"name":"top","qualname":"<Frame>::top","value":"pub fn top(&Self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Returns the y offset\n","sig":null,"attributes":[{"value":"/ Returns the y offset","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\animation.rs","byte_start":281396,"byte_end":281420,"line_start":96,"line_end":96,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":1098},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\animation.rs","byte_start":281700,"byte_end":281719,"line_start":111,"line_end":111,"column_start":12,"column_end":31},"name":"from_numer_denom_ms","qualname":"<Delay>::from_numer_denom_ms","value":"pub fn from_numer_denom_ms(u32, u32) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a delay from a ratio of milliseconds.","sig":null,"attributes":[{"value":"/ Create a delay from a ratio of milliseconds.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\animation.rs","byte_start":281495,"byte_end":281543,"line_start":103,"line_end":103,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\animation.rs","byte_start":281548,"byte_end":281551,"line_start":104,"line_end":104,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\animation.rs","byte_start":281556,"byte_end":281570,"line_start":105,"line_end":105,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\animation.rs","byte_start":281575,"byte_end":281578,"line_start":106,"line_end":106,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\animation.rs","byte_start":281583,"byte_end":281590,"line_start":107,"line_end":107,"column_start":5,"column_end":12}},{"value":"/ use image::Delay;","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\animation.rs","byte_start":281595,"byte_end":281616,"line_start":108,"line_end":108,"column_start":5,"column_end":26}},{"value":"/ let delay_10ms = Delay::from_numer_denom_ms(10, 1);","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\animation.rs","byte_start":281621,"byte_end":281676,"line_start":109,"line_end":109,"column_start":5,"column_end":60}},{"value":"/ ```","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\animation.rs","byte_start":281681,"byte_end":281688,"line_start":110,"line_end":110,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1099},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\animation.rs","byte_start":282362,"byte_end":282386,"line_start":129,"line_end":129,"column_start":12,"column_end":36},"name":"from_saturating_duration","qualname":"<Delay>::from_saturating_duration","value":"pub fn from_saturating_duration(Duration) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Convert from a duration, clamped between 0 and an implemented defined maximum.","sig":null,"attributes":[{"value":"/ Convert from a duration, clamped between 0 and an implemented defined maximum.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\animation.rs","byte_start":281839,"byte_end":281921,"line_start":115,"line_end":115,"column_start":5,"column_end":87}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\animation.rs","byte_start":281926,"byte_end":281929,"line_start":116,"line_end":116,"column_start":5,"column_end":8}},{"value":"/ The maximum is *at least* `i32::MAX` milliseconds. It should be noted that the accuracy of","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\animation.rs","byte_start":281934,"byte_end":282028,"line_start":117,"line_end":117,"column_start":5,"column_end":99}},{"value":"/ the result may be relative and very large delays have a coarse resolution.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\animation.rs","byte_start":282033,"byte_end":282111,"line_start":118,"line_end":118,"column_start":5,"column_end":83}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\animation.rs","byte_start":282116,"byte_end":282119,"line_start":119,"line_end":119,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\animation.rs","byte_start":282124,"byte_end":282138,"line_start":120,"line_end":120,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\animation.rs","byte_start":282143,"byte_end":282146,"line_start":121,"line_end":121,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\animation.rs","byte_start":282151,"byte_end":282158,"line_start":122,"line_end":122,"column_start":5,"column_end":12}},{"value":"/ use std::time::Duration;","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\animation.rs","byte_start":282163,"byte_end":282191,"line_start":123,"line_end":123,"column_start":5,"column_end":33}},{"value":"/ use image::Delay;","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\animation.rs","byte_start":282196,"byte_end":282217,"line_start":124,"line_end":124,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\animation.rs","byte_start":282222,"byte_end":282225,"line_start":125,"line_end":125,"column_start":5,"column_end":8}},{"value":"/ let duration = Duration::from_millis(20);","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\animation.rs","byte_start":282230,"byte_end":282275,"line_start":126,"line_end":126,"column_start":5,"column_end":50}},{"value":"/ let delay = Delay::from_saturating_duration(duration);","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\animation.rs","byte_start":282280,"byte_end":282338,"line_start":127,"line_end":127,"column_start":5,"column_end":63}},{"value":"/ ```","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\animation.rs","byte_start":282343,"byte_end":282350,"line_start":128,"line_end":128,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1101},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\animation.rs","byte_start":283562,"byte_end":283576,"line_start":158,"line_end":158,"column_start":12,"column_end":26},"name":"numer_denom_ms","qualname":"<Delay>::numer_denom_ms","value":"pub fn numer_denom_ms(Self) -> (u32, u32)","parent":null,"children":[],"decl_id":null,"docs":" The numerator and denominator of the delay in milliseconds.","sig":null,"attributes":[{"value":"/ The numerator and denominator of the delay in milliseconds.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\animation.rs","byte_start":283336,"byte_end":283399,"line_start":154,"line_end":154,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\animation.rs","byte_start":283404,"byte_end":283407,"line_start":155,"line_end":155,"column_start":5,"column_end":8}},{"value":"/ This is guaranteed to be an exact conversion if the `Delay` was previously created with the","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\animation.rs","byte_start":283412,"byte_end":283507,"line_start":156,"line_end":156,"column_start":5,"column_end":100}},{"value":"/ `from_numer_denom_ms` constructor.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\animation.rs","byte_start":283512,"byte_end":283550,"line_start":157,"line_end":157,"column_start":5,"column_end":43}}]},{"kind":"Struct","id":{"krate":0,"index":1150},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\buffer.rs","byte_start":290856,"byte_end":290862,"line_start":19,"line_end":19,"column_start":12,"column_end":18},"name":"Pixels","qualname":"::buffer_::Pixels","value":"Pixels {  }","parent":null,"children":[{"krate":0,"index":1153}],"decl_id":null,"docs":" Iterate over pixel refs.\n","sig":null,"attributes":[{"value":"/ Iterate over pixel refs.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\buffer.rs","byte_start":290816,"byte_end":290844,"line_start":18,"line_end":18,"column_start":1,"column_end":29}}]},{"kind":"Struct","id":{"krate":0,"index":1175},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\buffer.rs","byte_start":292023,"byte_end":292032,"line_start":76,"line_end":76,"column_start":12,"column_end":21},"name":"PixelsMut","qualname":"::buffer_::PixelsMut","value":"PixelsMut {  }","parent":null,"children":[{"krate":0,"index":1178}],"decl_id":null,"docs":" Iterate over mutable pixel refs.\n","sig":null,"attributes":[{"value":"/ Iterate over mutable pixel refs.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\buffer.rs","byte_start":291975,"byte_end":292011,"line_start":75,"line_end":75,"column_start":1,"column_end":37}}]},{"kind":"Struct","id":{"krate":0,"index":1197},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\buffer.rs","byte_start":293288,"byte_end":293292,"line_start":133,"line_end":133,"column_start":12,"column_end":16},"name":"Rows","qualname":"::buffer_::Rows","value":"Rows {  }","parent":null,"children":[{"krate":0,"index":1200}],"decl_id":null,"docs":" Iterate over rows of an image","sig":null,"attributes":[{"value":"/ Iterate over rows of an image","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\buffer.rs","byte_start":293082,"byte_end":293115,"line_start":128,"line_end":128,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\buffer.rs","byte_start":293116,"byte_end":293119,"line_start":129,"line_end":129,"column_start":1,"column_end":4}},{"value":"/ This iterator is created with [`ImageBuffer::rows`]. See its document for details.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\buffer.rs","byte_start":293120,"byte_end":293206,"line_start":130,"line_end":130,"column_start":1,"column_end":87}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\buffer.rs","byte_start":293207,"byte_end":293210,"line_start":131,"line_end":131,"column_start":1,"column_end":4}},{"value":"/ [`ImageBuffer::rows`]: ../struct.ImageBuffer.html#method.rows","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\buffer.rs","byte_start":293211,"byte_end":293276,"line_start":132,"line_end":132,"column_start":1,"column_end":66}}]},{"kind":"Struct","id":{"krate":0,"index":1224},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\buffer.rs","byte_start":295842,"byte_end":295849,"line_start":223,"line_end":223,"column_start":12,"column_end":19},"name":"RowsMut","qualname":"::buffer_::RowsMut","value":"RowsMut {  }","parent":null,"children":[{"krate":0,"index":1227}],"decl_id":null,"docs":" Iterate over mutable rows of an image","sig":null,"attributes":[{"value":"/ Iterate over mutable rows of an image","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\buffer.rs","byte_start":295616,"byte_end":295657,"line_start":218,"line_end":218,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\buffer.rs","byte_start":295658,"byte_end":295661,"line_start":219,"line_end":219,"column_start":1,"column_end":4}},{"value":"/ This iterator is created with [`ImageBuffer::rows_mut`]. See its document for details.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\buffer.rs","byte_start":295662,"byte_end":295752,"line_start":220,"line_end":220,"column_start":1,"column_end":91}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\buffer.rs","byte_start":295753,"byte_end":295756,"line_start":221,"line_end":221,"column_start":1,"column_end":4}},{"value":"/ [`ImageBuffer::rows_mut`]: ../struct.ImageBuffer.html#method.rows_mut","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\buffer.rs","byte_start":295757,"byte_end":295830,"line_start":222,"line_end":222,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":1248},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\buffer.rs","byte_start":298165,"byte_end":298180,"line_start":303,"line_end":303,"column_start":12,"column_end":27},"name":"EnumeratePixels","qualname":"::buffer_::EnumeratePixels","value":"EnumeratePixels {  }","parent":null,"children":[{"krate":0,"index":1251},{"krate":0,"index":1252},{"krate":0,"index":1253},{"krate":0,"index":1254}],"decl_id":null,"docs":" Enumerate the pixels of an image.\n","sig":null,"attributes":[{"value":"/ Enumerate the pixels of an image.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\buffer.rs","byte_start":298116,"byte_end":298153,"line_start":302,"line_end":302,"column_start":1,"column_end":38}}]},{"kind":"Struct","id":{"krate":0,"index":1271},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\buffer.rs","byte_start":299487,"byte_end":299500,"line_start":365,"line_end":365,"column_start":12,"column_end":25},"name":"EnumerateRows","qualname":"::buffer_::EnumerateRows","value":"EnumerateRows {  }","parent":null,"children":[{"krate":0,"index":1274},{"krate":0,"index":1275},{"krate":0,"index":1276}],"decl_id":null,"docs":" Enumerate the rows of an image.\n","sig":null,"attributes":[{"value":"/ Enumerate the rows of an image.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\buffer.rs","byte_start":299440,"byte_end":299475,"line_start":364,"line_end":364,"column_start":1,"column_end":36}}]},{"kind":"Struct","id":{"krate":0,"index":1293},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\buffer.rs","byte_start":300875,"byte_end":300893,"line_start":431,"line_end":431,"column_start":12,"column_end":30},"name":"EnumeratePixelsMut","qualname":"::buffer_::EnumeratePixelsMut","value":"EnumeratePixelsMut {  }","parent":null,"children":[{"krate":0,"index":1296},{"krate":0,"index":1297},{"krate":0,"index":1298},{"krate":0,"index":1299}],"decl_id":null,"docs":" Enumerate the pixels of an image.\n","sig":null,"attributes":[{"value":"/ Enumerate the pixels of an image.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\buffer.rs","byte_start":300826,"byte_end":300863,"line_start":430,"line_end":430,"column_start":1,"column_end":38}}]},{"kind":"Struct","id":{"krate":0,"index":1313},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\buffer.rs","byte_start":302037,"byte_end":302053,"line_start":484,"line_end":484,"column_start":12,"column_end":28},"name":"EnumerateRowsMut","qualname":"::buffer_::EnumerateRowsMut","value":"EnumerateRowsMut {  }","parent":null,"children":[{"krate":0,"index":1316},{"krate":0,"index":1317},{"krate":0,"index":1318}],"decl_id":null,"docs":" Enumerate the rows of an image.\n","sig":null,"attributes":[{"value":"/ Enumerate the rows of an image.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\buffer.rs","byte_start":301990,"byte_end":302025,"line_start":483,"line_end":483,"column_start":1,"column_end":36}}]},{"kind":"Struct","id":{"krate":0,"index":2588},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\buffer.rs","byte_start":305603,"byte_end":305614,"line_start":609,"line_end":609,"column_start":12,"column_end":23},"name":"ImageBuffer","qualname":"::buffer_::ImageBuffer","value":"ImageBuffer {  }","parent":null,"children":[{"krate":0,"index":2591},{"krate":0,"index":2592},{"krate":0,"index":2593},{"krate":0,"index":2594}],"decl_id":null,"docs":" Generic image buffer","sig":null,"attributes":[{"value":"/ Generic image buffer","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\buffer.rs","byte_start":303225,"byte_end":303249,"line_start":540,"line_end":540,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\buffer.rs","byte_start":303250,"byte_end":303253,"line_start":541,"line_end":541,"column_start":1,"column_end":4}},{"value":"/ This is an image parameterised by its Pixel types, represented by a width and height and a","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\buffer.rs","byte_start":303254,"byte_end":303348,"line_start":542,"line_end":542,"column_start":1,"column_end":95}},{"value":"/ container of channel data. It provides direct access to its pixels and implements the","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\buffer.rs","byte_start":303349,"byte_end":303438,"line_start":543,"line_end":543,"column_start":1,"column_end":90}},{"value":"/ [`GenericImageView`] and [`GenericImage`] traits. In many ways, this is the standard buffer","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\buffer.rs","byte_start":303439,"byte_end":303534,"line_start":544,"line_end":544,"column_start":1,"column_end":96}},{"value":"/ implementing those traits. Using this concrete type instead of a generic type parameter has","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\buffer.rs","byte_start":303535,"byte_end":303630,"line_start":545,"line_end":545,"column_start":1,"column_end":96}},{"value":"/ been shown to improve performance.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\buffer.rs","byte_start":303631,"byte_end":303669,"line_start":546,"line_end":546,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\buffer.rs","byte_start":303670,"byte_end":303673,"line_start":547,"line_end":547,"column_start":1,"column_end":4}},{"value":"/ The crate defines a few type aliases with regularly used pixel types for your convenience, such","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\buffer.rs","byte_start":303674,"byte_end":303773,"line_start":548,"line_end":548,"column_start":1,"column_end":100}},{"value":"/ as `RgbImage`, `GrayImage` etc.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\buffer.rs","byte_start":303774,"byte_end":303809,"line_start":549,"line_end":549,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\buffer.rs","byte_start":303810,"byte_end":303813,"line_start":550,"line_end":550,"column_start":1,"column_end":4}},{"value":"/ [`GenericImage`]: trait.GenericImage.html","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\buffer.rs","byte_start":303814,"byte_end":303859,"line_start":551,"line_end":551,"column_start":1,"column_end":46}},{"value":"/ [`GenericImageView`]: trait.GenericImageView.html","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\buffer.rs","byte_start":303860,"byte_end":303913,"line_start":552,"line_end":552,"column_start":1,"column_end":54}},{"value":"/ [`RgbImage`]: type.RgbImage.html","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\buffer.rs","byte_start":303914,"byte_end":303950,"line_start":553,"line_end":553,"column_start":1,"column_end":37}},{"value":"/ [`GrayImage`]: type.GrayImage.html","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\buffer.rs","byte_start":303951,"byte_end":303989,"line_start":554,"line_end":554,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\buffer.rs","byte_start":303990,"byte_end":303993,"line_start":555,"line_end":555,"column_start":1,"column_end":4}},{"value":"/ To convert between images of different Pixel types use [`DynamicImage`].","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\buffer.rs","byte_start":303994,"byte_end":304070,"line_start":556,"line_end":556,"column_start":1,"column_end":77}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\buffer.rs","byte_start":304071,"byte_end":304074,"line_start":557,"line_end":557,"column_start":1,"column_end":4}},{"value":"/ You can retrieve a complete description of the buffer's layout and contents through","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\buffer.rs","byte_start":304075,"byte_end":304162,"line_start":558,"line_end":558,"column_start":1,"column_end":88}},{"value":"/ [`as_flat_samples`] and [`as_flat_samples_mut`]. This can be handy to also use the contents in","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\buffer.rs","byte_start":304163,"byte_end":304261,"line_start":559,"line_end":559,"column_start":1,"column_end":99}},{"value":"/ a foreign language, map it as a GPU host buffer or other similar tasks.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\buffer.rs","byte_start":304262,"byte_end":304337,"line_start":560,"line_end":560,"column_start":1,"column_end":76}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\buffer.rs","byte_start":304338,"byte_end":304341,"line_start":561,"line_end":561,"column_start":1,"column_end":4}},{"value":"/ [`DynamicImage`]: enum.DynamicImage.html","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\buffer.rs","byte_start":304342,"byte_end":304386,"line_start":562,"line_end":562,"column_start":1,"column_end":45}},{"value":"/ [`as_flat_samples`]: #method.as_flat_samples","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\buffer.rs","byte_start":304387,"byte_end":304435,"line_start":563,"line_end":563,"column_start":1,"column_end":49}},{"value":"/ [`as_flat_samples_mut`]: #method.as_flat_samples_mut","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\buffer.rs","byte_start":304436,"byte_end":304492,"line_start":564,"line_end":564,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\buffer.rs","byte_start":304493,"byte_end":304496,"line_start":565,"line_end":565,"column_start":1,"column_end":4}},{"value":"/ ## Examples","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\buffer.rs","byte_start":304497,"byte_end":304512,"line_start":566,"line_end":566,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\buffer.rs","byte_start":304513,"byte_end":304516,"line_start":567,"line_end":567,"column_start":1,"column_end":4}},{"value":"/ Create a simple canvas and paint a small cross.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\buffer.rs","byte_start":304517,"byte_end":304568,"line_start":568,"line_end":568,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\buffer.rs","byte_start":304569,"byte_end":304572,"line_start":569,"line_end":569,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\buffer.rs","byte_start":304573,"byte_end":304580,"line_start":570,"line_end":570,"column_start":1,"column_end":8}},{"value":"/ use image::{RgbImage, Rgb};","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\buffer.rs","byte_start":304581,"byte_end":304612,"line_start":571,"line_end":571,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\buffer.rs","byte_start":304613,"byte_end":304616,"line_start":572,"line_end":572,"column_start":1,"column_end":4}},{"value":"/ let mut img = RgbImage::new(32, 32);","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\buffer.rs","byte_start":304617,"byte_end":304657,"line_start":573,"line_end":573,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\buffer.rs","byte_start":304658,"byte_end":304661,"line_start":574,"line_end":574,"column_start":1,"column_end":4}},{"value":"/ for x in 15..=17 {","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\buffer.rs","byte_start":304662,"byte_end":304684,"line_start":575,"line_end":575,"column_start":1,"column_end":23}},{"value":"/     for y in 8..24 {","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\buffer.rs","byte_start":304685,"byte_end":304709,"line_start":576,"line_end":576,"column_start":1,"column_end":25}},{"value":"/         img.put_pixel(x, y, Rgb([255, 0, 0]));","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\buffer.rs","byte_start":304710,"byte_end":304760,"line_start":577,"line_end":577,"column_start":1,"column_end":51}},{"value":"/         img.put_pixel(y, x, Rgb([255, 0, 0]));","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\buffer.rs","byte_start":304761,"byte_end":304811,"line_start":578,"line_end":578,"column_start":1,"column_end":51}},{"value":"/     }","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\buffer.rs","byte_start":304812,"byte_end":304821,"line_start":579,"line_end":579,"column_start":1,"column_end":10}},{"value":"/ }","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\buffer.rs","byte_start":304822,"byte_end":304827,"line_start":580,"line_end":580,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\buffer.rs","byte_start":304828,"byte_end":304835,"line_start":581,"line_end":581,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\buffer.rs","byte_start":304836,"byte_end":304839,"line_start":582,"line_end":582,"column_start":1,"column_end":4}},{"value":"/ Overlays an image on top of a larger background raster.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\buffer.rs","byte_start":304840,"byte_end":304899,"line_start":583,"line_end":583,"column_start":1,"column_end":60}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\buffer.rs","byte_start":304900,"byte_end":304903,"line_start":584,"line_end":584,"column_start":1,"column_end":4}},{"value":"/ ```no_run","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\buffer.rs","byte_start":304904,"byte_end":304917,"line_start":585,"line_end":585,"column_start":1,"column_end":14}},{"value":"/ use image::{GenericImage, GenericImageView, ImageBuffer, open};","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\buffer.rs","byte_start":304918,"byte_end":304985,"line_start":586,"line_end":586,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\buffer.rs","byte_start":304986,"byte_end":304989,"line_start":587,"line_end":587,"column_start":1,"column_end":4}},{"value":"/ let on_top = open(\"path/to/some.png\").unwrap().into_rgb();","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\buffer.rs","byte_start":304990,"byte_end":305052,"line_start":588,"line_end":588,"column_start":1,"column_end":63}},{"value":"/ let mut img = ImageBuffer::from_fn(512, 512, |x, y| {","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\buffer.rs","byte_start":305053,"byte_end":305110,"line_start":589,"line_end":589,"column_start":1,"column_end":58}},{"value":"/     if (x + y) % 2 == 0 {","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\buffer.rs","byte_start":305111,"byte_end":305140,"line_start":590,"line_end":590,"column_start":1,"column_end":30}},{"value":"/         image::Rgb([0, 0, 0])","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\buffer.rs","byte_start":305141,"byte_end":305174,"line_start":591,"line_end":591,"column_start":1,"column_end":34}},{"value":"/     } else {","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\buffer.rs","byte_start":305175,"byte_end":305191,"line_start":592,"line_end":592,"column_start":1,"column_end":17}},{"value":"/         image::Rgb([255, 255, 255])","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\buffer.rs","byte_start":305192,"byte_end":305231,"line_start":593,"line_end":593,"column_start":1,"column_end":40}},{"value":"/     }","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\buffer.rs","byte_start":305232,"byte_end":305241,"line_start":594,"line_end":594,"column_start":1,"column_end":10}},{"value":"/ });","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\buffer.rs","byte_start":305242,"byte_end":305249,"line_start":595,"line_end":595,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\buffer.rs","byte_start":305250,"byte_end":305253,"line_start":596,"line_end":596,"column_start":1,"column_end":4}},{"value":"/ image::imageops::overlay(&mut img, &on_top, 128, 128);","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\buffer.rs","byte_start":305254,"byte_end":305312,"line_start":597,"line_end":597,"column_start":1,"column_end":59}},{"value":"/ ```","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\buffer.rs","byte_start":305313,"byte_end":305320,"line_start":598,"line_end":598,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\buffer.rs","byte_start":305321,"byte_end":305324,"line_start":599,"line_end":599,"column_start":1,"column_end":4}},{"value":"/ Convert an RgbaImage to a GrayImage.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\buffer.rs","byte_start":305325,"byte_end":305365,"line_start":600,"line_end":600,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\buffer.rs","byte_start":305366,"byte_end":305369,"line_start":601,"line_end":601,"column_start":1,"column_end":4}},{"value":"/ ```no_run","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\buffer.rs","byte_start":305370,"byte_end":305383,"line_start":602,"line_end":602,"column_start":1,"column_end":14}},{"value":"/ use image::{open, DynamicImage};","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\buffer.rs","byte_start":305384,"byte_end":305420,"line_start":603,"line_end":603,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\buffer.rs","byte_start":305421,"byte_end":305424,"line_start":604,"line_end":604,"column_start":1,"column_end":4}},{"value":"/ let rgba = open(\"path/to/some.png\").unwrap().into_rgba();","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\buffer.rs","byte_start":305425,"byte_end":305486,"line_start":605,"line_end":605,"column_start":1,"column_end":62}},{"value":"/ let gray = DynamicImage::ImageRgba8(rgba).into_luma();","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\buffer.rs","byte_start":305487,"byte_end":305545,"line_start":606,"line_end":606,"column_start":1,"column_end":59}},{"value":"/ ```","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\buffer.rs","byte_start":305546,"byte_end":305553,"line_start":607,"line_end":607,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":1335},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\buffer.rs","byte_start":306372,"byte_end":306380,"line_start":631,"line_end":631,"column_start":12,"column_end":20},"name":"from_raw","qualname":"<ImageBuffer<P, Container>>::from_raw","value":"pub fn from_raw(u32, u32, Container) -> Option<ImageBuffer<P, Container>>","parent":null,"children":[],"decl_id":null,"docs":" Contructs a buffer from a generic container\n (for example a `Vec` or a slice)","sig":null,"attributes":[{"value":"/ Contructs a buffer from a generic container","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\buffer.rs","byte_start":306087,"byte_end":306134,"line_start":626,"line_end":626,"column_start":5,"column_end":52}},{"value":"/ (for example a `Vec` or a slice)","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\buffer.rs","byte_start":306139,"byte_end":306175,"line_start":627,"line_end":627,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\buffer.rs","byte_start":306180,"byte_end":306183,"line_start":628,"line_end":628,"column_start":5,"column_end":8}},{"value":"/ Returns `None` if the container is not big enough (including when the image dimensions","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\buffer.rs","byte_start":306188,"byte_end":306278,"line_start":629,"line_end":629,"column_start":5,"column_end":95}},{"value":"/ necessitate an allocation of more bytes than supported by the container).","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\buffer.rs","byte_start":306283,"byte_end":306360,"line_start":630,"line_end":630,"column_start":5,"column_end":82}}]},{"kind":"Method","id":{"krate":0,"index":1336},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\buffer.rs","byte_start":306786,"byte_end":306794,"line_start":645,"line_end":645,"column_start":12,"column_end":20},"name":"into_raw","qualname":"<ImageBuffer<P, Container>>::into_raw","value":"pub fn into_raw(Self) -> Container","parent":null,"children":[],"decl_id":null,"docs":" Returns the underlying raw buffer\n","sig":null,"attributes":[{"value":"/ Returns the underlying raw buffer","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\buffer.rs","byte_start":306737,"byte_end":306774,"line_start":644,"line_end":644,"column_start":5,"column_end":42}}]},{"kind":"Method","id":{"krate":0,"index":1337},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\buffer.rs","byte_start":306894,"byte_end":306900,"line_start":650,"line_end":650,"column_start":12,"column_end":18},"name":"as_raw","qualname":"<ImageBuffer<P, Container>>::as_raw","value":"pub fn as_raw(&Self) -> &Container","parent":null,"children":[],"decl_id":null,"docs":" Returns the underlying raw buffer\n","sig":null,"attributes":[{"value":"/ Returns the underlying raw buffer","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\buffer.rs","byte_start":306845,"byte_end":306882,"line_start":649,"line_end":649,"column_start":5,"column_end":42}}]},{"kind":"Method","id":{"krate":0,"index":1338},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\buffer.rs","byte_start":307005,"byte_end":307015,"line_start":655,"line_end":655,"column_start":12,"column_end":22},"name":"dimensions","qualname":"<ImageBuffer<P, Container>>::dimensions","value":"pub fn dimensions(&Self) -> (u32, u32)","parent":null,"children":[],"decl_id":null,"docs":" The width and height of this image.\n","sig":null,"attributes":[{"value":"/ The width and height of this image.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\buffer.rs","byte_start":306954,"byte_end":306993,"line_start":654,"line_end":654,"column_start":5,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":1339},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\buffer.rs","byte_start":307124,"byte_end":307129,"line_start":660,"line_end":660,"column_start":12,"column_end":17},"name":"width","qualname":"<ImageBuffer<P, Container>>::width","value":"pub fn width(&Self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" The width of this image.\n","sig":null,"attributes":[{"value":"/ The width of this image.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\buffer.rs","byte_start":307084,"byte_end":307112,"line_start":659,"line_end":659,"column_start":5,"column_end":33}}]},{"kind":"Method","id":{"krate":0,"index":1340},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\buffer.rs","byte_start":307217,"byte_end":307223,"line_start":665,"line_end":665,"column_start":12,"column_end":18},"name":"height","qualname":"<ImageBuffer<P, Container>>::height","value":"pub fn height(&Self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" The height of this image.\n","sig":null,"attributes":[{"value":"/ The height of this image.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\buffer.rs","byte_start":307176,"byte_end":307205,"line_start":664,"line_end":664,"column_start":5,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":1342},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\buffer.rs","byte_start":307608,"byte_end":307614,"line_start":677,"line_end":677,"column_start":12,"column_end":18},"name":"pixels","qualname":"<ImageBuffer<P, Container>>::pixels","value":"pub fn pixels(&Self) -> Pixels<, P>","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator over the pixels of this image.\n The iteration order is x = 0 to width then y = 0 to height\n","sig":null,"attributes":[{"value":"/ Returns an iterator over the pixels of this image.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\buffer.rs","byte_start":307475,"byte_end":307529,"line_start":675,"line_end":675,"column_start":5,"column_end":59}},{"value":"/ The iteration order is x = 0 to width then y = 0 to height","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\buffer.rs","byte_start":307534,"byte_end":307596,"line_start":676,"line_end":676,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":1343},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\buffer.rs","byte_start":308114,"byte_end":308118,"line_start":688,"line_end":688,"column_start":12,"column_end":16},"name":"rows","qualname":"<ImageBuffer<P, Container>>::rows","value":"pub fn rows(&Self) -> Rows<, P>","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator over the rows of this image.","sig":null,"attributes":[{"value":"/ Returns an iterator over the rows of this image.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\buffer.rs","byte_start":307767,"byte_end":307819,"line_start":683,"line_end":683,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\buffer.rs","byte_start":307824,"byte_end":307827,"line_start":684,"line_end":684,"column_start":5,"column_end":8}},{"value":"/ Only non-empty rows can be iterated in this manner. In particular the iterator will not","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\buffer.rs","byte_start":307832,"byte_end":307923,"line_start":685,"line_end":685,"column_start":5,"column_end":96}},{"value":"/ yield any item when the width of the image is `0` or a pixel type without any channels is","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\buffer.rs","byte_start":307928,"byte_end":308021,"line_start":686,"line_end":686,"column_start":5,"column_end":98}},{"value":"/ used. This ensures that its length can always be represented by `usize`.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\buffer.rs","byte_start":308026,"byte_end":308102,"line_start":687,"line_end":687,"column_start":5,"column_end":81}}]},{"kind":"Method","id":{"krate":0,"index":1344},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\buffer.rs","byte_start":308433,"byte_end":308449,"line_start":696,"line_end":696,"column_start":12,"column_end":28},"name":"enumerate_pixels","qualname":"<ImageBuffer<P, Container>>::enumerate_pixels","value":"pub fn enumerate_pixels(&Self) -> EnumeratePixels<, P>","parent":null,"children":[],"decl_id":null,"docs":" Enumerates over the pixels of the image.\n The iterator yields the coordinates of each pixel\n along with a reference to them.\n The iteration order is x = 0 to width then y = 0 to height\n","sig":null,"attributes":[{"value":"/ Enumerates over the pixels of the image.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\buffer.rs","byte_start":308212,"byte_end":308256,"line_start":692,"line_end":692,"column_start":5,"column_end":49}},{"value":"/ The iterator yields the coordinates of each pixel","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\buffer.rs","byte_start":308261,"byte_end":308314,"line_start":693,"line_end":693,"column_start":5,"column_end":58}},{"value":"/ along with a reference to them.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\buffer.rs","byte_start":308319,"byte_end":308354,"line_start":694,"line_end":694,"column_start":5,"column_end":40}},{"value":"/ The iteration order is x = 0 to width then y = 0 to height","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\buffer.rs","byte_start":308359,"byte_end":308421,"line_start":695,"line_end":695,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":1345},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\buffer.rs","byte_start":308781,"byte_end":308795,"line_start":708,"line_end":708,"column_start":12,"column_end":26},"name":"enumerate_rows","qualname":"<ImageBuffer<P, Container>>::enumerate_rows","value":"pub fn enumerate_rows(&Self) -> EnumerateRows<, P>","parent":null,"children":[],"decl_id":null,"docs":" Enumerates over the rows of the image.\n The iterator yields the y-coordinate of each row\n along with a reference to them.\n","sig":null,"attributes":[{"value":"/ Enumerates over the rows of the image.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\buffer.rs","byte_start":308630,"byte_end":308672,"line_start":705,"line_end":705,"column_start":5,"column_end":47}},{"value":"/ The iterator yields the y-coordinate of each row","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\buffer.rs","byte_start":308677,"byte_end":308729,"line_start":706,"line_end":706,"column_start":5,"column_end":57}},{"value":"/ along with a reference to them.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\buffer.rs","byte_start":308734,"byte_end":308769,"line_start":707,"line_end":707,"column_start":5,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":1346},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\buffer.rs","byte_start":309116,"byte_end":309125,"line_start":721,"line_end":721,"column_start":12,"column_end":21},"name":"get_pixel","qualname":"<ImageBuffer<P, Container>>::get_pixel","value":"pub fn get_pixel(&Self, u32, u32) -> &P","parent":null,"children":[],"decl_id":null,"docs":" Gets a reference to the pixel at location `(x, y)`","sig":null,"attributes":[{"value":"/ Gets a reference to the pixel at location `(x, y)`","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\buffer.rs","byte_start":308950,"byte_end":309004,"line_start":716,"line_end":716,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\buffer.rs","byte_start":309009,"byte_end":309012,"line_start":717,"line_end":717,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\buffer.rs","byte_start":309017,"byte_end":309029,"line_start":718,"line_end":718,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\buffer.rs","byte_start":309034,"byte_end":309037,"line_start":719,"line_end":719,"column_start":5,"column_end":8}},{"value":"/ Panics if `(x, y)` is out of the bounds `(width, height)`.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\buffer.rs","byte_start":309042,"byte_end":309104,"line_start":720,"line_end":720,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":1354},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\buffer.rs","byte_start":310851,"byte_end":310864,"line_start":762,"line_end":762,"column_start":12,"column_end":25},"name":"sample_layout","qualname":"<ImageBuffer<P, Container>>::sample_layout","value":"pub fn sample_layout(&Self) -> SampleLayout","parent":null,"children":[],"decl_id":null,"docs":" Get the format of the buffer when viewed as a matrix of samples.\n","sig":null,"attributes":[{"value":"/ Get the format of the buffer when viewed as a matrix of samples.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\buffer.rs","byte_start":310771,"byte_end":310839,"line_start":761,"line_end":761,"column_start":5,"column_end":73}}]},{"kind":"Method","id":{"krate":0,"index":1355},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\buffer.rs","byte_start":311478,"byte_end":311495,"line_start":773,"line_end":773,"column_start":12,"column_end":29},"name":"into_flat_samples","qualname":"<ImageBuffer<P, Container>>::into_flat_samples","value":"pub fn into_flat_samples(Self) -> FlatSamples<Container> where\nContainer: AsRef<[P::Subpixel]>","parent":null,"children":[],"decl_id":null,"docs":" Return the raw sample buffer with its stride an dimension information.","sig":null,"attributes":[{"value":"/ Return the raw sample buffer with its stride an dimension information.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\buffer.rs","byte_start":311067,"byte_end":311141,"line_start":767,"line_end":767,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\buffer.rs","byte_start":311146,"byte_end":311149,"line_start":768,"line_end":768,"column_start":5,"column_end":8}},{"value":"/ The returned buffer is guaranteed to be well formed in all cases. It is layed out by","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\buffer.rs","byte_start":311154,"byte_end":311242,"line_start":769,"line_end":769,"column_start":5,"column_end":93}},{"value":"/ colors, width then height, meaning `channel_stride <= width_stride <= height_stride`. All","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\buffer.rs","byte_start":311247,"byte_end":311340,"line_start":770,"line_end":770,"column_start":5,"column_end":98}},{"value":"/ strides are in numbers of elements but those are mostly `u8` in which case the strides are","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\buffer.rs","byte_start":311345,"byte_end":311439,"line_start":771,"line_end":771,"column_start":5,"column_end":99}},{"value":"/ also byte strides.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\buffer.rs","byte_start":311444,"byte_end":311466,"line_start":772,"line_end":772,"column_start":5,"column_end":27}}]},{"kind":"Method","id":{"krate":0,"index":1356},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\buffer.rs","byte_start":311978,"byte_end":311993,"line_start":788,"line_end":788,"column_start":12,"column_end":27},"name":"as_flat_samples","qualname":"<ImageBuffer<P, Container>>::as_flat_samples","value":"pub fn as_flat_samples(&Self) -> FlatSamples<&[P::Subpixel]> where\nContainer: AsRef<[P::Subpixel]>","parent":null,"children":[],"decl_id":null,"docs":" Return a view on the raw sample buffer.","sig":null,"attributes":[{"value":"/ Return a view on the raw sample buffer.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\buffer.rs","byte_start":311836,"byte_end":311879,"line_start":785,"line_end":785,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\buffer.rs","byte_start":311884,"byte_end":311887,"line_start":786,"line_end":786,"column_start":5,"column_end":8}},{"value":"/ See [`into_flat_samples`](#method.into_flat_samples) for more details.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\buffer.rs","byte_start":311892,"byte_end":311966,"line_start":787,"line_end":787,"column_start":5,"column_end":79}}]},{"kind":"Method","id":{"krate":0,"index":1357},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\buffer.rs","byte_start":312426,"byte_end":312445,"line_start":802,"line_end":802,"column_start":12,"column_end":31},"name":"as_flat_samples_mut","qualname":"<ImageBuffer<P, Container>>::as_flat_samples_mut","value":"pub fn as_flat_samples_mut(&mut Self) -> FlatSamples<&mut [P::Subpixel]> where\nContainer: AsMut<[P::Subpixel]>","parent":null,"children":[],"decl_id":null,"docs":" Return a mutable view on the raw sample buffer.","sig":null,"attributes":[{"value":"/ Return a mutable view on the raw sample buffer.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\buffer.rs","byte_start":312276,"byte_end":312327,"line_start":799,"line_end":799,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\buffer.rs","byte_start":312332,"byte_end":312335,"line_start":800,"line_end":800,"column_start":5,"column_end":8}},{"value":"/ See [`into_flat_samples`](#method.into_flat_samples) for more details.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\buffer.rs","byte_start":312340,"byte_end":312414,"line_start":801,"line_end":801,"column_start":5,"column_end":79}}]},{"kind":"Method","id":{"krate":0,"index":1362},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\buffer.rs","byte_start":313192,"byte_end":313202,"line_start":827,"line_end":827,"column_start":12,"column_end":22},"name":"pixels_mut","qualname":"<ImageBuffer<P, Container>>::pixels_mut","value":"pub fn pixels_mut(&mut Self) -> PixelsMut<, P>","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator over the mutable pixels of this image.\n","sig":null,"attributes":[{"value":"/ Returns an iterator over the mutable pixels of this image.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\buffer.rs","byte_start":313118,"byte_end":313180,"line_start":826,"line_end":826,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":1363},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\buffer.rs","byte_start":313728,"byte_end":313736,"line_start":838,"line_end":838,"column_start":12,"column_end":20},"name":"rows_mut","qualname":"<ImageBuffer<P, Container>>::rows_mut","value":"pub fn rows_mut(&mut Self) -> RowsMut<, P>","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator over the mutable rows of this image.","sig":null,"attributes":[{"value":"/ Returns an iterator over the mutable rows of this image.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\buffer.rs","byte_start":313373,"byte_end":313433,"line_start":833,"line_end":833,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\buffer.rs","byte_start":313438,"byte_end":313441,"line_start":834,"line_end":834,"column_start":5,"column_end":8}},{"value":"/ Only non-empty rows can be iterated in this manner. In particular the iterator will not","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\buffer.rs","byte_start":313446,"byte_end":313537,"line_start":835,"line_end":835,"column_start":5,"column_end":96}},{"value":"/ yield any item when the width of the image is `0` or a pixel type without any channels is","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\buffer.rs","byte_start":313542,"byte_end":313635,"line_start":836,"line_end":836,"column_start":5,"column_end":98}},{"value":"/ used. This ensures that its length can always be represented by `usize`.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\buffer.rs","byte_start":313640,"byte_end":313716,"line_start":837,"line_end":837,"column_start":5,"column_end":81}}]},{"kind":"Method","id":{"krate":0,"index":1364},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\buffer.rs","byte_start":314006,"byte_end":314026,"line_start":845,"line_end":845,"column_start":12,"column_end":32},"name":"enumerate_pixels_mut","qualname":"<ImageBuffer<P, Container>>::enumerate_pixels_mut","value":"pub fn enumerate_pixels_mut(&mut Self) -> EnumeratePixelsMut<, P>","parent":null,"children":[],"decl_id":null,"docs":" Enumerates over the pixels of the image.\n The iterator yields the coordinates of each pixel\n along with a mutable reference to them.\n","sig":null,"attributes":[{"value":"/ Enumerates over the pixels of the image.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\buffer.rs","byte_start":313844,"byte_end":313888,"line_start":842,"line_end":842,"column_start":5,"column_end":49}},{"value":"/ The iterator yields the coordinates of each pixel","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\buffer.rs","byte_start":313893,"byte_end":313946,"line_start":843,"line_end":843,"column_start":5,"column_end":58}},{"value":"/ along with a mutable reference to them.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\buffer.rs","byte_start":313951,"byte_end":313994,"line_start":844,"line_end":844,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":1365},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\buffer.rs","byte_start":314400,"byte_end":314418,"line_start":858,"line_end":858,"column_start":12,"column_end":30},"name":"enumerate_rows_mut","qualname":"<ImageBuffer<P, Container>>::enumerate_rows_mut","value":"pub fn enumerate_rows_mut(&mut Self) -> EnumerateRowsMut<, P>","parent":null,"children":[],"decl_id":null,"docs":" Enumerates over the rows of the image.\n The iterator yields the y-coordinate of each row\n along with a mutable reference to them.\n","sig":null,"attributes":[{"value":"/ Enumerates over the rows of the image.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\buffer.rs","byte_start":314241,"byte_end":314283,"line_start":855,"line_end":855,"column_start":5,"column_end":47}},{"value":"/ The iterator yields the y-coordinate of each row","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\buffer.rs","byte_start":314288,"byte_end":314340,"line_start":856,"line_end":856,"column_start":5,"column_end":57}},{"value":"/ along with a mutable reference to them.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\buffer.rs","byte_start":314345,"byte_end":314388,"line_start":857,"line_end":857,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":1366},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\buffer.rs","byte_start":314781,"byte_end":314794,"line_start":872,"line_end":872,"column_start":12,"column_end":25},"name":"get_pixel_mut","qualname":"<ImageBuffer<P, Container>>::get_pixel_mut","value":"pub fn get_pixel_mut(&mut Self, u32, u32) -> &mut P","parent":null,"children":[],"decl_id":null,"docs":" Gets a reference to the mutable pixel at location `(x, y)`","sig":null,"attributes":[{"value":"/ Gets a reference to the mutable pixel at location `(x, y)`","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\buffer.rs","byte_start":314607,"byte_end":314669,"line_start":867,"line_end":867,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\buffer.rs","byte_start":314674,"byte_end":314677,"line_start":868,"line_end":868,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\buffer.rs","byte_start":314682,"byte_end":314694,"line_start":869,"line_end":869,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\buffer.rs","byte_start":314699,"byte_end":314702,"line_start":870,"line_end":870,"column_start":5,"column_end":8}},{"value":"/ Panics if `(x, y)` is out of the bounds `(width, height)`.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\buffer.rs","byte_start":314707,"byte_end":314769,"line_start":871,"line_end":871,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":1367},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\buffer.rs","byte_start":315243,"byte_end":315252,"line_start":884,"line_end":884,"column_start":12,"column_end":21},"name":"put_pixel","qualname":"<ImageBuffer<P, Container>>::put_pixel","value":"pub fn put_pixel(&mut Self, u32, u32, P)","parent":null,"children":[],"decl_id":null,"docs":" Puts a pixel at location `(x, y)`","sig":null,"attributes":[{"value":"/ Puts a pixel at location `(x, y)`","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\buffer.rs","byte_start":315094,"byte_end":315131,"line_start":879,"line_end":879,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\buffer.rs","byte_start":315136,"byte_end":315139,"line_start":880,"line_end":880,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\buffer.rs","byte_start":315144,"byte_end":315156,"line_start":881,"line_end":881,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\buffer.rs","byte_start":315161,"byte_end":315164,"line_start":882,"line_end":882,"column_start":5,"column_end":8}},{"value":"/ Panics if `(x, y)` is out of the bounds `(width, height)`.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\buffer.rs","byte_start":315169,"byte_end":315231,"line_start":883,"line_end":883,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":1371},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\buffer.rs","byte_start":315697,"byte_end":315701,"line_start":899,"line_end":899,"column_start":12,"column_end":16},"name":"save","qualname":"<ImageBuffer<P, Container>>::save","value":"pub fn save<Q>(&Self, Q) -> ImageResult<()> where Q: AsRef<Path>","parent":null,"children":[],"decl_id":null,"docs":" Saves the buffer to a file at the path specified.","sig":null,"attributes":[{"value":"/ Saves the buffer to a file at the path specified.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\buffer.rs","byte_start":315506,"byte_end":315559,"line_start":895,"line_end":895,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\buffer.rs","byte_start":315564,"byte_end":315567,"line_start":896,"line_end":896,"column_start":5,"column_end":8}},{"value":"/ The image format is derived from the file extension.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\buffer.rs","byte_start":315572,"byte_end":315628,"line_start":897,"line_end":897,"column_start":5,"column_end":61}},{"value":"/ Currently only jpeg and png files are supported.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\buffer.rs","byte_start":315633,"byte_end":315685,"line_start":898,"line_end":898,"column_start":5,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":1376},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\buffer.rs","byte_start":316376,"byte_end":316392,"line_start":925,"line_end":925,"column_start":12,"column_end":28},"name":"save_with_format","qualname":"<ImageBuffer<P, Container>>::save_with_format","value":"pub fn save_with_format<Q>(&Self, Q, ImageFormat) -> ImageResult<()> where\nQ: AsRef<Path>","parent":null,"children":[],"decl_id":null,"docs":" Saves the buffer to a file at the specified path in\n the specified format.","sig":null,"attributes":[{"value":"/ Saves the buffer to a file at the specified path in","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\buffer.rs","byte_start":316169,"byte_end":316224,"line_start":920,"line_end":920,"column_start":5,"column_end":60}},{"value":"/ the specified format.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\buffer.rs","byte_start":316229,"byte_end":316254,"line_start":921,"line_end":921,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\buffer.rs","byte_start":316259,"byte_end":316262,"line_start":922,"line_end":922,"column_start":5,"column_end":8}},{"value":"/ See [`save_buffer_with_format`](fn.save_buffer_with_format.html) for","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\buffer.rs","byte_start":316267,"byte_end":316339,"line_start":923,"line_end":923,"column_start":5,"column_end":77}},{"value":"/ supported types.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\buffer.rs","byte_start":316344,"byte_end":316364,"line_start":924,"line_end":924,"column_start":5,"column_end":25}}]},{"kind":"Method","id":{"krate":0,"index":1424},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\buffer.rs","byte_start":322947,"byte_end":322950,"line_start":1138,"line_end":1138,"column_start":12,"column_end":15},"name":"new","qualname":"<ImageBuffer<P, Vec<P::Subpixel>>>::new","value":"pub fn new(u32, u32) -> ImageBuffer<P, Vec<P::Subpixel>>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new image buffer based on a `Vec<P::Subpixel>`.","sig":null,"attributes":[{"value":"/ Creates a new image buffer based on a `Vec<P::Subpixel>`.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\buffer.rs","byte_start":322757,"byte_end":322818,"line_start":1133,"line_end":1133,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\buffer.rs","byte_start":322823,"byte_end":322826,"line_start":1134,"line_end":1134,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\buffer.rs","byte_start":322831,"byte_end":322843,"line_start":1135,"line_end":1135,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\buffer.rs","byte_start":322848,"byte_end":322851,"line_start":1136,"line_end":1136,"column_start":5,"column_end":8}},{"value":"/ Panics when the resulting image is larger the the maximum size of a vector.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\buffer.rs","byte_start":322856,"byte_end":322935,"line_start":1137,"line_end":1137,"column_start":5,"column_end":84}}]},{"kind":"Method","id":{"krate":0,"index":1425},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\buffer.rs","byte_start":323488,"byte_end":323498,"line_start":1154,"line_end":1154,"column_start":12,"column_end":22},"name":"from_pixel","qualname":"<ImageBuffer<P, Vec<P::Subpixel>>>::from_pixel","value":"pub fn from_pixel(u32, u32, P) -> ImageBuffer<P, Vec<P::Subpixel>>","parent":null,"children":[],"decl_id":null,"docs":" Constructs a new ImageBuffer by copying a pixel","sig":null,"attributes":[{"value":"/ Constructs a new ImageBuffer by copying a pixel","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\buffer.rs","byte_start":323308,"byte_end":323359,"line_start":1149,"line_end":1149,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\buffer.rs","byte_start":323364,"byte_end":323367,"line_start":1150,"line_end":1150,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\buffer.rs","byte_start":323372,"byte_end":323384,"line_start":1151,"line_end":1151,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\buffer.rs","byte_start":323389,"byte_end":323392,"line_start":1152,"line_end":1152,"column_start":5,"column_end":8}},{"value":"/ Panics when the resulting image is larger the the maximum size of a vector.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\buffer.rs","byte_start":323397,"byte_end":323476,"line_start":1153,"line_end":1153,"column_start":5,"column_end":84}}]},{"kind":"Method","id":{"krate":0,"index":1426},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\buffer.rs","byte_start":324013,"byte_end":324020,"line_start":1169,"line_end":1169,"column_start":12,"column_end":19},"name":"from_fn","qualname":"<ImageBuffer<P, Vec<P::Subpixel>>>::from_fn","value":"pub fn from_fn<F>(u32, u32, F) -> ImageBuffer<P, Vec<P::Subpixel>> where\nF: FnMut(u32, u32) -> P","parent":null,"children":[],"decl_id":null,"docs":" Constructs a new ImageBuffer by repeated application of the supplied function.","sig":null,"attributes":[{"value":"/ Constructs a new ImageBuffer by repeated application of the supplied function.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\buffer.rs","byte_start":323719,"byte_end":323801,"line_start":1162,"line_end":1162,"column_start":5,"column_end":87}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\buffer.rs","byte_start":323806,"byte_end":323809,"line_start":1163,"line_end":1163,"column_start":5,"column_end":8}},{"value":"/ The arguments to the function are the pixel's x and y coordinates.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\buffer.rs","byte_start":323814,"byte_end":323884,"line_start":1164,"line_end":1164,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\buffer.rs","byte_start":323889,"byte_end":323892,"line_start":1165,"line_end":1165,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\buffer.rs","byte_start":323897,"byte_end":323909,"line_start":1166,"line_end":1166,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\buffer.rs","byte_start":323914,"byte_end":323917,"line_start":1167,"line_end":1167,"column_start":5,"column_end":8}},{"value":"/ Panics when the resulting image is larger the the maximum size of a vector.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\buffer.rs","byte_start":323922,"byte_end":324001,"line_start":1168,"line_end":1168,"column_start":5,"column_end":84}}]},{"kind":"Method","id":{"krate":0,"index":1428},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\buffer.rs","byte_start":324431,"byte_end":324439,"line_start":1182,"line_end":1182,"column_start":12,"column_end":20},"name":"from_vec","qualname":"<ImageBuffer<P, Vec<P::Subpixel>>>::from_vec","value":"pub fn from_vec(u32, u32, Vec<P::Subpixel>)\n-> Option<ImageBuffer<P, Vec<P::Subpixel>>>","parent":null,"children":[],"decl_id":null,"docs":" Creates an image buffer out of an existing buffer.\n Returns None if the buffer is not big enough.\n","sig":null,"attributes":[{"value":"/ Creates an image buffer out of an existing buffer.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\buffer.rs","byte_start":324311,"byte_end":324365,"line_start":1180,"line_end":1180,"column_start":5,"column_end":59}},{"value":"/ Returns None if the buffer is not big enough.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\buffer.rs","byte_start":324370,"byte_end":324419,"line_start":1181,"line_end":1181,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":1429},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\buffer.rs","byte_start":324726,"byte_end":324734,"line_start":1192,"line_end":1192,"column_start":12,"column_end":20},"name":"into_vec","qualname":"<ImageBuffer<P, Vec<P::Subpixel>>>::into_vec","value":"pub fn into_vec(Self) -> Vec<P::Subpixel>","parent":null,"children":[],"decl_id":null,"docs":" Consumes the image buffer and returns the underlying data\n as an owned buffer\n","sig":null,"attributes":[{"value":"/ Consumes the image buffer and returns the underlying data","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\buffer.rs","byte_start":324626,"byte_end":324687,"line_start":1190,"line_end":1190,"column_start":5,"column_end":66}},{"value":"/ as an owned buffer","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\buffer.rs","byte_start":324692,"byte_end":324714,"line_start":1191,"line_end":1191,"column_start":5,"column_end":27}}]},{"kind":"Trait","id":{"krate":0,"index":1430},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\buffer.rs","byte_start":324862,"byte_end":324875,"line_start":1198,"line_end":1198,"column_start":11,"column_end":24},"name":"ConvertBuffer","qualname":"::buffer_::ConvertBuffer","value":"ConvertBuffer<T>","parent":null,"children":[{"krate":0,"index":1432}],"decl_id":null,"docs":" Provides color conversions for whole image buffers.\n","sig":null,"attributes":[{"value":"/ Provides color conversions for whole image buffers.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\buffer.rs","byte_start":324796,"byte_end":324851,"line_start":1197,"line_end":1197,"column_start":1,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":1432},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\buffer.rs","byte_start":325062,"byte_end":325069,"line_start":1203,"line_end":1203,"column_start":8,"column_end":15},"name":"convert","qualname":"::buffer_::ConvertBuffer::convert","value":"pub fn convert(&Self) -> T","parent":{"krate":0,"index":1430},"children":[],"decl_id":null,"docs":" Converts `self` to a buffer of type T","sig":null,"attributes":[{"value":"/ Converts `self` to a buffer of type T","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\buffer.rs","byte_start":324885,"byte_end":324926,"line_start":1199,"line_end":1199,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\buffer.rs","byte_start":324931,"byte_end":324934,"line_start":1200,"line_end":1200,"column_start":5,"column_end":8}},{"value":"/ A generic implementation is provided to convert any image buffer to a image buffer","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\buffer.rs","byte_start":324939,"byte_end":325025,"line_start":1201,"line_end":1201,"column_start":5,"column_end":91}},{"value":"/ based on a `Vec<T>`.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\buffer.rs","byte_start":325030,"byte_end":325054,"line_start":1202,"line_end":1202,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":1434},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\buffer.rs","byte_start":325337,"byte_end":325351,"line_start":1211,"line_end":1211,"column_start":12,"column_end":26},"name":"expand_palette","qualname":"<GrayImage>::expand_palette","value":"pub fn expand_palette(Self, &[(u8, u8, u8)], Option<u8>) -> RgbaImage","parent":null,"children":[],"decl_id":null,"docs":" Expands a color palette by re-using the existing buffer.\n Assumes 8 bit per pixel. Uses an optionally transparent index to\n adjust it's alpha value accordingly.\n","sig":null,"attributes":[{"value":"/ Expands a color palette by re-using the existing buffer.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\buffer.rs","byte_start":325147,"byte_end":325207,"line_start":1208,"line_end":1208,"column_start":5,"column_end":65}},{"value":"/ Assumes 8 bit per pixel. Uses an optionally transparent index to","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\buffer.rs","byte_start":325212,"byte_end":325280,"line_start":1209,"line_end":1209,"column_start":5,"column_end":73}},{"value":"/ adjust it's alpha value accordingly.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\buffer.rs","byte_start":325285,"byte_end":325325,"line_start":1210,"line_end":1210,"column_start":5,"column_end":45}}]},{"kind":"Type","id":{"krate":0,"index":1443},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\buffer.rs","byte_start":327486,"byte_end":327494,"line_start":1276,"line_end":1276,"column_start":10,"column_end":18},"name":"RgbImage","qualname":"::buffer_::RgbImage","value":"ImageBuffer<Rgb<u8>, Vec<u8>>","parent":null,"children":[],"decl_id":null,"docs":" Sendable Rgb image buffer\n","sig":null,"attributes":[{"value":"/ Sendable Rgb image buffer","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\buffer.rs","byte_start":327447,"byte_end":327476,"line_start":1275,"line_end":1275,"column_start":1,"column_end":30}}]},{"kind":"Type","id":{"krate":0,"index":1444},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\buffer.rs","byte_start":327583,"byte_end":327592,"line_start":1278,"line_end":1278,"column_start":10,"column_end":19},"name":"RgbaImage","qualname":"::buffer_::RgbaImage","value":"ImageBuffer<Rgba<u8>, Vec<u8>>","parent":null,"children":[],"decl_id":null,"docs":" Sendable Rgb + alpha channel image buffer\n","sig":null,"attributes":[{"value":"/ Sendable Rgb + alpha channel image buffer","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\buffer.rs","byte_start":327528,"byte_end":327573,"line_start":1277,"line_end":1277,"column_start":1,"column_end":46}}]},{"kind":"Type","id":{"krate":0,"index":1445},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\buffer.rs","byte_start":327672,"byte_end":327681,"line_start":1280,"line_end":1280,"column_start":10,"column_end":19},"name":"GrayImage","qualname":"::buffer_::GrayImage","value":"ImageBuffer<Luma<u8>, Vec<u8>>","parent":null,"children":[],"decl_id":null,"docs":" Sendable grayscale image buffer\n","sig":null,"attributes":[{"value":"/ Sendable grayscale image buffer","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\buffer.rs","byte_start":327627,"byte_end":327662,"line_start":1279,"line_end":1279,"column_start":1,"column_end":36}}]},{"kind":"Type","id":{"krate":0,"index":1446},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\buffer.rs","byte_start":327777,"byte_end":327791,"line_start":1282,"line_end":1282,"column_start":10,"column_end":24},"name":"GrayAlphaImage","qualname":"::buffer_::GrayAlphaImage","value":"ImageBuffer<LumaA<u8>, Vec<u8>>","parent":null,"children":[],"decl_id":null,"docs":" Sendable grayscale + alpha channel image buffer\n","sig":null,"attributes":[{"value":"/ Sendable grayscale + alpha channel image buffer","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\buffer.rs","byte_start":327716,"byte_end":327767,"line_start":1281,"line_end":1281,"column_start":1,"column_end":52}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2620},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\color.rs","byte_start":336404,"byte_end":336406,"line_start":11,"line_end":11,"column_start":5,"column_end":7},"name":"L8","qualname":"::color::ColorType::L8","value":"ColorType::L8","parent":{"krate":0,"index":2619},"children":[],"decl_id":null,"docs":" Pixel is 8-bit luminance\n","sig":null,"attributes":[{"value":"/ Pixel is 8-bit luminance","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\color.rs","byte_start":336371,"byte_end":336399,"line_start":10,"line_end":10,"column_start":5,"column_end":33}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2622},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\color.rs","byte_start":336467,"byte_end":336470,"line_start":13,"line_end":13,"column_start":5,"column_end":8},"name":"La8","qualname":"::color::ColorType::La8","value":"ColorType::La8","parent":{"krate":0,"index":2619},"children":[],"decl_id":null,"docs":" Pixel is 8-bit luminance with an alpha channel\n","sig":null,"attributes":[{"value":"/ Pixel is 8-bit luminance with an alpha channel","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\color.rs","byte_start":336412,"byte_end":336462,"line_start":12,"line_end":12,"column_start":5,"column_end":55}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2624},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\color.rs","byte_start":336525,"byte_end":336529,"line_start":15,"line_end":15,"column_start":5,"column_end":9},"name":"Rgb8","qualname":"::color::ColorType::Rgb8","value":"ColorType::Rgb8","parent":{"krate":0,"index":2619},"children":[],"decl_id":null,"docs":" Pixel contains 8-bit R, G and B channels\n","sig":null,"attributes":[{"value":"/ Pixel contains 8-bit R, G and B channels","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\color.rs","byte_start":336476,"byte_end":336520,"line_start":14,"line_end":14,"column_start":5,"column_end":49}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2626},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\color.rs","byte_start":336584,"byte_end":336589,"line_start":17,"line_end":17,"column_start":5,"column_end":10},"name":"Rgba8","qualname":"::color::ColorType::Rgba8","value":"ColorType::Rgba8","parent":{"krate":0,"index":2619},"children":[],"decl_id":null,"docs":" Pixel is 8-bit RGB with an alpha channel\n","sig":null,"attributes":[{"value":"/ Pixel is 8-bit RGB with an alpha channel","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\color.rs","byte_start":336535,"byte_end":336579,"line_start":16,"line_end":16,"column_start":5,"column_end":49}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2628},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\color.rs","byte_start":336630,"byte_end":336633,"line_start":20,"line_end":20,"column_start":5,"column_end":8},"name":"L16","qualname":"::color::ColorType::L16","value":"ColorType::L16","parent":{"krate":0,"index":2619},"children":[],"decl_id":null,"docs":" Pixel is 16-bit luminance\n","sig":null,"attributes":[{"value":"/ Pixel is 16-bit luminance","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\color.rs","byte_start":336596,"byte_end":336625,"line_start":19,"line_end":19,"column_start":5,"column_end":34}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2630},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\color.rs","byte_start":336695,"byte_end":336699,"line_start":22,"line_end":22,"column_start":5,"column_end":9},"name":"La16","qualname":"::color::ColorType::La16","value":"ColorType::La16","parent":{"krate":0,"index":2619},"children":[],"decl_id":null,"docs":" Pixel is 16-bit luminance with an alpha channel\n","sig":null,"attributes":[{"value":"/ Pixel is 16-bit luminance with an alpha channel","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\color.rs","byte_start":336639,"byte_end":336690,"line_start":21,"line_end":21,"column_start":5,"column_end":56}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2632},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\color.rs","byte_start":336733,"byte_end":336738,"line_start":24,"line_end":24,"column_start":5,"column_end":10},"name":"Rgb16","qualname":"::color::ColorType::Rgb16","value":"ColorType::Rgb16","parent":{"krate":0,"index":2619},"children":[],"decl_id":null,"docs":" Pixel is 16-bit RGB\n","sig":null,"attributes":[{"value":"/ Pixel is 16-bit RGB","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\color.rs","byte_start":336705,"byte_end":336728,"line_start":23,"line_end":23,"column_start":5,"column_end":28}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2634},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\color.rs","byte_start":336773,"byte_end":336779,"line_start":26,"line_end":26,"column_start":5,"column_end":11},"name":"Rgba16","qualname":"::color::ColorType::Rgba16","value":"ColorType::Rgba16","parent":{"krate":0,"index":2619},"children":[],"decl_id":null,"docs":" Pixel is 16-bit RGBA\n","sig":null,"attributes":[{"value":"/ Pixel is 16-bit RGBA","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\color.rs","byte_start":336744,"byte_end":336768,"line_start":25,"line_end":25,"column_start":5,"column_end":29}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2636},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\color.rs","byte_start":336835,"byte_end":336839,"line_start":29,"line_end":29,"column_start":5,"column_end":9},"name":"Bgr8","qualname":"::color::ColorType::Bgr8","value":"ColorType::Bgr8","parent":{"krate":0,"index":2619},"children":[],"decl_id":null,"docs":" Pixel contains 8-bit B, G and R channels\n","sig":null,"attributes":[{"value":"/ Pixel contains 8-bit B, G and R channels","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\color.rs","byte_start":336786,"byte_end":336830,"line_start":28,"line_end":28,"column_start":5,"column_end":49}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2638},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\color.rs","byte_start":336894,"byte_end":336899,"line_start":31,"line_end":31,"column_start":5,"column_end":10},"name":"Bgra8","qualname":"::color::ColorType::Bgra8","value":"ColorType::Bgra8","parent":{"krate":0,"index":2619},"children":[],"decl_id":null,"docs":" Pixel is 8-bit BGR with an alpha channel\n","sig":null,"attributes":[{"value":"/ Pixel is 8-bit BGR with an alpha channel","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\color.rs","byte_start":336845,"byte_end":336889,"line_start":30,"line_end":30,"column_start":5,"column_end":49}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2640},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\color.rs","byte_start":336925,"byte_end":336940,"line_start":34,"line_end":34,"column_start":5,"column_end":20},"name":"__NonExhaustive","qualname":"::color::ColorType::__NonExhaustive","value":"ColorType::__NonExhaustive(crate::utils::NonExhaustiveMarker)","parent":{"krate":0,"index":2619},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":2619},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\color.rs","byte_start":336355,"byte_end":336364,"line_start":9,"line_end":9,"column_start":10,"column_end":19},"name":"ColorType","qualname":"::color::ColorType","value":"pub enum ColorType {\n\n    /// Pixel is 8-bit luminance\n    L8,\n\n    /// Pixel is 8-bit luminance with an alpha channel\n    La8,\n\n    /// Pixel contains 8-bit R, G and B channels\n    Rgb8,\n\n    /// Pixel is 8-bit RGB with an alpha channel\n    Rgba8,\n\n    /// Pixel is 16-bit luminance\n    L16,\n\n    /// Pixel is 16-bit luminance with an alpha channel\n    La16,\n\n    /// Pixel is 16-bit RGB\n    Rgb16,\n\n    /// Pixel is 16-bit RGBA\n    Rgba16,\n\n    /// Pixel contains 8-bit B, G and R channels\n    Bgr8,\n\n    /// Pixel is 8-bit BGR with an alpha channel\n    Bgra8,\n\n    #[doc(hidden)]\n    __NonExhaustive(crate::utils::NonExhaustiveMarker),\n}","parent":null,"children":[{"krate":0,"index":2620},{"krate":0,"index":2622},{"krate":0,"index":2624},{"krate":0,"index":2626},{"krate":0,"index":2628},{"krate":0,"index":2630},{"krate":0,"index":2632},{"krate":0,"index":2634},{"krate":0,"index":2636},{"krate":0,"index":2638},{"krate":0,"index":2640}],"decl_id":null,"docs":" An enumeration over supported color types and bit depths\n","sig":null,"attributes":[{"value":"/ An enumeration over supported color types and bit depths","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\color.rs","byte_start":336234,"byte_end":336294,"line_start":7,"line_end":7,"column_start":1,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":1465},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\color.rs","byte_start":337088,"byte_end":337103,"line_start":39,"line_end":39,"column_start":12,"column_end":27},"name":"bytes_per_pixel","qualname":"<ColorType>::bytes_per_pixel","value":"pub fn bytes_per_pixel(Self) -> u8","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of bytes contained in a pixel of `ColorType` ```c```\n","sig":null,"attributes":[{"value":"/ Returns the number of bytes contained in a pixel of `ColorType` ```c```","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\color.rs","byte_start":337001,"byte_end":337076,"line_start":38,"line_end":38,"column_start":5,"column_end":80}}]},{"kind":"Method","id":{"krate":0,"index":1466},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\color.rs","byte_start":337566,"byte_end":337575,"line_start":52,"line_end":52,"column_start":12,"column_end":21},"name":"has_alpha","qualname":"<ColorType>::has_alpha","value":"pub fn has_alpha(Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns if there is an alpha channel.\n","sig":null,"attributes":[{"value":"/ Returns if there is an alpha channel.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\color.rs","byte_start":337513,"byte_end":337554,"line_start":51,"line_end":51,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":1468},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\color.rs","byte_start":337914,"byte_end":337923,"line_start":62,"line_end":62,"column_start":12,"column_end":21},"name":"has_color","qualname":"<ColorType>::has_color","value":"pub fn has_color(Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns false if the color scheme is grayscale, true otherwise.\n","sig":null,"attributes":[{"value":"/ Returns false if the color scheme is grayscale, true otherwise.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\color.rs","byte_start":337835,"byte_end":337902,"line_start":61,"line_end":61,"column_start":5,"column_end":72}}]},{"kind":"Method","id":{"krate":0,"index":1470},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\color.rs","byte_start":338317,"byte_end":338331,"line_start":73,"line_end":73,"column_start":12,"column_end":26},"name":"bits_per_pixel","qualname":"<ColorType>::bits_per_pixel","value":"pub fn bits_per_pixel(Self) -> u16","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of bits contained in a pixel of `ColorType` ```c``` (which will always be\n a multiple of 8).\n","sig":null,"attributes":[{"value":"/ Returns the number of bits contained in a pixel of `ColorType` ```c``` (which will always be","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\color.rs","byte_start":338183,"byte_end":338279,"line_start":71,"line_end":71,"column_start":5,"column_end":101}},{"value":"/ a multiple of 8).","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\color.rs","byte_start":338284,"byte_end":338305,"line_start":72,"line_end":72,"column_start":5,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":1471},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\color.rs","byte_start":338494,"byte_end":338507,"line_start":78,"line_end":78,"column_start":12,"column_end":25},"name":"channel_count","qualname":"<ColorType>::channel_count","value":"pub fn channel_count(Self) -> u8","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of color channels that make up this pixel\n","sig":null,"attributes":[{"value":"/ Returns the number of color channels that make up this pixel","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\color.rs","byte_start":338418,"byte_end":338482,"line_start":77,"line_end":77,"column_start":5,"column_end":69}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2659},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\color.rs","byte_start":339169,"byte_end":339171,"line_start":95,"line_end":95,"column_start":5,"column_end":7},"name":"L1","qualname":"::color::ExtendedColorType::L1","value":"ExtendedColorType::L1","parent":{"krate":0,"index":2658},"children":[],"decl_id":null,"docs":" Pixel is 1-bit luminance\n","sig":null,"attributes":[{"value":"/ Pixel is 1-bit luminance","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\color.rs","byte_start":339136,"byte_end":339164,"line_start":94,"line_end":94,"column_start":5,"column_end":33}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2661},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\color.rs","byte_start":339232,"byte_end":339235,"line_start":97,"line_end":97,"column_start":5,"column_end":8},"name":"La1","qualname":"::color::ExtendedColorType::La1","value":"ExtendedColorType::La1","parent":{"krate":0,"index":2658},"children":[],"decl_id":null,"docs":" Pixel is 1-bit luminance with an alpha channel\n","sig":null,"attributes":[{"value":"/ Pixel is 1-bit luminance with an alpha channel","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\color.rs","byte_start":339177,"byte_end":339227,"line_start":96,"line_end":96,"column_start":5,"column_end":55}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2663},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\color.rs","byte_start":339290,"byte_end":339294,"line_start":99,"line_end":99,"column_start":5,"column_end":9},"name":"Rgb1","qualname":"::color::ExtendedColorType::Rgb1","value":"ExtendedColorType::Rgb1","parent":{"krate":0,"index":2658},"children":[],"decl_id":null,"docs":" Pixel contains 1-bit R, G and B channels\n","sig":null,"attributes":[{"value":"/ Pixel contains 1-bit R, G and B channels","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\color.rs","byte_start":339241,"byte_end":339285,"line_start":98,"line_end":98,"column_start":5,"column_end":49}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2665},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\color.rs","byte_start":339349,"byte_end":339354,"line_start":101,"line_end":101,"column_start":5,"column_end":10},"name":"Rgba1","qualname":"::color::ExtendedColorType::Rgba1","value":"ExtendedColorType::Rgba1","parent":{"krate":0,"index":2658},"children":[],"decl_id":null,"docs":" Pixel is 1-bit RGB with an alpha channel\n","sig":null,"attributes":[{"value":"/ Pixel is 1-bit RGB with an alpha channel","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\color.rs","byte_start":339300,"byte_end":339344,"line_start":100,"line_end":100,"column_start":5,"column_end":49}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2667},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\color.rs","byte_start":339393,"byte_end":339395,"line_start":103,"line_end":103,"column_start":5,"column_end":7},"name":"L2","qualname":"::color::ExtendedColorType::L2","value":"ExtendedColorType::L2","parent":{"krate":0,"index":2658},"children":[],"decl_id":null,"docs":" Pixel is 2-bit luminance\n","sig":null,"attributes":[{"value":"/ Pixel is 2-bit luminance","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\color.rs","byte_start":339360,"byte_end":339388,"line_start":102,"line_end":102,"column_start":5,"column_end":33}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2669},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\color.rs","byte_start":339456,"byte_end":339459,"line_start":105,"line_end":105,"column_start":5,"column_end":8},"name":"La2","qualname":"::color::ExtendedColorType::La2","value":"ExtendedColorType::La2","parent":{"krate":0,"index":2658},"children":[],"decl_id":null,"docs":" Pixel is 2-bit luminance with an alpha channel\n","sig":null,"attributes":[{"value":"/ Pixel is 2-bit luminance with an alpha channel","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\color.rs","byte_start":339401,"byte_end":339451,"line_start":104,"line_end":104,"column_start":5,"column_end":55}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2671},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\color.rs","byte_start":339514,"byte_end":339518,"line_start":107,"line_end":107,"column_start":5,"column_end":9},"name":"Rgb2","qualname":"::color::ExtendedColorType::Rgb2","value":"ExtendedColorType::Rgb2","parent":{"krate":0,"index":2658},"children":[],"decl_id":null,"docs":" Pixel contains 2-bit R, G and B channels\n","sig":null,"attributes":[{"value":"/ Pixel contains 2-bit R, G and B channels","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\color.rs","byte_start":339465,"byte_end":339509,"line_start":106,"line_end":106,"column_start":5,"column_end":49}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2673},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\color.rs","byte_start":339573,"byte_end":339578,"line_start":109,"line_end":109,"column_start":5,"column_end":10},"name":"Rgba2","qualname":"::color::ExtendedColorType::Rgba2","value":"ExtendedColorType::Rgba2","parent":{"krate":0,"index":2658},"children":[],"decl_id":null,"docs":" Pixel is 2-bit RGB with an alpha channel\n","sig":null,"attributes":[{"value":"/ Pixel is 2-bit RGB with an alpha channel","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\color.rs","byte_start":339524,"byte_end":339568,"line_start":108,"line_end":108,"column_start":5,"column_end":49}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2675},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\color.rs","byte_start":339617,"byte_end":339619,"line_start":111,"line_end":111,"column_start":5,"column_end":7},"name":"L4","qualname":"::color::ExtendedColorType::L4","value":"ExtendedColorType::L4","parent":{"krate":0,"index":2658},"children":[],"decl_id":null,"docs":" Pixel is 4-bit luminance\n","sig":null,"attributes":[{"value":"/ Pixel is 4-bit luminance","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\color.rs","byte_start":339584,"byte_end":339612,"line_start":110,"line_end":110,"column_start":5,"column_end":33}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2677},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\color.rs","byte_start":339680,"byte_end":339683,"line_start":113,"line_end":113,"column_start":5,"column_end":8},"name":"La4","qualname":"::color::ExtendedColorType::La4","value":"ExtendedColorType::La4","parent":{"krate":0,"index":2658},"children":[],"decl_id":null,"docs":" Pixel is 4-bit luminance with an alpha channel\n","sig":null,"attributes":[{"value":"/ Pixel is 4-bit luminance with an alpha channel","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\color.rs","byte_start":339625,"byte_end":339675,"line_start":112,"line_end":112,"column_start":5,"column_end":55}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2679},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\color.rs","byte_start":339738,"byte_end":339742,"line_start":115,"line_end":115,"column_start":5,"column_end":9},"name":"Rgb4","qualname":"::color::ExtendedColorType::Rgb4","value":"ExtendedColorType::Rgb4","parent":{"krate":0,"index":2658},"children":[],"decl_id":null,"docs":" Pixel contains 4-bit R, G and B channels\n","sig":null,"attributes":[{"value":"/ Pixel contains 4-bit R, G and B channels","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\color.rs","byte_start":339689,"byte_end":339733,"line_start":114,"line_end":114,"column_start":5,"column_end":49}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2681},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\color.rs","byte_start":339797,"byte_end":339802,"line_start":117,"line_end":117,"column_start":5,"column_end":10},"name":"Rgba4","qualname":"::color::ExtendedColorType::Rgba4","value":"ExtendedColorType::Rgba4","parent":{"krate":0,"index":2658},"children":[],"decl_id":null,"docs":" Pixel is 4-bit RGB with an alpha channel\n","sig":null,"attributes":[{"value":"/ Pixel is 4-bit RGB with an alpha channel","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\color.rs","byte_start":339748,"byte_end":339792,"line_start":116,"line_end":116,"column_start":5,"column_end":49}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2683},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\color.rs","byte_start":339841,"byte_end":339843,"line_start":119,"line_end":119,"column_start":5,"column_end":7},"name":"L8","qualname":"::color::ExtendedColorType::L8","value":"ExtendedColorType::L8","parent":{"krate":0,"index":2658},"children":[],"decl_id":null,"docs":" Pixel is 8-bit luminance\n","sig":null,"attributes":[{"value":"/ Pixel is 8-bit luminance","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\color.rs","byte_start":339808,"byte_end":339836,"line_start":118,"line_end":118,"column_start":5,"column_end":33}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2685},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\color.rs","byte_start":339904,"byte_end":339907,"line_start":121,"line_end":121,"column_start":5,"column_end":8},"name":"La8","qualname":"::color::ExtendedColorType::La8","value":"ExtendedColorType::La8","parent":{"krate":0,"index":2658},"children":[],"decl_id":null,"docs":" Pixel is 8-bit luminance with an alpha channel\n","sig":null,"attributes":[{"value":"/ Pixel is 8-bit luminance with an alpha channel","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\color.rs","byte_start":339849,"byte_end":339899,"line_start":120,"line_end":120,"column_start":5,"column_end":55}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2687},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\color.rs","byte_start":339962,"byte_end":339966,"line_start":123,"line_end":123,"column_start":5,"column_end":9},"name":"Rgb8","qualname":"::color::ExtendedColorType::Rgb8","value":"ExtendedColorType::Rgb8","parent":{"krate":0,"index":2658},"children":[],"decl_id":null,"docs":" Pixel contains 8-bit R, G and B channels\n","sig":null,"attributes":[{"value":"/ Pixel contains 8-bit R, G and B channels","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\color.rs","byte_start":339913,"byte_end":339957,"line_start":122,"line_end":122,"column_start":5,"column_end":49}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2689},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\color.rs","byte_start":340021,"byte_end":340026,"line_start":125,"line_end":125,"column_start":5,"column_end":10},"name":"Rgba8","qualname":"::color::ExtendedColorType::Rgba8","value":"ExtendedColorType::Rgba8","parent":{"krate":0,"index":2658},"children":[],"decl_id":null,"docs":" Pixel is 8-bit RGB with an alpha channel\n","sig":null,"attributes":[{"value":"/ Pixel is 8-bit RGB with an alpha channel","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\color.rs","byte_start":339972,"byte_end":340016,"line_start":124,"line_end":124,"column_start":5,"column_end":49}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2691},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\color.rs","byte_start":340066,"byte_end":340069,"line_start":127,"line_end":127,"column_start":5,"column_end":8},"name":"L16","qualname":"::color::ExtendedColorType::L16","value":"ExtendedColorType::L16","parent":{"krate":0,"index":2658},"children":[],"decl_id":null,"docs":" Pixel is 16-bit luminance\n","sig":null,"attributes":[{"value":"/ Pixel is 16-bit luminance","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\color.rs","byte_start":340032,"byte_end":340061,"line_start":126,"line_end":126,"column_start":5,"column_end":34}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2693},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\color.rs","byte_start":340131,"byte_end":340135,"line_start":129,"line_end":129,"column_start":5,"column_end":9},"name":"La16","qualname":"::color::ExtendedColorType::La16","value":"ExtendedColorType::La16","parent":{"krate":0,"index":2658},"children":[],"decl_id":null,"docs":" Pixel is 16-bit luminance with an alpha channel\n","sig":null,"attributes":[{"value":"/ Pixel is 16-bit luminance with an alpha channel","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\color.rs","byte_start":340075,"byte_end":340126,"line_start":128,"line_end":128,"column_start":5,"column_end":56}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2695},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\color.rs","byte_start":340191,"byte_end":340196,"line_start":131,"line_end":131,"column_start":5,"column_end":10},"name":"Rgb16","qualname":"::color::ExtendedColorType::Rgb16","value":"ExtendedColorType::Rgb16","parent":{"krate":0,"index":2658},"children":[],"decl_id":null,"docs":" Pixel contains 16-bit R, G and B channels\n","sig":null,"attributes":[{"value":"/ Pixel contains 16-bit R, G and B channels","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\color.rs","byte_start":340141,"byte_end":340186,"line_start":130,"line_end":130,"column_start":5,"column_end":50}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2697},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\color.rs","byte_start":340252,"byte_end":340258,"line_start":133,"line_end":133,"column_start":5,"column_end":11},"name":"Rgba16","qualname":"::color::ExtendedColorType::Rgba16","value":"ExtendedColorType::Rgba16","parent":{"krate":0,"index":2658},"children":[],"decl_id":null,"docs":" Pixel is 16-bit RGB with an alpha channel\n","sig":null,"attributes":[{"value":"/ Pixel is 16-bit RGB with an alpha channel","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\color.rs","byte_start":340202,"byte_end":340247,"line_start":132,"line_end":132,"column_start":5,"column_end":50}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2699},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\color.rs","byte_start":340313,"byte_end":340317,"line_start":135,"line_end":135,"column_start":5,"column_end":9},"name":"Bgr8","qualname":"::color::ExtendedColorType::Bgr8","value":"ExtendedColorType::Bgr8","parent":{"krate":0,"index":2658},"children":[],"decl_id":null,"docs":" Pixel contains 8-bit B, G and R channels\n","sig":null,"attributes":[{"value":"/ Pixel contains 8-bit B, G and R channels","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\color.rs","byte_start":340264,"byte_end":340308,"line_start":134,"line_end":134,"column_start":5,"column_end":49}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2701},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\color.rs","byte_start":340372,"byte_end":340377,"line_start":137,"line_end":137,"column_start":5,"column_end":10},"name":"Bgra8","qualname":"::color::ExtendedColorType::Bgra8","value":"ExtendedColorType::Bgra8","parent":{"krate":0,"index":2658},"children":[],"decl_id":null,"docs":" Pixel is 8-bit BGR with an alpha channel\n","sig":null,"attributes":[{"value":"/ Pixel is 8-bit BGR with an alpha channel","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\color.rs","byte_start":340323,"byte_end":340367,"line_start":136,"line_end":136,"column_start":5,"column_end":49}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2703},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\color.rs","byte_start":340606,"byte_end":340613,"line_start":142,"line_end":142,"column_start":5,"column_end":12},"name":"Unknown","qualname":"::color::ExtendedColorType::Unknown","value":"ExtendedColorType::Unknown(u8)","parent":{"krate":0,"index":2658},"children":[],"decl_id":null,"docs":" Pixel is of unknown color type with the specified bits per pixel. This can apply to pixels\n which are associated with an external palette. In that case, the pixel value is an index\n into the palette.\n","sig":null,"attributes":[{"value":"/ Pixel is of unknown color type with the specified bits per pixel. This can apply to pixels","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\color.rs","byte_start":340384,"byte_end":340478,"line_start":139,"line_end":139,"column_start":5,"column_end":99}},{"value":"/ which are associated with an external palette. In that case, the pixel value is an index","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\color.rs","byte_start":340483,"byte_end":340575,"line_start":140,"line_end":140,"column_start":5,"column_end":97}},{"value":"/ into the palette.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\color.rs","byte_start":340580,"byte_end":340601,"line_start":141,"line_end":141,"column_start":5,"column_end":26}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2706},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\color.rs","byte_start":340643,"byte_end":340658,"line_start":145,"line_end":145,"column_start":5,"column_end":20},"name":"__NonExhaustive","qualname":"::color::ExtendedColorType::__NonExhaustive","value":"ExtendedColorType::__NonExhaustive(crate::utils::NonExhaustiveMarker)","parent":{"krate":0,"index":2658},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":2658},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\color.rs","byte_start":339112,"byte_end":339129,"line_start":93,"line_end":93,"column_start":10,"column_end":27},"name":"ExtendedColorType","qualname":"::color::ExtendedColorType","value":"pub enum ExtendedColorType {\n\n    /// Pixel is 1-bit luminance\n    L1,\n\n    /// Pixel is 1-bit luminance with an alpha channel\n    La1,\n\n    /// Pixel contains 1-bit R, G and B channels\n    Rgb1,\n\n    /// Pixel is 1-bit RGB with an alpha channel\n    Rgba1,\n\n    /// Pixel is 2-bit luminance\n    L2,\n\n    /// Pixel is 2-bit luminance with an alpha channel\n    La2,\n\n    /// Pixel contains 2-bit R, G and B channels\n    Rgb2,\n\n    /// Pixel is 2-bit RGB with an alpha channel\n    Rgba2,\n\n    /// Pixel is 4-bit luminance\n    L4,\n\n    /// Pixel is 4-bit luminance with an alpha channel\n    La4,\n\n    /// Pixel contains 4-bit R, G and B channels\n    Rgb4,\n\n    /// Pixel is 4-bit RGB with an alpha channel\n    Rgba4,\n\n    /// Pixel is 8-bit luminance\n    L8,\n\n    /// Pixel is 8-bit luminance with an alpha channel\n    La8,\n\n    /// Pixel contains 8-bit R, G and B channels\n    Rgb8,\n\n    /// Pixel is 8-bit RGB with an alpha channel\n    Rgba8,\n\n    /// Pixel is 16-bit luminance\n    L16,\n\n    /// Pixel is 16-bit luminance with an alpha channel\n    La16,\n\n    /// Pixel contains 16-bit R, G and B channels\n    Rgb16,\n\n    /// Pixel is 16-bit RGB with an alpha channel\n    Rgba16,\n\n    /// Pixel contains 8-bit B, G and R channels\n    Bgr8,\n\n    /// Pixel is 8-bit BGR with an alpha channel\n    Bgra8,\n\n    /// Pixel is of unknown color type with the specified bits per pixel. This can apply to pixels\n    /// which are associated with an external palette. In that case, the pixel value is an index\n    /// into the palette.\n    Unknown(u8),\n\n    #[doc(hidden)]\n    __NonExhaustive(crate::utils::NonExhaustiveMarker),\n}","parent":null,"children":[{"krate":0,"index":2659},{"krate":0,"index":2661},{"krate":0,"index":2663},{"krate":0,"index":2665},{"krate":0,"index":2667},{"krate":0,"index":2669},{"krate":0,"index":2671},{"krate":0,"index":2673},{"krate":0,"index":2675},{"krate":0,"index":2677},{"krate":0,"index":2679},{"krate":0,"index":2681},{"krate":0,"index":2683},{"krate":0,"index":2685},{"krate":0,"index":2687},{"krate":0,"index":2689},{"krate":0,"index":2691},{"krate":0,"index":2693},{"krate":0,"index":2695},{"krate":0,"index":2697},{"krate":0,"index":2699},{"krate":0,"index":2701},{"krate":0,"index":2703},{"krate":0,"index":2706}],"decl_id":null,"docs":" An enumeration of color types encountered in image formats.","sig":null,"attributes":[{"value":"/ An enumeration of color types encountered in image formats.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\color.rs","byte_start":338605,"byte_end":338668,"line_start":84,"line_end":84,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\color.rs","byte_start":338669,"byte_end":338672,"line_start":85,"line_end":85,"column_start":1,"column_end":4}},{"value":"/ This is not exhaustive over all existing image formats but should be granular enough to allow","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\color.rs","byte_start":338673,"byte_end":338770,"line_start":86,"line_end":86,"column_start":1,"column_end":98}},{"value":"/ round tripping of decoding and encoding as much as possible. The variants will be extended as","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\color.rs","byte_start":338771,"byte_end":338868,"line_start":87,"line_end":87,"column_start":1,"column_end":98}},{"value":"/ necessary to enable this.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\color.rs","byte_start":338869,"byte_end":338898,"line_start":88,"line_end":88,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\color.rs","byte_start":338899,"byte_end":338902,"line_start":89,"line_end":89,"column_start":1,"column_end":4}},{"value":"/ Another purpose is to advise users of a rough estimate of the accuracy and effort of the","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\color.rs","byte_start":338903,"byte_end":338995,"line_start":90,"line_end":90,"column_start":1,"column_end":93}},{"value":"/ decoding from and encoding to such an image format.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\color.rs","byte_start":338996,"byte_end":339051,"line_start":91,"line_end":91,"column_start":1,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":1473},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\color.rs","byte_start":340941,"byte_end":340954,"line_start":153,"line_end":153,"column_start":12,"column_end":25},"name":"channel_count","qualname":"<ExtendedColorType>::channel_count","value":"pub fn channel_count(Self) -> u8","parent":null,"children":[],"decl_id":null,"docs":" Get the number of channels for colors of this type.","sig":null,"attributes":[{"value":"/ Get the number of channels for colors of this type.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\color.rs","byte_start":340727,"byte_end":340782,"line_start":149,"line_end":149,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\color.rs","byte_start":340787,"byte_end":340790,"line_start":150,"line_end":150,"column_start":5,"column_end":8}},{"value":"/ Note that the `Unknown` variant returns a value of `1` since pixels can only be treated as","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\color.rs","byte_start":340795,"byte_end":340889,"line_start":151,"line_end":151,"column_start":5,"column_end":99}},{"value":"/ an opaque datum by the library.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\color.rs","byte_start":340894,"byte_end":340929,"line_start":152,"line_end":152,"column_start":5,"column_end":40}}]},{"kind":"Struct","id":{"krate":0,"index":3024},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\color.rs","byte_start":347322,"byte_end":347325,"line_start":373,"line_end":373,"column_start":5,"column_end":8},"name":"Rgb","qualname":"::color::Rgb","value":"","parent":null,"children":[],"decl_id":null,"docs":"RGB colors\n","sig":null,"attributes":[{"value":"repr(C)","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\color.rs","byte_start":343068,"byte_end":343078,"line_start":215,"line_end":215,"column_start":1,"column_end":11}},{"value":"allow(missing_docs)","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\color.rs","byte_start":343079,"byte_end":343101,"line_start":216,"line_end":216,"column_start":1,"column_end":23}}]},{"kind":"Struct","id":{"krate":0,"index":3053},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\color.rs","byte_start":347402,"byte_end":347405,"line_start":374,"line_end":374,"column_start":5,"column_end":8},"name":"Bgr","qualname":"::color::Bgr","value":"","parent":null,"children":[],"decl_id":null,"docs":"BGR colors\n","sig":null,"attributes":[{"value":"repr(C)","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\color.rs","byte_start":343068,"byte_end":343078,"line_start":215,"line_end":215,"column_start":1,"column_end":11}},{"value":"allow(missing_docs)","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\color.rs","byte_start":343079,"byte_end":343101,"line_start":216,"line_end":216,"column_start":1,"column_end":23}}]},{"kind":"Struct","id":{"krate":0,"index":3082},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\color.rs","byte_start":347481,"byte_end":347485,"line_start":375,"line_end":375,"column_start":5,"column_end":9},"name":"Luma","qualname":"::color::Luma","value":"","parent":null,"children":[],"decl_id":null,"docs":"Grayscale colors\n","sig":null,"attributes":[{"value":"repr(C)","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\color.rs","byte_start":343068,"byte_end":343078,"line_start":215,"line_end":215,"column_start":1,"column_end":11}},{"value":"allow(missing_docs)","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\color.rs","byte_start":343079,"byte_end":343101,"line_start":216,"line_end":216,"column_start":1,"column_end":23}}]},{"kind":"Struct","id":{"krate":0,"index":3111},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\color.rs","byte_start":347562,"byte_end":347566,"line_start":376,"line_end":376,"column_start":5,"column_end":9},"name":"Rgba","qualname":"::color::Rgba","value":"","parent":null,"children":[],"decl_id":null,"docs":"RGB colors + alpha channel\n","sig":null,"attributes":[{"value":"repr(C)","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\color.rs","byte_start":343068,"byte_end":343078,"line_start":215,"line_end":215,"column_start":1,"column_end":11}},{"value":"allow(missing_docs)","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\color.rs","byte_start":343079,"byte_end":343101,"line_start":216,"line_end":216,"column_start":1,"column_end":23}}]},{"kind":"Struct","id":{"krate":0,"index":3140},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\color.rs","byte_start":347662,"byte_end":347666,"line_start":377,"line_end":377,"column_start":5,"column_end":9},"name":"Bgra","qualname":"::color::Bgra","value":"","parent":null,"children":[],"decl_id":null,"docs":"BGR colors + alpha channel\n","sig":null,"attributes":[{"value":"repr(C)","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\color.rs","byte_start":343068,"byte_end":343078,"line_start":215,"line_end":215,"column_start":1,"column_end":11}},{"value":"allow(missing_docs)","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\color.rs","byte_start":343079,"byte_end":343101,"line_start":216,"line_end":216,"column_start":1,"column_end":23}}]},{"kind":"Struct","id":{"krate":0,"index":3169},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\color.rs","byte_start":347761,"byte_end":347766,"line_start":378,"line_end":378,"column_start":5,"column_end":10},"name":"LumaA","qualname":"::color::LumaA","value":"","parent":null,"children":[],"decl_id":null,"docs":"Grayscale colors + alpha channel\n","sig":null,"attributes":[{"value":"repr(C)","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\color.rs","byte_start":343068,"byte_end":343078,"line_start":215,"line_end":215,"column_start":1,"column_end":11}},{"value":"allow(missing_docs)","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\color.rs","byte_start":343079,"byte_end":343101,"line_start":216,"line_end":216,"column_start":1,"column_end":23}}]},{"kind":"Trait","id":{"krate":0,"index":1477},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\color.rs","byte_start":347933,"byte_end":347942,"line_start":382,"line_end":382,"column_start":11,"column_end":20},"name":"FromColor","qualname":"::color::FromColor","value":"FromColor<Other>","parent":null,"children":[{"krate":0,"index":1479}],"decl_id":null,"docs":" Provides color conversions for the different pixel types.\n","sig":null,"attributes":[{"value":"/ Provides color conversions for the different pixel types.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\color.rs","byte_start":347861,"byte_end":347922,"line_start":381,"line_end":381,"column_start":1,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":1479},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\color.rs","byte_start":348032,"byte_end":348042,"line_start":384,"line_end":384,"column_start":8,"column_end":18},"name":"from_color","qualname":"::color::FromColor::from_color","value":"pub fn from_color(&mut Self, &Other)","parent":{"krate":0,"index":1477},"children":[],"decl_id":null,"docs":" Changes `self` to represent `Other` in the color space of `Self`\n","sig":null,"attributes":[{"value":"/ Changes `self` to represent `Other` in the color space of `Self`","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\color.rs","byte_start":347956,"byte_end":348024,"line_start":383,"line_end":383,"column_start":5,"column_end":73}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3250},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\dynimage.rs","byte_start":381756,"byte_end":381766,"line_start":45,"line_end":45,"column_start":5,"column_end":15},"name":"ImageLuma8","qualname":"::dynimage::DynamicImage::ImageLuma8","value":"DynamicImage::ImageLuma8(GrayImage)","parent":{"krate":0,"index":3249},"children":[],"decl_id":null,"docs":" Each pixel in this image is 8-bit Luma\n","sig":null,"attributes":[{"value":"/ Each pixel in this image is 8-bit Luma","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\dynimage.rs","byte_start":381709,"byte_end":381751,"line_start":44,"line_end":44,"column_start":5,"column_end":47}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3253},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\dynimage.rs","byte_start":381842,"byte_end":381853,"line_start":48,"line_end":48,"column_start":5,"column_end":16},"name":"ImageLumaA8","qualname":"::dynimage::DynamicImage::ImageLumaA8","value":"DynamicImage::ImageLumaA8(GrayAlphaImage)","parent":{"krate":0,"index":3249},"children":[],"decl_id":null,"docs":" Each pixel in this image is 8-bit Luma with alpha\n","sig":null,"attributes":[{"value":"/ Each pixel in this image is 8-bit Luma with alpha","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\dynimage.rs","byte_start":381784,"byte_end":381837,"line_start":47,"line_end":47,"column_start":5,"column_end":58}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3256},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\dynimage.rs","byte_start":381922,"byte_end":381931,"line_start":51,"line_end":51,"column_start":5,"column_end":14},"name":"ImageRgb8","qualname":"::dynimage::DynamicImage::ImageRgb8","value":"DynamicImage::ImageRgb8(RgbImage)","parent":{"krate":0,"index":3249},"children":[],"decl_id":null,"docs":" Each pixel in this image is 8-bit Rgb\n","sig":null,"attributes":[{"value":"/ Each pixel in this image is 8-bit Rgb","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\dynimage.rs","byte_start":381876,"byte_end":381917,"line_start":50,"line_end":50,"column_start":5,"column_end":46}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3259},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\dynimage.rs","byte_start":382005,"byte_end":382015,"line_start":54,"line_end":54,"column_start":5,"column_end":15},"name":"ImageRgba8","qualname":"::dynimage::DynamicImage::ImageRgba8","value":"DynamicImage::ImageRgba8(RgbaImage)","parent":{"krate":0,"index":3249},"children":[],"decl_id":null,"docs":" Each pixel in this image is 8-bit Rgb with alpha\n","sig":null,"attributes":[{"value":"/ Each pixel in this image is 8-bit Rgb with alpha","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\dynimage.rs","byte_start":381948,"byte_end":382000,"line_start":53,"line_end":53,"column_start":5,"column_end":57}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3262},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\dynimage.rs","byte_start":382079,"byte_end":382088,"line_start":57,"line_end":57,"column_start":5,"column_end":14},"name":"ImageBgr8","qualname":"::dynimage::DynamicImage::ImageBgr8","value":"DynamicImage::ImageBgr8(BgrImage)","parent":{"krate":0,"index":3249},"children":[],"decl_id":null,"docs":" Each pixel in this image is 8-bit Bgr\n","sig":null,"attributes":[{"value":"/ Each pixel in this image is 8-bit Bgr","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\dynimage.rs","byte_start":382033,"byte_end":382074,"line_start":56,"line_end":56,"column_start":5,"column_end":46}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3265},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\dynimage.rs","byte_start":382162,"byte_end":382172,"line_start":60,"line_end":60,"column_start":5,"column_end":15},"name":"ImageBgra8","qualname":"::dynimage::DynamicImage::ImageBgra8","value":"DynamicImage::ImageBgra8(BgraImage)","parent":{"krate":0,"index":3249},"children":[],"decl_id":null,"docs":" Each pixel in this image is 8-bit Bgr with alpha\n","sig":null,"attributes":[{"value":"/ Each pixel in this image is 8-bit Bgr with alpha","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\dynimage.rs","byte_start":382105,"byte_end":382157,"line_start":59,"line_end":59,"column_start":5,"column_end":57}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3268},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\dynimage.rs","byte_start":382238,"byte_end":382249,"line_start":63,"line_end":63,"column_start":5,"column_end":16},"name":"ImageLuma16","qualname":"::dynimage::DynamicImage::ImageLuma16","value":"DynamicImage::ImageLuma16(Gray16Image)","parent":{"krate":0,"index":3249},"children":[],"decl_id":null,"docs":" Each pixel in this image is 16-bit Luma\n","sig":null,"attributes":[{"value":"/ Each pixel in this image is 16-bit Luma","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\dynimage.rs","byte_start":382190,"byte_end":382233,"line_start":62,"line_end":62,"column_start":5,"column_end":48}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3271},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\dynimage.rs","byte_start":382328,"byte_end":382340,"line_start":66,"line_end":66,"column_start":5,"column_end":17},"name":"ImageLumaA16","qualname":"::dynimage::DynamicImage::ImageLumaA16","value":"DynamicImage::ImageLumaA16(GrayAlpha16Image)","parent":{"krate":0,"index":3249},"children":[],"decl_id":null,"docs":" Each pixel in this image is 16-bit Luma with alpha\n","sig":null,"attributes":[{"value":"/ Each pixel in this image is 16-bit Luma with alpha","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\dynimage.rs","byte_start":382269,"byte_end":382323,"line_start":65,"line_end":65,"column_start":5,"column_end":59}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3274},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\dynimage.rs","byte_start":382412,"byte_end":382422,"line_start":69,"line_end":69,"column_start":5,"column_end":15},"name":"ImageRgb16","qualname":"::dynimage::DynamicImage::ImageRgb16","value":"DynamicImage::ImageRgb16(Rgb16Image)","parent":{"krate":0,"index":3249},"children":[],"decl_id":null,"docs":" Each pixel in this image is 16-bit Rgb\n","sig":null,"attributes":[{"value":"/ Each pixel in this image is 16-bit Rgb","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\dynimage.rs","byte_start":382365,"byte_end":382407,"line_start":68,"line_end":68,"column_start":5,"column_end":47}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3277},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\dynimage.rs","byte_start":382499,"byte_end":382510,"line_start":72,"line_end":72,"column_start":5,"column_end":16},"name":"ImageRgba16","qualname":"::dynimage::DynamicImage::ImageRgba16","value":"DynamicImage::ImageRgba16(Rgba16Image)","parent":{"krate":0,"index":3249},"children":[],"decl_id":null,"docs":" Each pixel in this image is 16-bit Rgb with alpha\n","sig":null,"attributes":[{"value":"/ Each pixel in this image is 16-bit Rgb with alpha","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\dynimage.rs","byte_start":382441,"byte_end":382494,"line_start":71,"line_end":71,"column_start":5,"column_end":58}}]},{"kind":"Enum","id":{"krate":0,"index":3249},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\dynimage.rs","byte_start":381690,"byte_end":381702,"line_start":43,"line_end":43,"column_start":10,"column_end":22},"name":"DynamicImage","qualname":"::dynimage::DynamicImage","value":"pub enum DynamicImage {\n\n    /// Each pixel in this image is 8-bit Luma\n    ImageLuma8(GrayImage),\n\n    /// Each pixel in this image is 8-bit Luma with alpha\n    ImageLumaA8(GrayAlphaImage),\n\n    /// Each pixel in this image is 8-bit Rgb\n    ImageRgb8(RgbImage),\n\n    /// Each pixel in this image is 8-bit Rgb with alpha\n    ImageRgba8(RgbaImage),\n\n    /// Each pixel in this image is 8-bit Bgr\n    ImageBgr8(BgrImage),\n\n    /// Each pixel in this image is 8-bit Bgr with alpha\n    ImageBgra8(BgraImage),\n\n    /// Each pixel in this image is 16-bit Luma\n    ImageLuma16(Gray16Image),\n\n    /// Each pixel in this image is 16-bit Luma with alpha\n    ImageLumaA16(GrayAlpha16Image),\n\n    /// Each pixel in this image is 16-bit Rgb\n    ImageRgb16(Rgb16Image),\n\n    /// Each pixel in this image is 16-bit Rgb with alpha\n    ImageRgba16(Rgba16Image),\n}","parent":null,"children":[{"krate":0,"index":3250},{"krate":0,"index":3253},{"krate":0,"index":3256},{"krate":0,"index":3259},{"krate":0,"index":3262},{"krate":0,"index":3265},{"krate":0,"index":3268},{"krate":0,"index":3271},{"krate":0,"index":3274},{"krate":0,"index":3277}],"decl_id":null,"docs":" A Dynamic Image\n","sig":null,"attributes":[{"value":"/ A Dynamic Image","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\dynimage.rs","byte_start":381644,"byte_end":381663,"line_start":41,"line_end":41,"column_start":1,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":1737},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\dynimage.rs","byte_start":386725,"byte_end":386734,"line_start":139,"line_end":139,"column_start":12,"column_end":21},"name":"new_luma8","qualname":"<DynamicImage>::new_luma8","value":"pub fn new_luma8(u32, u32) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Creates a dynamic image backed by a buffer of grey pixels.\n","sig":null,"attributes":[{"value":"/ Creates a dynamic image backed by a buffer of grey pixels.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\dynimage.rs","byte_start":386651,"byte_end":386713,"line_start":138,"line_end":138,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":1738},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\dynimage.rs","byte_start":386937,"byte_end":386948,"line_start":145,"line_end":145,"column_start":12,"column_end":23},"name":"new_luma_a8","qualname":"<DynamicImage>::new_luma_a8","value":"pub fn new_luma_a8(u32, u32) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Creates a dynamic image backed by a buffer of grey\n pixels with transparency.\n","sig":null,"attributes":[{"value":"/ Creates a dynamic image backed by a buffer of grey","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\dynimage.rs","byte_start":386837,"byte_end":386891,"line_start":143,"line_end":143,"column_start":5,"column_end":59}},{"value":"/ pixels with transparency.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\dynimage.rs","byte_start":386896,"byte_end":386925,"line_start":144,"line_end":144,"column_start":5,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":1739},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\dynimage.rs","byte_start":387125,"byte_end":387133,"line_start":150,"line_end":150,"column_start":12,"column_end":20},"name":"new_rgb8","qualname":"<DynamicImage>::new_rgb8","value":"pub fn new_rgb8(u32, u32) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Creates a dynamic image backed by a buffer of RGB pixels.\n","sig":null,"attributes":[{"value":"/ Creates a dynamic image backed by a buffer of RGB pixels.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\dynimage.rs","byte_start":387052,"byte_end":387113,"line_start":149,"line_end":149,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":1740},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\dynimage.rs","byte_start":387309,"byte_end":387318,"line_start":155,"line_end":155,"column_start":12,"column_end":21},"name":"new_rgba8","qualname":"<DynamicImage>::new_rgba8","value":"pub fn new_rgba8(u32, u32) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Creates a dynamic image backed by a buffer of RGBA pixels.\n","sig":null,"attributes":[{"value":"/ Creates a dynamic image backed by a buffer of RGBA pixels.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\dynimage.rs","byte_start":387235,"byte_end":387297,"line_start":154,"line_end":154,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":1741},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\dynimage.rs","byte_start":387495,"byte_end":387504,"line_start":160,"line_end":160,"column_start":12,"column_end":21},"name":"new_bgra8","qualname":"<DynamicImage>::new_bgra8","value":"pub fn new_bgra8(u32, u32) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Creates a dynamic image backed by a buffer of BGRA pixels.\n","sig":null,"attributes":[{"value":"/ Creates a dynamic image backed by a buffer of BGRA pixels.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\dynimage.rs","byte_start":387421,"byte_end":387483,"line_start":159,"line_end":159,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":1742},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\dynimage.rs","byte_start":387680,"byte_end":387688,"line_start":165,"line_end":165,"column_start":12,"column_end":20},"name":"new_bgr8","qualname":"<DynamicImage>::new_bgr8","value":"pub fn new_bgr8(u32, u32) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Creates a dynamic image backed by a buffer of BGR pixels.\n","sig":null,"attributes":[{"value":"/ Creates a dynamic image backed by a buffer of BGR pixels.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\dynimage.rs","byte_start":387607,"byte_end":387668,"line_start":164,"line_end":164,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":1743},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\dynimage.rs","byte_start":387864,"byte_end":387874,"line_start":170,"line_end":170,"column_start":12,"column_end":22},"name":"new_luma16","qualname":"<DynamicImage>::new_luma16","value":"pub fn new_luma16(u32, u32) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Creates a dynamic image backed by a buffer of grey pixels.\n","sig":null,"attributes":[{"value":"/ Creates a dynamic image backed by a buffer of grey pixels.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\dynimage.rs","byte_start":387790,"byte_end":387852,"line_start":169,"line_end":169,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":1744},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\dynimage.rs","byte_start":388078,"byte_end":388090,"line_start":176,"line_end":176,"column_start":12,"column_end":24},"name":"new_luma_a16","qualname":"<DynamicImage>::new_luma_a16","value":"pub fn new_luma_a16(u32, u32) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Creates a dynamic image backed by a buffer of grey\n pixels with transparency.\n","sig":null,"attributes":[{"value":"/ Creates a dynamic image backed by a buffer of grey","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\dynimage.rs","byte_start":387978,"byte_end":388032,"line_start":174,"line_end":174,"column_start":5,"column_end":59}},{"value":"/ pixels with transparency.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\dynimage.rs","byte_start":388037,"byte_end":388066,"line_start":175,"line_end":175,"column_start":5,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":1745},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\dynimage.rs","byte_start":388268,"byte_end":388277,"line_start":181,"line_end":181,"column_start":12,"column_end":21},"name":"new_rgb16","qualname":"<DynamicImage>::new_rgb16","value":"pub fn new_rgb16(u32, u32) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Creates a dynamic image backed by a buffer of RGB pixels.\n","sig":null,"attributes":[{"value":"/ Creates a dynamic image backed by a buffer of RGB pixels.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\dynimage.rs","byte_start":388195,"byte_end":388256,"line_start":180,"line_end":180,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":1746},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\dynimage.rs","byte_start":388454,"byte_end":388464,"line_start":186,"line_end":186,"column_start":12,"column_end":22},"name":"new_rgba16","qualname":"<DynamicImage>::new_rgba16","value":"pub fn new_rgba16(u32, u32) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Creates a dynamic image backed by a buffer of RGBA pixels.\n","sig":null,"attributes":[{"value":"/ Creates a dynamic image backed by a buffer of RGBA pixels.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\dynimage.rs","byte_start":388380,"byte_end":388442,"line_start":185,"line_end":185,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":1747},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\dynimage.rs","byte_start":388630,"byte_end":388642,"line_start":191,"line_end":191,"column_start":12,"column_end":24},"name":"from_decoder","qualname":"<DynamicImage>::from_decoder","value":"pub fn from_decoder<'a,\n                    impl ImageDecoder<'a>: ImageDecoder>(impl ImageDecoder<'a>)\n-> ImageResult<Self>","parent":null,"children":[],"decl_id":null,"docs":" Decodes an encoded image into a dynamic image.\n","sig":null,"attributes":[{"value":"/ Decodes an encoded image into a dynamic image.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\dynimage.rs","byte_start":388568,"byte_end":388618,"line_start":190,"line_end":190,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":1750},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\dynimage.rs","byte_start":388864,"byte_end":388870,"line_start":199,"line_end":199,"column_start":12,"column_end":18},"name":"to_rgb","qualname":"<DynamicImage>::to_rgb","value":"pub fn to_rgb(&Self) -> RgbImage","parent":null,"children":[],"decl_id":null,"docs":" Returns a copy of this image as an RGB image.\n","sig":null,"attributes":[{"value":"/ Returns a copy of this image as an RGB image.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\dynimage.rs","byte_start":388759,"byte_end":388808,"line_start":197,"line_end":197,"column_start":5,"column_end":54}},{"value":"deprecated = \"replaced by `to_rgb8`\"","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\dynimage.rs","byte_start":388813,"byte_end":388852,"line_start":198,"line_end":198,"column_start":5,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":1751},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\dynimage.rs","byte_start":389038,"byte_end":389045,"line_start":206,"line_end":206,"column_start":12,"column_end":19},"name":"to_rgb8","qualname":"<DynamicImage>::to_rgb8","value":"pub fn to_rgb8(&Self) -> RgbImage","parent":null,"children":[],"decl_id":null,"docs":" Returns a copy of this image as an RGB image.\n","sig":null,"attributes":[{"value":"/ Returns a copy of this image as an RGB image.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\dynimage.rs","byte_start":388977,"byte_end":389026,"line_start":205,"line_end":205,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":1752},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\dynimage.rs","byte_start":389213,"byte_end":389221,"line_start":213,"line_end":213,"column_start":12,"column_end":20},"name":"to_rgb16","qualname":"<DynamicImage>::to_rgb16","value":"pub fn to_rgb16(&Self) -> Rgb16Image","parent":null,"children":[],"decl_id":null,"docs":" Returns a copy of this image as an RGB image.\n","sig":null,"attributes":[{"value":"/ Returns a copy of this image as an RGB image.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\dynimage.rs","byte_start":389152,"byte_end":389201,"line_start":212,"line_end":212,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":1753},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\dynimage.rs","byte_start":389437,"byte_end":389444,"line_start":221,"line_end":221,"column_start":12,"column_end":19},"name":"to_rgba","qualname":"<DynamicImage>::to_rgba","value":"pub fn to_rgba(&Self) -> RgbaImage","parent":null,"children":[],"decl_id":null,"docs":" Returns a copy of this image as an RGBA image.\n","sig":null,"attributes":[{"value":"/ Returns a copy of this image as an RGBA image.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\dynimage.rs","byte_start":389330,"byte_end":389380,"line_start":219,"line_end":219,"column_start":5,"column_end":55}},{"value":"deprecated = \"replaced by `to_rgba8`\"","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\dynimage.rs","byte_start":389385,"byte_end":389425,"line_start":220,"line_end":220,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":1754},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\dynimage.rs","byte_start":389614,"byte_end":389622,"line_start":228,"line_end":228,"column_start":12,"column_end":20},"name":"to_rgba8","qualname":"<DynamicImage>::to_rgba8","value":"pub fn to_rgba8(&Self) -> RgbaImage","parent":null,"children":[],"decl_id":null,"docs":" Returns a copy of this image as an RGBA image.\n","sig":null,"attributes":[{"value":"/ Returns a copy of this image as an RGBA image.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\dynimage.rs","byte_start":389552,"byte_end":389602,"line_start":227,"line_end":227,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":1755},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\dynimage.rs","byte_start":389792,"byte_end":389801,"line_start":235,"line_end":235,"column_start":12,"column_end":21},"name":"to_rgba16","qualname":"<DynamicImage>::to_rgba16","value":"pub fn to_rgba16(&Self) -> Rgba16Image","parent":null,"children":[],"decl_id":null,"docs":" Returns a copy of this image as an RGBA image.\n","sig":null,"attributes":[{"value":"/ Returns a copy of this image as an RGBA image.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\dynimage.rs","byte_start":389730,"byte_end":389780,"line_start":234,"line_end":234,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":1756},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\dynimage.rs","byte_start":390016,"byte_end":390022,"line_start":243,"line_end":243,"column_start":12,"column_end":18},"name":"to_bgr","qualname":"<DynamicImage>::to_bgr","value":"pub fn to_bgr(&Self) -> BgrImage","parent":null,"children":[],"decl_id":null,"docs":" Returns a copy of this image as an BGR image.\n","sig":null,"attributes":[{"value":"/ Returns a copy of this image as an BGR image.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\dynimage.rs","byte_start":389911,"byte_end":389960,"line_start":241,"line_end":241,"column_start":5,"column_end":54}},{"value":"deprecated = \"replaced by `to_bgr8`\"","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\dynimage.rs","byte_start":389965,"byte_end":390004,"line_start":242,"line_end":242,"column_start":5,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":1757},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\dynimage.rs","byte_start":390190,"byte_end":390197,"line_start":250,"line_end":250,"column_start":12,"column_end":19},"name":"to_bgr8","qualname":"<DynamicImage>::to_bgr8","value":"pub fn to_bgr8(&Self) -> BgrImage","parent":null,"children":[],"decl_id":null,"docs":" Returns a copy of this image as an BGR image.\n","sig":null,"attributes":[{"value":"/ Returns a copy of this image as an BGR image.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\dynimage.rs","byte_start":390129,"byte_end":390178,"line_start":249,"line_end":249,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":1758},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\dynimage.rs","byte_start":390411,"byte_end":390418,"line_start":258,"line_end":258,"column_start":12,"column_end":19},"name":"to_bgra","qualname":"<DynamicImage>::to_bgra","value":"pub fn to_bgra(&Self) -> BgraImage","parent":null,"children":[],"decl_id":null,"docs":" Returns a copy of this image as an BGRA image.\n","sig":null,"attributes":[{"value":"/ Returns a copy of this image as an BGRA image.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\dynimage.rs","byte_start":390304,"byte_end":390354,"line_start":256,"line_end":256,"column_start":5,"column_end":55}},{"value":"deprecated = \"replaced by `to_bgra8`\"","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\dynimage.rs","byte_start":390359,"byte_end":390399,"line_start":257,"line_end":257,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":1759},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\dynimage.rs","byte_start":390588,"byte_end":390596,"line_start":265,"line_end":265,"column_start":12,"column_end":20},"name":"to_bgra8","qualname":"<DynamicImage>::to_bgra8","value":"pub fn to_bgra8(&Self) -> BgraImage","parent":null,"children":[],"decl_id":null,"docs":" Returns a copy of this image as an BGRA image.\n","sig":null,"attributes":[{"value":"/ Returns a copy of this image as an BGRA image.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\dynimage.rs","byte_start":390526,"byte_end":390576,"line_start":264,"line_end":264,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":1760},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\dynimage.rs","byte_start":390810,"byte_end":390817,"line_start":273,"line_end":273,"column_start":12,"column_end":19},"name":"to_luma","qualname":"<DynamicImage>::to_luma","value":"pub fn to_luma(&Self) -> GrayImage","parent":null,"children":[],"decl_id":null,"docs":" Returns a copy of this image as a Luma image.\n","sig":null,"attributes":[{"value":"/ Returns a copy of this image as a Luma image.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\dynimage.rs","byte_start":390704,"byte_end":390753,"line_start":271,"line_end":271,"column_start":5,"column_end":54}},{"value":"deprecated = \"replaced by `to_luma8`\"","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\dynimage.rs","byte_start":390758,"byte_end":390798,"line_start":272,"line_end":272,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":1761},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\dynimage.rs","byte_start":390986,"byte_end":390994,"line_start":280,"line_end":280,"column_start":12,"column_end":20},"name":"to_luma8","qualname":"<DynamicImage>::to_luma8","value":"pub fn to_luma8(&Self) -> GrayImage","parent":null,"children":[],"decl_id":null,"docs":" Returns a copy of this image as a Luma image.\n","sig":null,"attributes":[{"value":"/ Returns a copy of this image as a Luma image.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\dynimage.rs","byte_start":390925,"byte_end":390974,"line_start":279,"line_end":279,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":1762},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\dynimage.rs","byte_start":391163,"byte_end":391172,"line_start":287,"line_end":287,"column_start":12,"column_end":21},"name":"to_luma16","qualname":"<DynamicImage>::to_luma16","value":"pub fn to_luma16(&Self) -> Gray16Image","parent":null,"children":[],"decl_id":null,"docs":" Returns a copy of this image as a Luma image.\n","sig":null,"attributes":[{"value":"/ Returns a copy of this image as a Luma image.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\dynimage.rs","byte_start":391102,"byte_end":391151,"line_start":286,"line_end":286,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":1763},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\dynimage.rs","byte_start":391395,"byte_end":391408,"line_start":295,"line_end":295,"column_start":12,"column_end":25},"name":"to_luma_alpha","qualname":"<DynamicImage>::to_luma_alpha","value":"pub fn to_luma_alpha(&Self) -> GrayAlphaImage","parent":null,"children":[],"decl_id":null,"docs":" Returns a copy of this image as a LumaA image.\n","sig":null,"attributes":[{"value":"/ Returns a copy of this image as a LumaA image.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\dynimage.rs","byte_start":391282,"byte_end":391332,"line_start":293,"line_end":293,"column_start":5,"column_end":55}},{"value":"deprecated = \"replaced by `to_luma_alpha8`\"","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\dynimage.rs","byte_start":391337,"byte_end":391383,"line_start":294,"line_end":294,"column_start":5,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":1764},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\dynimage.rs","byte_start":391583,"byte_end":391597,"line_start":302,"line_end":302,"column_start":12,"column_end":26},"name":"to_luma_alpha8","qualname":"<DynamicImage>::to_luma_alpha8","value":"pub fn to_luma_alpha8(&Self) -> GrayAlphaImage","parent":null,"children":[],"decl_id":null,"docs":" Returns a copy of this image as a LumaA image.\n","sig":null,"attributes":[{"value":"/ Returns a copy of this image as a LumaA image.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\dynimage.rs","byte_start":391521,"byte_end":391571,"line_start":301,"line_end":301,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":1765},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\dynimage.rs","byte_start":391772,"byte_end":391787,"line_start":309,"line_end":309,"column_start":12,"column_end":27},"name":"to_luma_alpha16","qualname":"<DynamicImage>::to_luma_alpha16","value":"pub fn to_luma_alpha16(&Self) -> GrayAlpha16Image","parent":null,"children":[],"decl_id":null,"docs":" Returns a copy of this image as a LumaA image.\n","sig":null,"attributes":[{"value":"/ Returns a copy of this image as a LumaA image.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\dynimage.rs","byte_start":391710,"byte_end":391760,"line_start":308,"line_end":308,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":1766},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\dynimage.rs","byte_start":392127,"byte_end":392135,"line_start":320,"line_end":320,"column_start":12,"column_end":20},"name":"into_rgb","qualname":"<DynamicImage>::into_rgb","value":"pub fn into_rgb(Self) -> RgbImage","parent":null,"children":[],"decl_id":null,"docs":" Consume the image and returns a RGB image.","sig":null,"attributes":[{"value":"/ Consume the image and returns a RGB image.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\dynimage.rs","byte_start":391902,"byte_end":391948,"line_start":315,"line_end":315,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\dynimage.rs","byte_start":391953,"byte_end":391956,"line_start":316,"line_end":316,"column_start":5,"column_end":8}},{"value":"/ If the image was already the correct format, it is returned as is.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\dynimage.rs","byte_start":391961,"byte_end":392031,"line_start":317,"line_end":317,"column_start":5,"column_end":75}},{"value":"/ Otherwise, a copy is created.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\dynimage.rs","byte_start":392036,"byte_end":392069,"line_start":318,"line_end":318,"column_start":5,"column_end":38}},{"value":"deprecated = \"replaced by `into_rgb8`\"","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\dynimage.rs","byte_start":392074,"byte_end":392115,"line_start":319,"line_end":319,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":1767},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\dynimage.rs","byte_start":392452,"byte_end":392461,"line_start":331,"line_end":331,"column_start":12,"column_end":21},"name":"into_rgb8","qualname":"<DynamicImage>::into_rgb8","value":"pub fn into_rgb8(Self) -> RgbImage","parent":null,"children":[],"decl_id":null,"docs":" Consume the image and returns a RGB image.","sig":null,"attributes":[{"value":"/ Consume the image and returns a RGB image.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\dynimage.rs","byte_start":392273,"byte_end":392319,"line_start":327,"line_end":327,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\dynimage.rs","byte_start":392324,"byte_end":392327,"line_start":328,"line_end":328,"column_start":5,"column_end":8}},{"value":"/ If the image was already the correct format, it is returned as is.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\dynimage.rs","byte_start":392332,"byte_end":392402,"line_start":329,"line_end":329,"column_start":5,"column_end":75}},{"value":"/ Otherwise, a copy is created.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\dynimage.rs","byte_start":392407,"byte_end":392440,"line_start":330,"line_end":330,"column_start":5,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":1768},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\dynimage.rs","byte_start":392778,"byte_end":392788,"line_start":342,"line_end":342,"column_start":12,"column_end":22},"name":"into_rgb16","qualname":"<DynamicImage>::into_rgb16","value":"pub fn into_rgb16(Self) -> Rgb16Image","parent":null,"children":[],"decl_id":null,"docs":" Consume the image and returns a RGB image.","sig":null,"attributes":[{"value":"/ Consume the image and returns a RGB image.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\dynimage.rs","byte_start":392599,"byte_end":392645,"line_start":338,"line_end":338,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\dynimage.rs","byte_start":392650,"byte_end":392653,"line_start":339,"line_end":339,"column_start":5,"column_end":8}},{"value":"/ If the image was already the correct format, it is returned as is.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\dynimage.rs","byte_start":392658,"byte_end":392728,"line_start":340,"line_end":340,"column_start":5,"column_end":75}},{"value":"/ Otherwise, a copy is created.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\dynimage.rs","byte_start":392733,"byte_end":392766,"line_start":341,"line_end":341,"column_start":5,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":1769},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\dynimage.rs","byte_start":393157,"byte_end":393166,"line_start":354,"line_end":354,"column_start":12,"column_end":21},"name":"into_rgba","qualname":"<DynamicImage>::into_rgba","value":"pub fn into_rgba(Self) -> RgbaImage","parent":null,"children":[],"decl_id":null,"docs":" Consume the image and returns a RGBA image.","sig":null,"attributes":[{"value":"/ Consume the image and returns a RGBA image.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\dynimage.rs","byte_start":392930,"byte_end":392977,"line_start":349,"line_end":349,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\dynimage.rs","byte_start":392982,"byte_end":392985,"line_start":350,"line_end":350,"column_start":5,"column_end":8}},{"value":"/ If the image was already the correct format, it is returned as is.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\dynimage.rs","byte_start":392990,"byte_end":393060,"line_start":351,"line_end":351,"column_start":5,"column_end":75}},{"value":"/ Otherwise, a copy is created.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\dynimage.rs","byte_start":393065,"byte_end":393098,"line_start":352,"line_end":352,"column_start":5,"column_end":38}},{"value":"deprecated = \"replaced by `into_rgba8`\"","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\dynimage.rs","byte_start":393103,"byte_end":393145,"line_start":353,"line_end":353,"column_start":5,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":1770},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\dynimage.rs","byte_start":393487,"byte_end":393497,"line_start":365,"line_end":365,"column_start":12,"column_end":22},"name":"into_rgba8","qualname":"<DynamicImage>::into_rgba8","value":"pub fn into_rgba8(Self) -> RgbaImage","parent":null,"children":[],"decl_id":null,"docs":" Consume the image and returns a RGBA image.","sig":null,"attributes":[{"value":"/ Consume the image and returns a RGBA image.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\dynimage.rs","byte_start":393307,"byte_end":393354,"line_start":361,"line_end":361,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\dynimage.rs","byte_start":393359,"byte_end":393362,"line_start":362,"line_end":362,"column_start":5,"column_end":8}},{"value":"/ If the image was already the correct format, it is returned as is.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\dynimage.rs","byte_start":393367,"byte_end":393437,"line_start":363,"line_end":363,"column_start":5,"column_end":75}},{"value":"/ Otherwise, a copy is created.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\dynimage.rs","byte_start":393442,"byte_end":393475,"line_start":364,"line_end":364,"column_start":5,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":1771},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\dynimage.rs","byte_start":393818,"byte_end":393829,"line_start":376,"line_end":376,"column_start":12,"column_end":23},"name":"into_rgba16","qualname":"<DynamicImage>::into_rgba16","value":"pub fn into_rgba16(Self) -> Rgba16Image","parent":null,"children":[],"decl_id":null,"docs":" Consume the image and returns a RGBA image.","sig":null,"attributes":[{"value":"/ Consume the image and returns a RGBA image.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\dynimage.rs","byte_start":393638,"byte_end":393685,"line_start":372,"line_end":372,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\dynimage.rs","byte_start":393690,"byte_end":393693,"line_start":373,"line_end":373,"column_start":5,"column_end":8}},{"value":"/ If the image was already the correct format, it is returned as is.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\dynimage.rs","byte_start":393698,"byte_end":393768,"line_start":374,"line_end":374,"column_start":5,"column_end":75}},{"value":"/ Otherwise, a copy is created.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\dynimage.rs","byte_start":393773,"byte_end":393806,"line_start":375,"line_end":375,"column_start":5,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":1772},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\dynimage.rs","byte_start":394200,"byte_end":394208,"line_start":388,"line_end":388,"column_start":12,"column_end":20},"name":"into_bgr","qualname":"<DynamicImage>::into_bgr","value":"pub fn into_bgr(Self) -> BgrImage","parent":null,"children":[],"decl_id":null,"docs":" Consume the image and returns a BGR image.","sig":null,"attributes":[{"value":"/ Consume the image and returns a BGR image.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\dynimage.rs","byte_start":393974,"byte_end":394020,"line_start":383,"line_end":383,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\dynimage.rs","byte_start":394025,"byte_end":394028,"line_start":384,"line_end":384,"column_start":5,"column_end":8}},{"value":"/ If the image was already the correct format, it is returned as is.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\dynimage.rs","byte_start":394033,"byte_end":394103,"line_start":385,"line_end":385,"column_start":5,"column_end":75}},{"value":"/ Otherwise, a copy is created.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\dynimage.rs","byte_start":394108,"byte_end":394141,"line_start":386,"line_end":386,"column_start":5,"column_end":38}},{"value":"deprecated = \"replaced by `into_bgra8`\"","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\dynimage.rs","byte_start":394146,"byte_end":394188,"line_start":387,"line_end":387,"column_start":5,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":1773},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\dynimage.rs","byte_start":394525,"byte_end":394534,"line_start":399,"line_end":399,"column_start":12,"column_end":21},"name":"into_bgr8","qualname":"<DynamicImage>::into_bgr8","value":"pub fn into_bgr8(Self) -> BgrImage","parent":null,"children":[],"decl_id":null,"docs":" Consume the image and returns a BGR image.","sig":null,"attributes":[{"value":"/ Consume the image and returns a BGR image.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\dynimage.rs","byte_start":394346,"byte_end":394392,"line_start":395,"line_end":395,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\dynimage.rs","byte_start":394397,"byte_end":394400,"line_start":396,"line_end":396,"column_start":5,"column_end":8}},{"value":"/ If the image was already the correct format, it is returned as is.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\dynimage.rs","byte_start":394405,"byte_end":394475,"line_start":397,"line_end":397,"column_start":5,"column_end":75}},{"value":"/ Otherwise, a copy is created.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\dynimage.rs","byte_start":394480,"byte_end":394513,"line_start":398,"line_end":398,"column_start":5,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":1774},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\dynimage.rs","byte_start":395000,"byte_end":395009,"line_start":413,"line_end":413,"column_start":12,"column_end":21},"name":"into_bgra","qualname":"<DynamicImage>::into_bgra","value":"pub fn into_bgra(Self) -> BgraImage","parent":null,"children":[],"decl_id":null,"docs":" Consume the image and returns a BGRA image.","sig":null,"attributes":[{"value":"/ Consume the image and returns a BGRA image.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\dynimage.rs","byte_start":394773,"byte_end":394820,"line_start":408,"line_end":408,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\dynimage.rs","byte_start":394825,"byte_end":394828,"line_start":409,"line_end":409,"column_start":5,"column_end":8}},{"value":"/ If the image was already the correct format, it is returned as is.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\dynimage.rs","byte_start":394833,"byte_end":394903,"line_start":410,"line_end":410,"column_start":5,"column_end":75}},{"value":"/ Otherwise, a copy is created.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\dynimage.rs","byte_start":394908,"byte_end":394941,"line_start":411,"line_end":411,"column_start":5,"column_end":38}},{"value":"deprecated = \"replaced by `into_bgra8`\"","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\dynimage.rs","byte_start":394946,"byte_end":394988,"line_start":412,"line_end":412,"column_start":5,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":1775},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\dynimage.rs","byte_start":395330,"byte_end":395340,"line_start":424,"line_end":424,"column_start":12,"column_end":22},"name":"into_bgra8","qualname":"<DynamicImage>::into_bgra8","value":"pub fn into_bgra8(Self) -> BgraImage","parent":null,"children":[],"decl_id":null,"docs":" Consume the image and returns a BGRA image.","sig":null,"attributes":[{"value":"/ Consume the image and returns a BGRA image.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\dynimage.rs","byte_start":395150,"byte_end":395197,"line_start":420,"line_end":420,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\dynimage.rs","byte_start":395202,"byte_end":395205,"line_start":421,"line_end":421,"column_start":5,"column_end":8}},{"value":"/ If the image was already the correct format, it is returned as is.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\dynimage.rs","byte_start":395210,"byte_end":395280,"line_start":422,"line_end":422,"column_start":5,"column_end":75}},{"value":"/ Otherwise, a copy is created.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\dynimage.rs","byte_start":395285,"byte_end":395318,"line_start":423,"line_end":423,"column_start":5,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":1776},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\dynimage.rs","byte_start":395811,"byte_end":395820,"line_start":438,"line_end":438,"column_start":12,"column_end":21},"name":"into_luma","qualname":"<DynamicImage>::into_luma","value":"pub fn into_luma(Self) -> GrayImage","parent":null,"children":[],"decl_id":null,"docs":" Consume the image and returns a Luma image.","sig":null,"attributes":[{"value":"/ Consume the image and returns a Luma image.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\dynimage.rs","byte_start":395584,"byte_end":395631,"line_start":433,"line_end":433,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\dynimage.rs","byte_start":395636,"byte_end":395639,"line_start":434,"line_end":434,"column_start":5,"column_end":8}},{"value":"/ If the image was already the correct format, it is returned as is.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\dynimage.rs","byte_start":395644,"byte_end":395714,"line_start":435,"line_end":435,"column_start":5,"column_end":75}},{"value":"/ Otherwise, a copy is created.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\dynimage.rs","byte_start":395719,"byte_end":395752,"line_start":436,"line_end":436,"column_start":5,"column_end":38}},{"value":"deprecated = \"replaced by `into_luma8`\"","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\dynimage.rs","byte_start":395757,"byte_end":395799,"line_start":437,"line_end":437,"column_start":5,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":1777},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\dynimage.rs","byte_start":396141,"byte_end":396151,"line_start":449,"line_end":449,"column_start":12,"column_end":22},"name":"into_luma8","qualname":"<DynamicImage>::into_luma8","value":"pub fn into_luma8(Self) -> GrayImage","parent":null,"children":[],"decl_id":null,"docs":" Consume the image and returns a Luma image.","sig":null,"attributes":[{"value":"/ Consume the image and returns a Luma image.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\dynimage.rs","byte_start":395961,"byte_end":396008,"line_start":445,"line_end":445,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\dynimage.rs","byte_start":396013,"byte_end":396016,"line_start":446,"line_end":446,"column_start":5,"column_end":8}},{"value":"/ If the image was already the correct format, it is returned as is.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\dynimage.rs","byte_start":396021,"byte_end":396091,"line_start":447,"line_end":447,"column_start":5,"column_end":75}},{"value":"/ Otherwise, a copy is created.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\dynimage.rs","byte_start":396096,"byte_end":396129,"line_start":448,"line_end":448,"column_start":5,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":1778},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\dynimage.rs","byte_start":396472,"byte_end":396483,"line_start":460,"line_end":460,"column_start":12,"column_end":23},"name":"into_luma16","qualname":"<DynamicImage>::into_luma16","value":"pub fn into_luma16(Self) -> Gray16Image","parent":null,"children":[],"decl_id":null,"docs":" Consume the image and returns a Luma image.","sig":null,"attributes":[{"value":"/ Consume the image and returns a Luma image.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\dynimage.rs","byte_start":396292,"byte_end":396339,"line_start":456,"line_end":456,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\dynimage.rs","byte_start":396344,"byte_end":396347,"line_start":457,"line_end":457,"column_start":5,"column_end":8}},{"value":"/ If the image was already the correct format, it is returned as is.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\dynimage.rs","byte_start":396352,"byte_end":396422,"line_start":458,"line_end":458,"column_start":5,"column_end":75}},{"value":"/ Otherwise, a copy is created.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\dynimage.rs","byte_start":396427,"byte_end":396460,"line_start":459,"line_end":459,"column_start":5,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":1779},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\dynimage.rs","byte_start":396862,"byte_end":396877,"line_start":472,"line_end":472,"column_start":12,"column_end":27},"name":"into_luma_alpha","qualname":"<DynamicImage>::into_luma_alpha","value":"pub fn into_luma_alpha(Self) -> GrayAlphaImage","parent":null,"children":[],"decl_id":null,"docs":" Consume the image and returns a LumaA image.","sig":null,"attributes":[{"value":"/ Consume the image and returns a LumaA image.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\dynimage.rs","byte_start":396628,"byte_end":396676,"line_start":467,"line_end":467,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\dynimage.rs","byte_start":396681,"byte_end":396684,"line_start":468,"line_end":468,"column_start":5,"column_end":8}},{"value":"/ If the image was already the correct format, it is returned as is.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\dynimage.rs","byte_start":396689,"byte_end":396759,"line_start":469,"line_end":469,"column_start":5,"column_end":75}},{"value":"/ Otherwise, a copy is created.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\dynimage.rs","byte_start":396764,"byte_end":396797,"line_start":470,"line_end":470,"column_start":5,"column_end":38}},{"value":"deprecated = \"replaced by `into_luma_alpha8`\"","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\dynimage.rs","byte_start":396802,"byte_end":396850,"line_start":471,"line_end":471,"column_start":5,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":1780},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\dynimage.rs","byte_start":397211,"byte_end":397227,"line_start":483,"line_end":483,"column_start":12,"column_end":28},"name":"into_luma_alpha8","qualname":"<DynamicImage>::into_luma_alpha8","value":"pub fn into_luma_alpha8(Self) -> GrayAlphaImage","parent":null,"children":[],"decl_id":null,"docs":" Consume the image and returns a LumaA image.","sig":null,"attributes":[{"value":"/ Consume the image and returns a LumaA image.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\dynimage.rs","byte_start":397030,"byte_end":397078,"line_start":479,"line_end":479,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\dynimage.rs","byte_start":397083,"byte_end":397086,"line_start":480,"line_end":480,"column_start":5,"column_end":8}},{"value":"/ If the image was already the correct format, it is returned as is.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\dynimage.rs","byte_start":397091,"byte_end":397161,"line_start":481,"line_end":481,"column_start":5,"column_end":75}},{"value":"/ Otherwise, a copy is created.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\dynimage.rs","byte_start":397166,"byte_end":397199,"line_start":482,"line_end":482,"column_start":5,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":1781},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\dynimage.rs","byte_start":397561,"byte_end":397578,"line_start":494,"line_end":494,"column_start":12,"column_end":29},"name":"into_luma_alpha16","qualname":"<DynamicImage>::into_luma_alpha16","value":"pub fn into_luma_alpha16(Self) -> GrayAlpha16Image","parent":null,"children":[],"decl_id":null,"docs":" Consume the image and returns a LumaA image.","sig":null,"attributes":[{"value":"/ Consume the image and returns a LumaA image.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\dynimage.rs","byte_start":397380,"byte_end":397428,"line_start":490,"line_end":490,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\dynimage.rs","byte_start":397433,"byte_end":397436,"line_start":491,"line_end":491,"column_start":5,"column_end":8}},{"value":"/ If the image was already the correct format, it is returned as is.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\dynimage.rs","byte_start":397441,"byte_end":397511,"line_start":492,"line_end":492,"column_start":5,"column_end":75}},{"value":"/ Otherwise, a copy is created.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\dynimage.rs","byte_start":397516,"byte_end":397549,"line_start":493,"line_end":493,"column_start":5,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":1782},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\dynimage.rs","byte_start":397965,"byte_end":397969,"line_start":505,"line_end":505,"column_start":12,"column_end":16},"name":"crop","qualname":"<DynamicImage>::crop","value":"pub fn crop(&mut Self, u32, u32, u32, u32) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Return a cut-out of this image delimited by the bounding rectangle.","sig":null,"attributes":[{"value":"/ Return a cut-out of this image delimited by the bounding rectangle.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\dynimage.rs","byte_start":397735,"byte_end":397806,"line_start":501,"line_end":501,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\dynimage.rs","byte_start":397811,"byte_end":397814,"line_start":502,"line_end":502,"column_start":5,"column_end":8}},{"value":"/ Note: this method does *not* modify the object,","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\dynimage.rs","byte_start":397819,"byte_end":397870,"line_start":503,"line_end":503,"column_start":5,"column_end":56}},{"value":"/ and its signature will be replaced with `crop_imm()`'s in the 0.24 release","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\dynimage.rs","byte_start":397875,"byte_end":397953,"line_start":504,"line_end":504,"column_start":5,"column_end":83}}]},{"kind":"Method","id":{"krate":0,"index":1783},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\dynimage.rs","byte_start":398226,"byte_end":398234,"line_start":510,"line_end":510,"column_start":12,"column_end":20},"name":"crop_imm","qualname":"<DynamicImage>::crop_imm","value":"pub fn crop_imm(&Self, u32, u32, u32, u32) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Return a cut-out of this image delimited by the bounding rectangle.\n","sig":null,"attributes":[{"value":"/ Return a cut-out of this image delimited by the bounding rectangle.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\dynimage.rs","byte_start":398143,"byte_end":398214,"line_start":509,"line_end":509,"column_start":5,"column_end":76}}]},{"kind":"Method","id":{"krate":0,"index":1784},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\dynimage.rs","byte_start":398459,"byte_end":398466,"line_start":515,"line_end":515,"column_start":12,"column_end":19},"name":"as_rgb8","qualname":"<DynamicImage>::as_rgb8","value":"pub fn as_rgb8(&Self) -> Option<&RgbImage>","parent":null,"children":[],"decl_id":null,"docs":" Return a reference to an 8bit RGB image\n","sig":null,"attributes":[{"value":"/ Return a reference to an 8bit RGB image","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\dynimage.rs","byte_start":398404,"byte_end":398447,"line_start":514,"line_end":514,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":1785},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\dynimage.rs","byte_start":398681,"byte_end":398692,"line_start":523,"line_end":523,"column_start":12,"column_end":23},"name":"as_mut_rgb8","qualname":"<DynamicImage>::as_mut_rgb8","value":"pub fn as_mut_rgb8(&mut Self) -> Option<&mut RgbImage>","parent":null,"children":[],"decl_id":null,"docs":" Return a mutable reference to an 8bit RGB image\n","sig":null,"attributes":[{"value":"/ Return a mutable reference to an 8bit RGB image","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\dynimage.rs","byte_start":398618,"byte_end":398669,"line_start":522,"line_end":522,"column_start":5,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":1786},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\dynimage.rs","byte_start":398911,"byte_end":398918,"line_start":531,"line_end":531,"column_start":12,"column_end":19},"name":"as_bgr8","qualname":"<DynamicImage>::as_bgr8","value":"pub fn as_bgr8(&Self) -> Option<&BgrImage>","parent":null,"children":[],"decl_id":null,"docs":" Return a reference to an 8bit BGR image\n","sig":null,"attributes":[{"value":"/ Return a reference to an 8bit BGR image","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\dynimage.rs","byte_start":398856,"byte_end":398899,"line_start":530,"line_end":530,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":1787},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\dynimage.rs","byte_start":399133,"byte_end":399144,"line_start":539,"line_end":539,"column_start":12,"column_end":23},"name":"as_mut_bgr8","qualname":"<DynamicImage>::as_mut_bgr8","value":"pub fn as_mut_bgr8(&mut Self) -> Option<&mut BgrImage>","parent":null,"children":[],"decl_id":null,"docs":" Return a mutable reference to an 8bit BGR image\n","sig":null,"attributes":[{"value":"/ Return a mutable reference to an 8bit BGR image","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\dynimage.rs","byte_start":399070,"byte_end":399121,"line_start":538,"line_end":538,"column_start":5,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":1788},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\dynimage.rs","byte_start":399364,"byte_end":399372,"line_start":547,"line_end":547,"column_start":12,"column_end":20},"name":"as_rgba8","qualname":"<DynamicImage>::as_rgba8","value":"pub fn as_rgba8(&Self) -> Option<&RgbaImage>","parent":null,"children":[],"decl_id":null,"docs":" Return a reference to an 8bit RGBA image\n","sig":null,"attributes":[{"value":"/ Return a reference to an 8bit RGBA image","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\dynimage.rs","byte_start":399308,"byte_end":399352,"line_start":546,"line_end":546,"column_start":5,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":1789},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\dynimage.rs","byte_start":399590,"byte_end":399602,"line_start":555,"line_end":555,"column_start":12,"column_end":24},"name":"as_mut_rgba8","qualname":"<DynamicImage>::as_mut_rgba8","value":"pub fn as_mut_rgba8(&mut Self) -> Option<&mut RgbaImage>","parent":null,"children":[],"decl_id":null,"docs":" Return a mutable reference to an 8bit RGBA image\n","sig":null,"attributes":[{"value":"/ Return a mutable reference to an 8bit RGBA image","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\dynimage.rs","byte_start":399526,"byte_end":399578,"line_start":554,"line_end":554,"column_start":5,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":1790},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\dynimage.rs","byte_start":399824,"byte_end":399832,"line_start":563,"line_end":563,"column_start":12,"column_end":20},"name":"as_bgra8","qualname":"<DynamicImage>::as_bgra8","value":"pub fn as_bgra8(&Self) -> Option<&BgraImage>","parent":null,"children":[],"decl_id":null,"docs":" Return a reference to an 8bit BGRA image\n","sig":null,"attributes":[{"value":"/ Return a reference to an 8bit BGRA image","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\dynimage.rs","byte_start":399768,"byte_end":399812,"line_start":562,"line_end":562,"column_start":5,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":1791},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\dynimage.rs","byte_start":400050,"byte_end":400062,"line_start":571,"line_end":571,"column_start":12,"column_end":24},"name":"as_mut_bgra8","qualname":"<DynamicImage>::as_mut_bgra8","value":"pub fn as_mut_bgra8(&mut Self) -> Option<&mut BgraImage>","parent":null,"children":[],"decl_id":null,"docs":" Return a mutable reference to an 8bit RGBA image\n","sig":null,"attributes":[{"value":"/ Return a mutable reference to an 8bit RGBA image","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\dynimage.rs","byte_start":399986,"byte_end":400038,"line_start":570,"line_end":570,"column_start":5,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":1792},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\dynimage.rs","byte_start":400289,"byte_end":400297,"line_start":579,"line_end":579,"column_start":12,"column_end":20},"name":"as_luma8","qualname":"<DynamicImage>::as_luma8","value":"pub fn as_luma8(&Self) -> Option<&GrayImage>","parent":null,"children":[],"decl_id":null,"docs":" Return a reference to an 8bit Grayscale image\n","sig":null,"attributes":[{"value":"/ Return a reference to an 8bit Grayscale image","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\dynimage.rs","byte_start":400228,"byte_end":400277,"line_start":578,"line_end":578,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":1793},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\dynimage.rs","byte_start":400520,"byte_end":400532,"line_start":587,"line_end":587,"column_start":12,"column_end":24},"name":"as_mut_luma8","qualname":"<DynamicImage>::as_mut_luma8","value":"pub fn as_mut_luma8(&mut Self) -> Option<&mut GrayImage>","parent":null,"children":[],"decl_id":null,"docs":" Return a mutable reference to an 8bit Grayscale image\n","sig":null,"attributes":[{"value":"/ Return a mutable reference to an 8bit Grayscale image","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\dynimage.rs","byte_start":400451,"byte_end":400508,"line_start":586,"line_end":586,"column_start":5,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":1794},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\dynimage.rs","byte_start":400781,"byte_end":400795,"line_start":595,"line_end":595,"column_start":12,"column_end":26},"name":"as_luma_alpha8","qualname":"<DynamicImage>::as_luma_alpha8","value":"pub fn as_luma_alpha8(&Self) -> Option<&GrayAlphaImage>","parent":null,"children":[],"decl_id":null,"docs":" Return a reference to an 8bit Grayscale image with an alpha channel\n","sig":null,"attributes":[{"value":"/ Return a reference to an 8bit Grayscale image with an alpha channel","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\dynimage.rs","byte_start":400698,"byte_end":400769,"line_start":594,"line_end":594,"column_start":5,"column_end":76}}]},{"kind":"Method","id":{"krate":0,"index":1795},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\dynimage.rs","byte_start":401046,"byte_end":401064,"line_start":603,"line_end":603,"column_start":12,"column_end":30},"name":"as_mut_luma_alpha8","qualname":"<DynamicImage>::as_mut_luma_alpha8","value":"pub fn as_mut_luma_alpha8(&mut Self) -> Option<&mut GrayAlphaImage>","parent":null,"children":[],"decl_id":null,"docs":" Return a mutable reference to an 8bit Grayscale image with an alpha channel\n","sig":null,"attributes":[{"value":"/ Return a mutable reference to an 8bit Grayscale image with an alpha channel","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\dynimage.rs","byte_start":400955,"byte_end":401034,"line_start":602,"line_end":602,"column_start":5,"column_end":84}}]},{"kind":"Method","id":{"krate":0,"index":1796},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\dynimage.rs","byte_start":401292,"byte_end":401300,"line_start":611,"line_end":611,"column_start":12,"column_end":20},"name":"as_rgb16","qualname":"<DynamicImage>::as_rgb16","value":"pub fn as_rgb16(&Self) -> Option<&Rgb16Image>","parent":null,"children":[],"decl_id":null,"docs":" Return a reference to an 16bit RGB image\n","sig":null,"attributes":[{"value":"/ Return a reference to an 16bit RGB image","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\dynimage.rs","byte_start":401236,"byte_end":401280,"line_start":610,"line_end":610,"column_start":5,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":1797},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\dynimage.rs","byte_start":401519,"byte_end":401531,"line_start":619,"line_end":619,"column_start":12,"column_end":24},"name":"as_mut_rgb16","qualname":"<DynamicImage>::as_mut_rgb16","value":"pub fn as_mut_rgb16(&mut Self) -> Option<&mut Rgb16Image>","parent":null,"children":[],"decl_id":null,"docs":" Return a mutable reference to an 16bit RGB image\n","sig":null,"attributes":[{"value":"/ Return a mutable reference to an 16bit RGB image","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\dynimage.rs","byte_start":401455,"byte_end":401507,"line_start":618,"line_end":618,"column_start":5,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":1798},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\dynimage.rs","byte_start":401755,"byte_end":401764,"line_start":627,"line_end":627,"column_start":12,"column_end":21},"name":"as_rgba16","qualname":"<DynamicImage>::as_rgba16","value":"pub fn as_rgba16(&Self) -> Option<&Rgba16Image>","parent":null,"children":[],"decl_id":null,"docs":" Return a reference to an 16bit RGBA image\n","sig":null,"attributes":[{"value":"/ Return a reference to an 16bit RGBA image","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\dynimage.rs","byte_start":401698,"byte_end":401743,"line_start":626,"line_end":626,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":1799},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\dynimage.rs","byte_start":401986,"byte_end":401999,"line_start":635,"line_end":635,"column_start":12,"column_end":25},"name":"as_mut_rgba16","qualname":"<DynamicImage>::as_mut_rgba16","value":"pub fn as_mut_rgba16(&mut Self) -> Option<&mut Rgba16Image>","parent":null,"children":[],"decl_id":null,"docs":" Return a mutable reference to an 16bit RGBA image\n","sig":null,"attributes":[{"value":"/ Return a mutable reference to an 16bit RGBA image","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\dynimage.rs","byte_start":401921,"byte_end":401974,"line_start":634,"line_end":634,"column_start":5,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":1800},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\dynimage.rs","byte_start":402230,"byte_end":402239,"line_start":643,"line_end":643,"column_start":12,"column_end":21},"name":"as_luma16","qualname":"<DynamicImage>::as_luma16","value":"pub fn as_luma16(&Self) -> Option<&Gray16Image>","parent":null,"children":[],"decl_id":null,"docs":" Return a reference to an 16bit Grayscale image\n","sig":null,"attributes":[{"value":"/ Return a reference to an 16bit Grayscale image","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\dynimage.rs","byte_start":402168,"byte_end":402218,"line_start":642,"line_end":642,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":1801},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\dynimage.rs","byte_start":402466,"byte_end":402479,"line_start":651,"line_end":651,"column_start":12,"column_end":25},"name":"as_mut_luma16","qualname":"<DynamicImage>::as_mut_luma16","value":"pub fn as_mut_luma16(&mut Self) -> Option<&mut Gray16Image>","parent":null,"children":[],"decl_id":null,"docs":" Return a mutable reference to an 16bit Grayscale image\n","sig":null,"attributes":[{"value":"/ Return a mutable reference to an 16bit Grayscale image","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\dynimage.rs","byte_start":402396,"byte_end":402454,"line_start":650,"line_end":650,"column_start":5,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":1802},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\dynimage.rs","byte_start":402732,"byte_end":402747,"line_start":659,"line_end":659,"column_start":12,"column_end":27},"name":"as_luma_alpha16","qualname":"<DynamicImage>::as_luma_alpha16","value":"pub fn as_luma_alpha16(&Self) -> Option<&GrayAlpha16Image>","parent":null,"children":[],"decl_id":null,"docs":" Return a reference to an 16bit Grayscale image with an alpha channel\n","sig":null,"attributes":[{"value":"/ Return a reference to an 16bit Grayscale image with an alpha channel","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\dynimage.rs","byte_start":402648,"byte_end":402720,"line_start":658,"line_end":658,"column_start":5,"column_end":77}}]},{"kind":"Method","id":{"krate":0,"index":1803},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\dynimage.rs","byte_start":403002,"byte_end":403021,"line_start":667,"line_end":667,"column_start":12,"column_end":31},"name":"as_mut_luma_alpha16","qualname":"<DynamicImage>::as_mut_luma_alpha16","value":"pub fn as_mut_luma_alpha16(&mut Self) -> Option<&mut GrayAlpha16Image>","parent":null,"children":[],"decl_id":null,"docs":" Return a mutable reference to an 16bit Grayscale image with an alpha channel\n","sig":null,"attributes":[{"value":"/ Return a mutable reference to an 16bit Grayscale image with an alpha channel","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\dynimage.rs","byte_start":402910,"byte_end":402990,"line_start":666,"line_end":666,"column_start":5,"column_end":85}}]},{"kind":"Method","id":{"krate":0,"index":1804},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\dynimage.rs","byte_start":403280,"byte_end":403298,"line_start":675,"line_end":675,"column_start":12,"column_end":30},"name":"as_flat_samples_u8","qualname":"<DynamicImage>::as_flat_samples_u8","value":"pub fn as_flat_samples_u8(&Self) -> Option<FlatSamples<&[u8]>>","parent":null,"children":[],"decl_id":null,"docs":" Return a view on the raw sample buffer for 8 bit per channel images.\n","sig":null,"attributes":[{"value":"/ Return a view on the raw sample buffer for 8 bit per channel images.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\dynimage.rs","byte_start":403196,"byte_end":403268,"line_start":674,"line_end":674,"column_start":5,"column_end":77}}]},{"kind":"Method","id":{"krate":0,"index":1805},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\dynimage.rs","byte_start":403932,"byte_end":403951,"line_start":688,"line_end":688,"column_start":12,"column_end":31},"name":"as_flat_samples_u16","qualname":"<DynamicImage>::as_flat_samples_u16","value":"pub fn as_flat_samples_u16(&Self) -> Option<FlatSamples<&[u16]>>","parent":null,"children":[],"decl_id":null,"docs":" Return a view on the raw sample buffer for 16 bit per channel images.\n","sig":null,"attributes":[{"value":"/ Return a view on the raw sample buffer for 16 bit per channel images.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\dynimage.rs","byte_start":403847,"byte_end":403920,"line_start":687,"line_end":687,"column_start":5,"column_end":78}}]},{"kind":"Method","id":{"krate":0,"index":1806},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\dynimage.rs","byte_start":404431,"byte_end":404439,"line_start":699,"line_end":699,"column_start":12,"column_end":20},"name":"as_bytes","qualname":"<DynamicImage>::as_bytes","value":"pub fn as_bytes(&Self) -> &[u8]","parent":null,"children":[],"decl_id":null,"docs":" Return this image's pixels as a native endian byte slice.\n","sig":null,"attributes":[{"value":"/ Return this image's pixels as a native endian byte slice.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\dynimage.rs","byte_start":404358,"byte_end":404419,"line_start":698,"line_end":698,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":1807},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\dynimage.rs","byte_start":404674,"byte_end":404684,"line_start":706,"line_end":706,"column_start":12,"column_end":22},"name":"into_bytes","qualname":"<DynamicImage>::into_bytes","value":"pub fn into_bytes(Self) -> Vec<u8>","parent":null,"children":[],"decl_id":null,"docs":" Return this image's pixels as a byte vector. If the `ImageBuffer`\n container is `Vec<u8>`, this operation is free. Otherwise, a copy\n is returned.\n","sig":null,"attributes":[{"value":"/ Return this image's pixels as a byte vector. If the `ImageBuffer`","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\dynimage.rs","byte_start":404498,"byte_end":404567,"line_start":703,"line_end":703,"column_start":5,"column_end":74}},{"value":"/ container is `Vec<u8>`, this operation is free. Otherwise, a copy","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\dynimage.rs","byte_start":404572,"byte_end":404641,"line_start":704,"line_end":704,"column_start":5,"column_end":74}},{"value":"/ is returned.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\dynimage.rs","byte_start":404646,"byte_end":404662,"line_start":705,"line_end":705,"column_start":5,"column_end":21}}]},{"kind":"Method","id":{"krate":0,"index":1808},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\dynimage.rs","byte_start":404816,"byte_end":404824,"line_start":711,"line_end":711,"column_start":12,"column_end":20},"name":"to_bytes","qualname":"<DynamicImage>::to_bytes","value":"pub fn to_bytes(&Self) -> Vec<u8>","parent":null,"children":[],"decl_id":null,"docs":" Return a copy of this image's pixels as a byte vector.\n","sig":null,"attributes":[{"value":"/ Return a copy of this image's pixels as a byte vector.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\dynimage.rs","byte_start":404746,"byte_end":404804,"line_start":710,"line_end":710,"column_start":5,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":1809},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\dynimage.rs","byte_start":404932,"byte_end":404937,"line_start":716,"line_end":716,"column_start":12,"column_end":17},"name":"color","qualname":"<DynamicImage>::color","value":"pub fn color(&Self) -> color::ColorType","parent":null,"children":[],"decl_id":null,"docs":" Return this image's color type.\n","sig":null,"attributes":[{"value":"/ Return this image's color type.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\dynimage.rs","byte_start":404885,"byte_end":404920,"line_start":715,"line_end":715,"column_start":5,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":1810},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\dynimage.rs","byte_start":405741,"byte_end":405750,"line_start":732,"line_end":732,"column_start":12,"column_end":21},"name":"grayscale","qualname":"<DynamicImage>::grayscale","value":"pub fn grayscale(&Self) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Return a grayscale version of this image.\n","sig":null,"attributes":[{"value":"/ Return a grayscale version of this image.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\dynimage.rs","byte_start":405684,"byte_end":405729,"line_start":731,"line_end":731,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":1811},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\dynimage.rs","byte_start":406856,"byte_end":406862,"line_start":749,"line_end":749,"column_start":12,"column_end":18},"name":"invert","qualname":"<DynamicImage>::invert","value":"pub fn invert(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":" Invert the colors of this image.\n This method operates inplace.\n","sig":null,"attributes":[{"value":"/ Invert the colors of this image.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\dynimage.rs","byte_start":406770,"byte_end":406806,"line_start":747,"line_end":747,"column_start":5,"column_end":41}},{"value":"/ This method operates inplace.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\dynimage.rs","byte_start":406811,"byte_end":406844,"line_start":748,"line_end":748,"column_start":5,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":1812},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\dynimage.rs","byte_start":407226,"byte_end":407232,"line_start":757,"line_end":757,"column_start":12,"column_end":18},"name":"resize","qualname":"<DynamicImage>::resize","value":"pub fn resize(&Self, u32, u32, imageops::FilterType) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Resize this image using the specified filter algorithm.\n Returns a new image. The image's aspect ratio is preserved.\n The image is scaled to the maximum possible size that fits\n within the bounds specified by ```nwidth``` and ```nheight```.\n","sig":null,"attributes":[{"value":"/ Resize this image using the specified filter algorithm.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\dynimage.rs","byte_start":406949,"byte_end":407008,"line_start":753,"line_end":753,"column_start":5,"column_end":64}},{"value":"/ Returns a new image. The image's aspect ratio is preserved.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\dynimage.rs","byte_start":407013,"byte_end":407076,"line_start":754,"line_end":754,"column_start":5,"column_end":68}},{"value":"/ The image is scaled to the maximum possible size that fits","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\dynimage.rs","byte_start":407081,"byte_end":407143,"line_start":755,"line_end":755,"column_start":5,"column_end":67}},{"value":"/ within the bounds specified by ```nwidth``` and ```nheight```.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\dynimage.rs","byte_start":407148,"byte_end":407214,"line_start":756,"line_end":756,"column_start":5,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":1813},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\dynimage.rs","byte_start":407696,"byte_end":407708,"line_start":767,"line_end":767,"column_start":12,"column_end":24},"name":"resize_exact","qualname":"<DynamicImage>::resize_exact","value":"pub fn resize_exact(&Self, u32, u32, imageops::FilterType) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Resize this image using the specified filter algorithm.\n Returns a new image. Does not preserve aspect ratio.\n ```nwidth``` and ```nheight``` are the new image's dimensions\n","sig":null,"attributes":[{"value":"/ Resize this image using the specified filter algorithm.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\dynimage.rs","byte_start":407494,"byte_end":407553,"line_start":764,"line_end":764,"column_start":5,"column_end":64}},{"value":"/ Returns a new image. Does not preserve aspect ratio.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\dynimage.rs","byte_start":407558,"byte_end":407614,"line_start":765,"line_end":765,"column_start":5,"column_end":61}},{"value":"/ ```nwidth``` and ```nheight``` are the new image's dimensions","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\dynimage.rs","byte_start":407619,"byte_end":407684,"line_start":766,"line_end":766,"column_start":5,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":1814},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\dynimage.rs","byte_start":408399,"byte_end":408408,"line_start":784,"line_end":784,"column_start":12,"column_end":21},"name":"thumbnail","qualname":"<DynamicImage>::thumbnail","value":"pub fn thumbnail(&Self, u32, u32) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Scale this image down to fit within a specific size.\n Returns a new image. The image's aspect ratio is preserved.\n The image is scaled to the maximum possible size that fits\n within the bounds specified by ```nwidth``` and ```nheight```.","sig":null,"attributes":[{"value":"/ Scale this image down to fit within a specific size.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\dynimage.rs","byte_start":407924,"byte_end":407980,"line_start":776,"line_end":776,"column_start":5,"column_end":61}},{"value":"/ Returns a new image. The image's aspect ratio is preserved.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\dynimage.rs","byte_start":407985,"byte_end":408048,"line_start":777,"line_end":777,"column_start":5,"column_end":68}},{"value":"/ The image is scaled to the maximum possible size that fits","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\dynimage.rs","byte_start":408053,"byte_end":408115,"line_start":778,"line_end":778,"column_start":5,"column_end":67}},{"value":"/ within the bounds specified by ```nwidth``` and ```nheight```.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\dynimage.rs","byte_start":408120,"byte_end":408186,"line_start":779,"line_end":779,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\dynimage.rs","byte_start":408191,"byte_end":408194,"line_start":780,"line_end":780,"column_start":5,"column_end":8}},{"value":"/ This method uses a fast integer algorithm where each source","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\dynimage.rs","byte_start":408199,"byte_end":408262,"line_start":781,"line_end":781,"column_start":5,"column_end":68}},{"value":"/ pixel contributes to exactly one target pixel.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\dynimage.rs","byte_start":408267,"byte_end":408317,"line_start":782,"line_end":782,"column_start":5,"column_end":55}},{"value":"/ May give aliasing artifacts if new size is close to old size.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\dynimage.rs","byte_start":408322,"byte_end":408387,"line_start":783,"line_end":783,"column_start":5,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":1815},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\dynimage.rs","byte_start":409016,"byte_end":409031,"line_start":796,"line_end":796,"column_start":12,"column_end":27},"name":"thumbnail_exact","qualname":"<DynamicImage>::thumbnail_exact","value":"pub fn thumbnail_exact(&Self, u32, u32) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Scale this image down to a specific size.\n Returns a new image. Does not preserve aspect ratio.\n ```nwidth``` and ```nheight``` are the new image's dimensions.\n This method uses a fast integer algorithm where each source\n pixel contributes to exactly one target pixel.\n May give aliasing artifacts if new size is close to old size.\n","sig":null,"attributes":[{"value":"/ Scale this image down to a specific size.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\dynimage.rs","byte_start":408634,"byte_end":408679,"line_start":790,"line_end":790,"column_start":5,"column_end":50}},{"value":"/ Returns a new image. Does not preserve aspect ratio.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\dynimage.rs","byte_start":408684,"byte_end":408740,"line_start":791,"line_end":791,"column_start":5,"column_end":61}},{"value":"/ ```nwidth``` and ```nheight``` are the new image's dimensions.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\dynimage.rs","byte_start":408745,"byte_end":408811,"line_start":792,"line_end":792,"column_start":5,"column_end":71}},{"value":"/ This method uses a fast integer algorithm where each source","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\dynimage.rs","byte_start":408816,"byte_end":408879,"line_start":793,"line_end":793,"column_start":5,"column_end":68}},{"value":"/ pixel contributes to exactly one target pixel.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\dynimage.rs","byte_start":408884,"byte_end":408934,"line_start":794,"line_end":794,"column_start":5,"column_end":55}},{"value":"/ May give aliasing artifacts if new size is close to old size.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\dynimage.rs","byte_start":408939,"byte_end":409004,"line_start":795,"line_end":795,"column_start":5,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":1816},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\dynimage.rs","byte_start":409551,"byte_end":409565,"line_start":806,"line_end":806,"column_start":12,"column_end":26},"name":"resize_to_fill","qualname":"<DynamicImage>::resize_to_fill","value":"pub fn resize_to_fill(&Self, u32, u32, imageops::FilterType) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Resize this image using the specified filter algorithm.\n Returns a new image. The image's aspect ratio is preserved.\n The image is scaled to the maximum possible size that fits\n within the larger (relative to aspect ratio) of the bounds\n specified by ```nwidth``` and ```nheight```, then cropped to\n fit within the other bound.\n","sig":null,"attributes":[{"value":"/ Resize this image using the specified filter algorithm.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\dynimage.rs","byte_start":409173,"byte_end":409232,"line_start":800,"line_end":800,"column_start":5,"column_end":64}},{"value":"/ Returns a new image. The image's aspect ratio is preserved.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\dynimage.rs","byte_start":409237,"byte_end":409300,"line_start":801,"line_end":801,"column_start":5,"column_end":68}},{"value":"/ The image is scaled to the maximum possible size that fits","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\dynimage.rs","byte_start":409305,"byte_end":409367,"line_start":802,"line_end":802,"column_start":5,"column_end":67}},{"value":"/ within the larger (relative to aspect ratio) of the bounds","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\dynimage.rs","byte_start":409372,"byte_end":409434,"line_start":803,"line_end":803,"column_start":5,"column_end":67}},{"value":"/ specified by ```nwidth``` and ```nheight```, then cropped to","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\dynimage.rs","byte_start":409439,"byte_end":409503,"line_start":804,"line_end":804,"column_start":5,"column_end":69}},{"value":"/ fit within the other bound.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\dynimage.rs","byte_start":409508,"byte_end":409539,"line_start":805,"line_end":805,"column_start":5,"column_end":36}}]},{"kind":"Method","id":{"krate":0,"index":1817},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\dynimage.rs","byte_start":410385,"byte_end":410389,"line_start":829,"line_end":829,"column_start":12,"column_end":16},"name":"blur","qualname":"<DynamicImage>::blur","value":"pub fn blur(&Self, f32) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Performs a Gaussian blur on this image.\n ```sigma``` is a measure of how much to blur by.\n","sig":null,"attributes":[{"value":"/ Performs a Gaussian blur on this image.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\dynimage.rs","byte_start":410273,"byte_end":410316,"line_start":827,"line_end":827,"column_start":5,"column_end":48}},{"value":"/ ```sigma``` is a measure of how much to blur by.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\dynimage.rs","byte_start":410321,"byte_end":410373,"line_start":828,"line_end":828,"column_start":5,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":1818},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\dynimage.rs","byte_start":410767,"byte_end":410776,"line_start":838,"line_end":838,"column_start":12,"column_end":21},"name":"unsharpen","qualname":"<DynamicImage>::unsharpen","value":"pub fn unsharpen(&Self, f32, i32) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Performs an unsharpen mask on this image.\n ```sigma``` is the amount to blur the image by.\n ```threshold``` is a control of how much to sharpen.","sig":null,"attributes":[{"value":"/ Performs an unsharpen mask on this image.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\dynimage.rs","byte_start":410501,"byte_end":410546,"line_start":833,"line_end":833,"column_start":5,"column_end":50}},{"value":"/ ```sigma``` is the amount to blur the image by.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\dynimage.rs","byte_start":410551,"byte_end":410602,"line_start":834,"line_end":834,"column_start":5,"column_end":56}},{"value":"/ ```threshold``` is a control of how much to sharpen.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\dynimage.rs","byte_start":410607,"byte_end":410663,"line_start":835,"line_end":835,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\dynimage.rs","byte_start":410668,"byte_end":410671,"line_start":836,"line_end":836,"column_start":5,"column_end":8}},{"value":"/ See <https://en.wikipedia.org/wiki/Unsharp_masking#Digital_unsharp_masking>","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\dynimage.rs","byte_start":410676,"byte_end":410755,"line_start":837,"line_end":837,"column_start":5,"column_end":84}}]},{"kind":"Method","id":{"krate":0,"index":1819},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\dynimage.rs","byte_start":410985,"byte_end":410994,"line_start":843,"line_end":843,"column_start":12,"column_end":21},"name":"filter3x3","qualname":"<DynamicImage>::filter3x3","value":"pub fn filter3x3(&Self, &[f32]) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Filters this image with the specified 3x3 kernel.\n","sig":null,"attributes":[{"value":"/ Filters this image with the specified 3x3 kernel.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\dynimage.rs","byte_start":410920,"byte_end":410973,"line_start":842,"line_end":842,"column_start":5,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":1820},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\dynimage.rs","byte_start":411404,"byte_end":411419,"line_start":854,"line_end":854,"column_start":12,"column_end":27},"name":"adjust_contrast","qualname":"<DynamicImage>::adjust_contrast","value":"pub fn adjust_contrast(&Self, f32) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Adjust the contrast of this image.\n ```contrast``` is the amount to adjust the contrast by.\n Negative values decrease the contrast and positive values increase the contrast.\n","sig":null,"attributes":[{"value":"/ Adjust the contrast of this image.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\dynimage.rs","byte_start":411201,"byte_end":411239,"line_start":851,"line_end":851,"column_start":5,"column_end":43}},{"value":"/ ```contrast``` is the amount to adjust the contrast by.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\dynimage.rs","byte_start":411244,"byte_end":411303,"line_start":852,"line_end":852,"column_start":5,"column_end":64}},{"value":"/ Negative values decrease the contrast and positive values increase the contrast.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\dynimage.rs","byte_start":411308,"byte_end":411392,"line_start":853,"line_end":853,"column_start":5,"column_end":89}}]},{"kind":"Method","id":{"krate":0,"index":1821},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\dynimage.rs","byte_start":411719,"byte_end":411727,"line_start":861,"line_end":861,"column_start":12,"column_end":20},"name":"brighten","qualname":"<DynamicImage>::brighten","value":"pub fn brighten(&Self, i32) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Brighten the pixels of this image.\n ```value``` is the amount to brighten each pixel by.\n Negative values decrease the brightness and positive values increase it.\n","sig":null,"attributes":[{"value":"/ Brighten the pixels of this image.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\dynimage.rs","byte_start":411527,"byte_end":411565,"line_start":858,"line_end":858,"column_start":5,"column_end":43}},{"value":"/ ```value``` is the amount to brighten each pixel by.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\dynimage.rs","byte_start":411570,"byte_end":411626,"line_start":859,"line_end":859,"column_start":5,"column_end":61}},{"value":"/ Negative values decrease the brightness and positive values increase it.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\dynimage.rs","byte_start":411631,"byte_end":411707,"line_start":860,"line_end":860,"column_start":5,"column_end":81}}]},{"kind":"Method","id":{"krate":0,"index":1822},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\dynimage.rs","byte_start":412075,"byte_end":412084,"line_start":869,"line_end":869,"column_start":12,"column_end":21},"name":"huerotate","qualname":"<DynamicImage>::huerotate","value":"pub fn huerotate(&Self, i32) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Hue rotate the supplied image.\n `value` is the degrees to rotate each pixel by.\n 0 and 360 do nothing, the rest rotates by the given degree value.\n just like the css webkit filter hue-rotate(180)\n","sig":null,"attributes":[{"value":"/ Hue rotate the supplied image.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\dynimage.rs","byte_start":411843,"byte_end":411877,"line_start":865,"line_end":865,"column_start":5,"column_end":39}},{"value":"/ `value` is the degrees to rotate each pixel by.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\dynimage.rs","byte_start":411882,"byte_end":411933,"line_start":866,"line_end":866,"column_start":5,"column_end":56}},{"value":"/ 0 and 360 do nothing, the rest rotates by the given degree value.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\dynimage.rs","byte_start":411938,"byte_end":412007,"line_start":867,"line_end":867,"column_start":5,"column_end":74}},{"value":"/ just like the css webkit filter hue-rotate(180)","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\dynimage.rs","byte_start":412012,"byte_end":412063,"line_start":868,"line_end":868,"column_start":5,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":1823},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\dynimage.rs","byte_start":412243,"byte_end":412248,"line_start":874,"line_end":874,"column_start":12,"column_end":17},"name":"flipv","qualname":"<DynamicImage>::flipv","value":"pub fn flipv(&Self) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Flip this image vertically\n","sig":null,"attributes":[{"value":"/ Flip this image vertically","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\dynimage.rs","byte_start":412201,"byte_end":412231,"line_start":873,"line_end":873,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":1824},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\dynimage.rs","byte_start":412394,"byte_end":412399,"line_start":879,"line_end":879,"column_start":12,"column_end":17},"name":"fliph","qualname":"<DynamicImage>::fliph","value":"pub fn fliph(&Self) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Flip this image horizontally\n","sig":null,"attributes":[{"value":"/ Flip this image horizontally","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\dynimage.rs","byte_start":412350,"byte_end":412382,"line_start":878,"line_end":878,"column_start":5,"column_end":37}}]},{"kind":"Method","id":{"krate":0,"index":1825},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\dynimage.rs","byte_start":412558,"byte_end":412566,"line_start":884,"line_end":884,"column_start":12,"column_end":20},"name":"rotate90","qualname":"<DynamicImage>::rotate90","value":"pub fn rotate90(&Self) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Rotate this image 90 degrees clockwise.\n","sig":null,"attributes":[{"value":"/ Rotate this image 90 degrees clockwise.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\dynimage.rs","byte_start":412503,"byte_end":412546,"line_start":883,"line_end":883,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":1826},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\dynimage.rs","byte_start":412719,"byte_end":412728,"line_start":889,"line_end":889,"column_start":12,"column_end":21},"name":"rotate180","qualname":"<DynamicImage>::rotate180","value":"pub fn rotate180(&Self) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Rotate this image 180 degrees clockwise.\n","sig":null,"attributes":[{"value":"/ Rotate this image 180 degrees clockwise.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\dynimage.rs","byte_start":412663,"byte_end":412707,"line_start":888,"line_end":888,"column_start":5,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":1827},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\dynimage.rs","byte_start":412882,"byte_end":412891,"line_start":894,"line_end":894,"column_start":12,"column_end":21},"name":"rotate270","qualname":"<DynamicImage>::rotate270","value":"pub fn rotate270(&Self) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Rotate this image 270 degrees clockwise.\n","sig":null,"attributes":[{"value":"/ Rotate this image 270 degrees clockwise.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\dynimage.rs","byte_start":412826,"byte_end":412870,"line_start":893,"line_end":893,"column_start":5,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":1828},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\dynimage.rs","byte_start":413046,"byte_end":413054,"line_start":899,"line_end":899,"column_start":12,"column_end":20},"name":"write_to","qualname":"<DynamicImage>::write_to","value":"pub fn write_to<W: Write, F: Into<ImageOutputFormat>>(&Self, &mut W, F)\n-> ImageResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Encode this image and write it to ```w```\n","sig":null,"attributes":[{"value":"/ Encode this image and write it to ```w```","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\dynimage.rs","byte_start":412989,"byte_end":413034,"line_start":898,"line_end":898,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":1831},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\dynimage.rs","byte_start":417150,"byte_end":417154,"line_start":1008,"line_end":1008,"column_start":12,"column_end":16},"name":"save","qualname":"<DynamicImage>::save","value":"pub fn save<Q>(&Self, Q) -> ImageResult<()> where Q: AsRef<Path>","parent":null,"children":[],"decl_id":null,"docs":" Saves the buffer to a file at the path specified.","sig":null,"attributes":[{"value":"/ Saves the buffer to a file at the path specified.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\dynimage.rs","byte_start":417016,"byte_end":417069,"line_start":1005,"line_end":1005,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\dynimage.rs","byte_start":417074,"byte_end":417077,"line_start":1006,"line_end":1006,"column_start":5,"column_end":8}},{"value":"/ The image format is derived from the file extension.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\dynimage.rs","byte_start":417082,"byte_end":417138,"line_start":1007,"line_end":1007,"column_start":5,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":1833},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\dynimage.rs","byte_start":417526,"byte_end":417542,"line_start":1022,"line_end":1022,"column_start":12,"column_end":28},"name":"save_with_format","qualname":"<DynamicImage>::save_with_format","value":"pub fn save_with_format<Q>(&Self, Q, ImageFormat) -> ImageResult<()> where\nQ: AsRef<Path>","parent":null,"children":[],"decl_id":null,"docs":" Saves the buffer to a file at the specified path in\n the specified format.","sig":null,"attributes":[{"value":"/ Saves the buffer to a file at the specified path in","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\dynimage.rs","byte_start":417319,"byte_end":417374,"line_start":1017,"line_end":1017,"column_start":5,"column_end":60}},{"value":"/ the specified format.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\dynimage.rs","byte_start":417379,"byte_end":417404,"line_start":1018,"line_end":1018,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\dynimage.rs","byte_start":417409,"byte_end":417412,"line_start":1019,"line_end":1019,"column_start":5,"column_end":8}},{"value":"/ See [`save_buffer_with_format`](fn.save_buffer_with_format.html) for","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\dynimage.rs","byte_start":417417,"byte_end":417489,"line_start":1020,"line_end":1020,"column_start":5,"column_end":77}},{"value":"/ supported types.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\dynimage.rs","byte_start":417494,"byte_end":417514,"line_start":1021,"line_end":1021,"column_start":5,"column_end":25}}]},{"kind":"Function","id":{"krate":0,"index":1856},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\dynimage.rs","byte_start":425633,"byte_end":425637,"line_start":1231,"line_end":1231,"column_start":8,"column_end":12},"name":"open","qualname":"::dynimage::open","value":"pub fn open<P>(P) -> ImageResult<DynamicImage> where P: AsRef<Path>","parent":null,"children":[],"decl_id":null,"docs":" Open the image located at the path specified.\n The image's format is determined from the path's file extension.","sig":null,"attributes":[{"value":"/ Open the image located at the path specified.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\dynimage.rs","byte_start":425331,"byte_end":425380,"line_start":1224,"line_end":1224,"column_start":1,"column_end":50}},{"value":"/ The image's format is determined from the path's file extension.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\dynimage.rs","byte_start":425381,"byte_end":425449,"line_start":1225,"line_end":1225,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\dynimage.rs","byte_start":425450,"byte_end":425453,"line_start":1226,"line_end":1226,"column_start":1,"column_end":4}},{"value":"/ Try [`io::Reader`] for more advanced uses, including guessing the format based on the file's","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\dynimage.rs","byte_start":425454,"byte_end":425550,"line_start":1227,"line_end":1227,"column_start":1,"column_end":97}},{"value":"/ content before its path.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\dynimage.rs","byte_start":425551,"byte_end":425579,"line_start":1228,"line_end":1228,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\dynimage.rs","byte_start":425580,"byte_end":425583,"line_start":1229,"line_end":1229,"column_start":1,"column_end":4}},{"value":"/ [`io::Reader`]: io/struct.Reader.html","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\dynimage.rs","byte_start":425584,"byte_end":425625,"line_start":1230,"line_end":1230,"column_start":1,"column_end":42}}]},{"kind":"Function","id":{"krate":0,"index":1858},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\dynimage.rs","byte_start":426192,"byte_end":426208,"line_start":1246,"line_end":1246,"column_start":8,"column_end":24},"name":"image_dimensions","qualname":"::dynimage::image_dimensions","value":"pub fn image_dimensions<P>(P) -> ImageResult<(u32, u32)> where P: AsRef<Path>","parent":null,"children":[],"decl_id":null,"docs":" Read the dimensions of the image located at the specified path.\n This is faster than fully loading the image and then getting its dimensions.","sig":null,"attributes":[{"value":"/ Read the dimensions of the image located at the specified path.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\dynimage.rs","byte_start":425827,"byte_end":425894,"line_start":1239,"line_end":1239,"column_start":1,"column_end":68}},{"value":"/ This is faster than fully loading the image and then getting its dimensions.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\dynimage.rs","byte_start":425895,"byte_end":425975,"line_start":1240,"line_end":1240,"column_start":1,"column_end":81}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\dynimage.rs","byte_start":425976,"byte_end":425979,"line_start":1241,"line_end":1241,"column_start":1,"column_end":4}},{"value":"/ Try [`io::Reader`] for more advanced uses, including guessing the format based on the file's","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\dynimage.rs","byte_start":425980,"byte_end":426076,"line_start":1242,"line_end":1242,"column_start":1,"column_end":97}},{"value":"/ content before its path or manually supplying the format.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\dynimage.rs","byte_start":426077,"byte_end":426138,"line_start":1243,"line_end":1243,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\dynimage.rs","byte_start":426139,"byte_end":426142,"line_start":1244,"line_end":1244,"column_start":1,"column_end":4}},{"value":"/ [`io::Reader`]: io/struct.Reader.html","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\dynimage.rs","byte_start":426143,"byte_end":426184,"line_start":1245,"line_end":1245,"column_start":1,"column_end":42}}]},{"kind":"Function","id":{"krate":0,"index":1860},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\dynimage.rs","byte_start":426783,"byte_end":426794,"line_start":1261,"line_end":1261,"column_start":8,"column_end":19},"name":"save_buffer","qualname":"::dynimage::save_buffer","value":"pub fn save_buffer<P>(P, &[u8], u32, u32, color::ColorType) -> ImageResult<()>\nwhere P: AsRef<Path>","parent":null,"children":[],"decl_id":null,"docs":" Saves the supplied buffer to a file at the path specified.","sig":null,"attributes":[{"value":"/ Saves the supplied buffer to a file at the path specified.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\dynimage.rs","byte_start":426408,"byte_end":426470,"line_start":1254,"line_end":1254,"column_start":1,"column_end":63}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\dynimage.rs","byte_start":426471,"byte_end":426474,"line_start":1255,"line_end":1255,"column_start":1,"column_end":4}},{"value":"/ The image format is derived from the file extension. The buffer is assumed to have","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\dynimage.rs","byte_start":426475,"byte_end":426561,"line_start":1256,"line_end":1256,"column_start":1,"column_end":87}},{"value":"/ the correct format according to the specified color type.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\dynimage.rs","byte_start":426562,"byte_end":426623,"line_start":1257,"line_end":1257,"column_start":1,"column_end":62}},{"value":"/ This will lead to corrupted files if the buffer contains malformed data. Currently only","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\dynimage.rs","byte_start":426625,"byte_end":426716,"line_start":1259,"line_end":1259,"column_start":1,"column_end":92}},{"value":"/ jpeg, png, ico, pnm, bmp and tiff files are supported.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\dynimage.rs","byte_start":426717,"byte_end":426775,"line_start":1260,"line_end":1260,"column_start":1,"column_end":59}}]},{"kind":"Function","id":{"krate":0,"index":1862},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\dynimage.rs","byte_start":427448,"byte_end":427471,"line_start":1283,"line_end":1283,"column_start":8,"column_end":31},"name":"save_buffer_with_format","qualname":"::dynimage::save_buffer_with_format","value":"pub fn save_buffer_with_format<P>(P, &[u8], u32, u32, color::ColorType,\n                                  ImageFormat) -> ImageResult<()> where\nP: AsRef<Path>","parent":null,"children":[],"decl_id":null,"docs":" Saves the supplied buffer to a file at the path specified\n in the specified format.","sig":null,"attributes":[{"value":"/ Saves the supplied buffer to a file at the path specified","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\dynimage.rs","byte_start":427100,"byte_end":427161,"line_start":1275,"line_end":1275,"column_start":1,"column_end":62}},{"value":"/ in the specified format.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\dynimage.rs","byte_start":427162,"byte_end":427190,"line_start":1276,"line_end":1276,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\dynimage.rs","byte_start":427191,"byte_end":427194,"line_start":1277,"line_end":1277,"column_start":1,"column_end":4}},{"value":"/ The buffer is assumed to have the correct format according","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\dynimage.rs","byte_start":427195,"byte_end":427257,"line_start":1278,"line_end":1278,"column_start":1,"column_end":63}},{"value":"/ to the specified color type.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\dynimage.rs","byte_start":427258,"byte_end":427290,"line_start":1279,"line_end":1279,"column_start":1,"column_end":33}},{"value":"/ This will lead to corrupted files if the buffer contains","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\dynimage.rs","byte_start":427291,"byte_end":427351,"line_start":1280,"line_end":1280,"column_start":1,"column_end":61}},{"value":"/ malformed data. Currently only jpeg, png, ico, bmp and","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\dynimage.rs","byte_start":427352,"byte_end":427410,"line_start":1281,"line_end":1281,"column_start":1,"column_end":59}},{"value":"/ tiff files are supported.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\dynimage.rs","byte_start":427411,"byte_end":427440,"line_start":1282,"line_end":1282,"column_start":1,"column_end":30}}]},{"kind":"Function","id":{"krate":0,"index":1864},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\dynimage.rs","byte_start":428034,"byte_end":428050,"line_start":1306,"line_end":1306,"column_start":8,"column_end":24},"name":"load_from_memory","qualname":"::dynimage::load_from_memory","value":"pub fn load_from_memory(&[u8]) -> ImageResult<DynamicImage>","parent":null,"children":[],"decl_id":null,"docs":" Create a new image from a byte slice","sig":null,"attributes":[{"value":"/ Create a new image from a byte slice","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\dynimage.rs","byte_start":427790,"byte_end":427830,"line_start":1298,"line_end":1298,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\dynimage.rs","byte_start":427831,"byte_end":427834,"line_start":1299,"line_end":1299,"column_start":1,"column_end":4}},{"value":"/ Makes an educated guess about the image format.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\dynimage.rs","byte_start":427835,"byte_end":427886,"line_start":1300,"line_end":1300,"column_start":1,"column_end":52}},{"value":"/ TGA is not supported by this function.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\dynimage.rs","byte_start":427887,"byte_end":427929,"line_start":1301,"line_end":1301,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\dynimage.rs","byte_start":427930,"byte_end":427933,"line_start":1302,"line_end":1302,"column_start":1,"column_end":4}},{"value":"/ Try [`io::Reader`] for more advanced uses.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\dynimage.rs","byte_start":427934,"byte_end":427980,"line_start":1303,"line_end":1303,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\dynimage.rs","byte_start":427981,"byte_end":427984,"line_start":1304,"line_end":1304,"column_start":1,"column_end":4}},{"value":"/ [`io::Reader`]: io/struct.Reader.html","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\dynimage.rs","byte_start":427985,"byte_end":428026,"line_start":1305,"line_end":1305,"column_start":1,"column_end":42}}]},{"kind":"Function","id":{"krate":0,"index":1865},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\dynimage.rs","byte_start":428532,"byte_end":428560,"line_start":1321,"line_end":1321,"column_start":8,"column_end":36},"name":"load_from_memory_with_format","qualname":"::dynimage::load_from_memory_with_format","value":"pub fn load_from_memory_with_format(&[u8], ImageFormat)\n-> ImageResult<DynamicImage>","parent":null,"children":[],"decl_id":null,"docs":" Create a new image from a byte slice","sig":null,"attributes":[{"value":"/ Create a new image from a byte slice","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\dynimage.rs","byte_start":428205,"byte_end":428245,"line_start":1311,"line_end":1311,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\dynimage.rs","byte_start":428246,"byte_end":428249,"line_start":1312,"line_end":1312,"column_start":1,"column_end":4}},{"value":"/ This is just a simple wrapper that constructs an `std::io::Cursor` around the buffer and then","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\dynimage.rs","byte_start":428250,"byte_end":428347,"line_start":1313,"line_end":1313,"column_start":1,"column_end":98}},{"value":"/ calls `load` with that reader.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\dynimage.rs","byte_start":428348,"byte_end":428382,"line_start":1314,"line_end":1314,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\dynimage.rs","byte_start":428383,"byte_end":428386,"line_start":1315,"line_end":1315,"column_start":1,"column_end":4}},{"value":"/ Try [`io::Reader`] for more advanced uses.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\dynimage.rs","byte_start":428387,"byte_end":428433,"line_start":1316,"line_end":1316,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\dynimage.rs","byte_start":428434,"byte_end":428437,"line_start":1317,"line_end":1317,"column_start":1,"column_end":4}},{"value":"/ [`load`]: fn.load.html","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\dynimage.rs","byte_start":428438,"byte_end":428464,"line_start":1318,"line_end":1318,"column_start":1,"column_end":27}},{"value":"/ [`io::Reader`]: io/struct.Reader.html","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\dynimage.rs","byte_start":428465,"byte_end":428506,"line_start":1319,"line_end":1319,"column_start":1,"column_end":42}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\dynimage.rs","byte_start":428507,"byte_end":428524,"line_start":1320,"line_end":1320,"column_start":1,"column_end":18}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3283},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\image.rs","byte_start":430388,"byte_end":430391,"line_start":26,"line_end":26,"column_start":5,"column_end":8},"name":"Png","qualname":"::image::ImageFormat::Png","value":"ImageFormat::Png","parent":{"krate":0,"index":3282},"children":[],"decl_id":null,"docs":" An Image in PNG Format\n","sig":null,"attributes":[{"value":"/ An Image in PNG Format","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\image.rs","byte_start":430357,"byte_end":430383,"line_start":25,"line_end":25,"column_start":5,"column_end":31}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3285},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\image.rs","byte_start":430430,"byte_end":430434,"line_start":29,"line_end":29,"column_start":5,"column_end":9},"name":"Jpeg","qualname":"::image::ImageFormat::Jpeg","value":"ImageFormat::Jpeg","parent":{"krate":0,"index":3282},"children":[],"decl_id":null,"docs":" An Image in JPEG Format\n","sig":null,"attributes":[{"value":"/ An Image in JPEG Format","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\image.rs","byte_start":430398,"byte_end":430425,"line_start":28,"line_end":28,"column_start":5,"column_end":32}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3287},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\image.rs","byte_start":430472,"byte_end":430475,"line_start":32,"line_end":32,"column_start":5,"column_end":8},"name":"Gif","qualname":"::image::ImageFormat::Gif","value":"ImageFormat::Gif","parent":{"krate":0,"index":3282},"children":[],"decl_id":null,"docs":" An Image in GIF Format\n","sig":null,"attributes":[{"value":"/ An Image in GIF Format","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\image.rs","byte_start":430441,"byte_end":430467,"line_start":31,"line_end":31,"column_start":5,"column_end":31}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3289},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\image.rs","byte_start":430514,"byte_end":430518,"line_start":35,"line_end":35,"column_start":5,"column_end":9},"name":"WebP","qualname":"::image::ImageFormat::WebP","value":"ImageFormat::WebP","parent":{"krate":0,"index":3282},"children":[],"decl_id":null,"docs":" An Image in WEBP Format\n","sig":null,"attributes":[{"value":"/ An Image in WEBP Format","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\image.rs","byte_start":430482,"byte_end":430509,"line_start":34,"line_end":34,"column_start":5,"column_end":32}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3291},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\image.rs","byte_start":430564,"byte_end":430567,"line_start":38,"line_end":38,"column_start":5,"column_end":8},"name":"Pnm","qualname":"::image::ImageFormat::Pnm","value":"ImageFormat::Pnm","parent":{"krate":0,"index":3282},"children":[],"decl_id":null,"docs":" An Image in general PNM Format\n","sig":null,"attributes":[{"value":"/ An Image in general PNM Format","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\image.rs","byte_start":430525,"byte_end":430559,"line_start":37,"line_end":37,"column_start":5,"column_end":39}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3293},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\image.rs","byte_start":430606,"byte_end":430610,"line_start":41,"line_end":41,"column_start":5,"column_end":9},"name":"Tiff","qualname":"::image::ImageFormat::Tiff","value":"ImageFormat::Tiff","parent":{"krate":0,"index":3282},"children":[],"decl_id":null,"docs":" An Image in TIFF Format\n","sig":null,"attributes":[{"value":"/ An Image in TIFF Format","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\image.rs","byte_start":430574,"byte_end":430601,"line_start":40,"line_end":40,"column_start":5,"column_end":32}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3295},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\image.rs","byte_start":430648,"byte_end":430651,"line_start":44,"line_end":44,"column_start":5,"column_end":8},"name":"Tga","qualname":"::image::ImageFormat::Tga","value":"ImageFormat::Tga","parent":{"krate":0,"index":3282},"children":[],"decl_id":null,"docs":" An Image in TGA Format\n","sig":null,"attributes":[{"value":"/ An Image in TGA Format","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\image.rs","byte_start":430617,"byte_end":430643,"line_start":43,"line_end":43,"column_start":5,"column_end":31}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3297},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\image.rs","byte_start":430689,"byte_end":430692,"line_start":47,"line_end":47,"column_start":5,"column_end":8},"name":"Dds","qualname":"::image::ImageFormat::Dds","value":"ImageFormat::Dds","parent":{"krate":0,"index":3282},"children":[],"decl_id":null,"docs":" An Image in DDS Format\n","sig":null,"attributes":[{"value":"/ An Image in DDS Format","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\image.rs","byte_start":430658,"byte_end":430684,"line_start":46,"line_end":46,"column_start":5,"column_end":31}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3299},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\image.rs","byte_start":430730,"byte_end":430733,"line_start":50,"line_end":50,"column_start":5,"column_end":8},"name":"Bmp","qualname":"::image::ImageFormat::Bmp","value":"ImageFormat::Bmp","parent":{"krate":0,"index":3282},"children":[],"decl_id":null,"docs":" An Image in BMP Format\n","sig":null,"attributes":[{"value":"/ An Image in BMP Format","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\image.rs","byte_start":430699,"byte_end":430725,"line_start":49,"line_end":49,"column_start":5,"column_end":31}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3301},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\image.rs","byte_start":430771,"byte_end":430774,"line_start":53,"line_end":53,"column_start":5,"column_end":8},"name":"Ico","qualname":"::image::ImageFormat::Ico","value":"ImageFormat::Ico","parent":{"krate":0,"index":3282},"children":[],"decl_id":null,"docs":" An Image in ICO Format\n","sig":null,"attributes":[{"value":"/ An Image in ICO Format","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\image.rs","byte_start":430740,"byte_end":430766,"line_start":52,"line_end":52,"column_start":5,"column_end":31}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3303},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\image.rs","byte_start":430821,"byte_end":430824,"line_start":56,"line_end":56,"column_start":5,"column_end":8},"name":"Hdr","qualname":"::image::ImageFormat::Hdr","value":"ImageFormat::Hdr","parent":{"krate":0,"index":3282},"children":[],"decl_id":null,"docs":" An Image in Radiance HDR Format\n","sig":null,"attributes":[{"value":"/ An Image in Radiance HDR Format","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\image.rs","byte_start":430781,"byte_end":430816,"line_start":55,"line_end":55,"column_start":5,"column_end":40}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3305},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\image.rs","byte_start":430867,"byte_end":430875,"line_start":59,"line_end":59,"column_start":5,"column_end":13},"name":"Farbfeld","qualname":"::image::ImageFormat::Farbfeld","value":"ImageFormat::Farbfeld","parent":{"krate":0,"index":3282},"children":[],"decl_id":null,"docs":" An Image in farbfeld Format\n","sig":null,"attributes":[{"value":"/ An Image in farbfeld Format","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\image.rs","byte_start":430831,"byte_end":430862,"line_start":58,"line_end":58,"column_start":5,"column_end":36}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3307},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\image.rs","byte_start":430915,"byte_end":430919,"line_start":62,"line_end":62,"column_start":5,"column_end":9},"name":"Avif","qualname":"::image::ImageFormat::Avif","value":"ImageFormat::Avif","parent":{"krate":0,"index":3282},"children":[],"decl_id":null,"docs":" An Image in AVIF format.\n","sig":null,"attributes":[{"value":"/ An Image in AVIF format.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\image.rs","byte_start":430882,"byte_end":430910,"line_start":61,"line_end":61,"column_start":5,"column_end":33}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3309},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\image.rs","byte_start":430945,"byte_end":430960,"line_start":65,"line_end":65,"column_start":5,"column_end":20},"name":"__NonExhaustive","qualname":"::image::ImageFormat::__NonExhaustive","value":"ImageFormat::__NonExhaustive(crate::utils::NonExhaustiveMarker)","parent":{"krate":0,"index":3282},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":3282},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\image.rs","byte_start":430339,"byte_end":430350,"line_start":24,"line_end":24,"column_start":10,"column_end":21},"name":"ImageFormat","qualname":"::image::ImageFormat","value":"pub enum ImageFormat {\n\n    /// An Image in PNG Format\n    Png,\n\n    /// An Image in JPEG Format\n    Jpeg,\n\n    /// An Image in GIF Format\n    Gif,\n\n    /// An Image in WEBP Format\n    WebP,\n\n    /// An Image in general PNM Format\n    Pnm,\n\n    /// An Image in TIFF Format\n    Tiff,\n\n    /// An Image in TGA Format\n    Tga,\n\n    /// An Image in DDS Format\n    Dds,\n\n    /// An Image in BMP Format\n    Bmp,\n\n    /// An Image in ICO Format\n    Ico,\n\n    /// An Image in Radiance HDR Format\n    Hdr,\n\n    /// An Image in farbfeld Format\n    Farbfeld,\n\n    /// An Image in AVIF format.\n    Avif,\n\n    #[doc(hidden)]\n    __NonExhaustive(crate::utils::NonExhaustiveMarker),\n}","parent":null,"children":[{"krate":0,"index":3283},{"krate":0,"index":3285},{"krate":0,"index":3287},{"krate":0,"index":3289},{"krate":0,"index":3291},{"krate":0,"index":3293},{"krate":0,"index":3295},{"krate":0,"index":3297},{"krate":0,"index":3299},{"krate":0,"index":3301},{"krate":0,"index":3303},{"krate":0,"index":3305},{"krate":0,"index":3307},{"krate":0,"index":3309}],"decl_id":null,"docs":" An enumeration of supported image formats.\n Not all formats support both encoding and decoding.\n","sig":null,"attributes":[{"value":"/ An enumeration of supported image formats.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\image.rs","byte_start":430176,"byte_end":430222,"line_start":21,"line_end":21,"column_start":1,"column_end":47}},{"value":"/ Not all formats support both encoding and decoding.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\image.rs","byte_start":430223,"byte_end":430278,"line_start":22,"line_end":22,"column_start":1,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":1892},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\image.rs","byte_start":431322,"byte_end":431336,"line_start":80,"line_end":80,"column_start":12,"column_end":26},"name":"from_extension","qualname":"<ImageFormat>::from_extension","value":"pub fn from_extension<S>(S) -> Option<Self> where S: AsRef<OsStr>","parent":null,"children":[],"decl_id":null,"docs":" Return the image format specified by a path's file extension.","sig":null,"attributes":[{"value":"/ Return the image format specified by a path's file extension.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\image.rs","byte_start":431023,"byte_end":431088,"line_start":69,"line_end":69,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\image.rs","byte_start":431093,"byte_end":431096,"line_start":70,"line_end":70,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\image.rs","byte_start":431101,"byte_end":431114,"line_start":71,"line_end":71,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\image.rs","byte_start":431119,"byte_end":431122,"line_start":72,"line_end":72,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\image.rs","byte_start":431127,"byte_end":431134,"line_start":73,"line_end":73,"column_start":5,"column_end":12}},{"value":"/ use image::ImageFormat;","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\image.rs","byte_start":431139,"byte_end":431166,"line_start":74,"line_end":74,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\image.rs","byte_start":431171,"byte_end":431174,"line_start":75,"line_end":75,"column_start":5,"column_end":8}},{"value":"/ let format = ImageFormat::from_extension(\"jpg\");","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\image.rs","byte_start":431179,"byte_end":431231,"line_start":76,"line_end":76,"column_start":5,"column_end":57}},{"value":"/ assert_eq!(format, Some(ImageFormat::Jpeg));","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\image.rs","byte_start":431236,"byte_end":431284,"line_start":77,"line_end":77,"column_start":5,"column_end":53}},{"value":"/ ```","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\image.rs","byte_start":431289,"byte_end":431296,"line_start":78,"line_end":78,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\image.rs","byte_start":431301,"byte_end":431310,"line_start":79,"line_end":79,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1895},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\image.rs","byte_start":432630,"byte_end":432639,"line_start":118,"line_end":118,"column_start":12,"column_end":21},"name":"from_path","qualname":"<ImageFormat>::from_path","value":"pub fn from_path<P>(P) -> ImageResult<Self> where P: AsRef<Path>","parent":null,"children":[],"decl_id":null,"docs":" Return the image format specified by the path's file extension.","sig":null,"attributes":[{"value":"/ Return the image format specified by the path's file extension.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\image.rs","byte_start":432269,"byte_end":432336,"line_start":105,"line_end":105,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\image.rs","byte_start":432341,"byte_end":432344,"line_start":106,"line_end":106,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\image.rs","byte_start":432349,"byte_end":432362,"line_start":107,"line_end":107,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\image.rs","byte_start":432367,"byte_end":432370,"line_start":108,"line_end":108,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\image.rs","byte_start":432375,"byte_end":432382,"line_start":109,"line_end":109,"column_start":5,"column_end":12}},{"value":"/ use image::ImageFormat;","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\image.rs","byte_start":432387,"byte_end":432414,"line_start":110,"line_end":110,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\image.rs","byte_start":432419,"byte_end":432422,"line_start":111,"line_end":111,"column_start":5,"column_end":8}},{"value":"/ let format = ImageFormat::from_path(\"images/ferris.png\")?;","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\image.rs","byte_start":432427,"byte_end":432489,"line_start":112,"line_end":112,"column_start":5,"column_end":67}},{"value":"/ assert_eq!(format, ImageFormat::Png);","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\image.rs","byte_start":432494,"byte_end":432535,"line_start":113,"line_end":113,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\image.rs","byte_start":432540,"byte_end":432543,"line_start":114,"line_end":114,"column_start":5,"column_end":8}},{"value":"/ # Ok::<(), image::error::ImageError>(())","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\image.rs","byte_start":432548,"byte_end":432592,"line_start":115,"line_end":115,"column_start":5,"column_end":49}},{"value":"/ ```","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\image.rs","byte_start":432597,"byte_end":432604,"line_start":116,"line_end":116,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\image.rs","byte_start":432609,"byte_end":432618,"line_start":117,"line_end":117,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1900},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\image.rs","byte_start":433915,"byte_end":433929,"line_start":145,"line_end":145,"column_start":12,"column_end":26},"name":"extensions_str","qualname":"<ImageFormat>::extensions_str","value":"pub fn extensions_str(Self) -> &'static [&'static str]","parent":null,"children":[],"decl_id":null,"docs":" Return a list of applicable extensions for this format.","sig":null,"attributes":[{"value":"/ Return a list of applicable extensions for this format.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\image.rs","byte_start":433325,"byte_end":433384,"line_start":136,"line_end":136,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\image.rs","byte_start":433389,"byte_end":433392,"line_start":137,"line_end":137,"column_start":5,"column_end":8}},{"value":"/ All currently recognized image formats specify at least on extension but for future","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\image.rs","byte_start":433397,"byte_end":433484,"line_start":138,"line_end":138,"column_start":5,"column_end":92}},{"value":"/ compatibility you should not rely on this fact. The list may be empty if the format has no","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\image.rs","byte_start":433489,"byte_end":433583,"line_start":139,"line_end":139,"column_start":5,"column_end":99}},{"value":"/ recognized file representation, for example in case it is used as a purely transient memory","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\image.rs","byte_start":433588,"byte_end":433683,"line_start":140,"line_end":140,"column_start":5,"column_end":100}},{"value":"/ format.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\image.rs","byte_start":433688,"byte_end":433699,"line_start":141,"line_end":141,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\image.rs","byte_start":433704,"byte_end":433707,"line_start":142,"line_end":142,"column_start":5,"column_end":8}},{"value":"/ The method name `extensions` remains reserved for introducing another method in the future","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\image.rs","byte_start":433712,"byte_end":433806,"line_start":143,"line_end":143,"column_start":5,"column_end":99}},{"value":"/ that yields a slice of `OsStr` which is blocked by several features of const evaluation.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\image.rs","byte_start":433811,"byte_end":433903,"line_start":144,"line_end":144,"column_start":5,"column_end":97}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3328},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\image.rs","byte_start":434979,"byte_end":434982,"line_start":171,"line_end":171,"column_start":5,"column_end":8},"name":"Png","qualname":"::image::ImageOutputFormat::Png","value":"ImageOutputFormat::Png","parent":{"krate":0,"index":3327},"children":[],"decl_id":null,"docs":" An Image in PNG Format\n","sig":null,"attributes":[{"value":"cfg(feature = \"png\")","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\image.rs","byte_start":434920,"byte_end":434943,"line_start":169,"line_end":169,"column_start":5,"column_end":28}},{"value":"/ An Image in PNG Format","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\image.rs","byte_start":434948,"byte_end":434974,"line_start":170,"line_end":170,"column_start":5,"column_end":31}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3330},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\image.rs","byte_start":435073,"byte_end":435077,"line_start":175,"line_end":175,"column_start":5,"column_end":9},"name":"Jpeg","qualname":"::image::ImageOutputFormat::Jpeg","value":"ImageOutputFormat::Jpeg(u8)","parent":{"krate":0,"index":3327},"children":[],"decl_id":null,"docs":" An Image in JPEG Format with specified quality\n","sig":null,"attributes":[{"value":"cfg(feature = \"jpeg\")","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\image.rs","byte_start":434989,"byte_end":435013,"line_start":173,"line_end":173,"column_start":5,"column_end":29}},{"value":"/ An Image in JPEG Format with specified quality","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\image.rs","byte_start":435018,"byte_end":435068,"line_start":174,"line_end":174,"column_start":5,"column_end":55}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3333},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\image.rs","byte_start":435858,"byte_end":435869,"line_start":208,"line_end":208,"column_start":5,"column_end":16},"name":"Unsupported","qualname":"::image::ImageOutputFormat::Unsupported","value":"ImageOutputFormat::Unsupported(String)","parent":{"krate":0,"index":3327},"children":[],"decl_id":null,"docs":" A value for signalling an error: An unsupported format was requested\n","sig":null,"attributes":[{"value":"/ A value for signalling an error: An unsupported format was requested","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\image.rs","byte_start":435613,"byte_end":435685,"line_start":205,"line_end":205,"column_start":5,"column_end":77}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3336},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\image.rs","byte_start":435903,"byte_end":435918,"line_start":211,"line_end":211,"column_start":5,"column_end":20},"name":"__NonExhaustive","qualname":"::image::ImageOutputFormat::__NonExhaustive","value":"ImageOutputFormat::__NonExhaustive(crate::utils::NonExhaustiveMarker)","parent":{"krate":0,"index":3327},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":3327},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\image.rs","byte_start":434896,"byte_end":434913,"line_start":168,"line_end":168,"column_start":10,"column_end":27},"name":"ImageOutputFormat","qualname":"::image::ImageOutputFormat","value":"pub enum ImageOutputFormat {\n\n    #[cfg(feature = \"png\")]\n    /// An Image in PNG Format\n    Png,\n\n    #[cfg(feature = \"jpeg\")]\n    /// An Image in JPEG Format with specified quality\n    Jpeg(u8),\n\n    /// A value for signalling an error: An unsupported format was requested\n    Unsupported(String),\n\n    #[doc(hidden)]\n    __NonExhaustive(crate::utils::NonExhaustiveMarker),\n}","parent":null,"children":[{"krate":0,"index":3328},{"krate":0,"index":3330},{"krate":0,"index":3333},{"krate":0,"index":3336}],"decl_id":null,"docs":" An enumeration of supported image formats for encoding.\n","sig":null,"attributes":[{"value":"/ An enumeration of supported image formats for encoding.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\image.rs","byte_start":434788,"byte_end":434847,"line_start":166,"line_end":166,"column_start":1,"column_end":60}}]},{"kind":"Struct","id":{"krate":0,"index":3350},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\image.rs","byte_start":445229,"byte_end":445237,"line_start":432,"line_end":432,"column_start":12,"column_end":20},"name":"Progress","qualname":"::image::Progress","value":"Progress {  }","parent":null,"children":[{"krate":0,"index":3351},{"krate":0,"index":3352}],"decl_id":null,"docs":" Represents the progress of an image operation.","sig":null,"attributes":[{"value":"/ Represents the progress of an image operation.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\image.rs","byte_start":444825,"byte_end":444875,"line_start":426,"line_end":426,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\image.rs","byte_start":444876,"byte_end":444879,"line_start":427,"line_end":427,"column_start":1,"column_end":4}},{"value":"/ Note that this is not necessarily accurate and no change to the values passed to the progress","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\image.rs","byte_start":444880,"byte_end":444977,"line_start":428,"line_end":428,"column_start":1,"column_end":98}},{"value":"/ function during decoding will be considered breaking. A decoder could in theory report the","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\image.rs","byte_start":444978,"byte_end":445072,"line_start":429,"line_end":429,"column_start":1,"column_end":95}},{"value":"/ progress `(0, 0)` if progress is unknown, without violating the interface contract of the type.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\image.rs","byte_start":445073,"byte_end":445172,"line_start":430,"line_end":430,"column_start":1,"column_end":100}}]},{"kind":"Method","id":{"krate":0,"index":1926},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\image.rs","byte_start":445345,"byte_end":445352,"line_start":439,"line_end":439,"column_start":12,"column_end":19},"name":"current","qualname":"<Progress>::current","value":"pub fn current(Self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" A measure of completed decoding.\n","sig":null,"attributes":[{"value":"/ A measure of completed decoding.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\image.rs","byte_start":445297,"byte_end":445333,"line_start":438,"line_end":438,"column_start":5,"column_end":41}}]},{"kind":"Method","id":{"krate":0,"index":1927},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\image.rs","byte_start":445525,"byte_end":445530,"line_start":446,"line_end":446,"column_start":12,"column_end":17},"name":"total","qualname":"<Progress>::total","value":"pub fn total(Self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" A measure of all necessary decoding work.","sig":null,"attributes":[{"value":"/ A measure of all necessary decoding work.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\image.rs","byte_start":445400,"byte_end":445445,"line_start":443,"line_end":443,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\image.rs","byte_start":445450,"byte_end":445453,"line_start":444,"line_end":444,"column_start":5,"column_end":8}},{"value":"/ This is in general greater or equal than `current`.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\image.rs","byte_start":445458,"byte_end":445513,"line_start":445,"line_end":445,"column_start":5,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":1928},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\image.rs","byte_start":445640,"byte_end":445649,"line_start":451,"line_end":451,"column_start":12,"column_end":21},"name":"remaining","qualname":"<Progress>::remaining","value":"pub fn remaining(Self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Calculate a measure for remaining decoding work.\n","sig":null,"attributes":[{"value":"/ Calculate a measure for remaining decoding work.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\image.rs","byte_start":445576,"byte_end":445628,"line_start":450,"line_end":450,"column_start":5,"column_end":57}}]},{"kind":"Trait","id":{"krate":0,"index":1929},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\image.rs","byte_start":445778,"byte_end":445790,"line_start":457,"line_end":457,"column_start":11,"column_end":23},"name":"ImageDecoder","qualname":"::image::ImageDecoder","value":"ImageDecoder<'a>: Sized","parent":null,"children":[{"krate":0,"index":1931},{"krate":0,"index":1932},{"krate":0,"index":1933},{"krate":0,"index":1934},{"krate":0,"index":1935},{"krate":0,"index":1936},{"krate":0,"index":1937},{"krate":0,"index":1938},{"krate":0,"index":1940}],"decl_id":null,"docs":" The trait that all decoders implement\n","sig":null,"attributes":[{"value":"/ The trait that all decoders implement","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\image.rs","byte_start":445726,"byte_end":445767,"line_start":456,"line_end":456,"column_start":1,"column_end":42}}]},{"kind":"Type","id":{"krate":0,"index":1931},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\image.rs","byte_start":445867,"byte_end":445873,"line_start":459,"line_end":459,"column_start":10,"column_end":16},"name":"Reader","qualname":"::image::ImageDecoder::Reader","value":"type Reader: Read + 'a;","parent":{"krate":0,"index":1929},"children":[],"decl_id":null,"docs":" The type of reader produced by `into_reader`.\n","sig":null,"attributes":[{"value":"/ The type of reader produced by `into_reader`.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\image.rs","byte_start":445808,"byte_end":445857,"line_start":458,"line_end":458,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":1932},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\image.rs","byte_start":445963,"byte_end":445973,"line_start":462,"line_end":462,"column_start":8,"column_end":18},"name":"dimensions","qualname":"::image::ImageDecoder::dimensions","value":"pub fn dimensions(&Self) -> (u32, u32)","parent":{"krate":0,"index":1929},"children":[],"decl_id":null,"docs":" Returns a tuple containing the width and height of the image\n","sig":null,"attributes":[{"value":"/ Returns a tuple containing the width and height of the image","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\image.rs","byte_start":445891,"byte_end":445955,"line_start":461,"line_end":461,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":1933},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\image.rs","byte_start":446078,"byte_end":446088,"line_start":465,"line_end":465,"column_start":8,"column_end":18},"name":"color_type","qualname":"::image::ImageDecoder::color_type","value":"pub fn color_type(&Self) -> ColorType","parent":{"krate":0,"index":1929},"children":[],"decl_id":null,"docs":" Returns the color type of the image data produced by this decoder\n","sig":null,"attributes":[{"value":"/ Returns the color type of the image data produced by this decoder","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\image.rs","byte_start":446001,"byte_end":446070,"line_start":464,"line_end":464,"column_start":5,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":1934},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\image.rs","byte_start":446182,"byte_end":446201,"line_start":468,"line_end":468,"column_start":8,"column_end":27},"name":"original_color_type","qualname":"::image::ImageDecoder::original_color_type","value":"pub fn original_color_type(&Self) -> ExtendedColorType","parent":{"krate":0,"index":1929},"children":[],"decl_id":null,"docs":" Retuns the color type of the image file before decoding\n","sig":null,"attributes":[{"value":"/ Retuns the color type of the image file before decoding","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\image.rs","byte_start":446115,"byte_end":446174,"line_start":467,"line_end":467,"column_start":5,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":1935},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\image.rs","byte_start":446542,"byte_end":446553,"line_start":475,"line_end":475,"column_start":8,"column_end":19},"name":"into_reader","qualname":"::image::ImageDecoder::into_reader","value":"pub fn into_reader(Self) -> ImageResult<Self::Reader>","parent":{"krate":0,"index":1929},"children":[],"decl_id":null,"docs":" Returns a reader that can be used to obtain the bytes of the image. For the best\n performance, always try to read at least `scanline_bytes` from the reader at a time. Reading\n fewer bytes will cause the reader to perform internal buffering.\n","sig":null,"attributes":[{"value":"/ Returns a reader that can be used to obtain the bytes of the image. For the best","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\image.rs","byte_start":446276,"byte_end":446360,"line_start":472,"line_end":472,"column_start":5,"column_end":89}},{"value":"/ performance, always try to read at least `scanline_bytes` from the reader at a time. Reading","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\image.rs","byte_start":446365,"byte_end":446461,"line_start":473,"line_end":473,"column_start":5,"column_end":101}},{"value":"/ fewer bytes will cause the reader to perform internal buffering.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\image.rs","byte_start":446466,"byte_end":446534,"line_start":474,"line_end":474,"column_start":5,"column_end":73}}]},{"kind":"Method","id":{"krate":0,"index":1936},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\image.rs","byte_start":446940,"byte_end":446951,"line_start":483,"line_end":483,"column_start":8,"column_end":19},"name":"total_bytes","qualname":"::image::ImageDecoder::total_bytes","value":"pub fn total_bytes(&Self) -> u64","parent":{"krate":0,"index":1929},"children":[],"decl_id":null,"docs":" Returns the total number of bytes in the decoded image.","sig":null,"attributes":[{"value":"/ Returns the total number of bytes in the decoded image.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\image.rs","byte_start":446595,"byte_end":446654,"line_start":477,"line_end":477,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\image.rs","byte_start":446659,"byte_end":446662,"line_start":478,"line_end":478,"column_start":5,"column_end":8}},{"value":"/ This is the size of the buffer that must be passed to `read_image` or","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\image.rs","byte_start":446667,"byte_end":446740,"line_start":479,"line_end":479,"column_start":5,"column_end":78}},{"value":"/ `read_image_with_progress`. The returned value may exceed usize::MAX, in","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\image.rs","byte_start":446745,"byte_end":446821,"line_start":480,"line_end":480,"column_start":5,"column_end":81}},{"value":"/ which case it isn't actually possible to construct a buffer to decode all the image data","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\image.rs","byte_start":446826,"byte_end":446918,"line_start":481,"line_end":481,"column_start":5,"column_end":97}},{"value":"/ into.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\image.rs","byte_start":446923,"byte_end":446932,"line_start":482,"line_end":482,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1937},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\image.rs","byte_start":447288,"byte_end":447302,"line_start":490,"line_end":490,"column_start":8,"column_end":22},"name":"scanline_bytes","qualname":"::image::ImageDecoder::scanline_bytes","value":"pub fn scanline_bytes(&Self) -> u64","parent":{"krate":0,"index":1929},"children":[],"decl_id":null,"docs":" Returns the minimum number of bytes that can be efficiently read from this decoder. This may\n be as few as 1 or as many as `total_bytes()`.\n","sig":null,"attributes":[{"value":"/ Returns the minimum number of bytes that can be efficiently read from this decoder. This may","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\image.rs","byte_start":447130,"byte_end":447226,"line_start":488,"line_end":488,"column_start":5,"column_end":101}},{"value":"/ be as few as 1 or as many as `total_bytes()`.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\image.rs","byte_start":447231,"byte_end":447280,"line_start":489,"line_end":489,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":1938},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\image.rs","byte_start":448191,"byte_end":448201,"line_start":514,"line_end":514,"column_start":8,"column_end":18},"name":"read_image","qualname":"::image::ImageDecoder::read_image","value":"pub fn read_image(Self, &mut [u8]) -> ImageResult<()>","parent":{"krate":0,"index":1929},"children":[],"decl_id":null,"docs":" Returns all the bytes in the image.","sig":null,"attributes":[{"value":"/ Returns all the bytes in the image.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\image.rs","byte_start":447357,"byte_end":447396,"line_start":494,"line_end":494,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\image.rs","byte_start":447401,"byte_end":447404,"line_start":495,"line_end":495,"column_start":5,"column_end":8}},{"value":"/ This function takes a slice of bytes and writes the pixel data of the image into it.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\image.rs","byte_start":447409,"byte_end":447497,"line_start":496,"line_end":496,"column_start":5,"column_end":93}},{"value":"/ Although not required, for certain color types callers may want to pass buffers which are","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\image.rs","byte_start":447502,"byte_end":447595,"line_start":497,"line_end":497,"column_start":5,"column_end":98}},{"value":"/ aligned to 2 or 4 byte boundaries to the slice can be cast to a [u16] or [u32]. To accommodate","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\image.rs","byte_start":447600,"byte_end":447698,"line_start":498,"line_end":498,"column_start":5,"column_end":103}},{"value":"/ such casts, the returned contents will always be in native endian.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\image.rs","byte_start":447703,"byte_end":447773,"line_start":499,"line_end":499,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\image.rs","byte_start":447778,"byte_end":447781,"line_start":500,"line_end":500,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\image.rs","byte_start":447786,"byte_end":447798,"line_start":501,"line_end":501,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\image.rs","byte_start":447803,"byte_end":447806,"line_start":502,"line_end":502,"column_start":5,"column_end":8}},{"value":"/ This function panics if buf.len() != self.total_bytes().","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\image.rs","byte_start":447811,"byte_end":447871,"line_start":503,"line_end":503,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\image.rs","byte_start":447876,"byte_end":447879,"line_start":504,"line_end":504,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\image.rs","byte_start":447884,"byte_end":447898,"line_start":505,"line_end":505,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\image.rs","byte_start":447903,"byte_end":447906,"line_start":506,"line_end":506,"column_start":5,"column_end":8}},{"value":"/ ```no_build","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\image.rs","byte_start":447911,"byte_end":447926,"line_start":507,"line_end":507,"column_start":5,"column_end":20}},{"value":"/ use zerocopy::{AsBytes, FromBytes};","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\image.rs","byte_start":447931,"byte_end":447970,"line_start":508,"line_end":508,"column_start":5,"column_end":44}},{"value":"/ fn read_16bit_image(decoder: impl ImageDecoder) -> Vec<16> {","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\image.rs","byte_start":447975,"byte_end":448039,"line_start":509,"line_end":509,"column_start":5,"column_end":69}},{"value":"/     let mut buf: Vec<u16> = vec![0; decoder.total_bytes()/2];","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\image.rs","byte_start":448044,"byte_end":448109,"line_start":510,"line_end":510,"column_start":5,"column_end":70}},{"value":"/     decoder.read_image(buf.as_bytes());","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\image.rs","byte_start":448114,"byte_end":448157,"line_start":511,"line_end":511,"column_start":5,"column_end":48}},{"value":"/     buf","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\image.rs","byte_start":448162,"byte_end":448173,"line_start":512,"line_end":512,"column_start":5,"column_end":16}},{"value":"/ }","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\image.rs","byte_start":448178,"byte_end":448183,"line_start":513,"line_end":513,"column_start":5,"column_end":10}}]},{"kind":"Method","id":{"krate":0,"index":1940},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\image.rs","byte_start":448429,"byte_end":448453,"line_start":520,"line_end":520,"column_start":8,"column_end":32},"name":"read_image_with_progress","qualname":"::image::ImageDecoder::read_image_with_progress","value":"pub fn read_image_with_progress<F: Fn(Progress) -> ()>(Self, &mut [u8], F)\n-> ImageResult<()>","parent":{"krate":0,"index":1929},"children":[],"decl_id":null,"docs":" Same as `read_image` but periodically calls the provided callback to give updates on loading\n progress.\n","sig":null,"attributes":[{"value":"/ Same as `read_image` but periodically calls the provided callback to give updates on loading","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\image.rs","byte_start":448307,"byte_end":448403,"line_start":518,"line_end":518,"column_start":5,"column_end":101}},{"value":"/ progress.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\image.rs","byte_start":448408,"byte_end":448421,"line_start":519,"line_end":519,"column_start":5,"column_end":18}}]},{"kind":"Trait","id":{"krate":0,"index":1942},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\image.rs","byte_start":449476,"byte_end":449491,"line_start":554,"line_end":554,"column_start":11,"column_end":26},"name":"ImageDecoderExt","qualname":"::image::ImageDecoderExt","value":"ImageDecoderExt<'a>: ImageDecoder + Sized","parent":null,"children":[{"krate":0,"index":1944},{"krate":0,"index":1946}],"decl_id":null,"docs":" Specialized image decoding not be supported by all formats\n","sig":null,"attributes":[{"value":"/ Specialized image decoding not be supported by all formats","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\image.rs","byte_start":449403,"byte_end":449465,"line_start":553,"line_end":553,"column_start":1,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":1944},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\image.rs","byte_start":449646,"byte_end":449655,"line_start":556,"line_end":556,"column_start":8,"column_end":17},"name":"read_rect","qualname":"::image::ImageDecoderExt::read_rect","value":"pub fn read_rect(&mut Self, u32, u32, u32, u32, &mut [u8]) -> ImageResult<()>","parent":{"krate":0,"index":1942},"children":[],"decl_id":null,"docs":" Decode a rectangular section of the image; see [`read_rect_with_progress()`](#fn.read_rect_with_progress).\n","sig":null,"attributes":[{"value":"/ Decode a rectangular section of the image; see [`read_rect_with_progress()`](#fn.read_rect_with_progress).","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\image.rs","byte_start":449528,"byte_end":449638,"line_start":555,"line_end":555,"column_start":5,"column_end":115}}]},{"kind":"Method","id":{"krate":0,"index":1946},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\image.rs","byte_start":450597,"byte_end":450620,"line_start":579,"line_end":579,"column_start":8,"column_end":31},"name":"read_rect_with_progress","qualname":"::image::ImageDecoderExt::read_rect_with_progress","value":"pub fn read_rect_with_progress<F: Fn(Progress) ->\n                               ()>(&mut Self, u32, u32, u32, u32, &mut [u8],\n                                   F) -> ImageResult<()>","parent":{"krate":0,"index":1942},"children":[],"decl_id":null,"docs":" Decode a rectangular section of the image, periodically reporting progress.","sig":null,"attributes":[{"value":"/ Decode a rectangular section of the image, periodically reporting progress.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\image.rs","byte_start":449881,"byte_end":449960,"line_start":567,"line_end":567,"column_start":5,"column_end":84}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\image.rs","byte_start":449965,"byte_end":449968,"line_start":568,"line_end":568,"column_start":5,"column_end":8}},{"value":"/ The output buffer will be filled with fields specified by","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\image.rs","byte_start":449973,"byte_end":450034,"line_start":569,"line_end":569,"column_start":5,"column_end":66}},{"value":"/ [`ImageDecoder::color_type()`](trait.ImageDecoder.html#fn.color_type),","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\image.rs","byte_start":450039,"byte_end":450113,"line_start":570,"line_end":570,"column_start":5,"column_end":79}},{"value":"/ in that order, each field represented in native-endian.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\image.rs","byte_start":450118,"byte_end":450177,"line_start":571,"line_end":571,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\image.rs","byte_start":450182,"byte_end":450185,"line_start":572,"line_end":572,"column_start":5,"column_end":8}},{"value":"/ The progress callback will be called at least once at the start and the end of decoding,","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\image.rs","byte_start":450190,"byte_end":450282,"line_start":573,"line_end":573,"column_start":5,"column_end":97}},{"value":"/ implementations are encouraged to call this more often,","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\image.rs","byte_start":450287,"byte_end":450346,"line_start":574,"line_end":574,"column_start":5,"column_end":64}},{"value":"/ with a frequency meaningful for display to the end-user.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\image.rs","byte_start":450351,"byte_end":450411,"line_start":575,"line_end":575,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\image.rs","byte_start":450416,"byte_end":450419,"line_start":576,"line_end":576,"column_start":5,"column_end":8}},{"value":"/ This function will panic if the output buffer isn't at least","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\image.rs","byte_start":450424,"byte_end":450488,"line_start":577,"line_end":577,"column_start":5,"column_end":69}},{"value":"/ `color_type().bytes_per_pixel() * color_type().channel_count() * width * height` bytes long.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\image.rs","byte_start":450493,"byte_end":450589,"line_start":578,"line_end":578,"column_start":5,"column_end":101}}]},{"kind":"Trait","id":{"krate":0,"index":1948},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\image.rs","byte_start":450851,"byte_end":450867,"line_start":591,"line_end":591,"column_start":11,"column_end":27},"name":"AnimationDecoder","qualname":"::image::AnimationDecoder","value":"AnimationDecoder<'a>","parent":null,"children":[{"krate":0,"index":1950}],"decl_id":null,"docs":" AnimationDecoder trait\n","sig":null,"attributes":[{"value":"/ AnimationDecoder trait","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\image.rs","byte_start":450814,"byte_end":450840,"line_start":590,"line_end":590,"column_start":1,"column_end":27}}]},{"kind":"Method","id":{"krate":0,"index":1950},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\image.rs","byte_start":450939,"byte_end":450950,"line_start":593,"line_end":593,"column_start":8,"column_end":19},"name":"into_frames","qualname":"::image::AnimationDecoder::into_frames","value":"pub fn into_frames(Self) -> Frames","parent":{"krate":0,"index":1948},"children":[],"decl_id":null,"docs":" Consume the decoder producing a series of frames.\n","sig":null,"attributes":[{"value":"/ Consume the decoder producing a series of frames.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\image.rs","byte_start":450878,"byte_end":450931,"line_start":592,"line_end":592,"column_start":5,"column_end":58}}]},{"kind":"Trait","id":{"krate":0,"index":1951},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\image.rs","byte_start":451022,"byte_end":451034,"line_start":597,"line_end":597,"column_start":11,"column_end":23},"name":"ImageEncoder","qualname":"::image::ImageEncoder","value":"ImageEncoder","parent":null,"children":[{"krate":0,"index":1952}],"decl_id":null,"docs":" The trait all encoders implement\n","sig":null,"attributes":[{"value":"/ The trait all encoders implement","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\image.rs","byte_start":450975,"byte_end":451011,"line_start":596,"line_end":596,"column_start":1,"column_end":37}}]},{"kind":"Method","id":{"krate":0,"index":1952},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\image.rs","byte_start":451583,"byte_end":451594,"line_start":608,"line_end":608,"column_start":8,"column_end":19},"name":"write_image","qualname":"::image::ImageEncoder::write_image","value":"pub fn write_image(Self, &[u8], u32, u32, ColorType) -> ImageResult<()>","parent":{"krate":0,"index":1951},"children":[],"decl_id":null,"docs":" Writes all the bytes in an image to the encoder.","sig":null,"attributes":[{"value":"/ Writes all the bytes in an image to the encoder.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\image.rs","byte_start":451041,"byte_end":451093,"line_start":598,"line_end":598,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\image.rs","byte_start":451098,"byte_end":451101,"line_start":599,"line_end":599,"column_start":5,"column_end":8}},{"value":"/ This function takes a slice of bytes of the pixel data of the image","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\image.rs","byte_start":451106,"byte_end":451177,"line_start":600,"line_end":600,"column_start":5,"column_end":76}},{"value":"/ and encodes them. Unlike particular format encoders inherent impl encode","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\image.rs","byte_start":451182,"byte_end":451258,"line_start":601,"line_end":601,"column_start":5,"column_end":81}},{"value":"/ methods where endianness is not specified, here image data bytes should","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\image.rs","byte_start":451263,"byte_end":451338,"line_start":602,"line_end":602,"column_start":5,"column_end":80}},{"value":"/ always be in native endian. The implementor will reorder the endianess","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\image.rs","byte_start":451343,"byte_end":451417,"line_start":603,"line_end":603,"column_start":5,"column_end":79}},{"value":"/ as necessary for the target encoding format.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\image.rs","byte_start":451422,"byte_end":451470,"line_start":604,"line_end":604,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\image.rs","byte_start":451475,"byte_end":451478,"line_start":605,"line_end":605,"column_start":5,"column_end":8}},{"value":"/ See also `ImageDecoder::read_image` which reads byte buffers into","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\image.rs","byte_start":451483,"byte_end":451552,"line_start":606,"line_end":606,"column_start":5,"column_end":74}},{"value":"/ native endian.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\image.rs","byte_start":451557,"byte_end":451575,"line_start":607,"line_end":607,"column_start":5,"column_end":23}}]},{"kind":"Struct","id":{"krate":0,"index":3365},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\image.rs","byte_start":451788,"byte_end":451794,"line_start":619,"line_end":619,"column_start":12,"column_end":18},"name":"Pixels","qualname":"::image::Pixels","value":"Pixels {  }","parent":null,"children":[{"krate":0,"index":3368},{"krate":0,"index":3369},{"krate":0,"index":3370},{"krate":0,"index":3371},{"krate":0,"index":3372}],"decl_id":null,"docs":" Immutable pixel iterator\n","sig":null,"attributes":[{"value":"/ Immutable pixel iterator","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\image.rs","byte_start":451731,"byte_end":451759,"line_start":617,"line_end":617,"column_start":1,"column_end":29}}]},{"kind":"Trait","id":{"krate":0,"index":1961},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\image.rs","byte_start":452535,"byte_end":452551,"line_start":656,"line_end":656,"column_start":11,"column_end":27},"name":"GenericImageView","qualname":"::image::GenericImageView","value":"GenericImageView","parent":null,"children":[{"krate":0,"index":1962},{"krate":0,"index":1963},{"krate":0,"index":1964},{"krate":0,"index":1965},{"krate":0,"index":1966},{"krate":0,"index":1967},{"krate":0,"index":1968},{"krate":0,"index":1969},{"krate":0,"index":1970},{"krate":0,"index":1971},{"krate":0,"index":1972},{"krate":0,"index":1973}],"decl_id":null,"docs":" Trait to inspect an image.\n","sig":null,"attributes":[{"value":"/ Trait to inspect an image.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\image.rs","byte_start":452494,"byte_end":452524,"line_start":655,"line_end":655,"column_start":1,"column_end":31}}]},{"kind":"Type","id":{"krate":0,"index":1962},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\image.rs","byte_start":452590,"byte_end":452595,"line_start":658,"line_end":658,"column_start":10,"column_end":15},"name":"Pixel","qualname":"::image::GenericImageView::Pixel","value":"type Pixel: Pixel;","parent":{"krate":0,"index":1961},"children":[],"decl_id":null,"docs":" The type of pixel.\n","sig":null,"attributes":[{"value":"/ The type of pixel.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\image.rs","byte_start":452558,"byte_end":452580,"line_start":657,"line_end":657,"column_start":5,"column_end":27}}]},{"kind":"Type","id":{"krate":0,"index":1963},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\image.rs","byte_start":452829,"byte_end":452843,"line_start":663,"line_end":663,"column_start":10,"column_end":24},"name":"InnerImageView","qualname":"::image::GenericImageView::InnerImageView","value":"type InnerImageView: GenericImageView<Pixel = Self::Pixel>;","parent":{"krate":0,"index":1961},"children":[],"decl_id":null,"docs":" Underlying image type. This is mainly used by SubImages in order to\n always have a reference to the original image. This allows for less\n indirections and it eases the use of nested SubImages.\n","sig":null,"attributes":[{"value":"/ Underlying image type. This is mainly used by SubImages in order to","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\image.rs","byte_start":452609,"byte_end":452680,"line_start":660,"line_end":660,"column_start":5,"column_end":76}},{"value":"/ always have a reference to the original image. This allows for less","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\image.rs","byte_start":452685,"byte_end":452756,"line_start":661,"line_end":661,"column_start":5,"column_end":76}},{"value":"/ indirections and it eases the use of nested SubImages.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\image.rs","byte_start":452761,"byte_end":452819,"line_start":662,"line_end":662,"column_start":5,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":1964},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\image.rs","byte_start":452936,"byte_end":452946,"line_start":666,"line_end":666,"column_start":8,"column_end":18},"name":"dimensions","qualname":"::image::GenericImageView::dimensions","value":"pub fn dimensions(&Self) -> (u32, u32)","parent":{"krate":0,"index":1961},"children":[],"decl_id":null,"docs":" The width and height of this image.\n","sig":null,"attributes":[{"value":"/ The width and height of this image.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\image.rs","byte_start":452889,"byte_end":452928,"line_start":665,"line_end":665,"column_start":5,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":1965},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\image.rs","byte_start":453010,"byte_end":453015,"line_start":669,"line_end":669,"column_start":8,"column_end":13},"name":"width","qualname":"::image::GenericImageView::width","value":"pub fn width(&Self) -> u32","parent":{"krate":0,"index":1961},"children":[],"decl_id":null,"docs":" The width of this image.\n","sig":null,"attributes":[{"value":"/ The width of this image.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\image.rs","byte_start":452974,"byte_end":453002,"line_start":668,"line_end":668,"column_start":5,"column_end":33}}]},{"kind":"Method","id":{"krate":0,"index":1966},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\image.rs","byte_start":453130,"byte_end":453136,"line_start":675,"line_end":675,"column_start":8,"column_end":14},"name":"height","qualname":"::image::GenericImageView::height","value":"pub fn height(&Self) -> u32","parent":{"krate":0,"index":1961},"children":[],"decl_id":null,"docs":" The height of this image.\n","sig":null,"attributes":[{"value":"/ The height of this image.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\image.rs","byte_start":453093,"byte_end":453122,"line_start":674,"line_end":674,"column_start":5,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":1967},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\image.rs","byte_start":453263,"byte_end":453269,"line_start":681,"line_end":681,"column_start":8,"column_end":14},"name":"bounds","qualname":"::image::GenericImageView::bounds","value":"pub fn bounds(&Self) -> (u32, u32, u32, u32)","parent":{"krate":0,"index":1961},"children":[],"decl_id":null,"docs":" The bounding rectangle of this image.\n","sig":null,"attributes":[{"value":"/ The bounding rectangle of this image.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\image.rs","byte_start":453214,"byte_end":453255,"line_start":680,"line_end":680,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":1968},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\image.rs","byte_start":453386,"byte_end":453395,"line_start":684,"line_end":684,"column_start":8,"column_end":17},"name":"in_bounds","qualname":"::image::GenericImageView::in_bounds","value":"pub fn in_bounds(&Self, u32, u32) -> bool","parent":{"krate":0,"index":1961},"children":[],"decl_id":null,"docs":" Returns true if this x, y coordinate is contained inside the image.\n","sig":null,"attributes":[{"value":"/ Returns true if this x, y coordinate is contained inside the image.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\image.rs","byte_start":453307,"byte_end":453378,"line_start":683,"line_end":683,"column_start":5,"column_end":76}}]},{"kind":"Method","id":{"krate":0,"index":1969},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\image.rs","byte_start":453718,"byte_end":453727,"line_start":696,"line_end":696,"column_start":8,"column_end":17},"name":"get_pixel","qualname":"::image::GenericImageView::get_pixel","value":"pub fn get_pixel(&Self, u32, u32) -> Self::Pixel","parent":{"krate":0,"index":1961},"children":[],"decl_id":null,"docs":" Returns the pixel located at (x, y)","sig":null,"attributes":[{"value":"/ Returns the pixel located at (x, y)","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\image.rs","byte_start":453543,"byte_end":453582,"line_start":689,"line_end":689,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\image.rs","byte_start":453587,"byte_end":453590,"line_start":690,"line_end":690,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\image.rs","byte_start":453595,"byte_end":453607,"line_start":691,"line_end":691,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\image.rs","byte_start":453612,"byte_end":453615,"line_start":692,"line_end":692,"column_start":5,"column_end":8}},{"value":"/ Panics if `(x, y)` is out of bounds.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\image.rs","byte_start":453620,"byte_end":453660,"line_start":693,"line_end":693,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\image.rs","byte_start":453665,"byte_end":453668,"line_start":694,"line_end":694,"column_start":5,"column_end":8}},{"value":"/ TODO: change this signature to &P","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\image.rs","byte_start":453673,"byte_end":453710,"line_start":695,"line_end":695,"column_start":5,"column_end":42}}]},{"kind":"Method","id":{"krate":0,"index":1970},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\image.rs","byte_start":454048,"byte_end":454064,"line_start":706,"line_end":706,"column_start":15,"column_end":31},"name":"unsafe_get_pixel","qualname":"::image::GenericImageView::unsafe_get_pixel","value":"pub unsafe fn unsafe_get_pixel(&Self, u32, u32) -> Self::Pixel","parent":{"krate":0,"index":1961},"children":[],"decl_id":null,"docs":" Returns the pixel located at (x, y)","sig":null,"attributes":[{"value":"/ Returns the pixel located at (x, y)","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\image.rs","byte_start":453772,"byte_end":453811,"line_start":698,"line_end":698,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\image.rs","byte_start":453816,"byte_end":453819,"line_start":699,"line_end":699,"column_start":5,"column_end":8}},{"value":"/ This function can be implemented in a way that ignores bounds checking.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\image.rs","byte_start":453824,"byte_end":453899,"line_start":700,"line_end":700,"column_start":5,"column_end":80}},{"value":"/ # Safety","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\image.rs","byte_start":453904,"byte_end":453916,"line_start":701,"line_end":701,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\image.rs","byte_start":453921,"byte_end":453924,"line_start":702,"line_end":702,"column_start":5,"column_end":8}},{"value":"/ The coordinates must be [`in_bounds`] of the image.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\image.rs","byte_start":453929,"byte_end":453984,"line_start":703,"line_end":703,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\image.rs","byte_start":453989,"byte_end":453992,"line_start":704,"line_end":704,"column_start":5,"column_end":8}},{"value":"/ [`in_bounds`]: #method.in_bounds","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\image.rs","byte_start":453997,"byte_end":454033,"line_start":705,"line_end":705,"column_start":5,"column_end":41}}]},{"kind":"Method","id":{"krate":0,"index":1971},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\image.rs","byte_start":454296,"byte_end":454302,"line_start":713,"line_end":713,"column_start":8,"column_end":14},"name":"pixels","qualname":"::image::GenericImageView::pixels","value":"pub fn pixels(&Self) -> Pixels<, Self>","parent":{"krate":0,"index":1961},"children":[],"decl_id":null,"docs":" Returns an Iterator over the pixels of this image.\n The iterator yields the coordinates of each pixel\n along with their value\n","sig":null,"attributes":[{"value":"/ Returns an Iterator over the pixels of this image.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\image.rs","byte_start":454145,"byte_end":454199,"line_start":710,"line_end":710,"column_start":5,"column_end":59}},{"value":"/ The iterator yields the coordinates of each pixel","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\image.rs","byte_start":454204,"byte_end":454257,"line_start":711,"line_end":711,"column_start":5,"column_end":58}},{"value":"/ along with their value","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\image.rs","byte_start":454262,"byte_end":454288,"line_start":712,"line_end":712,"column_start":5,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":1972},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\image.rs","byte_start":454572,"byte_end":454577,"line_start":726,"line_end":726,"column_start":8,"column_end":13},"name":"inner","qualname":"::image::GenericImageView::inner","value":"pub fn inner(&Self) -> &Self::InnerImageView","parent":{"krate":0,"index":1961},"children":[],"decl_id":null,"docs":" Returns a reference to the underlying image.\n","sig":null,"attributes":[{"value":"/ Returns a reference to the underlying image.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\image.rs","byte_start":454516,"byte_end":454564,"line_start":725,"line_end":725,"column_start":5,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":1973},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\image.rs","byte_start":454774,"byte_end":454778,"line_start":730,"line_end":730,"column_start":8,"column_end":12},"name":"view","qualname":"::image::GenericImageView::view","value":"pub fn view(&Self, u32, u32, u32, u32) -> SubImage<&Self::InnerImageView>","parent":{"krate":0,"index":1961},"children":[],"decl_id":null,"docs":" Returns an subimage that is an immutable view into this image.\n You can use [`GenericImage::sub_image`] if you need a mutable view instead.\n","sig":null,"attributes":[{"value":"/ Returns an subimage that is an immutable view into this image.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\image.rs","byte_start":454616,"byte_end":454682,"line_start":728,"line_end":728,"column_start":5,"column_end":71}},{"value":"/ You can use [`GenericImage::sub_image`] if you need a mutable view instead.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\image.rs","byte_start":454687,"byte_end":454766,"line_start":729,"line_end":729,"column_start":5,"column_end":84}}]},{"kind":"Trait","id":{"krate":0,"index":1974},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\image.rs","byte_start":454977,"byte_end":454989,"line_start":736,"line_end":736,"column_start":11,"column_end":23},"name":"GenericImage","qualname":"::image::GenericImage","value":"GenericImage: GenericImageView","parent":null,"children":[{"krate":0,"index":1975},{"krate":0,"index":1976},{"krate":0,"index":1977},{"krate":0,"index":1978},{"krate":0,"index":1979},{"krate":0,"index":1980},{"krate":0,"index":1982},{"krate":0,"index":1984},{"krate":0,"index":1985}],"decl_id":null,"docs":" A trait for manipulating images.\n","sig":null,"attributes":[{"value":"/ A trait for manipulating images.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\image.rs","byte_start":454930,"byte_end":454966,"line_start":735,"line_end":735,"column_start":1,"column_end":37}}]},{"kind":"Type","id":{"krate":0,"index":1975},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\image.rs","byte_start":455234,"byte_end":455244,"line_start":740,"line_end":740,"column_start":10,"column_end":20},"name":"InnerImage","qualname":"::image::GenericImage::InnerImage","value":"type InnerImage: GenericImage<Pixel = Self::Pixel>;","parent":{"krate":0,"index":1974},"children":[],"decl_id":null,"docs":" Underlying image type. This is mainly used by SubImages in order to\n always have a reference to the original image. This allows for less\n indirections and it eases the use of nested SubImages.\n","sig":null,"attributes":[{"value":"/ Underlying image type. This is mainly used by SubImages in order to","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\image.rs","byte_start":455014,"byte_end":455085,"line_start":737,"line_end":737,"column_start":5,"column_end":76}},{"value":"/ always have a reference to the original image. This allows for less","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\image.rs","byte_start":455090,"byte_end":455161,"line_start":738,"line_end":738,"column_start":5,"column_end":76}},{"value":"/ indirections and it eases the use of nested SubImages.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\image.rs","byte_start":455166,"byte_end":455224,"line_start":739,"line_end":739,"column_start":5,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":1976},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\image.rs","byte_start":455434,"byte_end":455447,"line_start":747,"line_end":747,"column_start":8,"column_end":21},"name":"get_pixel_mut","qualname":"::image::GenericImage::get_pixel_mut","value":"pub fn get_pixel_mut(&mut Self, u32, u32) -> &mut Self::Pixel","parent":{"krate":0,"index":1974},"children":[],"decl_id":null,"docs":" Gets a reference to the mutable pixel at location `(x, y)`","sig":null,"attributes":[{"value":"/ Gets a reference to the mutable pixel at location `(x, y)`","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\image.rs","byte_start":455286,"byte_end":455348,"line_start":742,"line_end":742,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\image.rs","byte_start":455353,"byte_end":455356,"line_start":743,"line_end":743,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\image.rs","byte_start":455361,"byte_end":455373,"line_start":744,"line_end":744,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\image.rs","byte_start":455378,"byte_end":455381,"line_start":745,"line_end":745,"column_start":5,"column_end":8}},{"value":"/ Panics if `(x, y)` is out of bounds.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\image.rs","byte_start":455386,"byte_end":455426,"line_start":746,"line_end":746,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":1977},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\image.rs","byte_start":455621,"byte_end":455630,"line_start":754,"line_end":754,"column_start":8,"column_end":17},"name":"put_pixel","qualname":"::image::GenericImage::put_pixel","value":"pub fn put_pixel(&mut Self, u32, u32, Self::Pixel)","parent":{"krate":0,"index":1974},"children":[],"decl_id":null,"docs":" Put a pixel at location (x, y)","sig":null,"attributes":[{"value":"/ Put a pixel at location (x, y)","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\image.rs","byte_start":455501,"byte_end":455535,"line_start":749,"line_end":749,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\image.rs","byte_start":455540,"byte_end":455543,"line_start":750,"line_end":750,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\image.rs","byte_start":455548,"byte_end":455560,"line_start":751,"line_end":751,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\image.rs","byte_start":455565,"byte_end":455568,"line_start":752,"line_end":752,"column_start":5,"column_end":8}},{"value":"/ Panics if `(x, y)` is out of bounds.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\image.rs","byte_start":455573,"byte_end":455613,"line_start":753,"line_end":753,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":1978},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\image.rs","byte_start":455984,"byte_end":456000,"line_start":764,"line_end":764,"column_start":15,"column_end":31},"name":"unsafe_put_pixel","qualname":"::image::GenericImage::unsafe_put_pixel","value":"pub unsafe fn unsafe_put_pixel(&mut Self, u32, u32, Self::Pixel)","parent":{"krate":0,"index":1974},"children":[],"decl_id":null,"docs":" Puts a pixel at location (x, y)","sig":null,"attributes":[{"value":"/ Puts a pixel at location (x, y)","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\image.rs","byte_start":455684,"byte_end":455719,"line_start":756,"line_end":756,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\image.rs","byte_start":455724,"byte_end":455727,"line_start":757,"line_end":757,"column_start":5,"column_end":8}},{"value":"/ This function can be implemented in a way that ignores bounds checking.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\image.rs","byte_start":455732,"byte_end":455807,"line_start":758,"line_end":758,"column_start":5,"column_end":80}},{"value":"/ # Safety","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\image.rs","byte_start":455812,"byte_end":455824,"line_start":759,"line_end":759,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\image.rs","byte_start":455829,"byte_end":455832,"line_start":760,"line_end":760,"column_start":5,"column_end":8}},{"value":"/ The coordinates must be [`in_bounds`] of the image.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\image.rs","byte_start":455837,"byte_end":455892,"line_start":761,"line_end":761,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\image.rs","byte_start":455897,"byte_end":455900,"line_start":762,"line_end":762,"column_start":5,"column_end":8}},{"value":"/ [`in_bounds`]: traits.GenericImageView.html#method.in_bounds","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\image.rs","byte_start":455905,"byte_end":455969,"line_start":763,"line_end":763,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":1979},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\image.rs","byte_start":456267,"byte_end":456278,"line_start":771,"line_end":771,"column_start":8,"column_end":19},"name":"blend_pixel","qualname":"::image::GenericImage::blend_pixel","value":"pub fn blend_pixel(&mut Self, u32, u32, Self::Pixel)","parent":{"krate":0,"index":1974},"children":[],"decl_id":null,"docs":" Put a pixel at location (x, y), taking into account alpha channels","sig":null,"attributes":[{"value":"/ Put a pixel at location (x, y), taking into account alpha channels","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\image.rs","byte_start":456098,"byte_end":456168,"line_start":768,"line_end":768,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\image.rs","byte_start":456173,"byte_end":456176,"line_start":769,"line_end":769,"column_start":5,"column_end":8}},{"value":"/ DEPRECATED: This method will be removed. Blend the pixel directly instead.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\image.rs","byte_start":456181,"byte_end":456259,"line_start":770,"line_end":770,"column_start":5,"column_end":83}}]},{"kind":"Method","id":{"krate":0,"index":1980},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\image.rs","byte_start":457040,"byte_end":457049,"line_start":788,"line_end":788,"column_start":8,"column_end":17},"name":"copy_from","qualname":"::image::GenericImage::copy_from","value":"pub fn copy_from<O>(&mut Self, &O, u32, u32) -> ImageResult<()> where\nO: GenericImageView<Pixel = Self::Pixel>","parent":{"krate":0,"index":1974},"children":[],"decl_id":null,"docs":" Copies all of the pixels from another image into this image.","sig":null,"attributes":[{"value":"/ Copies all of the pixels from another image into this image.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\image.rs","byte_start":456332,"byte_end":456396,"line_start":773,"line_end":773,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\image.rs","byte_start":456401,"byte_end":456404,"line_start":774,"line_end":774,"column_start":5,"column_end":8}},{"value":"/ The other image is copied with the top-left corner of the","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\image.rs","byte_start":456409,"byte_end":456470,"line_start":775,"line_end":775,"column_start":5,"column_end":66}},{"value":"/ other image placed at (x, y).","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\image.rs","byte_start":456475,"byte_end":456508,"line_start":776,"line_end":776,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\image.rs","byte_start":456513,"byte_end":456516,"line_start":777,"line_end":777,"column_start":5,"column_end":8}},{"value":"/ In order to copy only a piece of the other image, use [`GenericImageView::view`].","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\image.rs","byte_start":456521,"byte_end":456606,"line_start":778,"line_end":778,"column_start":5,"column_end":90}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\image.rs","byte_start":456611,"byte_end":456614,"line_start":779,"line_end":779,"column_start":5,"column_end":8}},{"value":"/ You can use [`FlatSamples`] to source pixels from an arbitrary regular raster of channel","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\image.rs","byte_start":456619,"byte_end":456711,"line_start":780,"line_end":780,"column_start":5,"column_end":97}},{"value":"/ values, for example from a foreign interface or a fixed image.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\image.rs","byte_start":456716,"byte_end":456782,"line_start":781,"line_end":781,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\image.rs","byte_start":456787,"byte_end":456790,"line_start":782,"line_end":782,"column_start":5,"column_end":8}},{"value":"/ # Returns","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\image.rs","byte_start":456795,"byte_end":456808,"line_start":783,"line_end":783,"column_start":5,"column_end":18}},{"value":"/ Returns an error if the image is too large to be copied at the given position","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\image.rs","byte_start":456813,"byte_end":456894,"line_start":784,"line_end":784,"column_start":5,"column_end":86}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\image.rs","byte_start":456899,"byte_end":456902,"line_start":785,"line_end":785,"column_start":5,"column_end":8}},{"value":"/ [`GenericImageView::view`]: trait.GenericImageView.html#method.view","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\image.rs","byte_start":456907,"byte_end":456978,"line_start":786,"line_end":786,"column_start":5,"column_end":76}},{"value":"/ [`FlatSamples`]: flat/struct.FlatSamples.html","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\image.rs","byte_start":456983,"byte_end":457032,"line_start":787,"line_end":787,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":1982},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\image.rs","byte_start":458096,"byte_end":458107,"line_start":816,"line_end":816,"column_start":8,"column_end":19},"name":"copy_within","qualname":"::image::GenericImage::copy_within","value":"pub fn copy_within(&mut Self, Rect, u32, u32) -> bool","parent":{"krate":0,"index":1974},"children":[],"decl_id":null,"docs":" Copies all of the pixels from one part of this image to another part of this image.","sig":null,"attributes":[{"value":"/ Copies all of the pixels from one part of this image to another part of this image.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\image.rs","byte_start":457748,"byte_end":457835,"line_start":809,"line_end":809,"column_start":5,"column_end":92}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\image.rs","byte_start":457840,"byte_end":457843,"line_start":810,"line_end":810,"column_start":5,"column_end":8}},{"value":"/ The destination rectangle of the copy is specified with the top-left corner placed at (x, y).","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\image.rs","byte_start":457848,"byte_end":457945,"line_start":811,"line_end":811,"column_start":5,"column_end":102}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\image.rs","byte_start":457950,"byte_end":457953,"line_start":812,"line_end":812,"column_start":5,"column_end":8}},{"value":"/ # Returns","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\image.rs","byte_start":457958,"byte_end":457971,"line_start":813,"line_end":813,"column_start":5,"column_end":18}},{"value":"/ `true` if the copy was successful, `false` if the image could not","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\image.rs","byte_start":457976,"byte_end":458045,"line_start":814,"line_end":814,"column_start":5,"column_end":74}},{"value":"/ be copied due to size constraints.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\image.rs","byte_start":458050,"byte_end":458088,"line_start":815,"line_end":815,"column_start":5,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":1984},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\image.rs","byte_start":459765,"byte_end":459774,"line_start":852,"line_end":852,"column_start":8,"column_end":17},"name":"inner_mut","qualname":"::image::GenericImage::inner_mut","value":"pub fn inner_mut(&mut Self) -> &mut Self::InnerImage","parent":{"krate":0,"index":1974},"children":[],"decl_id":null,"docs":" Returns a mutable reference to the underlying image.\n","sig":null,"attributes":[{"value":"/ Returns a mutable reference to the underlying image.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\image.rs","byte_start":459701,"byte_end":459757,"line_start":851,"line_end":851,"column_start":5,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":1985},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\image.rs","byte_start":459969,"byte_end":459978,"line_start":856,"line_end":856,"column_start":8,"column_end":17},"name":"sub_image","qualname":"::image::GenericImage::sub_image","value":"pub fn sub_image(&mut Self, u32, u32, u32, u32)\n-> SubImage<&mut Self::InnerImage>","parent":{"krate":0,"index":1974},"children":[],"decl_id":null,"docs":" Returns a mutable subimage that is a view into this image.\n If you want an immutable subimage instead, use [`GenericImageView::view`]\n","sig":null,"attributes":[{"value":"/ Returns a mutable subimage that is a view into this image.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\image.rs","byte_start":459817,"byte_end":459879,"line_start":854,"line_end":854,"column_start":5,"column_end":67}},{"value":"/ If you want an immutable subimage instead, use [`GenericImageView::view`]","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\image.rs","byte_start":459884,"byte_end":459961,"line_start":855,"line_end":855,"column_start":5,"column_end":82}}]},{"kind":"Struct","id":{"krate":0,"index":1986},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\image.rs","byte_start":460469,"byte_end":460477,"line_start":873,"line_end":873,"column_start":12,"column_end":20},"name":"SubImage","qualname":"::image::SubImage","value":"SubImage {  }","parent":null,"children":[{"krate":0,"index":1988},{"krate":0,"index":1989},{"krate":0,"index":1990},{"krate":0,"index":1991},{"krate":0,"index":1992}],"decl_id":null,"docs":" A View into another image","sig":null,"attributes":[{"value":"/ A View into another image","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\image.rs","byte_start":460185,"byte_end":460214,"line_start":867,"line_end":867,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\image.rs","byte_start":460215,"byte_end":460218,"line_start":868,"line_end":868,"column_start":1,"column_end":4}},{"value":"/ Instances of this struct can be created using:","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\image.rs","byte_start":460219,"byte_end":460269,"line_start":869,"line_end":869,"column_start":1,"column_end":51}},{"value":"/   - [`GenericImage::sub_image`] to create a mutable view,","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\image.rs","byte_start":460270,"byte_end":460331,"line_start":870,"line_end":870,"column_start":1,"column_end":62}},{"value":"/   - [`GenericImageView::view`] to create an immutable view,","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\image.rs","byte_start":460332,"byte_end":460395,"line_start":871,"line_end":871,"column_start":1,"column_end":64}},{"value":"/   - [`SubImage::new`] to instantiate the struct directly.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\image.rs","byte_start":460396,"byte_end":460457,"line_start":872,"line_end":872,"column_start":1,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":1999},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\image.rs","byte_start":460865,"byte_end":460868,"line_start":889,"line_end":889,"column_start":12,"column_end":15},"name":"new","qualname":"<SubImage<I>>::new","value":"pub fn new(I, u32, u32, u32, u32) -> SubImage<I>","parent":null,"children":[],"decl_id":null,"docs":" Construct a new subimage\n","sig":null,"attributes":[{"value":"/ Construct a new subimage","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\image.rs","byte_start":460825,"byte_end":460853,"line_start":888,"line_end":888,"column_start":5,"column_end":33}}]},{"kind":"Method","id":{"krate":0,"index":2000},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\image.rs","byte_start":461157,"byte_end":461170,"line_start":900,"line_end":900,"column_start":12,"column_end":25},"name":"change_bounds","qualname":"<SubImage<I>>::change_bounds","value":"pub fn change_bounds(&mut Self, u32, u32, u32, u32)","parent":null,"children":[],"decl_id":null,"docs":" Change the coordinates of this subimage.\n","sig":null,"attributes":[{"value":"/ Change the coordinates of this subimage.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\image.rs","byte_start":461101,"byte_end":461145,"line_start":899,"line_end":899,"column_start":5,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":2001},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\image.rs","byte_start":461404,"byte_end":461412,"line_start":908,"line_end":908,"column_start":12,"column_end":20},"name":"to_image","qualname":"<SubImage<I>>::to_image","value":"pub fn to_image(&Self) -> ImageBuffer<DerefPixel<I>, Vec<DerefSubpixel<I>>>\nwhere I: Deref, I::Target: GenericImage + 'static","parent":null,"children":[],"decl_id":null,"docs":" Convert this subimage to an ImageBuffer\n","sig":null,"attributes":[{"value":"/ Convert this subimage to an ImageBuffer","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\image.rs","byte_start":461349,"byte_end":461392,"line_start":907,"line_end":907,"column_start":5,"column_end":48}}]},{"kind":"Trait","id":{"krate":0,"index":2034},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\traits.rs","byte_start":474792,"byte_end":474807,"line_start":12,"line_end":12,"column_start":11,"column_end":26},"name":"EncodableLayout","qualname":"::traits::EncodableLayout","value":"EncodableLayout: seals::EncodableLayout","parent":null,"children":[{"krate":0,"index":2035}],"decl_id":null,"docs":" Types which are safe to treat as an immutable byte slice in a pixel layout\n for image encoding.\n","sig":null,"attributes":[{"value":"/ Types which are safe to treat as an immutable byte slice in a pixel layout","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\traits.rs","byte_start":474679,"byte_end":474757,"line_start":10,"line_end":10,"column_start":1,"column_end":79}},{"value":"/ for image encoding.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\traits.rs","byte_start":474758,"byte_end":474781,"line_start":11,"line_end":11,"column_start":1,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":2035},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\traits.rs","byte_start":474878,"byte_end":474886,"line_start":14,"line_end":14,"column_start":8,"column_end":16},"name":"as_bytes","qualname":"::traits::EncodableLayout::as_bytes","value":"pub fn as_bytes(&Self) -> &[u8]","parent":{"krate":0,"index":2034},"children":[],"decl_id":null,"docs":" Get the bytes of this value.\n","sig":null,"attributes":[{"value":"/ Get the bytes of this value.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\traits.rs","byte_start":474838,"byte_end":474870,"line_start":13,"line_end":13,"column_start":5,"column_end":37}}]},{"kind":"Trait","id":{"krate":0,"index":2040},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\traits.rs","byte_start":475174,"byte_end":475183,"line_start":30,"line_end":30,"column_start":11,"column_end":20},"name":"Primitive","qualname":"::traits::Primitive","value":"Primitive: Copy + NumCast + Num + PartialOrd<Self> + Clone + Bounded","parent":null,"children":[],"decl_id":null,"docs":" Primitive trait from old stdlib\n","sig":null,"attributes":[{"value":"/ Primitive trait from old stdlib","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\traits.rs","byte_start":475128,"byte_end":475163,"line_start":29,"line_end":29,"column_start":1,"column_end":36}}]},{"kind":"Trait","id":{"krate":0,"index":2053},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\traits.rs","byte_start":475705,"byte_end":475716,"line_start":47,"line_end":47,"column_start":11,"column_end":22},"name":"Enlargeable","qualname":"::traits::Enlargeable","value":"Enlargeable: Sized + Bounded + NumCast","parent":null,"children":[{"krate":0,"index":2054},{"krate":0,"index":2055}],"decl_id":null,"docs":" An Enlargable::Larger value should be enough to calculate\n the sum (average) of a few hundred or thousand Enlargeable values.\n","sig":null,"attributes":[{"value":"/ An Enlargable::Larger value should be enough to calculate","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\traits.rs","byte_start":475562,"byte_end":475623,"line_start":45,"line_end":45,"column_start":1,"column_end":62}},{"value":"/ the sum (average) of a few hundred or thousand Enlargeable values.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\traits.rs","byte_start":475624,"byte_end":475694,"line_start":46,"line_end":46,"column_start":1,"column_end":71}}]},{"kind":"Type","id":{"krate":0,"index":2054},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\traits.rs","byte_start":475755,"byte_end":475761,"line_start":48,"line_end":48,"column_start":10,"column_end":16},"name":"Larger","qualname":"::traits::Enlargeable::Larger","value":"type Larger: Primitive + AddAssign + 'static;","parent":{"krate":0,"index":2053},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2055},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\traits.rs","byte_start":475804,"byte_end":475814,"line_start":50,"line_end":50,"column_start":8,"column_end":18},"name":"clamp_from","qualname":"::traits::Enlargeable::clamp_from","value":"pub fn clamp_from(Self::Larger) -> Self","parent":{"krate":0,"index":2053},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":2062},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\traits.rs","byte_start":476286,"byte_end":476290,"line_start":71,"line_end":71,"column_start":11,"column_end":15},"name":"Lerp","qualname":"::traits::Lerp","value":"Lerp: Bounded + NumCast","parent":null,"children":[{"krate":0,"index":2063},{"krate":0,"index":2064}],"decl_id":null,"docs":" Linear interpolation without involving floating numbers.\n","sig":null,"attributes":[{"value":"/ Linear interpolation without involving floating numbers.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\traits.rs","byte_start":476215,"byte_end":476275,"line_start":70,"line_end":70,"column_start":1,"column_end":61}}]},{"kind":"Type","id":{"krate":0,"index":2063},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\traits.rs","byte_start":476321,"byte_end":476326,"line_start":72,"line_end":72,"column_start":10,"column_end":15},"name":"Ratio","qualname":"::traits::Lerp::Ratio","value":"type Ratio: Primitive;","parent":{"krate":0,"index":2062},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2064},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\traits.rs","byte_start":476347,"byte_end":476351,"line_start":74,"line_end":74,"column_start":8,"column_end":12},"name":"lerp","qualname":"::traits::Lerp::lerp","value":"pub fn lerp(Self, Self, Self::Ratio) -> Self","parent":{"krate":0,"index":2062},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":2071},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\traits.rs","byte_start":477077,"byte_end":477082,"line_start":105,"line_end":105,"column_start":11,"column_end":16},"name":"Pixel","qualname":"::traits::Pixel","value":"Pixel: Copy + Clone","parent":null,"children":[{"krate":0,"index":2072},{"krate":0,"index":2073},{"krate":0,"index":2074},{"krate":0,"index":2075},{"krate":0,"index":2076},{"krate":0,"index":2077},{"krate":0,"index":2078},{"krate":0,"index":2079},{"krate":0,"index":2080},{"krate":0,"index":2081},{"krate":0,"index":2082},{"krate":0,"index":2083},{"krate":0,"index":2084},{"krate":0,"index":2085},{"krate":0,"index":2086},{"krate":0,"index":2087},{"krate":0,"index":2088},{"krate":0,"index":2089},{"krate":0,"index":2090},{"krate":0,"index":2091},{"krate":0,"index":2093},{"krate":0,"index":2095},{"krate":0,"index":2098},{"krate":0,"index":2101},{"krate":0,"index":2104},{"krate":0,"index":2107},{"krate":0,"index":2109},{"krate":0,"index":2111},{"krate":0,"index":2112}],"decl_id":null,"docs":" A generalized pixel.","sig":null,"attributes":[{"value":"/ A generalized pixel.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\traits.rs","byte_start":476952,"byte_end":476976,"line_start":102,"line_end":102,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\traits.rs","byte_start":476977,"byte_end":476980,"line_start":103,"line_end":103,"column_start":1,"column_end":4}},{"value":"/ A pixel object is usually not used standalone but as a view into an image buffer.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\traits.rs","byte_start":476981,"byte_end":477066,"line_start":104,"line_end":104,"column_start":1,"column_end":86}}]},{"kind":"Type","id":{"krate":0,"index":2072},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\traits.rs","byte_start":477146,"byte_end":477154,"line_start":107,"line_end":107,"column_start":10,"column_end":18},"name":"Subpixel","qualname":"::traits::Pixel::Subpixel","value":"type Subpixel: Primitive;","parent":{"krate":0,"index":2071},"children":[],"decl_id":null,"docs":" The underlying subpixel type.\n","sig":null,"attributes":[{"value":"/ The underlying subpixel type.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\traits.rs","byte_start":477103,"byte_end":477136,"line_start":106,"line_end":106,"column_start":5,"column_end":38}}]},{"kind":"Const","id":{"krate":0,"index":2073},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\traits.rs","byte_start":477229,"byte_end":477242,"line_start":110,"line_end":110,"column_start":11,"column_end":24},"name":"CHANNEL_COUNT","qualname":"::traits::Pixel::CHANNEL_COUNT","value":"u8","parent":{"krate":0,"index":2071},"children":[],"decl_id":null,"docs":" The number of channels of this pixel type.\n","sig":null,"attributes":[{"value":"/ The number of channels of this pixel type.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\traits.rs","byte_start":477172,"byte_end":477218,"line_start":109,"line_end":109,"column_start":5,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":2074},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\traits.rs","byte_start":477385,"byte_end":477398,"line_start":113,"line_end":113,"column_start":8,"column_end":21},"name":"channel_count","qualname":"::traits::Pixel::channel_count","value":"pub fn channel_count() -> u8","parent":{"krate":0,"index":2071},"children":[],"decl_id":null,"docs":" Returns the number of channels of this pixel type.\n","sig":null,"attributes":[{"value":"/ Returns the number of channels of this pixel type.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\traits.rs","byte_start":477252,"byte_end":477306,"line_start":111,"line_end":111,"column_start":5,"column_end":59}},{"value":"deprecated(note = \"please use CHANNEL_COUNT associated constant\")","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\traits.rs","byte_start":477311,"byte_end":477377,"line_start":112,"line_end":112,"column_start":5,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":2075},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\traits.rs","byte_start":477494,"byte_end":477502,"line_start":118,"line_end":118,"column_start":8,"column_end":16},"name":"channels","qualname":"::traits::Pixel::channels","value":"pub fn channels(&Self) -> &[Self::Subpixel]","parent":{"krate":0,"index":2071},"children":[],"decl_id":null,"docs":" Returns the components as a slice.\n","sig":null,"attributes":[{"value":"/ Returns the components as a slice.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\traits.rs","byte_start":477448,"byte_end":477486,"line_start":117,"line_end":117,"column_start":5,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":2076},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\traits.rs","byte_start":477590,"byte_end":477602,"line_start":121,"line_end":121,"column_start":8,"column_end":20},"name":"channels_mut","qualname":"::traits::Pixel::channels_mut","value":"pub fn channels_mut(&mut Self) -> &mut [Self::Subpixel]","parent":{"krate":0,"index":2071},"children":[],"decl_id":null,"docs":" Returns the components as a mutable slice\n","sig":null,"attributes":[{"value":"/ Returns the components as a mutable slice","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\traits.rs","byte_start":477537,"byte_end":477582,"line_start":120,"line_end":120,"column_start":5,"column_end":50}}]},{"kind":"Const","id":{"krate":0,"index":2077},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\traits.rs","byte_start":477768,"byte_end":477779,"line_start":125,"line_end":125,"column_start":11,"column_end":22},"name":"COLOR_MODEL","qualname":"::traits::Pixel::COLOR_MODEL","value":"&'static str","parent":{"krate":0,"index":2071},"children":[],"decl_id":null,"docs":" A string that can help to interpret the meaning each channel\n See [gimp babl](http://gegl.org/babl/).\n","sig":null,"attributes":[{"value":"/ A string that can help to interpret the meaning each channel","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\traits.rs","byte_start":477645,"byte_end":477709,"line_start":123,"line_end":123,"column_start":5,"column_end":69}},{"value":"/ See [gimp babl](http://gegl.org/babl/).","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\traits.rs","byte_start":477714,"byte_end":477757,"line_start":124,"line_end":124,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":2078},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\traits.rs","byte_start":477996,"byte_end":478007,"line_start":129,"line_end":129,"column_start":8,"column_end":19},"name":"color_model","qualname":"::traits::Pixel::color_model","value":"pub fn color_model() -> &'static str","parent":{"krate":0,"index":2071},"children":[],"decl_id":null,"docs":" Returns a string that can help to interpret the meaning each channel\n See [gimp babl](http://gegl.org/babl/).\n","sig":null,"attributes":[{"value":"/ Returns a string that can help to interpret the meaning each channel","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\traits.rs","byte_start":477799,"byte_end":477871,"line_start":126,"line_end":126,"column_start":5,"column_end":77}},{"value":"/ See [gimp babl](http://gegl.org/babl/).","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\traits.rs","byte_start":477876,"byte_end":477919,"line_start":127,"line_end":127,"column_start":5,"column_end":48}},{"value":"deprecated(note = \"please use COLOR_MODEL associated constant\")","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\traits.rs","byte_start":477924,"byte_end":477988,"line_start":128,"line_end":128,"column_start":5,"column_end":69}}]},{"kind":"Const","id":{"krate":0,"index":2079},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\traits.rs","byte_start":478111,"byte_end":478121,"line_start":134,"line_end":134,"column_start":11,"column_end":21},"name":"COLOR_TYPE","qualname":"::traits::Pixel::COLOR_TYPE","value":"ColorType","parent":{"krate":0,"index":2071},"children":[],"decl_id":null,"docs":" ColorType for this pixel format\n","sig":null,"attributes":[{"value":"/ ColorType for this pixel format","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\traits.rs","byte_start":478065,"byte_end":478100,"line_start":133,"line_end":133,"column_start":5,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":2080},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\traits.rs","byte_start":478261,"byte_end":478271,"line_start":137,"line_end":137,"column_start":8,"column_end":18},"name":"color_type","qualname":"::traits::Pixel::color_type","value":"pub fn color_type() -> ColorType","parent":{"krate":0,"index":2071},"children":[],"decl_id":null,"docs":" Returns the ColorType for this pixel format\n","sig":null,"attributes":[{"value":"/ Returns the ColorType for this pixel format","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\traits.rs","byte_start":478138,"byte_end":478185,"line_start":135,"line_end":135,"column_start":5,"column_end":52}},{"value":"deprecated(note = \"please use COLOR_TYPE associated constant\")","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\traits.rs","byte_start":478190,"byte_end":478253,"line_start":136,"line_end":136,"column_start":5,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":2081},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\traits.rs","byte_start":478509,"byte_end":478518,"line_start":145,"line_end":145,"column_start":8,"column_end":17},"name":"channels4","qualname":"::traits::Pixel::channels4","value":"pub fn channels4(&Self)\n-> (Self::Subpixel, Self::Subpixel, Self::Subpixel, Self::Subpixel)","parent":{"krate":0,"index":2071},"children":[],"decl_id":null,"docs":" Returns the channels of this pixel as a 4 tuple. If the pixel\n has less than 4 channels the remainder is filled with the maximum value","sig":null,"attributes":[{"value":"/ Returns the channels of this pixel as a 4 tuple. If the pixel","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\traits.rs","byte_start":478325,"byte_end":478390,"line_start":141,"line_end":141,"column_start":5,"column_end":70}},{"value":"/ has less than 4 channels the remainder is filled with the maximum value","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\traits.rs","byte_start":478395,"byte_end":478470,"line_start":142,"line_end":142,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\traits.rs","byte_start":478475,"byte_end":478478,"line_start":143,"line_end":143,"column_start":5,"column_end":8}},{"value":"/ TODO deprecate","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\traits.rs","byte_start":478483,"byte_end":478501,"line_start":144,"line_end":144,"column_start":5,"column_end":23}}]},{"kind":"Method","id":{"krate":0,"index":2082},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\traits.rs","byte_start":478821,"byte_end":478834,"line_start":158,"line_end":158,"column_start":8,"column_end":21},"name":"from_channels","qualname":"::traits::Pixel::from_channels","value":"pub fn from_channels(Self::Subpixel, Self::Subpixel, Self::Subpixel,\n                     Self::Subpixel) -> Self","parent":{"krate":0,"index":2071},"children":[],"decl_id":null,"docs":" Construct a pixel from the 4 channels a, b, c and d.\n If the pixel does not contain 4 channels the extra are ignored.","sig":null,"attributes":[{"value":"/ Construct a pixel from the 4 channels a, b, c and d.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\traits.rs","byte_start":478654,"byte_end":478710,"line_start":154,"line_end":154,"column_start":5,"column_end":61}},{"value":"/ If the pixel does not contain 4 channels the extra are ignored.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\traits.rs","byte_start":478715,"byte_end":478782,"line_start":155,"line_end":155,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\traits.rs","byte_start":478787,"byte_end":478790,"line_start":156,"line_end":156,"column_start":5,"column_end":8}},{"value":"/ TODO deprecate","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\traits.rs","byte_start":478795,"byte_end":478813,"line_start":157,"line_end":157,"column_start":5,"column_end":23}}]},{"kind":"Method","id":{"krate":0,"index":2083},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\traits.rs","byte_start":479188,"byte_end":479198,"line_start":169,"line_end":169,"column_start":8,"column_end":18},"name":"from_slice","qualname":"::traits::Pixel::from_slice","value":"pub fn from_slice(&[Self::Subpixel]) -> &Self","parent":{"krate":0,"index":2071},"children":[],"decl_id":null,"docs":" Returns a view into a slice.","sig":null,"attributes":[{"value":"/ Returns a view into a slice.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\traits.rs","byte_start":478964,"byte_end":478996,"line_start":165,"line_end":165,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\traits.rs","byte_start":479001,"byte_end":479004,"line_start":166,"line_end":166,"column_start":5,"column_end":8}},{"value":"/ Note: The slice length is not checked on creation. Thus the caller has to ensure","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\traits.rs","byte_start":479009,"byte_end":479093,"line_start":167,"line_end":167,"column_start":5,"column_end":89}},{"value":"/ that the slice is long enough to prevent panics if the pixel is used later on.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\traits.rs","byte_start":479098,"byte_end":479180,"line_start":168,"line_end":168,"column_start":5,"column_end":87}}]},{"kind":"Method","id":{"krate":0,"index":2084},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\traits.rs","byte_start":479478,"byte_end":479492,"line_start":175,"line_end":175,"column_start":8,"column_end":22},"name":"from_slice_mut","qualname":"::traits::Pixel::from_slice_mut","value":"pub fn from_slice_mut(&mut [Self::Subpixel]) -> &mut Self","parent":{"krate":0,"index":2071},"children":[],"decl_id":null,"docs":" Returns mutable view into a mutable slice.","sig":null,"attributes":[{"value":"/ Returns mutable view into a mutable slice.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\traits.rs","byte_start":479240,"byte_end":479286,"line_start":171,"line_end":171,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\traits.rs","byte_start":479291,"byte_end":479294,"line_start":172,"line_end":172,"column_start":5,"column_end":8}},{"value":"/ Note: The slice length is not checked on creation. Thus the caller has to ensure","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\traits.rs","byte_start":479299,"byte_end":479383,"line_start":173,"line_end":173,"column_start":5,"column_end":89}},{"value":"/ that the slice is long enough to prevent panics if the pixel is used later on.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\traits.rs","byte_start":479388,"byte_end":479470,"line_start":174,"line_end":174,"column_start":5,"column_end":87}}]},{"kind":"Method","id":{"krate":0,"index":2085},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\traits.rs","byte_start":479579,"byte_end":479585,"line_start":178,"line_end":178,"column_start":8,"column_end":14},"name":"to_rgb","qualname":"::traits::Pixel::to_rgb","value":"pub fn to_rgb(&Self) -> Rgb<Self::Subpixel>","parent":{"krate":0,"index":2071},"children":[],"decl_id":null,"docs":" Convert this pixel to RGB\n","sig":null,"attributes":[{"value":"/ Convert this pixel to RGB","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\traits.rs","byte_start":479542,"byte_end":479571,"line_start":177,"line_end":177,"column_start":5,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":2086},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\traits.rs","byte_start":479681,"byte_end":479688,"line_start":181,"line_end":181,"column_start":8,"column_end":15},"name":"to_rgba","qualname":"::traits::Pixel::to_rgba","value":"pub fn to_rgba(&Self) -> Rgba<Self::Subpixel>","parent":{"krate":0,"index":2071},"children":[],"decl_id":null,"docs":" Convert this pixel to RGB with an alpha channel\n","sig":null,"attributes":[{"value":"/ Convert this pixel to RGB with an alpha channel","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\traits.rs","byte_start":479622,"byte_end":479673,"line_start":180,"line_end":180,"column_start":5,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":2087},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\traits.rs","byte_start":479764,"byte_end":479771,"line_start":184,"line_end":184,"column_start":8,"column_end":15},"name":"to_luma","qualname":"::traits::Pixel::to_luma","value":"pub fn to_luma(&Self) -> Luma<Self::Subpixel>","parent":{"krate":0,"index":2071},"children":[],"decl_id":null,"docs":" Convert this pixel to luma\n","sig":null,"attributes":[{"value":"/ Convert this pixel to luma","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\traits.rs","byte_start":479726,"byte_end":479756,"line_start":183,"line_end":183,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":2088},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\traits.rs","byte_start":479869,"byte_end":479882,"line_start":187,"line_end":187,"column_start":8,"column_end":21},"name":"to_luma_alpha","qualname":"::traits::Pixel::to_luma_alpha","value":"pub fn to_luma_alpha(&Self) -> LumaA<Self::Subpixel>","parent":{"krate":0,"index":2071},"children":[],"decl_id":null,"docs":" Convert this pixel to luma with an alpha channel\n","sig":null,"attributes":[{"value":"/ Convert this pixel to luma with an alpha channel","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\traits.rs","byte_start":479809,"byte_end":479861,"line_start":186,"line_end":186,"column_start":5,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":2089},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\traits.rs","byte_start":479958,"byte_end":479964,"line_start":190,"line_end":190,"column_start":8,"column_end":14},"name":"to_bgr","qualname":"::traits::Pixel::to_bgr","value":"pub fn to_bgr(&Self) -> Bgr<Self::Subpixel>","parent":{"krate":0,"index":2071},"children":[],"decl_id":null,"docs":" Convert this pixel to BGR\n","sig":null,"attributes":[{"value":"/ Convert this pixel to BGR","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\traits.rs","byte_start":479921,"byte_end":479950,"line_start":189,"line_end":189,"column_start":5,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":2090},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\traits.rs","byte_start":480060,"byte_end":480067,"line_start":193,"line_end":193,"column_start":8,"column_end":15},"name":"to_bgra","qualname":"::traits::Pixel::to_bgra","value":"pub fn to_bgra(&Self) -> Bgra<Self::Subpixel>","parent":{"krate":0,"index":2071},"children":[],"decl_id":null,"docs":" Convert this pixel to BGR with an alpha channel\n","sig":null,"attributes":[{"value":"/ Convert this pixel to BGR with an alpha channel","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\traits.rs","byte_start":480001,"byte_end":480052,"line_start":192,"line_end":192,"column_start":5,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":2091},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\traits.rs","byte_start":480174,"byte_end":480177,"line_start":196,"line_end":196,"column_start":8,"column_end":11},"name":"map","qualname":"::traits::Pixel::map","value":"pub fn map<F>(&Self, F) -> Self where F: FnMut(Self::Subpixel) ->\nSelf::Subpixel","parent":{"krate":0,"index":2071},"children":[],"decl_id":null,"docs":" Apply the function ```f``` to each channel of this pixel.\n","sig":null,"attributes":[{"value":"/ Apply the function ```f``` to each channel of this pixel.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\traits.rs","byte_start":480105,"byte_end":480166,"line_start":195,"line_end":195,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":2093},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\traits.rs","byte_start":480338,"byte_end":480343,"line_start":201,"line_end":201,"column_start":8,"column_end":13},"name":"apply","qualname":"::traits::Pixel::apply","value":"pub fn apply<F>(&mut Self, F) where F: FnMut(Self::Subpixel) -> Self::Subpixel","parent":{"krate":0,"index":2071},"children":[],"decl_id":null,"docs":" Apply the function ```f``` to each channel of this pixel.\n","sig":null,"attributes":[{"value":"/ Apply the function ```f``` to each channel of this pixel.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\traits.rs","byte_start":480269,"byte_end":480330,"line_start":200,"line_end":200,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":2095},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\traits.rs","byte_start":480568,"byte_end":480582,"line_start":207,"line_end":207,"column_start":8,"column_end":22},"name":"map_with_alpha","qualname":"::traits::Pixel::map_with_alpha","value":"pub fn map_with_alpha<F, G>(&Self, F, G) -> Self where\nF: FnMut(Self::Subpixel) -> Self::Subpixel, G: FnMut(Self::Subpixel) ->\nSelf::Subpixel","parent":{"krate":0,"index":2071},"children":[],"decl_id":null,"docs":" Apply the function ```f``` to each channel except the alpha channel.\n Apply the function ```g``` to the alpha channel.\n","sig":null,"attributes":[{"value":"/ Apply the function ```f``` to each channel except the alpha channel.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\traits.rs","byte_start":480431,"byte_end":480503,"line_start":205,"line_end":205,"column_start":5,"column_end":77}},{"value":"/ Apply the function ```g``` to the alpha channel.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\traits.rs","byte_start":480508,"byte_end":480560,"line_start":206,"line_end":206,"column_start":5,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":2098},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\traits.rs","byte_start":480888,"byte_end":480904,"line_start":214,"line_end":214,"column_start":8,"column_end":24},"name":"apply_with_alpha","qualname":"::traits::Pixel::apply_with_alpha","value":"pub fn apply_with_alpha<F, G>(&mut Self, F, G) where F: FnMut(Self::Subpixel)\n-> Self::Subpixel, G: FnMut(Self::Subpixel) -> Self::Subpixel","parent":{"krate":0,"index":2071},"children":[],"decl_id":null,"docs":" Apply the function ```f``` to each channel except the alpha channel.\n Apply the function ```g``` to the alpha channel. Works in-place.\n","sig":null,"attributes":[{"value":"/ Apply the function ```f``` to each channel except the alpha channel.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\traits.rs","byte_start":480735,"byte_end":480807,"line_start":212,"line_end":212,"column_start":5,"column_end":77}},{"value":"/ Apply the function ```g``` to the alpha channel. Works in-place.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\traits.rs","byte_start":480812,"byte_end":480880,"line_start":213,"line_end":213,"column_start":5,"column_end":73}}]},{"kind":"Method","id":{"krate":0,"index":2101},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\traits.rs","byte_start":481133,"byte_end":481150,"line_start":220,"line_end":220,"column_start":8,"column_end":25},"name":"map_without_alpha","qualname":"::traits::Pixel::map_without_alpha","value":"pub fn map_without_alpha<F>(&Self, F) -> Self where F: FnMut(Self::Subpixel)\n-> Self::Subpixel","parent":{"krate":0,"index":2071},"children":[],"decl_id":null,"docs":" Apply the function ```f``` to each channel except the alpha channel.\n","sig":null,"attributes":[{"value":"/ Apply the function ```f``` to each channel except the alpha channel.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\traits.rs","byte_start":481053,"byte_end":481125,"line_start":219,"line_end":219,"column_start":5,"column_end":77}}]},{"kind":"Method","id":{"krate":0,"index":2104},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\traits.rs","byte_start":481442,"byte_end":481461,"line_start":231,"line_end":231,"column_start":8,"column_end":27},"name":"apply_without_alpha","qualname":"::traits::Pixel::apply_without_alpha","value":"pub fn apply_without_alpha<F>(&mut Self, F) where F: FnMut(Self::Subpixel) ->\nSelf::Subpixel","parent":{"krate":0,"index":2071},"children":[],"decl_id":null,"docs":" Apply the function ```f``` to each channel except the alpha channel.\n Works in place.\n","sig":null,"attributes":[{"value":"/ Apply the function ```f``` to each channel except the alpha channel.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\traits.rs","byte_start":481338,"byte_end":481410,"line_start":229,"line_end":229,"column_start":5,"column_end":77}},{"value":"/ Works in place.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\traits.rs","byte_start":481415,"byte_end":481434,"line_start":230,"line_end":230,"column_start":5,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":2107},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\traits.rs","byte_start":481704,"byte_end":481708,"line_start":240,"line_end":240,"column_start":8,"column_end":12},"name":"map2","qualname":"::traits::Pixel::map2","value":"pub fn map2<F>(&Self, &Self, F) -> Self where\nF: FnMut(Self::Subpixel, Self::Subpixel) -> Self::Subpixel","parent":{"krate":0,"index":2071},"children":[],"decl_id":null,"docs":" Apply the function ```f``` to each channel of this pixel and\n ```other``` pairwise.\n","sig":null,"attributes":[{"value":"/ Apply the function ```f``` to each channel of this pixel and","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\traits.rs","byte_start":481602,"byte_end":481666,"line_start":238,"line_end":238,"column_start":5,"column_end":69}},{"value":"/ ```other``` pairwise.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\traits.rs","byte_start":481671,"byte_end":481696,"line_start":239,"line_end":239,"column_start":5,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":2109},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\traits.rs","byte_start":481948,"byte_end":481954,"line_start":246,"line_end":246,"column_start":8,"column_end":14},"name":"apply2","qualname":"::traits::Pixel::apply2","value":"pub fn apply2<F>(&mut Self, &Self, F) where\nF: FnMut(Self::Subpixel, Self::Subpixel) -> Self::Subpixel","parent":{"krate":0,"index":2071},"children":[],"decl_id":null,"docs":" Apply the function ```f``` to each channel of this pixel and\n ```other``` pairwise. Works in-place.\n","sig":null,"attributes":[{"value":"/ Apply the function ```f``` to each channel of this pixel and","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\traits.rs","byte_start":481830,"byte_end":481894,"line_start":244,"line_end":244,"column_start":5,"column_end":69}},{"value":"/ ```other``` pairwise. Works in-place.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\traits.rs","byte_start":481899,"byte_end":481940,"line_start":245,"line_end":245,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":2111},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\traits.rs","byte_start":482101,"byte_end":482107,"line_start":251,"line_end":251,"column_start":8,"column_end":14},"name":"invert","qualname":"::traits::Pixel::invert","value":"pub fn invert(&mut Self)","parent":{"krate":0,"index":2071},"children":[],"decl_id":null,"docs":" Invert this pixel\n","sig":null,"attributes":[{"value":"/ Invert this pixel","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\traits.rs","byte_start":482072,"byte_end":482093,"line_start":250,"line_end":250,"column_start":5,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":2112},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\traits.rs","byte_start":482218,"byte_end":482223,"line_start":254,"line_end":254,"column_start":8,"column_end":13},"name":"blend","qualname":"::traits::Pixel::blend","value":"pub fn blend(&mut Self, &Self)","parent":{"krate":0,"index":2071},"children":[],"decl_id":null,"docs":" Blend the color of a given pixel into ourself, taking into account alpha channels\n","sig":null,"attributes":[{"value":"/ Blend the color of a given pixel into ourself, taking into account alpha channels","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\traits.rs","byte_start":482125,"byte_end":482210,"line_start":253,"line_end":253,"column_start":5,"column_end":90}}]},{"kind":"Trait","id":{"krate":0,"index":2114},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\traits.rs","byte_start":482332,"byte_end":482347,"line_start":259,"line_end":259,"column_start":15,"column_end":30},"name":"EncodableLayout","qualname":"::traits::seals::EncodableLayout","value":"EncodableLayout","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3377},"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\utils\\mod.rs","byte_start":486357,"byte_end":486376,"line_start":108,"line_end":108,"column_start":12,"column_end":31},"name":"NonExhaustiveMarker","qualname":"::utils::NonExhaustiveMarker","value":"NonExhaustiveMarker {  }","parent":null,"children":[{"krate":0,"index":3378}],"decl_id":null,"docs":" A marker struct for __NonExhaustive enums.","sig":null,"attributes":[{"value":"/ A marker struct for __NonExhaustive enums.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\utils\\mod.rs","byte_start":485634,"byte_end":485680,"line_start":97,"line_end":97,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\utils\\mod.rs","byte_start":485681,"byte_end":485684,"line_start":98,"line_end":98,"column_start":1,"column_end":4}},{"value":"/ This is an empty type that can not be constructed. When an enum contains a tuple variant that","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\utils\\mod.rs","byte_start":485685,"byte_end":485782,"line_start":99,"line_end":99,"column_start":1,"column_end":98}},{"value":"/ includes this type the optimizer can statically determined tha the branch is never taken while","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\utils\\mod.rs","byte_start":485783,"byte_end":485881,"line_start":100,"line_end":100,"column_start":1,"column_end":99}},{"value":"/ at the same time the matching of the branch is required.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\utils\\mod.rs","byte_start":485882,"byte_end":485942,"line_start":101,"line_end":101,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\utils\\mod.rs","byte_start":485943,"byte_end":485946,"line_start":102,"line_end":102,"column_start":1,"column_end":4}},{"value":"/ The effect is thus very similar to the actual `#[non_exhaustive]` attribute with no runtime","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\utils\\mod.rs","byte_start":485947,"byte_end":486042,"line_start":103,"line_end":103,"column_start":1,"column_end":96}},{"value":"/ costs. Also note that we use a dirty trick to not only hide this type from the doc but make it","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\utils\\mod.rs","byte_start":486043,"byte_end":486141,"line_start":104,"line_end":104,"column_start":1,"column_end":99}},{"value":"/ inaccessible. The visibility in this module is pub but the module itself is not and the","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\utils\\mod.rs","byte_start":486142,"byte_end":486233,"line_start":105,"line_end":105,"column_start":1,"column_end":92}},{"value":"/ top-level crate never exports the type.","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\utils\\mod.rs","byte_start":486234,"byte_end":486277,"line_start":106,"line_end":106,"column_start":1,"column_end":44}}]}],"impls":[{"id":0,"kind":"Inherent","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\error.rs","byte_start":19890,"byte_end":19906,"line_start":194,"line_end":194,"column_start":6,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":64},{"krate":0,"index":65},{"krate":0,"index":66}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Inherent","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\error.rs","byte_start":20604,"byte_end":20617,"line_start":217,"line_end":217,"column_start":6,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":68},{"krate":0,"index":70},{"krate":0,"index":71}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Inherent","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\error.rs","byte_start":21393,"byte_end":21406,"line_start":245,"line_end":245,"column_start":6,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":73},{"krate":0,"index":75},{"krate":0,"index":76}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Inherent","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\error.rs","byte_start":22183,"byte_end":22197,"line_start":273,"line_end":273,"column_start":6,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":78},{"krate":0,"index":79}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Inherent","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\error.rs","byte_start":22576,"byte_end":22586,"line_start":288,"line_end":288,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":81},{"krate":0,"index":82}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Direct","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\error.rs","byte_start":22943,"byte_end":22953,"line_start":302,"line_end":302,"column_start":26,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":84}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Direct","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\error.rs","byte_start":23069,"byte_end":23084,"line_start":308,"line_end":308,"column_start":28,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":86}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Direct","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\error.rs","byte_start":23213,"byte_end":23228,"line_start":314,"line_end":314,"column_start":36,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":88}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Direct","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\error.rs","byte_start":23478,"byte_end":23494,"line_start":323,"line_end":323,"column_start":32,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":90}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Direct","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\error.rs","byte_start":23797,"byte_end":23807,"line_start":335,"line_end":335,"column_start":23,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":94}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Direct","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\error.rs","byte_start":24268,"byte_end":24278,"line_start":348,"line_end":348,"column_start":16,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":96}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Direct","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\error.rs","byte_start":24731,"byte_end":24747,"line_start":361,"line_end":361,"column_start":23,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":98}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Direct","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\error.rs","byte_start":26369,"byte_end":26385,"line_start":404,"line_end":404,"column_start":16,"column_end":32},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Direct","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\error.rs","byte_start":26413,"byte_end":26427,"line_start":406,"line_end":406,"column_start":23,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":101}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Direct","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\error.rs","byte_start":27462,"byte_end":27476,"line_start":438,"line_end":438,"column_start":16,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":103}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Direct","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\error.rs","byte_start":27681,"byte_end":27694,"line_start":447,"line_end":447,"column_start":23,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":105}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Direct","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\error.rs","byte_start":28155,"byte_end":28168,"line_start":465,"line_end":465,"column_start":16,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":107}],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Direct","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\error.rs","byte_start":28373,"byte_end":28386,"line_start":474,"line_end":474,"column_start":23,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":109}],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Direct","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\error.rs","byte_start":28833,"byte_end":28846,"line_start":486,"line_end":486,"column_start":16,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":111}],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Direct","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\error.rs","byte_start":29051,"byte_end":29061,"line_start":495,"line_end":495,"column_start":23,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":113}],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Direct","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\error.rs","byte_start":29444,"byte_end":29454,"line_start":505,"line_end":505,"column_start":16,"column_end":26},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Direct","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\error.rs","byte_start":29482,"byte_end":29497,"line_start":507,"line_end":507,"column_start":23,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":116}],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Inherent","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\math\\nq.rs","byte_start":34338,"byte_end":34346,"line_start":86,"line_end":86,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":133},{"krate":0,"index":134},{"krate":0,"index":135},{"krate":0,"index":136},{"krate":0,"index":137}],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Direct","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\math\\nq.rs","byte_start":34916,"byte_end":34924,"line_start":105,"line_end":105,"column_start":38,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":140}],"docs":"","sig":null,"attributes":[]},{"id":24,"kind":"Direct","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\math\\nq.rs","byte_start":35073,"byte_end":35081,"line_start":112,"line_end":112,"column_start":38,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":142}],"docs":"","sig":null,"attributes":[]},{"id":25,"kind":"Direct","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\imageops\\colorops.rs","byte_start":70411,"byte_end":70418,"line_start":232,"line_end":232,"column_start":19,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":286},{"krate":0,"index":287},{"krate":0,"index":288},{"krate":0,"index":289},{"krate":0,"index":290}],"docs":"","sig":null,"attributes":[]},{"id":26,"kind":"Direct","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\imageops\\colorops.rs","byte_start":71197,"byte_end":71205,"line_start":268,"line_end":268,"column_start":23,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":292},{"krate":0,"index":293},{"krate":0,"index":294},{"krate":0,"index":296},{"krate":0,"index":297}],"docs":"","sig":null,"attributes":[]},{"id":27,"kind":"Direct","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\imageops\\colorops.rs","byte_start":71744,"byte_end":71752,"line_start":292,"line_end":292,"column_start":32,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":299},{"krate":0,"index":300},{"krate":0,"index":301},{"krate":0,"index":303},{"krate":0,"index":304}],"docs":"","sig":null,"attributes":[]},{"id":28,"kind":"Inherent","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\imageops\\sample.rs","byte_start":86966,"byte_end":86978,"line_start":363,"line_end":363,"column_start":34,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":360},{"krate":0,"index":361},{"krate":0,"index":362}],"docs":"","sig":null,"attributes":[]},{"id":29,"kind":"Inherent","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\io\\reader.rs","byte_start":105865,"byte_end":105871,"line_start":68,"line_end":68,"column_start":15,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":456},{"krate":0,"index":457},{"krate":0,"index":458},{"krate":0,"index":459},{"krate":0,"index":460},{"krate":0,"index":461}],"docs":"","sig":null,"attributes":[]},{"id":30,"kind":"Inherent","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\io\\reader.rs","byte_start":107253,"byte_end":107259,"line_start":115,"line_end":115,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":463},{"krate":0,"index":465}],"docs":"","sig":null,"attributes":[]},{"id":31,"kind":"Inherent","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\io\\reader.rs","byte_start":108045,"byte_end":108051,"line_start":137,"line_end":137,"column_start":25,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":468},{"krate":0,"index":469},{"krate":0,"index":471},{"krate":0,"index":472},{"krate":0,"index":473}],"docs":"","sig":null,"attributes":[]},{"id":32,"kind":"Inherent","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":126280,"byte_end":126292,"line_start":124,"line_end":124,"column_start":6,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":540},{"krate":0,"index":541},{"krate":0,"index":542},{"krate":0,"index":543},{"krate":0,"index":544},{"krate":0,"index":545},{"krate":0,"index":547},{"krate":0,"index":549},{"krate":0,"index":552},{"krate":0,"index":553},{"krate":0,"index":554},{"krate":0,"index":555},{"krate":0,"index":556},{"krate":0,"index":560},{"krate":0,"index":561}],"docs":"","sig":null,"attributes":[]},{"id":33,"kind":"Inherent","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":138887,"byte_end":138890,"line_start":437,"line_end":437,"column_start":6,"column_end":9},"value":"","parent":null,"children":[{"krate":0,"index":563},{"krate":0,"index":564},{"krate":0,"index":565}],"docs":"","sig":null,"attributes":[]},{"id":34,"kind":"Inherent","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":139148,"byte_end":139159,"line_start":452,"line_end":452,"column_start":14,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":568},{"krate":0,"index":569},{"krate":0,"index":570},{"krate":0,"index":571},{"krate":0,"index":573},{"krate":0,"index":575},{"krate":0,"index":577},{"krate":0,"index":580},{"krate":0,"index":582},{"krate":0,"index":584},{"krate":0,"index":586},{"krate":0,"index":588},{"krate":0,"index":590},{"krate":0,"index":592},{"krate":0,"index":594},{"krate":0,"index":596},{"krate":0,"index":599},{"krate":0,"index":600},{"krate":0,"index":601},{"krate":0,"index":602},{"krate":0,"index":603},{"krate":0,"index":604},{"krate":0,"index":605},{"krate":0,"index":606},{"krate":0,"index":607}],"docs":"","sig":null,"attributes":[]},{"id":35,"kind":"Inherent","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":156314,"byte_end":156325,"line_start":873,"line_end":873,"column_start":22,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":611}],"docs":"","sig":null,"attributes":[]},{"id":36,"kind":"Inherent","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":162177,"byte_end":162181,"line_start":1028,"line_end":1028,"column_start":24,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":616},{"krate":0,"index":617},{"krate":0,"index":618},{"krate":0,"index":619},{"krate":0,"index":620},{"krate":0,"index":621},{"krate":0,"index":622},{"krate":0,"index":623},{"krate":0,"index":624},{"krate":0,"index":625}],"docs":"","sig":null,"attributes":[]},{"id":37,"kind":"Inherent","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":167766,"byte_end":167773,"line_start":1161,"line_end":1161,"column_start":24,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":629},{"krate":0,"index":630},{"krate":0,"index":631},{"krate":0,"index":632},{"krate":0,"index":633},{"krate":0,"index":634},{"krate":0,"index":635},{"krate":0,"index":636},{"krate":0,"index":637}],"docs":"","sig":null,"attributes":[]},{"id":38,"kind":"Direct","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":172149,"byte_end":172160,"line_start":1275,"line_end":1275,"column_start":40,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":642},{"krate":0,"index":643}],"docs":"","sig":null,"attributes":[]},{"id":39,"kind":"Direct","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":172769,"byte_end":172780,"line_start":1294,"line_end":1294,"column_start":43,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":647}],"docs":"","sig":null,"attributes":[]},{"id":40,"kind":"Direct","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":173384,"byte_end":173388,"line_start":1312,"line_end":1312,"column_start":45,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":652},{"krate":0,"index":653},{"krate":0,"index":654},{"krate":0,"index":655},{"krate":0,"index":656},{"krate":0,"index":657},{"krate":0,"index":660}],"docs":"","sig":null,"attributes":[]},{"id":41,"kind":"Direct","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":174635,"byte_end":174642,"line_start":1357,"line_end":1357,"column_start":45,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":664},{"krate":0,"index":665},{"krate":0,"index":666},{"krate":0,"index":667},{"krate":0,"index":668},{"krate":0,"index":669},{"krate":0,"index":672}],"docs":"","sig":null,"attributes":[]},{"id":42,"kind":"Direct","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":175909,"byte_end":175916,"line_start":1402,"line_end":1402,"column_start":41,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":676},{"krate":0,"index":677},{"krate":0,"index":678},{"krate":0,"index":679},{"krate":0,"index":680}],"docs":"","sig":null,"attributes":[]},{"id":43,"kind":"Direct","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":176811,"byte_end":176821,"line_start":1431,"line_end":1431,"column_start":22,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":682}],"docs":"","sig":null,"attributes":[]},{"id":44,"kind":"Direct","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":176973,"byte_end":176996,"line_start":1435,"line_end":1435,"column_start":31,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":684}],"docs":"","sig":null,"attributes":[]},{"id":45,"kind":"Direct","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":177204,"byte_end":177227,"line_start":1440,"line_end":1440,"column_start":31,"column_end":54},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":46,"kind":"Direct","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":177801,"byte_end":177806,"line_start":1454,"line_end":1454,"column_start":23,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":687}],"docs":"","sig":null,"attributes":[]},{"id":47,"kind":"Direct","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":178741,"byte_end":178746,"line_start":1478,"line_end":1478,"column_start":23,"column_end":28},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":48,"kind":"Direct","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":178771,"byte_end":178781,"line_start":1480,"line_end":1480,"column_start":21,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":690}],"docs":"","sig":null,"attributes":[]},{"id":49,"kind":"Inherent","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\codecs\\jpeg\\decoder.rs","byte_start":185497,"byte_end":185508,"line_start":18,"line_end":18,"column_start":15,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":723},{"krate":0,"index":724}],"docs":"","sig":null,"attributes":[]},{"id":50,"kind":"Direct","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\codecs\\jpeg\\decoder.rs","byte_start":187186,"byte_end":187196,"line_start":67,"line_end":67,"column_start":18,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":732},{"krate":0,"index":733}],"docs":"","sig":null,"attributes":[]},{"id":51,"kind":"Direct","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\codecs\\jpeg\\decoder.rs","byte_start":187609,"byte_end":187620,"line_start":81,"line_end":81,"column_start":45,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":737},{"krate":0,"index":738},{"krate":0,"index":739},{"krate":0,"index":740},{"krate":0,"index":741}],"docs":"","sig":null,"attributes":[]},{"id":52,"kind":"Inherent","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\codecs\\jpeg\\decoder.rs","byte_start":189366,"byte_end":189375,"line_start":141,"line_end":141,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":744}],"docs":"","sig":null,"attributes":[]},{"id":53,"kind":"Inherent","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\codecs\\jpeg\\decoder.rs","byte_start":189633,"byte_end":189643,"line_start":152,"line_end":152,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":747}],"docs":"","sig":null,"attributes":[]},{"id":54,"kind":"Inherent","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\codecs\\jpeg\\encoder.rs","byte_start":215866,"byte_end":215875,"line_start":169,"line_end":169,"column_start":25,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":818},{"krate":0,"index":819},{"krate":0,"index":820},{"krate":0,"index":821},{"krate":0,"index":822},{"krate":0,"index":824},{"krate":0,"index":825}],"docs":"","sig":null,"attributes":[]},{"id":55,"kind":"Inherent","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\codecs\\jpeg\\encoder.rs","byte_start":219339,"byte_end":219351,"line_start":301,"line_end":301,"column_start":6,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":827}],"docs":"","sig":null,"attributes":[]},{"id":56,"kind":"Direct","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\codecs\\jpeg\\encoder.rs","byte_start":219689,"byte_end":219701,"line_start":313,"line_end":313,"column_start":18,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":829}],"docs":"","sig":null,"attributes":[]},{"id":57,"kind":"Inherent","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\codecs\\jpeg\\encoder.rs","byte_start":220528,"byte_end":220539,"line_start":349,"line_end":349,"column_start":20,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":848},{"krate":0,"index":849},{"krate":0,"index":852},{"krate":0,"index":853},{"krate":0,"index":854},{"krate":0,"index":858},{"krate":0,"index":862}],"docs":"","sig":null,"attributes":[]},{"id":58,"kind":"Direct","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\codecs\\jpeg\\encoder.rs","byte_start":231835,"byte_end":231846,"line_start":677,"line_end":677,"column_start":37,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":873}],"docs":"","sig":null,"attributes":[]},{"id":59,"kind":"Inherent","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\codecs\\png.rs","byte_start":254378,"byte_end":254387,"line_start":45,"line_end":45,"column_start":15,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":971}],"docs":"","sig":null,"attributes":[]},{"id":60,"kind":"Direct","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\codecs\\png.rs","byte_start":255145,"byte_end":255154,"line_start":69,"line_end":69,"column_start":24,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":974},{"krate":0,"index":975}],"docs":"","sig":null,"attributes":[]},{"id":61,"kind":"Inherent","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\codecs\\png.rs","byte_start":256519,"byte_end":256529,"line_start":120,"line_end":120,"column_start":15,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":982},{"krate":0,"index":983},{"krate":0,"index":984}],"docs":"","sig":null,"attributes":[]},{"id":62,"kind":"Direct","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\codecs\\png.rs","byte_start":261143,"byte_end":261153,"line_start":209,"line_end":209,"column_start":45,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":989},{"krate":0,"index":990},{"krate":0,"index":991},{"krate":0,"index":992},{"krate":0,"index":993},{"krate":0,"index":999}],"docs":"","sig":null,"attributes":[]},{"id":63,"kind":"Inherent","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\codecs\\png.rs","byte_start":263214,"byte_end":263225,"line_start":272,"line_end":272,"column_start":15,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":1010},{"krate":0,"index":1011},{"krate":0,"index":1013}],"docs":"","sig":null,"attributes":[]},{"id":64,"kind":"Direct","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\codecs\\png.rs","byte_start":268776,"byte_end":268787,"line_start":412,"line_end":412,"column_start":49,"column_end":60},"value":"","parent":null,"children":[{"krate":0,"index":1017}],"docs":"","sig":null,"attributes":[]},{"id":65,"kind":"Direct","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\codecs\\png.rs","byte_start":268925,"byte_end":268938,"line_start":416,"line_end":416,"column_start":36,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":1024},{"krate":0,"index":1025}],"docs":"","sig":null,"attributes":[]},{"id":66,"kind":"Inherent","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\codecs\\png.rs","byte_start":271547,"byte_end":271557,"line_start":502,"line_end":502,"column_start":16,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":1035},{"krate":0,"index":1036},{"krate":0,"index":1037}],"docs":"","sig":null,"attributes":[]},{"id":67,"kind":"Direct","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\codecs\\png.rs","byte_start":275392,"byte_end":275402,"line_start":577,"line_end":577,"column_start":33,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":1042}],"docs":"","sig":null,"attributes":[]},{"id":68,"kind":"Inherent","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\codecs\\png.rs","byte_start":276637,"byte_end":276647,"line_start":609,"line_end":609,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":1049}],"docs":"","sig":null,"attributes":[]},{"id":69,"kind":"Direct","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\codecs\\png.rs","byte_start":277664,"byte_end":277679,"line_start":637,"line_end":637,"column_start":18,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":1052}],"docs":"","sig":null,"attributes":[]},{"id":70,"kind":"Direct","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\codecs\\png.rs","byte_start":277765,"byte_end":277775,"line_start":643,"line_end":643,"column_start":18,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":1054}],"docs":"","sig":null,"attributes":[]},{"id":71,"kind":"Inherent","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\animation.rs","byte_start":279408,"byte_end":279414,"line_start":14,"line_end":14,"column_start":10,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":1083},{"krate":0,"index":1084}],"docs":"","sig":null,"attributes":[]},{"id":72,"kind":"Direct","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\animation.rs","byte_start":280004,"byte_end":280010,"line_start":30,"line_end":30,"column_start":23,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":1087},{"krate":0,"index":1088}],"docs":"","sig":null,"attributes":[]},{"id":73,"kind":"Inherent","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\animation.rs","byte_start":280529,"byte_end":280534,"line_start":55,"line_end":55,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":1090},{"krate":0,"index":1091},{"krate":0,"index":1092},{"krate":0,"index":1093},{"krate":0,"index":1094},{"krate":0,"index":1095},{"krate":0,"index":1096}],"docs":"","sig":null,"attributes":[]},{"id":74,"kind":"Inherent","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\animation.rs","byte_start":281483,"byte_end":281488,"line_start":102,"line_end":102,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":1098},{"krate":0,"index":1099},{"krate":0,"index":1101},{"krate":0,"index":1102},{"krate":0,"index":1103},{"krate":0,"index":1104}],"docs":"","sig":null,"attributes":[]},{"id":75,"kind":"Direct","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\animation.rs","byte_start":287524,"byte_end":287532,"line_start":258,"line_end":258,"column_start":22,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":1111}],"docs":"","sig":null,"attributes":[]},{"id":76,"kind":"Direct","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\buffer.rs","byte_start":290993,"byte_end":290999,"line_start":26,"line_end":26,"column_start":38,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":1157},{"krate":0,"index":1158}],"docs":"","sig":null,"attributes":[]},{"id":77,"kind":"Direct","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\buffer.rs","byte_start":291243,"byte_end":291249,"line_start":38,"line_end":38,"column_start":47,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":1163}],"docs":"","sig":null,"attributes":[]},{"id":78,"kind":"Direct","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\buffer.rs","byte_start":291398,"byte_end":291404,"line_start":47,"line_end":47,"column_start":49,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":1167}],"docs":"","sig":null,"attributes":[]},{"id":79,"kind":"Direct","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\buffer.rs","byte_start":291613,"byte_end":291619,"line_start":57,"line_end":57,"column_start":26,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":1171}],"docs":"","sig":null,"attributes":[]},{"id":80,"kind":"Direct","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\buffer.rs","byte_start":291745,"byte_end":291751,"line_start":63,"line_end":63,"column_start":31,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":1174}],"docs":"","sig":null,"attributes":[]},{"id":81,"kind":"Direct","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\buffer.rs","byte_start":292166,"byte_end":292175,"line_start":83,"line_end":83,"column_start":38,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":1182},{"krate":0,"index":1183}],"docs":"","sig":null,"attributes":[]},{"id":82,"kind":"Direct","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\buffer.rs","byte_start":292431,"byte_end":292440,"line_start":95,"line_end":95,"column_start":47,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":1188}],"docs":"","sig":null,"attributes":[]},{"id":83,"kind":"Direct","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\buffer.rs","byte_start":292589,"byte_end":292598,"line_start":104,"line_end":104,"column_start":49,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":1192}],"docs":"","sig":null,"attributes":[]},{"id":84,"kind":"Direct","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\buffer.rs","byte_start":292846,"byte_end":292855,"line_start":116,"line_end":116,"column_start":31,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":1196}],"docs":"","sig":null,"attributes":[]},{"id":85,"kind":"Inherent","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\buffer.rs","byte_start":293421,"byte_end":293425,"line_start":140,"line_end":140,"column_start":25,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":1204}],"docs":"","sig":null,"attributes":[]},{"id":86,"kind":"Direct","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\buffer.rs","byte_start":294324,"byte_end":294328,"line_start":161,"line_end":161,"column_start":38,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":1208},{"krate":0,"index":1209}],"docs":"","sig":null,"attributes":[]},{"id":87,"kind":"Direct","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\buffer.rs","byte_start":294738,"byte_end":294742,"line_start":177,"line_end":177,"column_start":47,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":1213}],"docs":"","sig":null,"attributes":[]},{"id":88,"kind":"Direct","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\buffer.rs","byte_start":294891,"byte_end":294895,"line_start":186,"line_end":186,"column_start":49,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":1217}],"docs":"","sig":null,"attributes":[]},{"id":89,"kind":"Direct","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\buffer.rs","byte_start":295262,"byte_end":295266,"line_start":200,"line_end":200,"column_start":26,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":1220}],"docs":"","sig":null,"attributes":[]},{"id":90,"kind":"Direct","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\buffer.rs","byte_start":295390,"byte_end":295394,"line_start":206,"line_end":206,"column_start":31,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":1223}],"docs":"","sig":null,"attributes":[]},{"id":91,"kind":"Inherent","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\buffer.rs","byte_start":295981,"byte_end":295988,"line_start":230,"line_end":230,"column_start":25,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":1231}],"docs":"","sig":null,"attributes":[]},{"id":92,"kind":"Direct","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\buffer.rs","byte_start":296909,"byte_end":296916,"line_start":251,"line_end":251,"column_start":38,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":1235},{"krate":0,"index":1236}],"docs":"","sig":null,"attributes":[]},{"id":93,"kind":"Direct","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\buffer.rs","byte_start":297339,"byte_end":297346,"line_start":267,"line_end":267,"column_start":47,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":1240}],"docs":"","sig":null,"attributes":[]},{"id":94,"kind":"Direct","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\buffer.rs","byte_start":297495,"byte_end":297502,"line_start":276,"line_end":276,"column_start":49,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":1244}],"docs":"","sig":null,"attributes":[]},{"id":95,"kind":"Direct","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\buffer.rs","byte_start":297884,"byte_end":297891,"line_start":290,"line_end":290,"column_start":31,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":1247}],"docs":"","sig":null,"attributes":[]},{"id":96,"kind":"Direct","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\buffer.rs","byte_start":298347,"byte_end":298362,"line_start":313,"line_end":313,"column_start":38,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":1258},{"krate":0,"index":1259}],"docs":"","sig":null,"attributes":[]},{"id":97,"kind":"Direct","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\buffer.rs","byte_start":298765,"byte_end":298780,"line_start":331,"line_end":331,"column_start":47,"column_end":62},"value":"","parent":null,"children":[{"krate":0,"index":1264}],"docs":"","sig":null,"attributes":[]},{"id":98,"kind":"Direct","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\buffer.rs","byte_start":298906,"byte_end":298921,"line_start":340,"line_end":340,"column_start":26,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":1267}],"docs":"","sig":null,"attributes":[]},{"id":99,"kind":"Direct","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\buffer.rs","byte_start":299097,"byte_end":299112,"line_start":349,"line_end":349,"column_start":31,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":1270}],"docs":"","sig":null,"attributes":[]},{"id":100,"kind":"Direct","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\buffer.rs","byte_start":299651,"byte_end":299664,"line_start":374,"line_end":374,"column_start":38,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":1280},{"krate":0,"index":1281}],"docs":"","sig":null,"attributes":[]},{"id":101,"kind":"Direct","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\buffer.rs","byte_start":300202,"byte_end":300215,"line_start":398,"line_end":398,"column_start":47,"column_end":60},"value":"","parent":null,"children":[{"krate":0,"index":1286}],"docs":"","sig":null,"attributes":[]},{"id":102,"kind":"Direct","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\buffer.rs","byte_start":300339,"byte_end":300352,"line_start":407,"line_end":407,"column_start":26,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":1289}],"docs":"","sig":null,"attributes":[]},{"id":103,"kind":"Direct","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\buffer.rs","byte_start":300522,"byte_end":300535,"line_start":416,"line_end":416,"column_start":31,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":1292}],"docs":"","sig":null,"attributes":[]},{"id":104,"kind":"Direct","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\buffer.rs","byte_start":301063,"byte_end":301081,"line_start":441,"line_end":441,"column_start":38,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":1303},{"krate":0,"index":1304}],"docs":"","sig":null,"attributes":[]},{"id":105,"kind":"Direct","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\buffer.rs","byte_start":301492,"byte_end":301510,"line_start":459,"line_end":459,"column_start":47,"column_end":65},"value":"","parent":null,"children":[{"krate":0,"index":1309}],"docs":"","sig":null,"attributes":[]},{"id":106,"kind":"Direct","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\buffer.rs","byte_start":301641,"byte_end":301659,"line_start":468,"line_end":468,"column_start":31,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":1312}],"docs":"","sig":null,"attributes":[]},{"id":107,"kind":"Direct","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\buffer.rs","byte_start":302207,"byte_end":302223,"line_start":493,"line_end":493,"column_start":38,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":1322},{"krate":0,"index":1323}],"docs":"","sig":null,"attributes":[]},{"id":108,"kind":"Direct","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\buffer.rs","byte_start":302770,"byte_end":302786,"line_start":517,"line_end":517,"column_start":47,"column_end":63},"value":"","parent":null,"children":[{"krate":0,"index":1328}],"docs":"","sig":null,"attributes":[]},{"id":109,"kind":"Direct","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\buffer.rs","byte_start":302915,"byte_end":302931,"line_start":526,"line_end":526,"column_start":31,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":1331}],"docs":"","sig":null,"attributes":[]},{"id":110,"kind":"Inherent","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\buffer.rs","byte_start":305953,"byte_end":305964,"line_start":620,"line_end":620,"column_start":20,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":1335},{"krate":0,"index":1336},{"krate":0,"index":1337},{"krate":0,"index":1338},{"krate":0,"index":1339},{"krate":0,"index":1340},{"krate":0,"index":1341},{"krate":0,"index":1342},{"krate":0,"index":1343},{"krate":0,"index":1344},{"krate":0,"index":1345},{"krate":0,"index":1346},{"krate":0,"index":1347},{"krate":0,"index":1349},{"krate":0,"index":1352},{"krate":0,"index":1353},{"krate":0,"index":1354},{"krate":0,"index":1355},{"krate":0,"index":1356},{"krate":0,"index":1357}],"docs":"","sig":null,"attributes":[]},{"id":111,"kind":"Inherent","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\buffer.rs","byte_start":312753,"byte_end":312764,"line_start":814,"line_end":814,"column_start":20,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":1361},{"krate":0,"index":1362},{"krate":0,"index":1363},{"krate":0,"index":1364},{"krate":0,"index":1365},{"krate":0,"index":1366},{"krate":0,"index":1367}],"docs":"","sig":null,"attributes":[]},{"id":112,"kind":"Inherent","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\buffer.rs","byte_start":315362,"byte_end":315373,"line_start":889,"line_end":889,"column_start":20,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":1371}],"docs":"","sig":null,"attributes":[]},{"id":113,"kind":"Inherent","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\buffer.rs","byte_start":316025,"byte_end":316036,"line_start":914,"line_end":914,"column_start":20,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":1376}],"docs":"","sig":null,"attributes":[]},{"id":114,"kind":"Direct","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\buffer.rs","byte_start":316779,"byte_end":316790,"line_start":941,"line_end":941,"column_start":30,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":1381},{"krate":0,"index":1382}],"docs":"","sig":null,"attributes":[]},{"id":115,"kind":"Direct","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\buffer.rs","byte_start":317054,"byte_end":317065,"line_start":954,"line_end":954,"column_start":33,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":1386}],"docs":"","sig":null,"attributes":[]},{"id":116,"kind":"Direct","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\buffer.rs","byte_start":317331,"byte_end":317342,"line_start":965,"line_end":965,"column_start":42,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":1390},{"krate":0,"index":1391}],"docs":"","sig":null,"attributes":[]},{"id":117,"kind":"Direct","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\buffer.rs","byte_start":317613,"byte_end":317624,"line_start":978,"line_end":978,"column_start":45,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":1395}],"docs":"","sig":null,"attributes":[]},{"id":118,"kind":"Direct","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\buffer.rs","byte_start":317885,"byte_end":317896,"line_start":989,"line_end":989,"column_start":30,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":1399}],"docs":"","sig":null,"attributes":[]},{"id":119,"kind":"Direct","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\buffer.rs","byte_start":318255,"byte_end":318266,"line_start":1004,"line_end":1004,"column_start":41,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":1403},{"krate":0,"index":1404},{"krate":0,"index":1405},{"krate":0,"index":1406},{"krate":0,"index":1407},{"krate":0,"index":1408},{"krate":0,"index":1409}],"docs":"","sig":null,"attributes":[]},{"id":120,"kind":"Direct","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\buffer.rs","byte_start":319090,"byte_end":319101,"line_start":1037,"line_end":1037,"column_start":37,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":1413},{"krate":0,"index":1414},{"krate":0,"index":1415},{"krate":0,"index":1416},{"krate":0,"index":1417},{"krate":0,"index":1418},{"krate":0,"index":1419}],"docs":"","sig":null,"attributes":[]},{"id":121,"kind":"Inherent","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\buffer.rs","byte_start":322686,"byte_end":322697,"line_start":1129,"line_end":1129,"column_start":26,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":1424},{"krate":0,"index":1425},{"krate":0,"index":1426},{"krate":0,"index":1428},{"krate":0,"index":1429}],"docs":"","sig":null,"attributes":[]},{"id":122,"kind":"Inherent","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\buffer.rs","byte_start":325131,"byte_end":325140,"line_start":1207,"line_end":1207,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":1434}],"docs":"","sig":null,"attributes":[]},{"id":123,"kind":"Direct","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\buffer.rs","byte_start":326538,"byte_end":326549,"line_start":1245,"line_end":1245,"column_start":67,"column_end":78},"value":"","parent":null,"children":[{"krate":0,"index":1442}],"docs":"","sig":null,"attributes":[]},{"id":124,"kind":"Inherent","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\color.rs","byte_start":336985,"byte_end":336994,"line_start":37,"line_end":37,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":1465},{"krate":0,"index":1466},{"krate":0,"index":1468},{"krate":0,"index":1470},{"krate":0,"index":1471}],"docs":"","sig":null,"attributes":[]},{"id":125,"kind":"Inherent","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\color.rs","byte_start":340703,"byte_end":340720,"line_start":148,"line_end":148,"column_start":6,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":1473}],"docs":"","sig":null,"attributes":[]},{"id":126,"kind":"Direct","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\color.rs","byte_start":342008,"byte_end":342025,"line_start":182,"line_end":182,"column_start":26,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":1475}],"docs":"","sig":null,"attributes":[]},{"id":127,"kind":"Direct","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\color.rs","byte_start":348125,"byte_end":348126,"line_start":388,"line_end":388,"column_start":32,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":1482}],"docs":"","sig":null,"attributes":[]},{"id":128,"kind":"Direct","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\color.rs","byte_start":348564,"byte_end":348565,"line_start":402,"line_end":402,"column_start":29,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":1489}],"docs":"","sig":null,"attributes":[]},{"id":129,"kind":"Direct","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\color.rs","byte_start":349821,"byte_end":349825,"line_start":446,"line_end":446,"column_start":53,"column_end":57},"value":"","parent":null,"children":[{"krate":0,"index":1500}],"docs":"","sig":null,"attributes":[]},{"id":130,"kind":"Direct","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\color.rs","byte_start":350054,"byte_end":350058,"line_start":454,"line_end":454,"column_start":53,"column_end":57},"value":"","parent":null,"children":[{"krate":0,"index":1503}],"docs":"","sig":null,"attributes":[]},{"id":131,"kind":"Direct","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\color.rs","byte_start":350286,"byte_end":350290,"line_start":462,"line_end":462,"column_start":52,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":1506}],"docs":"","sig":null,"attributes":[]},{"id":132,"kind":"Direct","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\color.rs","byte_start":350515,"byte_end":350519,"line_start":470,"line_end":470,"column_start":52,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":1509}],"docs":"","sig":null,"attributes":[]},{"id":133,"kind":"Direct","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\color.rs","byte_start":350746,"byte_end":350750,"line_start":478,"line_end":478,"column_start":54,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":1512}],"docs":"","sig":null,"attributes":[]},{"id":134,"kind":"Direct","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\color.rs","byte_start":350898,"byte_end":350902,"line_start":485,"line_end":485,"column_start":31,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":1514}],"docs":"","sig":null,"attributes":[]},{"id":135,"kind":"Direct","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\color.rs","byte_start":351146,"byte_end":351150,"line_start":494,"line_end":494,"column_start":30,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":1516}],"docs":"","sig":null,"attributes":[]},{"id":136,"kind":"Direct","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\color.rs","byte_start":351394,"byte_end":351398,"line_start":503,"line_end":503,"column_start":31,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":1518}],"docs":"","sig":null,"attributes":[]},{"id":137,"kind":"Direct","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\color.rs","byte_start":351584,"byte_end":351588,"line_start":510,"line_end":510,"column_start":30,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":1520}],"docs":"","sig":null,"attributes":[]},{"id":138,"kind":"Direct","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\color.rs","byte_start":351774,"byte_end":351778,"line_start":517,"line_end":517,"column_start":32,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":1522}],"docs":"","sig":null,"attributes":[]},{"id":139,"kind":"Direct","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\color.rs","byte_start":351966,"byte_end":351970,"line_start":524,"line_end":524,"column_start":31,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":1524}],"docs":"","sig":null,"attributes":[]},{"id":140,"kind":"Direct","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\color.rs","byte_start":352183,"byte_end":352187,"line_start":532,"line_end":532,"column_start":29,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":1526}],"docs":"","sig":null,"attributes":[]},{"id":141,"kind":"Direct","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\color.rs","byte_start":352409,"byte_end":352413,"line_start":540,"line_end":540,"column_start":30,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":1528}],"docs":"","sig":null,"attributes":[]},{"id":142,"kind":"Direct","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\color.rs","byte_start":352637,"byte_end":352641,"line_start":548,"line_end":548,"column_start":29,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":1530}],"docs":"","sig":null,"attributes":[]},{"id":143,"kind":"Direct","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\color.rs","byte_start":352863,"byte_end":352867,"line_start":556,"line_end":556,"column_start":30,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":1532}],"docs":"","sig":null,"attributes":[]},{"id":144,"kind":"Direct","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\color.rs","byte_start":353142,"byte_end":353147,"line_start":567,"line_end":567,"column_start":53,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":1535}],"docs":"","sig":null,"attributes":[]},{"id":145,"kind":"Direct","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\color.rs","byte_start":353409,"byte_end":353414,"line_start":576,"line_end":576,"column_start":53,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":1538}],"docs":"","sig":null,"attributes":[]},{"id":146,"kind":"Direct","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\color.rs","byte_start":353675,"byte_end":353680,"line_start":585,"line_end":585,"column_start":52,"column_end":57},"value":"","parent":null,"children":[{"krate":0,"index":1541}],"docs":"","sig":null,"attributes":[]},{"id":147,"kind":"Direct","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\color.rs","byte_start":353945,"byte_end":353950,"line_start":594,"line_end":594,"column_start":52,"column_end":57},"value":"","parent":null,"children":[{"krate":0,"index":1544}],"docs":"","sig":null,"attributes":[]},{"id":148,"kind":"Direct","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\color.rs","byte_start":354216,"byte_end":354221,"line_start":603,"line_end":603,"column_start":53,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":1547}],"docs":"","sig":null,"attributes":[]},{"id":149,"kind":"Direct","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\color.rs","byte_start":354434,"byte_end":354439,"line_start":611,"line_end":611,"column_start":32,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":1549}],"docs":"","sig":null,"attributes":[]},{"id":150,"kind":"Direct","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\color.rs","byte_start":354739,"byte_end":354744,"line_start":621,"line_end":621,"column_start":31,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":1551}],"docs":"","sig":null,"attributes":[]},{"id":151,"kind":"Direct","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\color.rs","byte_start":355039,"byte_end":355044,"line_start":631,"line_end":631,"column_start":30,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":1553}],"docs":"","sig":null,"attributes":[]},{"id":152,"kind":"Direct","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\color.rs","byte_start":355296,"byte_end":355301,"line_start":640,"line_end":640,"column_start":29,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":1555}],"docs":"","sig":null,"attributes":[]},{"id":153,"kind":"Direct","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\color.rs","byte_start":355565,"byte_end":355570,"line_start":649,"line_end":649,"column_start":30,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":1557}],"docs":"","sig":null,"attributes":[]},{"id":154,"kind":"Direct","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\color.rs","byte_start":355843,"byte_end":355848,"line_start":658,"line_end":658,"column_start":29,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":1559}],"docs":"","sig":null,"attributes":[]},{"id":155,"kind":"Direct","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\color.rs","byte_start":356112,"byte_end":356117,"line_start":667,"line_end":667,"column_start":30,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":1561}],"docs":"","sig":null,"attributes":[]},{"id":156,"kind":"Direct","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\color.rs","byte_start":356439,"byte_end":356443,"line_start":679,"line_end":679,"column_start":52,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":1564}],"docs":"","sig":null,"attributes":[]},{"id":157,"kind":"Direct","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\color.rs","byte_start":356744,"byte_end":356748,"line_start":690,"line_end":690,"column_start":52,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":1567}],"docs":"","sig":null,"attributes":[]},{"id":158,"kind":"Direct","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\color.rs","byte_start":357050,"byte_end":357054,"line_start":701,"line_end":701,"column_start":53,"column_end":57},"value":"","parent":null,"children":[{"krate":0,"index":1570}],"docs":"","sig":null,"attributes":[]},{"id":159,"kind":"Direct","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\color.rs","byte_start":357355,"byte_end":357359,"line_start":712,"line_end":712,"column_start":54,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":1573}],"docs":"","sig":null,"attributes":[]},{"id":160,"kind":"Direct","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\color.rs","byte_start":357660,"byte_end":357664,"line_start":723,"line_end":723,"column_start":53,"column_end":57},"value":"","parent":null,"children":[{"krate":0,"index":1576}],"docs":"","sig":null,"attributes":[]},{"id":161,"kind":"Direct","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\color.rs","byte_start":357941,"byte_end":357945,"line_start":734,"line_end":734,"column_start":31,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":1578}],"docs":"","sig":null,"attributes":[]},{"id":162,"kind":"Direct","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\color.rs","byte_start":358307,"byte_end":358311,"line_start":745,"line_end":745,"column_start":30,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":1580}],"docs":"","sig":null,"attributes":[]},{"id":163,"kind":"Direct","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\color.rs","byte_start":358661,"byte_end":358665,"line_start":756,"line_end":756,"column_start":31,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":1582}],"docs":"","sig":null,"attributes":[]},{"id":164,"kind":"Direct","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\color.rs","byte_start":359020,"byte_end":359024,"line_start":769,"line_end":769,"column_start":29,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":1584}],"docs":"","sig":null,"attributes":[]},{"id":165,"kind":"Direct","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\color.rs","byte_start":359356,"byte_end":359360,"line_start":780,"line_end":780,"column_start":30,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":1586}],"docs":"","sig":null,"attributes":[]},{"id":166,"kind":"Direct","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\color.rs","byte_start":359679,"byte_end":359683,"line_start":792,"line_end":792,"column_start":29,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":1588}],"docs":"","sig":null,"attributes":[]},{"id":167,"kind":"Direct","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\color.rs","byte_start":360015,"byte_end":360019,"line_start":803,"line_end":803,"column_start":30,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":1590}],"docs":"","sig":null,"attributes":[]},{"id":168,"kind":"Direct","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\color.rs","byte_start":360410,"byte_end":360414,"line_start":816,"line_end":816,"column_start":52,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":1593}],"docs":"","sig":null,"attributes":[]},{"id":169,"kind":"Direct","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\color.rs","byte_start":360715,"byte_end":360719,"line_start":827,"line_end":827,"column_start":52,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":1596}],"docs":"","sig":null,"attributes":[]},{"id":170,"kind":"Direct","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\color.rs","byte_start":361021,"byte_end":361025,"line_start":838,"line_end":838,"column_start":53,"column_end":57},"value":"","parent":null,"children":[{"krate":0,"index":1599}],"docs":"","sig":null,"attributes":[]},{"id":171,"kind":"Direct","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\color.rs","byte_start":361326,"byte_end":361330,"line_start":849,"line_end":849,"column_start":54,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":1602}],"docs":"","sig":null,"attributes":[]},{"id":172,"kind":"Direct","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\color.rs","byte_start":361631,"byte_end":361635,"line_start":860,"line_end":860,"column_start":53,"column_end":57},"value":"","parent":null,"children":[{"krate":0,"index":1605}],"docs":"","sig":null,"attributes":[]},{"id":173,"kind":"Direct","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\color.rs","byte_start":361959,"byte_end":361962,"line_start":874,"line_end":874,"column_start":53,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":1608}],"docs":"","sig":null,"attributes":[]},{"id":174,"kind":"Direct","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\color.rs","byte_start":362231,"byte_end":362234,"line_start":884,"line_end":884,"column_start":53,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":1611}],"docs":"","sig":null,"attributes":[]},{"id":175,"kind":"Direct","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\color.rs","byte_start":362502,"byte_end":362505,"line_start":894,"line_end":894,"column_start":52,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":1614}],"docs":"","sig":null,"attributes":[]},{"id":176,"kind":"Direct","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\color.rs","byte_start":362770,"byte_end":362773,"line_start":904,"line_end":904,"column_start":54,"column_end":57},"value":"","parent":null,"children":[{"krate":0,"index":1617}],"docs":"","sig":null,"attributes":[]},{"id":177,"kind":"Direct","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\color.rs","byte_start":363037,"byte_end":363040,"line_start":914,"line_end":914,"column_start":53,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":1620}],"docs":"","sig":null,"attributes":[]},{"id":178,"kind":"Direct","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\color.rs","byte_start":363278,"byte_end":363281,"line_start":924,"line_end":924,"column_start":30,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":1622}],"docs":"","sig":null,"attributes":[]},{"id":179,"kind":"Direct","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\color.rs","byte_start":363506,"byte_end":363509,"line_start":932,"line_end":932,"column_start":29,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":1624}],"docs":"","sig":null,"attributes":[]},{"id":180,"kind":"Direct","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\color.rs","byte_start":363734,"byte_end":363737,"line_start":940,"line_end":940,"column_start":31,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":1626}],"docs":"","sig":null,"attributes":[]},{"id":181,"kind":"Direct","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\color.rs","byte_start":364020,"byte_end":364023,"line_start":951,"line_end":951,"column_start":30,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":1628}],"docs":"","sig":null,"attributes":[]},{"id":182,"kind":"Direct","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\color.rs","byte_start":364320,"byte_end":364323,"line_start":961,"line_end":961,"column_start":30,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":1630}],"docs":"","sig":null,"attributes":[]},{"id":183,"kind":"Direct","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\color.rs","byte_start":364602,"byte_end":364605,"line_start":972,"line_end":972,"column_start":29,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":1632}],"docs":"","sig":null,"attributes":[]},{"id":184,"kind":"Direct","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\color.rs","byte_start":364897,"byte_end":364900,"line_start":982,"line_end":982,"column_start":30,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":1634}],"docs":"","sig":null,"attributes":[]},{"id":185,"kind":"Direct","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\color.rs","byte_start":365246,"byte_end":365249,"line_start":995,"line_end":995,"column_start":53,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":1637}],"docs":"","sig":null,"attributes":[]},{"id":186,"kind":"Direct","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\color.rs","byte_start":365517,"byte_end":365520,"line_start":1005,"line_end":1005,"column_start":52,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":1640}],"docs":"","sig":null,"attributes":[]},{"id":187,"kind":"Direct","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\color.rs","byte_start":365785,"byte_end":365788,"line_start":1016,"line_end":1016,"column_start":53,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":1643}],"docs":"","sig":null,"attributes":[]},{"id":188,"kind":"Direct","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\color.rs","byte_start":366058,"byte_end":366061,"line_start":1026,"line_end":1026,"column_start":54,"column_end":57},"value":"","parent":null,"children":[{"krate":0,"index":1646}],"docs":"","sig":null,"attributes":[]},{"id":189,"kind":"Direct","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\color.rs","byte_start":366325,"byte_end":366328,"line_start":1036,"line_end":1036,"column_start":53,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":1649}],"docs":"","sig":null,"attributes":[]},{"id":190,"kind":"Direct","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\color.rs","byte_start":367994,"byte_end":367999,"line_start":1090,"line_end":1090,"column_start":30,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":1655}],"docs":"","sig":null,"attributes":[]},{"id":191,"kind":"Direct","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\color.rs","byte_start":369004,"byte_end":369008,"line_start":1123,"line_end":1123,"column_start":30,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":1658}],"docs":"","sig":null,"attributes":[]},{"id":192,"kind":"Direct","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\color.rs","byte_start":369118,"byte_end":369122,"line_start":1129,"line_end":1129,"column_start":30,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":1661}],"docs":"","sig":null,"attributes":[]},{"id":193,"kind":"Direct","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\color.rs","byte_start":371330,"byte_end":371334,"line_start":1187,"line_end":1187,"column_start":30,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":1664}],"docs":"","sig":null,"attributes":[]},{"id":194,"kind":"Direct","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\color.rs","byte_start":373540,"byte_end":373543,"line_start":1243,"line_end":1243,"column_start":30,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":1667}],"docs":"","sig":null,"attributes":[]},{"id":195,"kind":"Direct","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\color.rs","byte_start":373652,"byte_end":373655,"line_start":1249,"line_end":1249,"column_start":30,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":1670}],"docs":"","sig":null,"attributes":[]},{"id":196,"kind":"Direct","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\color.rs","byte_start":373874,"byte_end":373879,"line_start":1262,"line_end":1262,"column_start":31,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":1675}],"docs":"","sig":null,"attributes":[]},{"id":197,"kind":"Direct","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\color.rs","byte_start":374052,"byte_end":374056,"line_start":1271,"line_end":1271,"column_start":31,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":1678}],"docs":"","sig":null,"attributes":[]},{"id":198,"kind":"Direct","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\color.rs","byte_start":374244,"byte_end":374248,"line_start":1282,"line_end":1282,"column_start":31,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":1681}],"docs":"","sig":null,"attributes":[]},{"id":199,"kind":"Direct","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\color.rs","byte_start":374461,"byte_end":374465,"line_start":1293,"line_end":1293,"column_start":31,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":1684}],"docs":"","sig":null,"attributes":[]},{"id":200,"kind":"Direct","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\color.rs","byte_start":374678,"byte_end":374681,"line_start":1304,"line_end":1304,"column_start":31,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":1687}],"docs":"","sig":null,"attributes":[]},{"id":201,"kind":"Direct","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\color.rs","byte_start":374943,"byte_end":374946,"line_start":1318,"line_end":1318,"column_start":31,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":1690}],"docs":"","sig":null,"attributes":[]},{"id":202,"kind":"Inherent","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\dynimage.rs","byte_start":386632,"byte_end":386644,"line_start":137,"line_end":137,"column_start":6,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":1737},{"krate":0,"index":1738},{"krate":0,"index":1739},{"krate":0,"index":1740},{"krate":0,"index":1741},{"krate":0,"index":1742},{"krate":0,"index":1743},{"krate":0,"index":1744},{"krate":0,"index":1745},{"krate":0,"index":1746},{"krate":0,"index":1747},{"krate":0,"index":1750},{"krate":0,"index":1751},{"krate":0,"index":1752},{"krate":0,"index":1753},{"krate":0,"index":1754},{"krate":0,"index":1755},{"krate":0,"index":1756},{"krate":0,"index":1757},{"krate":0,"index":1758},{"krate":0,"index":1759},{"krate":0,"index":1760},{"krate":0,"index":1761},{"krate":0,"index":1762},{"krate":0,"index":1763},{"krate":0,"index":1764},{"krate":0,"index":1765},{"krate":0,"index":1766},{"krate":0,"index":1767},{"krate":0,"index":1768},{"krate":0,"index":1769},{"krate":0,"index":1770},{"krate":0,"index":1771},{"krate":0,"index":1772},{"krate":0,"index":1773},{"krate":0,"index":1774},{"krate":0,"index":1775},{"krate":0,"index":1776},{"krate":0,"index":1777},{"krate":0,"index":1778},{"krate":0,"index":1779},{"krate":0,"index":1780},{"krate":0,"index":1781},{"krate":0,"index":1782},{"krate":0,"index":1783},{"krate":0,"index":1784},{"krate":0,"index":1785},{"krate":0,"index":1786},{"krate":0,"index":1787},{"krate":0,"index":1788},{"krate":0,"index":1789},{"krate":0,"index":1790},{"krate":0,"index":1791},{"krate":0,"index":1792},{"krate":0,"index":1793},{"krate":0,"index":1794},{"krate":0,"index":1795},{"krate":0,"index":1796},{"krate":0,"index":1797},{"krate":0,"index":1798},{"krate":0,"index":1799},{"krate":0,"index":1800},{"krate":0,"index":1801},{"krate":0,"index":1802},{"krate":0,"index":1803},{"krate":0,"index":1804},{"krate":0,"index":1805},{"krate":0,"index":1806},{"krate":0,"index":1807},{"krate":0,"index":1808},{"krate":0,"index":1809},{"krate":0,"index":1810},{"krate":0,"index":1811},{"krate":0,"index":1812},{"krate":0,"index":1813},{"krate":0,"index":1814},{"krate":0,"index":1815},{"krate":0,"index":1816},{"krate":0,"index":1817},{"krate":0,"index":1818},{"krate":0,"index":1819},{"krate":0,"index":1820},{"krate":0,"index":1821},{"krate":0,"index":1822},{"krate":0,"index":1823},{"krate":0,"index":1824},{"krate":0,"index":1825},{"krate":0,"index":1826},{"krate":0,"index":1827},{"krate":0,"index":1828},{"krate":0,"index":1831},{"krate":0,"index":1833}],"docs":"","sig":null,"attributes":[]},{"id":203,"kind":"Direct","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\dynimage.rs","byte_start":417793,"byte_end":417805,"line_start":1033,"line_end":1033,"column_start":27,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":1836},{"krate":0,"index":1837},{"krate":0,"index":1838},{"krate":0,"index":1839},{"krate":0,"index":1840},{"krate":0,"index":1841}],"docs":"","sig":null,"attributes":[]},{"id":204,"kind":"Direct","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\dynimage.rs","byte_start":418338,"byte_end":418350,"line_start":1055,"line_end":1055,"column_start":23,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":1843},{"krate":0,"index":1844},{"krate":0,"index":1845},{"krate":0,"index":1846},{"krate":0,"index":1847}],"docs":"","sig":null,"attributes":[]},{"id":205,"kind":"Inherent","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\image.rs","byte_start":431005,"byte_end":431016,"line_start":68,"line_end":68,"column_start":6,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":1892},{"krate":0,"index":1895},{"krate":0,"index":1900}],"docs":"","sig":null,"attributes":[]},{"id":206,"kind":"Direct","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\image.rs","byte_start":435985,"byte_end":436002,"line_start":214,"line_end":214,"column_start":28,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":1902}],"docs":"","sig":null,"attributes":[]},{"id":207,"kind":"Inherent","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\image.rs","byte_start":437397,"byte_end":437412,"line_start":253,"line_end":253,"column_start":6,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":1910},{"krate":0,"index":1911}],"docs":"","sig":null,"attributes":[]},{"id":208,"kind":"Inherent","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\image.rs","byte_start":445282,"byte_end":445290,"line_start":437,"line_end":437,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":1926},{"krate":0,"index":1927},{"krate":0,"index":1928}],"docs":"","sig":null,"attributes":[]},{"id":209,"kind":"Direct","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\image.rs","byte_start":451938,"byte_end":451944,"line_start":627,"line_end":627,"column_start":44,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":1956},{"krate":0,"index":1957}],"docs":"","sig":null,"attributes":[]},{"id":210,"kind":"Direct","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\image.rs","byte_start":452412,"byte_end":452418,"line_start":649,"line_end":649,"column_start":27,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":1960}],"docs":"","sig":null,"attributes":[]},{"id":211,"kind":"Inherent","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\image.rs","byte_start":460807,"byte_end":460815,"line_start":887,"line_end":887,"column_start":9,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":1999},{"krate":0,"index":2000},{"krate":0,"index":2001}],"docs":"","sig":null,"attributes":[]},{"id":212,"kind":"Direct","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\image.rs","byte_start":461952,"byte_end":461960,"line_start":928,"line_end":928,"column_start":30,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":2004},{"krate":0,"index":2005},{"krate":0,"index":2006},{"krate":0,"index":2007},{"krate":0,"index":2008},{"krate":0,"index":2009},{"krate":0,"index":2010}],"docs":"","sig":null,"attributes":[]},{"id":213,"kind":"Direct","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\image.rs","byte_start":462781,"byte_end":462789,"line_start":960,"line_end":960,"column_start":26,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":2013},{"krate":0,"index":2014},{"krate":0,"index":2015},{"krate":0,"index":2016},{"krate":0,"index":2017},{"krate":0,"index":2018}],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src/lib.rs","byte_start":5037,"byte_end":5042,"line_start":146,"line_end":146,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":55}},{"kind":"Mod","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src/lib.rs","byte_start":5435,"byte_end":5439,"line_start":165,"line_end":165,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":128}},{"kind":"Mod","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\math\\mod.rs","byte_start":30431,"byte_end":30433,"line_start":2,"line_end":2,"column_start":9,"column_end":11},"ref_id":{"krate":0,"index":129}},{"kind":"Mod","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\math\\mod.rs","byte_start":30443,"byte_end":30448,"line_start":3,"line_end":3,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":143}},{"kind":"Mod","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src/lib.rs","byte_start":5480,"byte_end":5488,"line_start":168,"line_end":168,"column_start":9,"column_end":17},"ref_id":{"krate":0,"index":150}},{"kind":"Mod","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\imageops\\mod.rs","byte_start":39892,"byte_end":39900,"line_start":29,"line_end":29,"column_start":9,"column_end":17},"ref_id":{"krate":0,"index":240}},{"kind":"Mod","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src/lib.rs","byte_start":5514,"byte_end":5516,"line_start":171,"line_end":171,"column_start":9,"column_end":11},"ref_id":{"krate":0,"index":428}},{"kind":"Mod","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src/lib.rs","byte_start":5562,"byte_end":5566,"line_start":174,"line_end":174,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":512}},{"kind":"Mod","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src/lib.rs","byte_start":8033,"byte_end":8037,"line_start":233,"line_end":233,"column_start":13,"column_end":17},"ref_id":{"krate":0,"index":692}},{"kind":"Mod","span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src/lib.rs","byte_start":8079,"byte_end":8082,"line_start":235,"line_end":235,"column_start":13,"column_end":16},"ref_id":{"krate":0,"index":920}}],"macro_refs":[],"relations":[{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\error.rs","byte_start":19890,"byte_end":19906,"line_start":194,"line_end":194,"column_start":6,"column_end":22},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":2154},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\error.rs","byte_start":20604,"byte_end":20617,"line_start":217,"line_end":217,"column_start":6,"column_end":19},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":2217},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\error.rs","byte_start":21393,"byte_end":21406,"line_start":245,"line_end":245,"column_start":6,"column_end":19},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":2183},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\error.rs","byte_start":22183,"byte_end":22197,"line_start":273,"line_end":273,"column_start":6,"column_end":20},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":2188},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\error.rs","byte_start":22576,"byte_end":22586,"line_start":288,"line_end":288,"column_start":6,"column_end":16},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":2222},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\error.rs","byte_start":22943,"byte_end":22953,"line_start":302,"line_end":302,"column_start":26,"column_end":36},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":2133},"to":{"krate":2,"index":1963}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\error.rs","byte_start":23069,"byte_end":23084,"line_start":308,"line_end":308,"column_start":28,"column_end":43},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":2248},"to":{"krate":2,"index":1963}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\error.rs","byte_start":23213,"byte_end":23228,"line_start":314,"line_end":314,"column_start":36,"column_end":51},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":2248},"to":{"krate":2,"index":1963}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\error.rs","byte_start":23478,"byte_end":23494,"line_start":323,"line_end":323,"column_start":32,"column_end":48},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":2154},"to":{"krate":2,"index":1963}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\error.rs","byte_start":23797,"byte_end":23807,"line_start":335,"line_end":335,"column_start":23,"column_end":33},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":2133},"to":{"krate":2,"index":6611}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\error.rs","byte_start":24268,"byte_end":24278,"line_start":348,"line_end":348,"column_start":16,"column_end":26},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":2133},"to":{"krate":1,"index":1725}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\error.rs","byte_start":24731,"byte_end":24747,"line_start":361,"line_end":361,"column_start":23,"column_end":39},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":2154},"to":{"krate":2,"index":6611}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\error.rs","byte_start":26369,"byte_end":26385,"line_start":404,"line_end":404,"column_start":16,"column_end":32},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":2154},"to":{"krate":1,"index":1725}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\error.rs","byte_start":26413,"byte_end":26427,"line_start":406,"line_end":406,"column_start":23,"column_end":37},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":2188},"to":{"krate":2,"index":6611}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\error.rs","byte_start":27462,"byte_end":27476,"line_start":438,"line_end":438,"column_start":16,"column_end":30},"kind":{"Impl":{"id":14}},"from":{"krate":0,"index":2188},"to":{"krate":1,"index":1725}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\error.rs","byte_start":27681,"byte_end":27694,"line_start":447,"line_end":447,"column_start":23,"column_end":36},"kind":{"Impl":{"id":15}},"from":{"krate":0,"index":2183},"to":{"krate":2,"index":6611}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\error.rs","byte_start":28155,"byte_end":28168,"line_start":465,"line_end":465,"column_start":16,"column_end":29},"kind":{"Impl":{"id":16}},"from":{"krate":0,"index":2183},"to":{"krate":1,"index":1725}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\error.rs","byte_start":28373,"byte_end":28386,"line_start":474,"line_end":474,"column_start":23,"column_end":36},"kind":{"Impl":{"id":17}},"from":{"krate":0,"index":2217},"to":{"krate":2,"index":6611}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\error.rs","byte_start":28833,"byte_end":28846,"line_start":486,"line_end":486,"column_start":16,"column_end":29},"kind":{"Impl":{"id":18}},"from":{"krate":0,"index":2217},"to":{"krate":1,"index":1725}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\error.rs","byte_start":29051,"byte_end":29061,"line_start":495,"line_end":495,"column_start":23,"column_end":33},"kind":{"Impl":{"id":19}},"from":{"krate":0,"index":2222},"to":{"krate":2,"index":6611}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\error.rs","byte_start":29444,"byte_end":29454,"line_start":505,"line_end":505,"column_start":16,"column_end":26},"kind":{"Impl":{"id":20}},"from":{"krate":0,"index":2222},"to":{"krate":1,"index":1725}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\error.rs","byte_start":29482,"byte_end":29497,"line_start":507,"line_end":507,"column_start":23,"column_end":38},"kind":{"Impl":{"id":21}},"from":{"krate":0,"index":2248},"to":{"krate":2,"index":6611}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\math\\nq.rs","byte_start":34338,"byte_end":34346,"line_start":86,"line_end":86,"column_start":6,"column_end":14},"kind":{"Impl":{"id":22}},"from":{"krate":0,"index":130},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\math\\nq.rs","byte_start":34916,"byte_end":34924,"line_start":105,"line_end":105,"column_start":38,"column_end":46},"kind":{"Impl":{"id":23}},"from":{"krate":0,"index":130},"to":{"krate":2,"index":1963}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\math\\nq.rs","byte_start":35073,"byte_end":35081,"line_start":112,"line_end":112,"column_start":38,"column_end":46},"kind":{"Impl":{"id":24}},"from":{"krate":27,"index":20},"to":{"krate":2,"index":1963}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\imageops\\colorops.rs","byte_start":70411,"byte_end":70418,"line_start":232,"line_end":232,"column_start":19,"column_end":26},"kind":{"Impl":{"id":25}},"from":{"krate":0,"index":2294},"to":{"krate":0,"index":279}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\imageops\\colorops.rs","byte_start":71197,"byte_end":71205,"line_start":268,"line_end":268,"column_start":23,"column_end":31},"kind":{"Impl":{"id":26}},"from":{"krate":0,"index":130},"to":{"krate":0,"index":279}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\imageops\\colorops.rs","byte_start":71744,"byte_end":71752,"line_start":292,"line_end":292,"column_start":32,"column_end":40},"kind":{"Impl":{"id":27}},"from":{"krate":27,"index":20},"to":{"krate":0,"index":279}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\imageops\\sample.rs","byte_start":86966,"byte_end":86978,"line_start":363,"line_end":363,"column_start":34,"column_end":46},"kind":{"Impl":{"id":28}},"from":{"krate":0,"index":351},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\io\\reader.rs","byte_start":105865,"byte_end":105871,"line_start":68,"line_end":68,"column_start":15,"column_end":21},"kind":{"Impl":{"id":29}},"from":{"krate":0,"index":450},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\io\\reader.rs","byte_start":107253,"byte_end":107259,"line_start":115,"line_end":115,"column_start":6,"column_end":12},"kind":{"Impl":{"id":30}},"from":{"krate":0,"index":450},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\io\\reader.rs","byte_start":108045,"byte_end":108051,"line_start":137,"line_end":137,"column_start":25,"column_end":31},"kind":{"Impl":{"id":31}},"from":{"krate":0,"index":450},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":126280,"byte_end":126292,"line_start":124,"line_end":124,"column_start":6,"column_end":18},"kind":{"Impl":{"id":32}},"from":{"krate":0,"index":2329},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":138887,"byte_end":138890,"line_start":437,"line_end":437,"column_start":6,"column_end":9},"kind":{"Impl":{"id":33}},"from":{"krate":0,"index":2351},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":139148,"byte_end":139159,"line_start":452,"line_end":452,"column_start":14,"column_end":25},"kind":{"Impl":{"id":34}},"from":{"krate":0,"index":2318},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":156314,"byte_end":156325,"line_start":873,"line_end":873,"column_start":22,"column_end":33},"kind":{"Impl":{"id":35}},"from":{"krate":0,"index":2318},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":162177,"byte_end":162181,"line_start":1028,"line_end":1028,"column_start":24,"column_end":28},"kind":{"Impl":{"id":36}},"from":{"krate":0,"index":2379},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":167766,"byte_end":167773,"line_start":1161,"line_end":1161,"column_start":24,"column_end":31},"kind":{"Impl":{"id":37}},"from":{"krate":0,"index":2392},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":172149,"byte_end":172160,"line_start":1275,"line_end":1275,"column_start":40,"column_end":51},"kind":{"Impl":{"id":38}},"from":{"krate":0,"index":2318},"to":{"krate":2,"index":2323}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":172769,"byte_end":172780,"line_start":1294,"line_end":1294,"column_start":43,"column_end":54},"kind":{"Impl":{"id":39}},"from":{"krate":0,"index":2318},"to":{"krate":2,"index":2327}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":173384,"byte_end":173388,"line_start":1312,"line_end":1312,"column_start":45,"column_end":49},"kind":{"Impl":{"id":40}},"from":{"krate":0,"index":2379},"to":{"krate":0,"index":1961}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":174635,"byte_end":174642,"line_start":1357,"line_end":1357,"column_start":45,"column_end":52},"kind":{"Impl":{"id":41}},"from":{"krate":0,"index":2392},"to":{"krate":0,"index":1961}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":175909,"byte_end":175916,"line_start":1402,"line_end":1402,"column_start":41,"column_end":48},"kind":{"Impl":{"id":42}},"from":{"krate":0,"index":2392},"to":{"krate":0,"index":1974}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":176811,"byte_end":176821,"line_start":1431,"line_end":1431,"column_start":22,"column_end":32},"kind":{"Impl":{"id":43}},"from":{"krate":0,"index":2133},"to":{"krate":2,"index":1963}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":176973,"byte_end":176996,"line_start":1435,"line_end":1435,"column_start":31,"column_end":54},"kind":{"Impl":{"id":44}},"from":{"krate":0,"index":2454},"to":{"krate":2,"index":6611}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":177204,"byte_end":177227,"line_start":1440,"line_end":1440,"column_start":31,"column_end":54},"kind":{"Impl":{"id":45}},"from":{"krate":0,"index":2454},"to":{"krate":1,"index":1725}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":177801,"byte_end":177806,"line_start":1454,"line_end":1454,"column_start":23,"column_end":28},"kind":{"Impl":{"id":46}},"from":{"krate":0,"index":2405},"to":{"krate":2,"index":6611}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":178741,"byte_end":178746,"line_start":1478,"line_end":1478,"column_start":23,"column_end":28},"kind":{"Impl":{"id":47}},"from":{"krate":0,"index":2405},"to":{"krate":1,"index":1725}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\flat.rs","byte_start":178771,"byte_end":178781,"line_start":1480,"line_end":1480,"column_start":21,"column_end":31},"kind":{"Impl":{"id":48}},"from":{"krate":0,"index":2429},"to":{"krate":2,"index":1807}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\codecs\\jpeg\\decoder.rs","byte_start":185497,"byte_end":185508,"line_start":18,"line_end":18,"column_start":15,"column_end":26},"kind":{"Impl":{"id":49}},"from":{"krate":0,"index":717},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\codecs\\jpeg\\decoder.rs","byte_start":187186,"byte_end":187196,"line_start":67,"line_end":67,"column_start":18,"column_end":28},"kind":{"Impl":{"id":50}},"from":{"krate":0,"index":725},"to":{"krate":1,"index":3120}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\codecs\\jpeg\\decoder.rs","byte_start":187609,"byte_end":187620,"line_start":81,"line_end":81,"column_start":45,"column_end":56},"kind":{"Impl":{"id":51}},"from":{"krate":0,"index":717},"to":{"krate":0,"index":1929}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\codecs\\jpeg\\decoder.rs","byte_start":189366,"byte_end":189375,"line_start":141,"line_end":141,"column_start":6,"column_end":15},"kind":{"Impl":{"id":52}},"from":{"krate":0,"index":2619},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\codecs\\jpeg\\decoder.rs","byte_start":189633,"byte_end":189643,"line_start":152,"line_end":152,"column_start":6,"column_end":16},"kind":{"Impl":{"id":53}},"from":{"krate":0,"index":2133},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\codecs\\jpeg\\encoder.rs","byte_start":215866,"byte_end":215875,"line_start":169,"line_end":169,"column_start":25,"column_end":34},"kind":{"Impl":{"id":54}},"from":{"krate":0,"index":809},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\codecs\\jpeg\\encoder.rs","byte_start":219339,"byte_end":219351,"line_start":301,"line_end":301,"column_start":6,"column_end":18},"kind":{"Impl":{"id":55}},"from":{"krate":0,"index":2494},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\codecs\\jpeg\\encoder.rs","byte_start":219689,"byte_end":219701,"line_start":313,"line_end":313,"column_start":18,"column_end":30},"kind":{"Impl":{"id":56}},"from":{"krate":0,"index":2494},"to":{"krate":2,"index":2033}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\codecs\\jpeg\\encoder.rs","byte_start":220528,"byte_end":220539,"line_start":349,"line_end":349,"column_start":20,"column_end":31},"kind":{"Impl":{"id":57}},"from":{"krate":0,"index":830},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\codecs\\jpeg\\encoder.rs","byte_start":231835,"byte_end":231846,"line_start":677,"line_end":677,"column_start":37,"column_end":48},"kind":{"Impl":{"id":58}},"from":{"krate":0,"index":830},"to":{"krate":0,"index":1951}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\codecs\\png.rs","byte_start":254378,"byte_end":254387,"line_start":45,"line_end":45,"column_start":15,"column_end":24},"kind":{"Impl":{"id":59}},"from":{"krate":0,"index":962},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\codecs\\png.rs","byte_start":255145,"byte_end":255154,"line_start":69,"line_end":69,"column_start":24,"column_end":33},"kind":{"Impl":{"id":60}},"from":{"krate":0,"index":962},"to":{"krate":1,"index":3120}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\codecs\\png.rs","byte_start":256519,"byte_end":256529,"line_start":120,"line_end":120,"column_start":15,"column_end":25},"kind":{"Impl":{"id":61}},"from":{"krate":0,"index":976},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\codecs\\png.rs","byte_start":261143,"byte_end":261153,"line_start":209,"line_end":209,"column_start":45,"column_end":55},"kind":{"Impl":{"id":62}},"from":{"krate":0,"index":976},"to":{"krate":0,"index":1929}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\codecs\\png.rs","byte_start":263214,"byte_end":263225,"line_start":272,"line_end":272,"column_start":15,"column_end":26},"kind":{"Impl":{"id":63}},"from":{"krate":0,"index":1000},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\codecs\\png.rs","byte_start":268776,"byte_end":268787,"line_start":412,"line_end":412,"column_start":49,"column_end":60},"kind":{"Impl":{"id":64}},"from":{"krate":0,"index":1000},"to":{"krate":0,"index":1948}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\codecs\\png.rs","byte_start":268925,"byte_end":268938,"line_start":416,"line_end":416,"column_start":36,"column_end":49},"kind":{"Impl":{"id":65}},"from":{"krate":0,"index":1018},"to":{"krate":2,"index":5311}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\codecs\\png.rs","byte_start":271547,"byte_end":271557,"line_start":502,"line_end":502,"column_start":16,"column_end":26},"kind":{"Impl":{"id":66}},"from":{"krate":0,"index":1026},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\codecs\\png.rs","byte_start":275392,"byte_end":275402,"line_start":577,"line_end":577,"column_start":33,"column_end":43},"kind":{"Impl":{"id":67}},"from":{"krate":0,"index":1026},"to":{"krate":0,"index":1951}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\codecs\\png.rs","byte_start":276637,"byte_end":276647,"line_start":609,"line_end":609,"column_start":6,"column_end":16},"kind":{"Impl":{"id":68}},"from":{"krate":0,"index":2133},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\codecs\\png.rs","byte_start":277664,"byte_end":277679,"line_start":637,"line_end":637,"column_start":18,"column_end":33},"kind":{"Impl":{"id":69}},"from":{"krate":0,"index":2509},"to":{"krate":2,"index":2033}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\codecs\\png.rs","byte_start":277765,"byte_end":277775,"line_start":643,"line_end":643,"column_start":18,"column_end":28},"kind":{"Impl":{"id":70}},"from":{"krate":0,"index":2535},"to":{"krate":2,"index":2033}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\animation.rs","byte_start":279408,"byte_end":279414,"line_start":14,"line_end":14,"column_start":10,"column_end":16},"kind":{"Impl":{"id":71}},"from":{"krate":0,"index":1078},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\animation.rs","byte_start":280004,"byte_end":280010,"line_start":30,"line_end":30,"column_start":23,"column_end":29},"kind":{"Impl":{"id":72}},"from":{"krate":0,"index":1078},"to":{"krate":2,"index":5311}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\animation.rs","byte_start":280529,"byte_end":280534,"line_start":55,"line_end":55,"column_start":6,"column_end":11},"kind":{"Impl":{"id":73}},"from":{"krate":0,"index":2561},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\animation.rs","byte_start":281483,"byte_end":281488,"line_start":102,"line_end":102,"column_start":6,"column_end":11},"kind":{"Impl":{"id":74}},"from":{"krate":0,"index":2568},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\animation.rs","byte_start":287524,"byte_end":287532,"line_start":258,"line_end":258,"column_start":22,"column_end":30},"kind":{"Impl":{"id":75}},"from":{"krate":2,"index":34832},"to":{"krate":2,"index":1963}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\buffer.rs","byte_start":290993,"byte_end":290999,"line_start":26,"line_end":26,"column_start":38,"column_end":44},"kind":{"Impl":{"id":76}},"from":{"krate":0,"index":1150},"to":{"krate":2,"index":5311}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\buffer.rs","byte_start":291243,"byte_end":291249,"line_start":38,"line_end":38,"column_start":47,"column_end":53},"kind":{"Impl":{"id":77}},"from":{"krate":0,"index":1150},"to":{"krate":2,"index":5265}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\buffer.rs","byte_start":291398,"byte_end":291404,"line_start":47,"line_end":47,"column_start":49,"column_end":55},"kind":{"Impl":{"id":78}},"from":{"krate":0,"index":1150},"to":{"krate":2,"index":5240}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\buffer.rs","byte_start":291613,"byte_end":291619,"line_start":57,"line_end":57,"column_start":26,"column_end":32},"kind":{"Impl":{"id":79}},"from":{"krate":0,"index":1150},"to":{"krate":2,"index":1742}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\buffer.rs","byte_start":291745,"byte_end":291751,"line_start":63,"line_end":63,"column_start":31,"column_end":37},"kind":{"Impl":{"id":80}},"from":{"krate":0,"index":1150},"to":{"krate":2,"index":6606}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\buffer.rs","byte_start":292166,"byte_end":292175,"line_start":83,"line_end":83,"column_start":38,"column_end":47},"kind":{"Impl":{"id":81}},"from":{"krate":0,"index":1175},"to":{"krate":2,"index":5311}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\buffer.rs","byte_start":292431,"byte_end":292440,"line_start":95,"line_end":95,"column_start":47,"column_end":56},"kind":{"Impl":{"id":82}},"from":{"krate":0,"index":1175},"to":{"krate":2,"index":5265}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\buffer.rs","byte_start":292589,"byte_end":292598,"line_start":104,"line_end":104,"column_start":49,"column_end":58},"kind":{"Impl":{"id":83}},"from":{"krate":0,"index":1175},"to":{"krate":2,"index":5240}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\buffer.rs","byte_start":292846,"byte_end":292855,"line_start":116,"line_end":116,"column_start":31,"column_end":40},"kind":{"Impl":{"id":84}},"from":{"krate":0,"index":1175},"to":{"krate":2,"index":6606}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\buffer.rs","byte_start":293421,"byte_end":293425,"line_start":140,"line_end":140,"column_start":25,"column_end":29},"kind":{"Impl":{"id":85}},"from":{"krate":0,"index":1197},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\buffer.rs","byte_start":294324,"byte_end":294328,"line_start":161,"line_end":161,"column_start":38,"column_end":42},"kind":{"Impl":{"id":86}},"from":{"krate":0,"index":1197},"to":{"krate":2,"index":5311}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\buffer.rs","byte_start":294738,"byte_end":294742,"line_start":177,"line_end":177,"column_start":47,"column_end":51},"kind":{"Impl":{"id":87}},"from":{"krate":0,"index":1197},"to":{"krate":2,"index":5265}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\buffer.rs","byte_start":294891,"byte_end":294895,"line_start":186,"line_end":186,"column_start":49,"column_end":53},"kind":{"Impl":{"id":88}},"from":{"krate":0,"index":1197},"to":{"krate":2,"index":5240}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\buffer.rs","byte_start":295262,"byte_end":295266,"line_start":200,"line_end":200,"column_start":26,"column_end":30},"kind":{"Impl":{"id":89}},"from":{"krate":0,"index":1197},"to":{"krate":2,"index":1742}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\buffer.rs","byte_start":295390,"byte_end":295394,"line_start":206,"line_end":206,"column_start":31,"column_end":35},"kind":{"Impl":{"id":90}},"from":{"krate":0,"index":1197},"to":{"krate":2,"index":6606}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\buffer.rs","byte_start":295981,"byte_end":295988,"line_start":230,"line_end":230,"column_start":25,"column_end":32},"kind":{"Impl":{"id":91}},"from":{"krate":0,"index":1224},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\buffer.rs","byte_start":296909,"byte_end":296916,"line_start":251,"line_end":251,"column_start":38,"column_end":45},"kind":{"Impl":{"id":92}},"from":{"krate":0,"index":1224},"to":{"krate":2,"index":5311}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\buffer.rs","byte_start":297339,"byte_end":297346,"line_start":267,"line_end":267,"column_start":47,"column_end":54},"kind":{"Impl":{"id":93}},"from":{"krate":0,"index":1224},"to":{"krate":2,"index":5265}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\buffer.rs","byte_start":297495,"byte_end":297502,"line_start":276,"line_end":276,"column_start":49,"column_end":56},"kind":{"Impl":{"id":94}},"from":{"krate":0,"index":1224},"to":{"krate":2,"index":5240}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\buffer.rs","byte_start":297884,"byte_end":297891,"line_start":290,"line_end":290,"column_start":31,"column_end":38},"kind":{"Impl":{"id":95}},"from":{"krate":0,"index":1224},"to":{"krate":2,"index":6606}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\buffer.rs","byte_start":298347,"byte_end":298362,"line_start":313,"line_end":313,"column_start":38,"column_end":53},"kind":{"Impl":{"id":96}},"from":{"krate":0,"index":1248},"to":{"krate":2,"index":5311}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\buffer.rs","byte_start":298765,"byte_end":298780,"line_start":331,"line_end":331,"column_start":47,"column_end":62},"kind":{"Impl":{"id":97}},"from":{"krate":0,"index":1248},"to":{"krate":2,"index":5265}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\buffer.rs","byte_start":298906,"byte_end":298921,"line_start":340,"line_end":340,"column_start":26,"column_end":41},"kind":{"Impl":{"id":98}},"from":{"krate":0,"index":1248},"to":{"krate":2,"index":1742}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\buffer.rs","byte_start":299097,"byte_end":299112,"line_start":349,"line_end":349,"column_start":31,"column_end":46},"kind":{"Impl":{"id":99}},"from":{"krate":0,"index":1248},"to":{"krate":2,"index":6606}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\buffer.rs","byte_start":299651,"byte_end":299664,"line_start":374,"line_end":374,"column_start":38,"column_end":51},"kind":{"Impl":{"id":100}},"from":{"krate":0,"index":1271},"to":{"krate":2,"index":5311}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\buffer.rs","byte_start":300202,"byte_end":300215,"line_start":398,"line_end":398,"column_start":47,"column_end":60},"kind":{"Impl":{"id":101}},"from":{"krate":0,"index":1271},"to":{"krate":2,"index":5265}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\buffer.rs","byte_start":300339,"byte_end":300352,"line_start":407,"line_end":407,"column_start":26,"column_end":39},"kind":{"Impl":{"id":102}},"from":{"krate":0,"index":1271},"to":{"krate":2,"index":1742}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\buffer.rs","byte_start":300522,"byte_end":300535,"line_start":416,"line_end":416,"column_start":31,"column_end":44},"kind":{"Impl":{"id":103}},"from":{"krate":0,"index":1271},"to":{"krate":2,"index":6606}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\buffer.rs","byte_start":301063,"byte_end":301081,"line_start":441,"line_end":441,"column_start":38,"column_end":56},"kind":{"Impl":{"id":104}},"from":{"krate":0,"index":1293},"to":{"krate":2,"index":5311}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\buffer.rs","byte_start":301492,"byte_end":301510,"line_start":459,"line_end":459,"column_start":47,"column_end":65},"kind":{"Impl":{"id":105}},"from":{"krate":0,"index":1293},"to":{"krate":2,"index":5265}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\buffer.rs","byte_start":301641,"byte_end":301659,"line_start":468,"line_end":468,"column_start":31,"column_end":49},"kind":{"Impl":{"id":106}},"from":{"krate":0,"index":1293},"to":{"krate":2,"index":6606}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\buffer.rs","byte_start":302207,"byte_end":302223,"line_start":493,"line_end":493,"column_start":38,"column_end":54},"kind":{"Impl":{"id":107}},"from":{"krate":0,"index":1313},"to":{"krate":2,"index":5311}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\buffer.rs","byte_start":302770,"byte_end":302786,"line_start":517,"line_end":517,"column_start":47,"column_end":63},"kind":{"Impl":{"id":108}},"from":{"krate":0,"index":1313},"to":{"krate":2,"index":5265}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\buffer.rs","byte_start":302915,"byte_end":302931,"line_start":526,"line_end":526,"column_start":31,"column_end":47},"kind":{"Impl":{"id":109}},"from":{"krate":0,"index":1313},"to":{"krate":2,"index":6606}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\buffer.rs","byte_start":305953,"byte_end":305964,"line_start":620,"line_end":620,"column_start":20,"column_end":31},"kind":{"Impl":{"id":110}},"from":{"krate":0,"index":2588},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\buffer.rs","byte_start":312753,"byte_end":312764,"line_start":814,"line_end":814,"column_start":20,"column_end":31},"kind":{"Impl":{"id":111}},"from":{"krate":0,"index":2588},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\buffer.rs","byte_start":315362,"byte_end":315373,"line_start":889,"line_end":889,"column_start":20,"column_end":31},"kind":{"Impl":{"id":112}},"from":{"krate":0,"index":2588},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\buffer.rs","byte_start":316025,"byte_end":316036,"line_start":914,"line_end":914,"column_start":20,"column_end":31},"kind":{"Impl":{"id":113}},"from":{"krate":0,"index":2588},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\buffer.rs","byte_start":316779,"byte_end":316790,"line_start":941,"line_end":941,"column_start":30,"column_end":41},"kind":{"Impl":{"id":114}},"from":{"krate":0,"index":2588},"to":{"krate":2,"index":2242}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\buffer.rs","byte_start":317054,"byte_end":317065,"line_start":954,"line_end":954,"column_start":33,"column_end":44},"kind":{"Impl":{"id":115}},"from":{"krate":0,"index":2588},"to":{"krate":2,"index":2255}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\buffer.rs","byte_start":317331,"byte_end":317342,"line_start":965,"line_end":965,"column_start":42,"column_end":53},"kind":{"Impl":{"id":116}},"from":{"krate":0,"index":2588},"to":{"krate":2,"index":2323}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\buffer.rs","byte_start":317613,"byte_end":317624,"line_start":978,"line_end":978,"column_start":45,"column_end":56},"kind":{"Impl":{"id":117}},"from":{"krate":0,"index":2588},"to":{"krate":2,"index":2327}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\buffer.rs","byte_start":317885,"byte_end":317896,"line_start":989,"line_end":989,"column_start":30,"column_end":41},"kind":{"Impl":{"id":118}},"from":{"krate":0,"index":2588},"to":{"krate":2,"index":1742}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\buffer.rs","byte_start":318255,"byte_end":318266,"line_start":1004,"line_end":1004,"column_start":41,"column_end":52},"kind":{"Impl":{"id":119}},"from":{"krate":0,"index":2588},"to":{"krate":0,"index":1961}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\buffer.rs","byte_start":319090,"byte_end":319101,"line_start":1037,"line_end":1037,"column_start":37,"column_end":48},"kind":{"Impl":{"id":120}},"from":{"krate":0,"index":2588},"to":{"krate":0,"index":1974}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\buffer.rs","byte_start":322686,"byte_end":322697,"line_start":1129,"line_end":1129,"column_start":26,"column_end":37},"kind":{"Impl":{"id":121}},"from":{"krate":0,"index":2588},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\buffer.rs","byte_start":325131,"byte_end":325140,"line_start":1207,"line_end":1207,"column_start":6,"column_end":15},"kind":{"Impl":{"id":122}},"from":{"krate":0,"index":1445},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\buffer.rs","byte_start":326538,"byte_end":326549,"line_start":1245,"line_end":1245,"column_start":67,"column_end":78},"kind":{"Impl":{"id":123}},"from":{"krate":0,"index":2588},"to":{"krate":0,"index":1430}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\color.rs","byte_start":336985,"byte_end":336994,"line_start":37,"line_end":37,"column_start":6,"column_end":15},"kind":{"Impl":{"id":124}},"from":{"krate":0,"index":2619},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\color.rs","byte_start":340703,"byte_end":340720,"line_start":148,"line_end":148,"column_start":6,"column_end":23},"kind":{"Impl":{"id":125}},"from":{"krate":0,"index":2658},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\color.rs","byte_start":342008,"byte_end":342025,"line_start":182,"line_end":182,"column_start":26,"column_end":43},"kind":{"Impl":{"id":126}},"from":{"krate":0,"index":2658},"to":{"krate":2,"index":1963}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\color.rs","byte_start":348125,"byte_end":348126,"line_start":388,"line_end":388,"column_start":32,"column_end":33},"kind":{"Impl":{"id":127}},"from":{"krate":0,"index":1481},"to":{"krate":0,"index":1477}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\color.rs","byte_start":348564,"byte_end":348565,"line_start":402,"line_end":402,"column_start":29,"column_end":30},"kind":{"Impl":{"id":128}},"from":{"krate":0,"index":1488},"to":{"krate":0,"index":1483}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\color.rs","byte_start":349821,"byte_end":349825,"line_start":446,"line_end":446,"column_start":53,"column_end":57},"kind":{"Impl":{"id":129}},"from":{"krate":0,"index":3082},"to":{"krate":0,"index":1477}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\color.rs","byte_start":350054,"byte_end":350058,"line_start":454,"line_end":454,"column_start":53,"column_end":57},"kind":{"Impl":{"id":130}},"from":{"krate":0,"index":3082},"to":{"krate":0,"index":1477}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\color.rs","byte_start":350286,"byte_end":350290,"line_start":462,"line_end":462,"column_start":52,"column_end":56},"kind":{"Impl":{"id":131}},"from":{"krate":0,"index":3082},"to":{"krate":0,"index":1477}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\color.rs","byte_start":350515,"byte_end":350519,"line_start":470,"line_end":470,"column_start":52,"column_end":56},"kind":{"Impl":{"id":132}},"from":{"krate":0,"index":3082},"to":{"krate":0,"index":1477}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\color.rs","byte_start":350746,"byte_end":350750,"line_start":478,"line_end":478,"column_start":54,"column_end":58},"kind":{"Impl":{"id":133}},"from":{"krate":0,"index":3082},"to":{"krate":0,"index":1477}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\color.rs","byte_start":350898,"byte_end":350902,"line_start":485,"line_end":485,"column_start":31,"column_end":35},"kind":{"Impl":{"id":134}},"from":{"krate":0,"index":3082},"to":{"krate":0,"index":1477}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\color.rs","byte_start":351146,"byte_end":351150,"line_start":494,"line_end":494,"column_start":30,"column_end":34},"kind":{"Impl":{"id":135}},"from":{"krate":0,"index":3082},"to":{"krate":0,"index":1477}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\color.rs","byte_start":351394,"byte_end":351398,"line_start":503,"line_end":503,"column_start":31,"column_end":35},"kind":{"Impl":{"id":136}},"from":{"krate":0,"index":3082},"to":{"krate":0,"index":1477}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\color.rs","byte_start":351584,"byte_end":351588,"line_start":510,"line_end":510,"column_start":30,"column_end":34},"kind":{"Impl":{"id":137}},"from":{"krate":0,"index":3082},"to":{"krate":0,"index":1477}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\color.rs","byte_start":351774,"byte_end":351778,"line_start":517,"line_end":517,"column_start":32,"column_end":36},"kind":{"Impl":{"id":138}},"from":{"krate":0,"index":3082},"to":{"krate":0,"index":1477}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\color.rs","byte_start":351966,"byte_end":351970,"line_start":524,"line_end":524,"column_start":31,"column_end":35},"kind":{"Impl":{"id":139}},"from":{"krate":0,"index":3082},"to":{"krate":0,"index":1477}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\color.rs","byte_start":352183,"byte_end":352187,"line_start":532,"line_end":532,"column_start":29,"column_end":33},"kind":{"Impl":{"id":140}},"from":{"krate":0,"index":3082},"to":{"krate":0,"index":1477}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\color.rs","byte_start":352409,"byte_end":352413,"line_start":540,"line_end":540,"column_start":30,"column_end":34},"kind":{"Impl":{"id":141}},"from":{"krate":0,"index":3082},"to":{"krate":0,"index":1477}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\color.rs","byte_start":352637,"byte_end":352641,"line_start":548,"line_end":548,"column_start":29,"column_end":33},"kind":{"Impl":{"id":142}},"from":{"krate":0,"index":3082},"to":{"krate":0,"index":1477}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\color.rs","byte_start":352863,"byte_end":352867,"line_start":556,"line_end":556,"column_start":30,"column_end":34},"kind":{"Impl":{"id":143}},"from":{"krate":0,"index":3082},"to":{"krate":0,"index":1477}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\color.rs","byte_start":353142,"byte_end":353147,"line_start":567,"line_end":567,"column_start":53,"column_end":58},"kind":{"Impl":{"id":144}},"from":{"krate":0,"index":3169},"to":{"krate":0,"index":1477}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\color.rs","byte_start":353409,"byte_end":353414,"line_start":576,"line_end":576,"column_start":53,"column_end":58},"kind":{"Impl":{"id":145}},"from":{"krate":0,"index":3169},"to":{"krate":0,"index":1477}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\color.rs","byte_start":353675,"byte_end":353680,"line_start":585,"line_end":585,"column_start":52,"column_end":57},"kind":{"Impl":{"id":146}},"from":{"krate":0,"index":3169},"to":{"krate":0,"index":1477}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\color.rs","byte_start":353945,"byte_end":353950,"line_start":594,"line_end":594,"column_start":52,"column_end":57},"kind":{"Impl":{"id":147}},"from":{"krate":0,"index":3169},"to":{"krate":0,"index":1477}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\color.rs","byte_start":354216,"byte_end":354221,"line_start":603,"line_end":603,"column_start":53,"column_end":58},"kind":{"Impl":{"id":148}},"from":{"krate":0,"index":3169},"to":{"krate":0,"index":1477}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\color.rs","byte_start":354434,"byte_end":354439,"line_start":611,"line_end":611,"column_start":32,"column_end":37},"kind":{"Impl":{"id":149}},"from":{"krate":0,"index":3169},"to":{"krate":0,"index":1477}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\color.rs","byte_start":354739,"byte_end":354744,"line_start":621,"line_end":621,"column_start":31,"column_end":36},"kind":{"Impl":{"id":150}},"from":{"krate":0,"index":3169},"to":{"krate":0,"index":1477}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\color.rs","byte_start":355039,"byte_end":355044,"line_start":631,"line_end":631,"column_start":30,"column_end":35},"kind":{"Impl":{"id":151}},"from":{"krate":0,"index":3169},"to":{"krate":0,"index":1477}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\color.rs","byte_start":355296,"byte_end":355301,"line_start":640,"line_end":640,"column_start":29,"column_end":34},"kind":{"Impl":{"id":152}},"from":{"krate":0,"index":3169},"to":{"krate":0,"index":1477}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\color.rs","byte_start":355565,"byte_end":355570,"line_start":649,"line_end":649,"column_start":30,"column_end":35},"kind":{"Impl":{"id":153}},"from":{"krate":0,"index":3169},"to":{"krate":0,"index":1477}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\color.rs","byte_start":355843,"byte_end":355848,"line_start":658,"line_end":658,"column_start":29,"column_end":34},"kind":{"Impl":{"id":154}},"from":{"krate":0,"index":3169},"to":{"krate":0,"index":1477}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\color.rs","byte_start":356112,"byte_end":356117,"line_start":667,"line_end":667,"column_start":30,"column_end":35},"kind":{"Impl":{"id":155}},"from":{"krate":0,"index":3169},"to":{"krate":0,"index":1477}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\color.rs","byte_start":356439,"byte_end":356443,"line_start":679,"line_end":679,"column_start":52,"column_end":56},"kind":{"Impl":{"id":156}},"from":{"krate":0,"index":3111},"to":{"krate":0,"index":1477}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\color.rs","byte_start":356744,"byte_end":356748,"line_start":690,"line_end":690,"column_start":52,"column_end":56},"kind":{"Impl":{"id":157}},"from":{"krate":0,"index":3111},"to":{"krate":0,"index":1477}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\color.rs","byte_start":357050,"byte_end":357054,"line_start":701,"line_end":701,"column_start":53,"column_end":57},"kind":{"Impl":{"id":158}},"from":{"krate":0,"index":3111},"to":{"krate":0,"index":1477}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\color.rs","byte_start":357355,"byte_end":357359,"line_start":712,"line_end":712,"column_start":54,"column_end":58},"kind":{"Impl":{"id":159}},"from":{"krate":0,"index":3111},"to":{"krate":0,"index":1477}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\color.rs","byte_start":357660,"byte_end":357664,"line_start":723,"line_end":723,"column_start":53,"column_end":57},"kind":{"Impl":{"id":160}},"from":{"krate":0,"index":3111},"to":{"krate":0,"index":1477}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\color.rs","byte_start":357941,"byte_end":357945,"line_start":734,"line_end":734,"column_start":31,"column_end":35},"kind":{"Impl":{"id":161}},"from":{"krate":0,"index":3111},"to":{"krate":0,"index":1477}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\color.rs","byte_start":358307,"byte_end":358311,"line_start":745,"line_end":745,"column_start":30,"column_end":34},"kind":{"Impl":{"id":162}},"from":{"krate":0,"index":3111},"to":{"krate":0,"index":1477}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\color.rs","byte_start":358661,"byte_end":358665,"line_start":756,"line_end":756,"column_start":31,"column_end":35},"kind":{"Impl":{"id":163}},"from":{"krate":0,"index":3111},"to":{"krate":0,"index":1477}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\color.rs","byte_start":359020,"byte_end":359024,"line_start":769,"line_end":769,"column_start":29,"column_end":33},"kind":{"Impl":{"id":164}},"from":{"krate":0,"index":3111},"to":{"krate":0,"index":1477}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\color.rs","byte_start":359356,"byte_end":359360,"line_start":780,"line_end":780,"column_start":30,"column_end":34},"kind":{"Impl":{"id":165}},"from":{"krate":0,"index":3111},"to":{"krate":0,"index":1477}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\color.rs","byte_start":359679,"byte_end":359683,"line_start":792,"line_end":792,"column_start":29,"column_end":33},"kind":{"Impl":{"id":166}},"from":{"krate":0,"index":3111},"to":{"krate":0,"index":1477}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\color.rs","byte_start":360015,"byte_end":360019,"line_start":803,"line_end":803,"column_start":30,"column_end":34},"kind":{"Impl":{"id":167}},"from":{"krate":0,"index":3111},"to":{"krate":0,"index":1477}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\color.rs","byte_start":360410,"byte_end":360414,"line_start":816,"line_end":816,"column_start":52,"column_end":56},"kind":{"Impl":{"id":168}},"from":{"krate":0,"index":3140},"to":{"krate":0,"index":1477}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\color.rs","byte_start":360715,"byte_end":360719,"line_start":827,"line_end":827,"column_start":52,"column_end":56},"kind":{"Impl":{"id":169}},"from":{"krate":0,"index":3140},"to":{"krate":0,"index":1477}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\color.rs","byte_start":361021,"byte_end":361025,"line_start":838,"line_end":838,"column_start":53,"column_end":57},"kind":{"Impl":{"id":170}},"from":{"krate":0,"index":3140},"to":{"krate":0,"index":1477}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\color.rs","byte_start":361326,"byte_end":361330,"line_start":849,"line_end":849,"column_start":54,"column_end":58},"kind":{"Impl":{"id":171}},"from":{"krate":0,"index":3140},"to":{"krate":0,"index":1477}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\color.rs","byte_start":361631,"byte_end":361635,"line_start":860,"line_end":860,"column_start":53,"column_end":57},"kind":{"Impl":{"id":172}},"from":{"krate":0,"index":3140},"to":{"krate":0,"index":1477}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\color.rs","byte_start":361959,"byte_end":361962,"line_start":874,"line_end":874,"column_start":53,"column_end":56},"kind":{"Impl":{"id":173}},"from":{"krate":0,"index":3024},"to":{"krate":0,"index":1477}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\color.rs","byte_start":362231,"byte_end":362234,"line_start":884,"line_end":884,"column_start":53,"column_end":56},"kind":{"Impl":{"id":174}},"from":{"krate":0,"index":3024},"to":{"krate":0,"index":1477}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\color.rs","byte_start":362502,"byte_end":362505,"line_start":894,"line_end":894,"column_start":52,"column_end":55},"kind":{"Impl":{"id":175}},"from":{"krate":0,"index":3024},"to":{"krate":0,"index":1477}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\color.rs","byte_start":362770,"byte_end":362773,"line_start":904,"line_end":904,"column_start":54,"column_end":57},"kind":{"Impl":{"id":176}},"from":{"krate":0,"index":3024},"to":{"krate":0,"index":1477}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\color.rs","byte_start":363037,"byte_end":363040,"line_start":914,"line_end":914,"column_start":53,"column_end":56},"kind":{"Impl":{"id":177}},"from":{"krate":0,"index":3024},"to":{"krate":0,"index":1477}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\color.rs","byte_start":363278,"byte_end":363281,"line_start":924,"line_end":924,"column_start":30,"column_end":33},"kind":{"Impl":{"id":178}},"from":{"krate":0,"index":3024},"to":{"krate":0,"index":1477}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\color.rs","byte_start":363506,"byte_end":363509,"line_start":932,"line_end":932,"column_start":29,"column_end":32},"kind":{"Impl":{"id":179}},"from":{"krate":0,"index":3024},"to":{"krate":0,"index":1477}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\color.rs","byte_start":363734,"byte_end":363737,"line_start":940,"line_end":940,"column_start":31,"column_end":34},"kind":{"Impl":{"id":180}},"from":{"krate":0,"index":3024},"to":{"krate":0,"index":1477}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\color.rs","byte_start":364020,"byte_end":364023,"line_start":951,"line_end":951,"column_start":30,"column_end":33},"kind":{"Impl":{"id":181}},"from":{"krate":0,"index":3024},"to":{"krate":0,"index":1477}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\color.rs","byte_start":364320,"byte_end":364323,"line_start":961,"line_end":961,"column_start":30,"column_end":33},"kind":{"Impl":{"id":182}},"from":{"krate":0,"index":3024},"to":{"krate":0,"index":1477}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\color.rs","byte_start":364602,"byte_end":364605,"line_start":972,"line_end":972,"column_start":29,"column_end":32},"kind":{"Impl":{"id":183}},"from":{"krate":0,"index":3024},"to":{"krate":0,"index":1477}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\color.rs","byte_start":364897,"byte_end":364900,"line_start":982,"line_end":982,"column_start":30,"column_end":33},"kind":{"Impl":{"id":184}},"from":{"krate":0,"index":3024},"to":{"krate":0,"index":1477}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\color.rs","byte_start":365246,"byte_end":365249,"line_start":995,"line_end":995,"column_start":53,"column_end":56},"kind":{"Impl":{"id":185}},"from":{"krate":0,"index":3053},"to":{"krate":0,"index":1477}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\color.rs","byte_start":365517,"byte_end":365520,"line_start":1005,"line_end":1005,"column_start":52,"column_end":55},"kind":{"Impl":{"id":186}},"from":{"krate":0,"index":3053},"to":{"krate":0,"index":1477}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\color.rs","byte_start":365785,"byte_end":365788,"line_start":1016,"line_end":1016,"column_start":53,"column_end":56},"kind":{"Impl":{"id":187}},"from":{"krate":0,"index":3053},"to":{"krate":0,"index":1477}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\color.rs","byte_start":366058,"byte_end":366061,"line_start":1026,"line_end":1026,"column_start":54,"column_end":57},"kind":{"Impl":{"id":188}},"from":{"krate":0,"index":3053},"to":{"krate":0,"index":1477}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\color.rs","byte_start":366325,"byte_end":366328,"line_start":1036,"line_end":1036,"column_start":53,"column_end":56},"kind":{"Impl":{"id":189}},"from":{"krate":0,"index":3053},"to":{"krate":0,"index":1477}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\color.rs","byte_start":367994,"byte_end":367999,"line_start":1090,"line_end":1090,"column_start":30,"column_end":35},"kind":{"Impl":{"id":190}},"from":{"krate":0,"index":3169},"to":{"krate":0,"index":1651}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\color.rs","byte_start":369004,"byte_end":369008,"line_start":1123,"line_end":1123,"column_start":30,"column_end":34},"kind":{"Impl":{"id":191}},"from":{"krate":0,"index":3082},"to":{"krate":0,"index":1651}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\color.rs","byte_start":369118,"byte_end":369122,"line_start":1129,"line_end":1129,"column_start":30,"column_end":34},"kind":{"Impl":{"id":192}},"from":{"krate":0,"index":3111},"to":{"krate":0,"index":1651}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\color.rs","byte_start":371330,"byte_end":371334,"line_start":1187,"line_end":1187,"column_start":30,"column_end":34},"kind":{"Impl":{"id":193}},"from":{"krate":0,"index":3140},"to":{"krate":0,"index":1651}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\color.rs","byte_start":373540,"byte_end":373543,"line_start":1243,"line_end":1243,"column_start":30,"column_end":33},"kind":{"Impl":{"id":194}},"from":{"krate":0,"index":3024},"to":{"krate":0,"index":1651}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\color.rs","byte_start":373652,"byte_end":373655,"line_start":1249,"line_end":1249,"column_start":30,"column_end":33},"kind":{"Impl":{"id":195}},"from":{"krate":0,"index":3053},"to":{"krate":0,"index":1651}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\color.rs","byte_start":373874,"byte_end":373879,"line_start":1262,"line_end":1262,"column_start":31,"column_end":36},"kind":{"Impl":{"id":196}},"from":{"krate":0,"index":3169},"to":{"krate":0,"index":1671}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\color.rs","byte_start":374052,"byte_end":374056,"line_start":1271,"line_end":1271,"column_start":31,"column_end":35},"kind":{"Impl":{"id":197}},"from":{"krate":0,"index":3082},"to":{"krate":0,"index":1671}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\color.rs","byte_start":374244,"byte_end":374248,"line_start":1282,"line_end":1282,"column_start":31,"column_end":35},"kind":{"Impl":{"id":198}},"from":{"krate":0,"index":3111},"to":{"krate":0,"index":1671}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\color.rs","byte_start":374461,"byte_end":374465,"line_start":1293,"line_end":1293,"column_start":31,"column_end":35},"kind":{"Impl":{"id":199}},"from":{"krate":0,"index":3140},"to":{"krate":0,"index":1671}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\color.rs","byte_start":374678,"byte_end":374681,"line_start":1304,"line_end":1304,"column_start":31,"column_end":34},"kind":{"Impl":{"id":200}},"from":{"krate":0,"index":3024},"to":{"krate":0,"index":1671}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\color.rs","byte_start":374943,"byte_end":374946,"line_start":1318,"line_end":1318,"column_start":31,"column_end":34},"kind":{"Impl":{"id":201}},"from":{"krate":0,"index":3053},"to":{"krate":0,"index":1671}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\dynimage.rs","byte_start":386632,"byte_end":386644,"line_start":137,"line_end":137,"column_start":6,"column_end":18},"kind":{"Impl":{"id":202}},"from":{"krate":0,"index":3249},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\dynimage.rs","byte_start":417793,"byte_end":417805,"line_start":1033,"line_end":1033,"column_start":27,"column_end":39},"kind":{"Impl":{"id":203}},"from":{"krate":0,"index":3249},"to":{"krate":0,"index":1961}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\dynimage.rs","byte_start":418338,"byte_end":418350,"line_start":1055,"line_end":1055,"column_start":23,"column_end":35},"kind":{"Impl":{"id":204}},"from":{"krate":0,"index":3249},"to":{"krate":0,"index":1974}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\image.rs","byte_start":431005,"byte_end":431016,"line_start":68,"line_end":68,"column_start":6,"column_end":17},"kind":{"Impl":{"id":205}},"from":{"krate":0,"index":3282},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\image.rs","byte_start":435985,"byte_end":436002,"line_start":214,"line_end":214,"column_start":28,"column_end":45},"kind":{"Impl":{"id":206}},"from":{"krate":0,"index":3327},"to":{"krate":2,"index":1963}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\image.rs","byte_start":437397,"byte_end":437412,"line_start":253,"line_end":253,"column_start":6,"column_end":21},"kind":{"Impl":{"id":207}},"from":{"krate":0,"index":1903},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\image.rs","byte_start":445282,"byte_end":445290,"line_start":437,"line_end":437,"column_start":6,"column_end":14},"kind":{"Impl":{"id":208}},"from":{"krate":0,"index":3350},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\image.rs","byte_start":445796,"byte_end":445801,"line_start":457,"line_end":457,"column_start":29,"column_end":34},"kind":"SuperTrait","from":{"krate":2,"index":2050},"to":{"krate":0,"index":1929}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\image.rs","byte_start":449497,"byte_end":449509,"line_start":554,"line_end":554,"column_start":32,"column_end":44},"kind":"SuperTrait","from":{"krate":0,"index":1929},"to":{"krate":0,"index":1942}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\image.rs","byte_start":449516,"byte_end":449521,"line_start":554,"line_end":554,"column_start":51,"column_end":56},"kind":"SuperTrait","from":{"krate":2,"index":2050},"to":{"krate":0,"index":1942}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\image.rs","byte_start":451938,"byte_end":451944,"line_start":627,"line_end":627,"column_start":44,"column_end":50},"kind":{"Impl":{"id":209}},"from":{"krate":0,"index":3365},"to":{"krate":2,"index":5311}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\image.rs","byte_start":452412,"byte_end":452418,"line_start":649,"line_end":649,"column_start":27,"column_end":33},"kind":{"Impl":{"id":210}},"from":{"krate":0,"index":3365},"to":{"krate":2,"index":1742}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\image.rs","byte_start":454991,"byte_end":455007,"line_start":736,"line_end":736,"column_start":25,"column_end":41},"kind":"SuperTrait","from":{"krate":0,"index":1961},"to":{"krate":0,"index":1974}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\image.rs","byte_start":460807,"byte_end":460815,"line_start":887,"line_end":887,"column_start":9,"column_end":17},"kind":{"Impl":{"id":211}},"from":{"krate":0,"index":1986},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\image.rs","byte_start":461952,"byte_end":461960,"line_start":928,"line_end":928,"column_start":30,"column_end":38},"kind":{"Impl":{"id":212}},"from":{"krate":0,"index":1986},"to":{"krate":0,"index":1961}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\image.rs","byte_start":462781,"byte_end":462789,"line_start":960,"line_end":960,"column_start":26,"column_end":34},"kind":{"Impl":{"id":213}},"from":{"krate":0,"index":1986},"to":{"krate":0,"index":1974}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\traits.rs","byte_start":474816,"byte_end":474831,"line_start":12,"line_end":12,"column_start":35,"column_end":50},"kind":"SuperTrait","from":{"krate":0,"index":2114},"to":{"krate":0,"index":2034}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\traits.rs","byte_start":475185,"byte_end":475189,"line_start":30,"line_end":30,"column_start":22,"column_end":26},"kind":"SuperTrait","from":{"krate":2,"index":2055},"to":{"krate":0,"index":2040}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\traits.rs","byte_start":475192,"byte_end":475199,"line_start":30,"line_end":30,"column_start":29,"column_end":36},"kind":"SuperTrait","from":{"krate":13,"index":175},"to":{"krate":0,"index":2040}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\traits.rs","byte_start":475202,"byte_end":475205,"line_start":30,"line_end":30,"column_start":39,"column_end":42},"kind":"SuperTrait","from":{"krate":13,"index":615},"to":{"krate":0,"index":2040}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\traits.rs","byte_start":475208,"byte_end":475218,"line_start":30,"line_end":30,"column_start":45,"column_end":55},"kind":"SuperTrait","from":{"krate":2,"index":1807},"to":{"krate":0,"index":2040}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\traits.rs","byte_start":475227,"byte_end":475232,"line_start":30,"line_end":30,"column_start":64,"column_end":69},"kind":"SuperTrait","from":{"krate":2,"index":1742},"to":{"krate":0,"index":2040}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\traits.rs","byte_start":475235,"byte_end":475242,"line_start":30,"line_end":30,"column_start":72,"column_end":79},"kind":"SuperTrait","from":{"krate":13,"index":92},"to":{"krate":0,"index":2040}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\traits.rs","byte_start":475718,"byte_end":475723,"line_start":47,"line_end":47,"column_start":24,"column_end":29},"kind":"SuperTrait","from":{"krate":2,"index":2050},"to":{"krate":0,"index":2053}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\traits.rs","byte_start":475726,"byte_end":475733,"line_start":47,"line_end":47,"column_start":32,"column_end":39},"kind":"SuperTrait","from":{"krate":13,"index":92},"to":{"krate":0,"index":2053}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\traits.rs","byte_start":475736,"byte_end":475743,"line_start":47,"line_end":47,"column_start":42,"column_end":49},"kind":"SuperTrait","from":{"krate":13,"index":175},"to":{"krate":0,"index":2053}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\traits.rs","byte_start":476292,"byte_end":476299,"line_start":71,"line_end":71,"column_start":17,"column_end":24},"kind":"SuperTrait","from":{"krate":13,"index":92},"to":{"krate":0,"index":2062}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\traits.rs","byte_start":476302,"byte_end":476309,"line_start":71,"line_end":71,"column_start":27,"column_end":34},"kind":"SuperTrait","from":{"krate":13,"index":175},"to":{"krate":0,"index":2062}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\traits.rs","byte_start":477084,"byte_end":477088,"line_start":105,"line_end":105,"column_start":18,"column_end":22},"kind":"SuperTrait","from":{"krate":2,"index":2055},"to":{"krate":0,"index":2071}},{"span":{"file_name":"C:\\Users\\victo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.12\\./src\\traits.rs","byte_start":477091,"byte_end":477096,"line_start":105,"line_end":105,"column_start":25,"column_end":30},"kind":"SuperTrait","from":{"krate":2,"index":1742},"to":{"krate":0,"index":2071}}]}